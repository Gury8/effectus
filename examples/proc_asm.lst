mads 2.1.0 build 8 (23 Dec 19)
   388 					opt l+
   101
   102 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   102 				ZPAGE: $0080..$00D7
   103
   104 				.print 'RTLIB: ',RTLIB,'..',*-1
   104 				RTLIB: $2060..$2107
   105
   106 				; ------------------------------------------------------------
   107
   108 2108			START
   109 2108 BA				tsx
   110 2109 8E 92 22			stx MAIN.@halt+1
   111
   112 					.ifdef fmulinit
   113 					fmulinit
   114 					eif
   115
   116 = 0126			VLEN	= VARDATASIZE-VARINITSIZE
   117 = 22BB			VADR	= DATAORIGIN+VARINITSIZE
   118
   119 					ift VADR > $BFFF
   120 					ert 'Invalid memory address range ',VADR
   121 					eli (VLEN>0) && (VLEN<=256)
   122 					ldx #256-VLEN
   123 					lda #0
   124 					sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>0
   126 					@fill #VADR #VLEN #0
   126 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   126 210C A9 BB 85 88 A9 22 +  MWA #VADR @FILL.PTR1
   126 2114 A9 26 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   126 211C A9 00 85 84		 MVA #0 @FILL.PTR2
   126 2120 20 83 20		 JSR @FILL
   127 					eif
   128
   129 					.ifdef MAIN.@DEFINES.ROMOFF
   130 					icl 'atari\romoff.asm'
   131 					.endif
   132
   133 2123 A9 E1 85 82 A9 23 + 	mwa #PROGRAMSTACK psptr
   134
   135 212B A2 0F			ldx #$0f					; DOS II+/D ParamStr
   136 212D BD 40 03 9D 95 22 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   137
   138 2136 E8				inx						; X = 0
   139 2137 86 90			stx bp						; BP = 0
   140
   141 2139 8E 08 D2			stx audctl					; reset POKEY
   142 213C A9 03			lda #3
   143 213E 8D 0F D2			sta skctl
   144
   145 2141 CA				dex						; X = 255
   146
   147 2142				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: proc_asm.a65]
Source: proc_asm.a65
   148
   149 2142			.local	MAIN						; PROCEDURE
   150
   151 2142 4C 8E 22			jmp l_0067
   152
   153 				; ------------------------------------------------------------
   154
   155 2145			.local	SYSTEM						; UNIT
   156
   157 				; ------------------------------------------------------------
   158
   159 = 0101			__PORTB_BANKS	= $0101
   160 = 0648			M_PI_2	= $0648
   161 = 0192			D_PI_2	= $0192
   162 = 0004			D_PI_180	= $04
   163 = 0000			MGTIA	= $00
   164 = 0080			MVBXE	= $80
   165 = 0000			VBXE_XDLADR	= $00
   166 = 0100			VBXE_BCBADR	= $0100
   167 = 1000			VBXE_MAPADR	= $1000
   168 = 5000			VBXE_OVRADR	= $5000
   169 = B000			VBXE_WINDOW	= $B000
   170 = 0000			IDLI	= $00
   171 = 0001			IVBL	= $01
   172 = 00FE			CH_DELCHR	= $FE
   173 = 009B			CH_ENTER	= $9B
   174 = 001B			CH_ESC	= $1B
   175 = 001C			CH_CURS_UP	= $1C
   176 = 001D			CH_CURS_DOWN	= $1D
   177 = 001E			CH_CURS_LEFT	= $1E
   178 = 001F			CH_CURS_RIGHT	= $1F
   179 = 007F			CH_TAB	= $7F
   180 = 009B			CH_EOL	= $9B
   181 = 007D			CH_CLR	= $7D
   182 = 00FD			CH_BELL	= $FD
   183 = 007E			CH_DEL	= $7E
   184 = 009C			CH_DELLINE	= $9C
   185 = 009D			CH_INSLINE	= $9D
   186 = 0000			COLOR_BLACK	= $00
   187 = 000E			COLOR_WHITE	= $0E
   188 = 0032			COLOR_RED	= $32
   189 = 0096			COLOR_CYAN	= $96
   190 = 0068			COLOR_VIOLET	= $68
   191 = 00C4			COLOR_GREEN	= $C4
   192 = 0074			COLOR_BLUE	= $74
   193 = 00EE			COLOR_YELLOW	= $EE
   194 = 0028			COLOR_ORANGE	= $28
   195 = 00E4			COLOR_BROWN	= $E4
   196 = 003C			COLOR_LIGHTRED	= $3C
   197 = 0004			COLOR_GRAY1	= $04
   198 = 0006			COLOR_GRAY2	= $06
   199 = 000A			COLOR_GRAY3	= $0A
   200 = 00CC			COLOR_LIGHTGREEN	= $CC
   201 = 007C			COLOR_LIGHTBLUE	= $7C
   202 = 0004			FMOPENREAD	= $04
   203 = 0008			FMOPENWRITE	= $08
   204 = 0009			FMOPENAPPEND	= $09
   205 = 000C			FMOPENREADWRITE	= $0C
   206 = 22A7			SCREENWIDTH	= DATAORIGIN+$0000
   207 = 22A9			SCREENHEIGHT	= DATAORIGIN+$0002
   208 = 22AB			DATESEPARATOR	= DATAORIGIN+$0004
   209 = D014			TVSYSTEM	= $D014
   210 = 02C0			adr.PALETTE	= $02C0
   211 2145			.var PALETTE	= adr.PALETTE .word
   212 = D012			adr.HPALETTE	= $D012
   213 2145			.var HPALETTE	= adr.HPALETTE .word
   214 = 22AC			FILEMODE	= DATAORIGIN+$0005
   215 = 22AD			GRAPHMODE	= DATAORIGIN+$0006
   216 = 22AE			IORESULT	= DATAORIGIN+$0007
   217 = 22AF			EOLN	= DATAORIGIN+$0008
   218 = 22B0			RNDSEED	= DATAORIGIN+$0009
   219
   220 = 2145 C0 02		PALETTE
   220 = 2147 12 D0		HPALETTE
   220 				.endl							; UNIT SYSTEM
   221
   222 				; ------------------------------------------------------------
   223
   224 2149			.local	ATARI						; UNIT
   225
   226 				; ------------------------------------------------------------
   227
   228 = 0012			RTCLOK	= $12
   229 = 004D			ATRACT	= $4D
   230 = 0052			LMARGIN	= $52
   231 = 0053			RMARGIN	= $53
   232 = 0054			ROWCRS	= $54
   233 = 0055			COLCRS	= $55
   234 = 0057			DINDEX	= $57
   235 = 0058			SAVMSC	= $58
   236 = 0062			PALNTS	= $62
   237 = 006A			RAMTOP	= $6A
   238 = 0200			VDSLST	= $0200
   239 = 0230			SDLSTL	= $0230
   240 = 0290			TXTROW	= $0290
   241 = 0291			TXTCOL	= $0291
   242 = 0293			TINDEX	= $0293
   243 = 0294			TXTMSC	= $0294
   244 = 022F			SDMCTL	= $022F
   245 = 026F			GPRIOR	= $026F
   246 = 02F0			CRSINH	= $02F0
   247 = 02F3			CHACT	= $02F3
   248 = 02F4			CHBAS	= $02F4
   249 = 02FC			CH	= $02FC
   250 = 02C0			PCOLR0	= $02C0
   251 = 02C1			PCOLR1	= $02C1
   252 = 02C2			PCOLR2	= $02C2
   253 = 02C3			PCOLR3	= $02C3
   254 = 02C4			COLOR0	= $02C4
   255 = 02C5			COLOR1	= $02C5
   256 = 02C6			COLOR2	= $02C6
   257 = 02C7			COLOR3	= $02C7
   258 = 02C8			COLOR4	= $02C8
   259 = 02C8			COLBAKS	= $02C8
   260 = D000			HPOSP0	= $D000
   261 = D001			HPOSP1	= $D001
   262 = D002			HPOSP2	= $D002
   263 = D003			HPOSP3	= $D003
   264 = D004			HPOSM0	= $D004
   265 = D005			HPOSM1	= $D005
   266 = D006			HPOSM2	= $D006
   267 = D007			HPOSM3	= $D007
   268 = D008			SIZEP0	= $D008
   269 = D009			SIZEP1	= $D009
   270 = D00A			SIZEP2	= $D00A
   271 = D00B			SIZEP3	= $D00B
   272 = D00C			SIZEM	= $D00C
   273 = D00D			GRAFP0	= $D00D
   274 = D00E			GRAFP1	= $D00E
   275 = D00F			GRAFP2	= $D00F
   276 = D010			GRAFP3	= $D010
   277 = D011			GRAFM	= $D011
   278 = D004			P0PF	= $D004
   279 = D014			PAL	= $D014
   280 = D012			COLPM0	= $D012
   281 = D013			COLPM1	= $D013
   282 = D014			COLPM2	= $D014
   283 = D015			COLPM3	= $D015
   284 = D016			COLPF0	= $D016
   285 = D017			COLPF1	= $D017
   286 = D018			COLPF2	= $D018
   287 = D019			COLPF3	= $D019
   288 = D01A			COLBK	= $D01A
   289 = D01B			PRIOR	= $D01B
   290 = D01D			GRACTL	= $D01D
   291 = D01E			HITCLR	= $D01E
   292 = D200			AUDF1	= $D200
   293 = D201			AUDC1	= $D201
   294 = D202			AUDF2	= $D202
   295 = D203			AUDC2	= $D203
   296 = D204			AUDF3	= $D204
   297 = D205			AUDC3	= $D205
   298 = D206			AUDF4	= $D206
   299 = D207			AUDC4	= $D207
   300 = D208			AUDCTL	= $D208
   301 = D20F			SKSTAT	= $D20F
   302 = D301			PORTB	= $D301
   303 = D400			DMACTL	= $D400
   304 = D401			CHACTL	= $D401
   305 = D402			DLISTL	= $D402
   306 = D404			HSCROL	= $D404
   307 = D405			VSCROL	= $D405
   308 = D407			PMBASE	= $D407
   309 = D409			CHBASE	= $D409
   310 = D40A			WSYNC	= $D40A
   311 = D40B			VCOUNT	= $D40B
   312 = D40C			PENH	= $D40C
   313 = D40D			PENV	= $D40D
   314 = D40E			NMIEN	= $D40E
   315
   316 				.endl							; UNIT ATARI
   317
   318 				; ------------------------------------------------------------
   319
   320 2149			.local	CRT						; UNIT
   321
   322 2149			.local	READKEY						; FUNCTION | ASSEMBLER
   323
   324 				; ---------------------  ASM Block 049  ---------------------
   325
   326 2149 8A 48			txa:pha
   327
   328 214B 20 60 20			@GetKey
   329
   330 214E 8D B3 22			sta Result
   331
   332 2151 68 AA			pla:tax
   333
   334 2153			@exit
   335
   336 				; ------------------------------------------------------------
   337
   338 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   339 				; as Pointer
   340
   341 2153 E8				inx
   342 2154 AD B3 22 95 98		mva RESULT :STACKORIGIN,x
   343
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					eif
   351
   352 				; ------------------------------------------------------------
   353
   354 = 22B3			RESULT	= DATAORIGIN+$000C
   355
   356 = 22B3			@VarData	= RESULT
   357 = 0001			@VarDataSize	= 1
   358
   359 2159 60				rts						; ret
   360 				.endl
   361
   362 				; ------------------------------------------------------------
   363
   364 = 22B2			TEXTATTR	= DATAORIGIN+$000B
   365 = D01F			CONSOL	= $D01F
   366 = 0000			CN_START_SELECT_OPTION	= $00
   367 = 0001			CN_SELECT_OPTION	= $01
   368 = 0002			CN_START_OPTION	= $02
   369 = 0003			CN_OPTION	= $03
   370 = 0004			CN_START_SELECT	= $04
   371 = 0005			CN_SELECT	= $05
   372 = 0006			CN_START	= $06
   373 = 0007			CN_NONE	= $07
   374 = 0000			BW40	= $00
   375 = 0001			CO40	= $01
   376 = 0002			BW80	= $02
   377 = 0003			CO80	= $03
   378 = 0007			MONO	= $07
   379 = 0001			C40	= $01
   380 = 0003			C80	= $03
   381 = 0000			BLACK	= $00
   382 = 0001			BLUE	= $01
   383 = 0002			GREEN	= $02
   384 = 0003			CYAN	= $03
   385 = 0004			RED	= $04
   386 = 0005			MAGENTA	= $05
   387 = 0006			BROWN	= $06
   388 = 0007			LIGHTGRAY	= $07
   389 = 0008			DARKGRAY	= $08
   390 = 0009			LIGHTBLUE	= $09
   391 = 000A			LIGHTGREEN	= $0A
   392 = 000B			LIGHTCYAN	= $0B
   393 = 000C			LIGHTRED	= $0C
   394 = 000D			LIGHTMAGENTA	= $0D
   395 = 000E			YELLOW	= $0E
   396 = 000F			WHITE	= $0F
   397 = 0080			BLINK	= $80
   398
   399 				.endl							; UNIT CRT
   400
   401 				; ------------------------------------------------------------
   402
   403 215A			.local	DOS						; UNIT
   404
   405 				; ------------------------------------------------------------
   406
   407 = D014			PALNTSC	= $D014
   408
   409 				.endl							; UNIT DOS
   410
   411 				; ------------------------------------------------------------
   412
   413 215A			.local	STRUTILS					; UNIT
   414
   415 				; ------------------------------------------------------------
   416
   417 				.endl							; UNIT STRUTILS
   418
   419 				; ------------------------------------------------------------
   420
   421 215A			.local	SYSUTILS					; UNIT
   422
   423 				; ------------------------------------------------------------
   424
   425 = 0001			FAREADONLY	= $01
   426 = 0002			FAHIDDEN	= $02
   427 = 0004			FASYSFILE	= $04
   428 = 0008			FAVOLUMEID	= $08
   429 = 0010			FADIRECTORY	= $10
   430 = 0020			FAARCHIVE	= $20
   431 = 003F			FAANYFILE	= $3F
   432
   433 				.endl							; UNIT SYSUTILS
   434
   435 				; ------------------------------------------------------------
   436
   437 215A			.local	TYPES						; UNIT
   438
   439 				; ------------------------------------------------------------
   440
   441 				.endl							; UNIT TYPES
   442
   443 				; ------------------------------------------------------------
   444
   445 215A			.local	GRAPH						; UNIT
   446
   447 				; ------------------------------------------------------------
   448
   449 = 0080			CURRENTDRIVER	= $80
   450 = 0000			DETECT	= $00
   451 = 0001			CGA	= $01
   452 = 0002			MCGA	= $02
   453 = 0003			EGA	= $03
   454 = 0004			EGA64	= $04
   455 = 0005			EGAMONO	= $05
   456 = 0006			LOWRES	= $06
   457 = 0007			HERCMONO	= $07
   458 = 0009			VGA	= $09
   459 = 000A			VESA	= $0A
   460 = 000B			D1BIT	= $0B
   461 = 000C			D2BIT	= $0C
   462 = 000D			D4BIT	= $0D
   463 = 000E			D6BIT	= $0E
   464 = 000F			D8BIT	= $0F
   465 = 0010			D12BIT	= $10
   466 = 0018			M640X400	= $18
   467 = 0018			M640X480	= $18
   468 = 0001			GROK	= $01
   469 = 00FF			GRNOINITGRAPH	= $FF
   470 = 00FE			GRNOTDETECTED	= $FE
   471 = 00FD			GRFILENOTFOUND	= $FD
   472 = 00FC			GRINVALIDDRIVER	= $FC
   473 = 00FB			GRNOLOADMEM	= $FB
   474 = 00FA			GRNOSCANMEM	= $FA
   475 = 00F9			GRNOFLOODMEM	= $F9
   476 = 00F8			GRFONTNOTFOUND	= $F8
   477 = 00F7			GRNOFONTMEM	= $F7
   478 = 00F6			GRINVALIDMODE	= $F6
   479 = 00F5			GRERROR	= $F5
   480 = 00F4			GRIOERROR	= $F4
   481 = 00F3			GRINVALIDFONT	= $F3
   482 = 00F2			GRINVALIDFONTNUM	= $F2
   483 = 00EE			GRINVALIDVERSION	= $EE
   484 = 0000			CGAC0	= $00
   485 = 0001			CGAC1	= $01
   486 = 0002			CGAC2	= $02
   487 = 0003			CGAC3	= $03
   488 = 0004			CGAHI	= $04
   489 = 0000			MCGAC0	= $00
   490 = 0001			MCGAC1	= $01
   491 = 0002			MCGAC2	= $02
   492 = 0003			MCGAC3	= $03
   493 = 0004			MCGAMED	= $04
   494 = 0005			MCGAHI	= $05
   495 = 0000			EGALO	= $00
   496 = 0001			EGAHI	= $01
   497 = 0000			EGA64LO	= $00
   498 = 0001			EGA64HI	= $01
   499 = 0003			EGAMONOHI	= $03
   500 = 000A			VGALO	= $0A
   501 = 001F			VGAMED	= $1F
   502 = 0018			VGAHI	= $18
   503 = 22B4			WIN_LEFT	= DATAORIGIN+$000D
   504 = 22B6			WIN_RIGHT	= DATAORIGIN+$000F
   505 = 22B8			WIN_TOP	= DATAORIGIN+$0011
   506 = 22BA			WIN_BOTTOM	= DATAORIGIN+$0013
   507 = 22BC			GRAPHRESULT	= DATAORIGIN+$0015
   508 = 22BD			GETCOLOR	= DATAORIGIN+$0016
   509 = 22BE			adr.LASTARCCOORDS	= DATAORIGIN+$0017
   510 215A			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   511 = 22BE			LASTARCCOORDS.X	= DATAORIGIN+$0017
   512 = 22C0			LASTARCCOORDS.Y	= DATAORIGIN+$0019
   513 = 22C2			LASTARCCOORDS.XSTART	= DATAORIGIN+$001B
   514 = 22C4			LASTARCCOORDS.YSTART	= DATAORIGIN+$001D
   515 = 22C6			LASTARCCOORDS.XEND	= DATAORIGIN+$001F
   516 = 22C8			LASTARCCOORDS.YEND	= DATAORIGIN+$0021
   517 = 22CA			CURRENTX	= DATAORIGIN+$0023
   518 = 22CC			CURRENTY	= DATAORIGIN+$0025
   519 = 22CE			VIDEORAM	= DATAORIGIN+$0027
   520 = 22D0			SCANLINE_WIDTH	= DATAORIGIN+$0029
   521
   522 = 215A BE 22		LASTARCCOORDS
   522 				.endl							; UNIT GRAPH
   523
   524 				; ------------------------------------------------------------
   525
   526 215C			.local	CIO						; UNIT
   527
   528 215C			.local	GET						; FUNCTION | ASSEMBLER
   529
   530 				; ------------------------------------------------------------
   531
   532 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   533 				; as Pointer
   534 215C B5 98 8D D1 22		mva :STACKORIGIN,x CHN
   535 2161 CA				dex
   536
   537 				; ---------------------  ASM Block 095  ---------------------
   538
   539 2162 8A 48			txa:pha
   540
   541 2164 AD D1 22			lda chn
   542 2167 0A 0A 0A 0A			:4 asl @
   543 216B AA				tax
   544
   545 216C A9 07			lda #7		;get char command
   546 216E 9D 42 03			sta iccmd,x
   547
   548 2171 A9 00			lda #$00	;zero out the unused
   549 2173 9D 48 03			sta icbufl,x	;store in accumulator
   550 2176 9D 49 03			sta icbufh,x	;...after CIOV jump
   551
   552 2179				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 2179 20 56 E4				jsr CIOV
Source: proc_asm.a65
   553
   554 217C 8C AE 22			sty MAIN.SYSTEM.IOResult
   555
   556 217F 8D D2 22			sta Result
   557
   558 2182 68 AA			pla:tax
   559
   560 2184			@exit
   561
   562 				; ------------------------------------------------------------
   563
   564 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   565 				; as Pointer
   566
   567 2184 E8				inx
   568 2185 AD D2 22 95 98		mva RESULT :STACKORIGIN,x
   569
   570 					.ifdef @new
   571 					lda <@VarData
   572 					sta :ztmp
   573 					lda >@VarData
   574 					ldy #@VarDataSize-1
   575 					jmp @FreeMem
   576 					eif
   577
   578 				; ------------------------------------------------------------
   579
   580 = 22D1			CHN	= DATAORIGIN+$002A
   581 = 22D2			RESULT	= DATAORIGIN+$002B
   582
   583 = 22D1			@VarData	= CHN
   584 = 0002			@VarDataSize	= 2
   585
   586 218A 60				rts						; ret
   587 				.endl
   588
   589 				; ------------------------------------------------------------
   590
   591 				.endl							; UNIT CIO
   592
   593 218B			.local	POKETESTPROC					; PROCEDURE | ASSEMBLER
   594
   595 				; ------------------------------------------------------------
   596
   597 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   598 				; as Pointer
   599 218B B5 98 8D D4 23		mva :STACKORIGIN,x D
   600 2190 CA				dex
   601
   602 				; ---------------------  ASM Block 100  ---------------------
   603
   604
   605 2191 AD D4 23		  lda d
   606 2194 8D C6 02 60		    .by $8D $C6 $02 $60 
   607 				  
   608
   609 				; ------------------------------------------------------------
   610
   611 = 23D4			D	= DATAORIGIN+$012D
   612
   613 = 23D4			@VarData	= D
   614 = 0001			@VarDataSize	= 1
   615
   616 2198			@exit
   617 					.ifdef @new
   618 					lda <@VarData
   619 					sta :ztmp
   620 					lda >@VarData
   621 					ldy #@VarDataSize-1
   622 					jmp @FreeMem
   623 					eif
   624 2198 60				rts						; ret
   625 				.endl
   626
   627 2199			.local	TESTPROC					; PROCEDURE | ASSEMBLER
   628
   629 				; ------------------------------------------------------------
   630
   631 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   632 				; as Pointer
   633 2199 B5 98 8D DA 23		mva :STACKORIGIN,x UPDOWN
   634 219E CA				dex
   635
   636 				; ------------------------------------------------------------
   637
   638 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   639 				; as Pointer
   640 219F B5 98 8D D9 23		mva :STACKORIGIN,x Y
   641 21A4 CA				dex
   642
   643 				; ------------------------------------------------------------
   644
   645 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   646 				; as Pointer
   647 21A5 B5 98 8D D8 23		mva :STACKORIGIN,x X
   648 21AA CA				dex
   649
   650 				; ------------------------------------------------------------
   651
   652 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   653 				; as Pointer
   654 21AB B5 98 8D D7 23		mva :STACKORIGIN,x BORDER
   655 21B0 CA				dex
   656
   657 				; ------------------------------------------------------------
   658
   659 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   660 				; as Pointer
   661 21B1 B5 98 8D D6 23		mva :STACKORIGIN,x BACK
   662 21B6 CA				dex
   663
   664 				; ------------------------------------------------------------
   665
   666 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   667 				; as Pointer
   668 21B7 B5 98 8D D5 23		mva :STACKORIGIN,x CURSOR
   669 21BC CA				dex
   670
   671 				; ---------------------  ASM Block 101  ---------------------
   672
   673
   674 21BD AD D5 23		  lda CURSOR
   675 21C0 AE D6 23		  ldx BACK
   676 21C3 AC D7 23		  ldy BORDER
   677 21C6 AD D8 23 85 A3	  mva X $a3
   678 21CB AD D9 23 85 A4	  mva Y $a4
   679 21D0 AD DA 23 85 A5	  mva UPDOWN $a5
   680 21D5 8E C6 02 8C C8 02 +     .by $8E $C6 $02 $8C $C8 $02 $8D $F0 $02 $A5 $A5 $8D $F3 $02 $A5 $A3 $8D $55 $00 $A5 $A4 $8D $54 $00 $60 
   681 				  
   682
   683 				; ------------------------------------------------------------
   684
   685 = 23D5			CURSOR	= DATAORIGIN+$012E
   686 = 23D6			BACK	= DATAORIGIN+$012F
   687 = 23D7			BORDER	= DATAORIGIN+$0130
   688 = 23D8			X	= DATAORIGIN+$0131
   689 = 23D9			Y	= DATAORIGIN+$0132
   690 = 23DA			UPDOWN	= DATAORIGIN+$0133
   691
   692 = 23D5			@VarData	= CURSOR
   693 = 0006			@VarDataSize	= 6
   694
   695 21EE			@exit
   696 					.ifdef @new
   697 					lda <@VarData
   698 					sta :ztmp
   699 					lda >@VarData
   700 					ldy #@VarDataSize-1
   701 					jmp @FreeMem
   702 					eif
   703 21EE 60				rts						; ret
   704 				.endl
   705
   706 21EF			.local	MAINPROC					; PROCEDURE
   707
   708 				; optimize FAIL (100, examples\proc_asm.pas), line = 41
   709 					@print #$7D
   709 				 LDY# $7D\ JSR @PRINT
   709 21EF A0 7D		 LDY# $7D
   709 21F1 20 D0 20		 JSR @PRINT
   710
   711 				; optimize FAIL (100, examples\proc_asm.pas), line = 42
   712 					@printSTRING #CODEORIGIN+$000D
   712 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   712 21F4 A0 20		 LDY> CODEORIGIN+$000D
   712 21F6 A9 0D		 LDA< CODEORIGIN+$000D
   712 21F8 20 D9 20		 JSR @PRINTSTRING
   713 					@print #$9B
   713 				 LDY# $9B\ JSR @PRINT
   713 21FB A0 9B		 LDY# $9B
   713 21FD 20 D0 20		 JSR @PRINT
   714 					@printSTRING #CODEORIGIN+$000F
   714 				 LDY> CODEORIGIN+$000F\ LDA< CODEORIGIN+$000F\ JSR @PRINTSTRING
   714 2200 A0 20		 LDY> CODEORIGIN+$000F
   714 2202 A9 0F		 LDA< CODEORIGIN+$000F
   714 2204 20 D9 20		 JSR @PRINTSTRING
   715 					@print #$9B
   715 				 LDY# $9B\ JSR @PRINT
   715 2207 A0 9B		 LDY# $9B
   715 2209 20 D0 20		 JSR @PRINT
   716 					@printSTRING #CODEORIGIN+$000C
   716 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   716 220C A0 20		 LDY> CODEORIGIN+$000C
   716 220E A9 0C		 LDA< CODEORIGIN+$000C
   716 2210 20 D9 20		 JSR @PRINTSTRING
   717
   718 				; optimize FAIL ('CIO.GET', examples\proc_asm.pas), line = 43
   719 2213 E8				inx
   720 2214 A9 07 95 98			mva #$07 :STACKORIGIN,x
   721 2218 20 5C 21			jsr CIO.GET
   722 221B B5 98 8D D3 23		mva :STACKORIGIN,x KEY
   723 2220 CA				dex
   724
   725 2221 20 49 21			jsr CRT.READKEY					; call Entry
   726
   727 2224 CA				dex
   728
   729 				; optimize FAIL ('TESTPROC', examples\proc_asm.pas), line = 45
   730 2225 E8				inx
   731 2226 A9 01 95 98			mva #$01 :STACKORIGIN,x
   732 222A E8				inx
   733 222B A9 14 95 98			mva #$14 :STACKORIGIN,x
   734 222F E8				inx
   735 2230 A9 1E 95 98			mva #$1E :STACKORIGIN,x
   736 2234 E8				inx
   737 2235 A9 08 95 98			mva #$08 :STACKORIGIN,x
   738 2239 E8				inx
   739 223A 95 98			sta :STACKORIGIN,x
   740 223C E8				inx
   741 223D A9 04 95 98			mva #$04 :STACKORIGIN,x
   742 2241 20 99 21			jsr TESTPROC
   743
   744 				; optimize FAIL (100, examples\proc_asm.pas), line = 46
   745 					@printSTRING #CODEORIGIN+$0032
   745 				 LDY> CODEORIGIN+$0032\ LDA< CODEORIGIN+$0032\ JSR @PRINTSTRING
   745 2244 A0 20		 LDY> CODEORIGIN+$0032
   745 2246 A9 32		 LDA< CODEORIGIN+$0032
   745 2248 20 D9 20		 JSR @PRINTSTRING
   746 					@print #$9B
   746 				 LDY# $9B\ JSR @PRINT
   746 224B A0 9B		 LDY# $9B
   746 224D 20 D0 20		 JSR @PRINT
   747 					@printSTRING #CODEORIGIN+$000C
   747 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   747 2250 A0 20		 LDY> CODEORIGIN+$000C
   747 2252 A9 0C		 LDA< CODEORIGIN+$000C
   747 2254 20 D9 20		 JSR @PRINTSTRING
   748
   749 				; optimize FAIL (100, examples\proc_asm.pas), line = 47
   750 					@printSTRING #CODEORIGIN+$004A
   750 				 LDY> CODEORIGIN+$004A\ LDA< CODEORIGIN+$004A\ JSR @PRINTSTRING
   750 2257 A0 20		 LDY> CODEORIGIN+$004A
   750 2259 A9 4A		 LDA< CODEORIGIN+$004A
   750 225B 20 D9 20		 JSR @PRINTSTRING
   751 225E 20 CB 20			@printEOL
   752
   753 				; optimize FAIL ('CIO.GET', examples\proc_asm.pas), line = 48
   754 2261 E8				inx
   755 2262 A9 07 95 98			mva #$07 :STACKORIGIN,x
   756 2266 20 5C 21			jsr CIO.GET
   757 2269 B5 98 8D D3 23		mva :STACKORIGIN,x KEY
   758 226E CA				dex
   759
   760 226F 20 49 21			jsr CRT.READKEY					; call Entry
   761
   762 2272 CA				dex
   763
   764 				; optimize FAIL ('POKETESTPROC', examples\proc_asm.pas), line = 50
   765 2273 E8				inx
   766 2274 A9 90 95 98			mva #$90 :STACKORIGIN,x
   767 2278 20 8B 21			jsr POKETESTPROC
   768
   769 				; optimize FAIL ('CIO.GET', examples\proc_asm.pas), line = 51
   770 227B E8				inx
   771 227C A9 07 95 98			mva #$07 :STACKORIGIN,x
   772 2280 20 5C 21			jsr CIO.GET
   773 2283 B5 98 8D D3 23		mva :STACKORIGIN,x KEY
   774 2288 CA				dex
   775
   776 2289 20 49 21			jsr CRT.READKEY					; call Entry
   777
   778 228C CA				dex
   779
   780 				; ------------------------------------------------------------
   781
   782 = 23DB			N1	= DATAORIGIN+$0134
   783 = 23DD			N2	= DATAORIGIN+$0136
   784 = 23DF			N3	= DATAORIGIN+$0138
   785
   786 = 23DB			@VarData	= N1
   787 = 0006			@VarDataSize	= 6
   788
   789 228D			@exit
   790 					.ifdef @new
   791 					lda <@VarData
   792 					sta :ztmp
   793 					lda >@VarData
   794 					ldy #@VarDataSize-1
   795 					jmp @FreeMem
   796 					eif
   797 228D 60				rts						; ret
   798 				.endl
   799 228E			l_0067
   800
   801 				; optimize FAIL ('MAINPROC', examples\proc_asm.pas), line = 56
   802 228E 20 EF 21			jsr MAINPROC
   803
   804 				; ------------------------------------------------------------
   805
   806 = 22D3			adr.STRBUFFER	= DATAORIGIN+$002C
   807 2291			.var STRBUFFER	= adr.STRBUFFER .word
   808 = 23D3			KEY	= DATAORIGIN+$012C
   809 2291			@exit
   810
   811 2291 A2 00		@halt	ldx #0
   812 2293 9A				txs
   813 					.ifdef MAIN.@DEFINES.ROMOFF
   814 					inc portb
   815 					.endif
   816
   817 2294 60				rts
   818
   819 				; ------------------------------------------------------------
   820
   821 2295 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   822
   823 				; ------------------------------------------------------------
   824
   825 22A5			.local	@DEFINES
   826 22A5			ATARI
   827 				.endl
   828
   829 = 22A5 D3 22		STRBUFFER
   829 				.endl							; MAIN
   830
   831 				; ------------------------------------------------------------
   832 				; ------------------------------------------------------------
   833
   834 				.macro	UNITINITIALIZATION
   835 				
   836 					.ifdef MAIN.SYSTEM.@UnitInit
   837 					jsr MAIN.SYSTEM.@UnitInit
   838 					eif
   839 				
   840 					.ifdef MAIN.ATARI.@UnitInit
   841 					jsr MAIN.ATARI.@UnitInit
   842 					eif
   843 				
   844 					.ifdef MAIN.CRT.@UnitInit
   845 					jsr MAIN.CRT.@UnitInit
   846 					eif
   847 				
   848 					.ifdef MAIN.DOS.@UnitInit
   849 					jsr MAIN.DOS.@UnitInit
   850 					eif
   851 				
   852 					.ifdef MAIN.STRUTILS.@UnitInit
   853 					jsr MAIN.STRUTILS.@UnitInit
   854 					eif
   855 				
   856 					.ifdef MAIN.SYSUTILS.@UnitInit
   857 					jsr MAIN.SYSUTILS.@UnitInit
   858 					eif
   859 				
   860 					.ifdef MAIN.TYPES.@UnitInit
   861 					jsr MAIN.TYPES.@UnitInit
   862 					eif
   863 				
   864 					.ifdef MAIN.GRAPH.@UnitInit
   865 					jsr MAIN.GRAPH.@UnitInit
   866 					eif
   867 				
   868 					.ifdef MAIN.CIO.@UnitInit
   869 					jsr MAIN.CIO.@UnitInit
   870 					eif
   871 				.endm
   872
   873 				; ------------------------------------------------------------
   874
   875 					ift .SIZEOF(MAIN.SYSTEM) > 0
   876 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   876 				SYSTEM: $2145..$2148
   877 					eif
   878
   879 					ift .SIZEOF(MAIN.ATARI) > 0
   880 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   881 					eif
   882
   883 					ift .SIZEOF(MAIN.CRT) > 0
   884 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   884 				CRT: $2149..$2159
   885 					eif
   886
   887 					ift .SIZEOF(MAIN.DOS) > 0
   888 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   889 					eif
   890
   891 					ift .SIZEOF(MAIN.STRUTILS) > 0
   892 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   893 					eif
   894
   895 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   896 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   897 					eif
   898
   899 					ift .SIZEOF(MAIN.TYPES) > 0
   900 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
   901 					eif
   902
   903 					ift .SIZEOF(MAIN.GRAPH) > 0
   904 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
   904 				GRAPH: $215A..$215B
   905 					eif
   906
   907 					ift .SIZEOF(MAIN.CIO) > 0
   908 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
   908 				CIO: $215C..$218A
   909 					eif
   910
   911 					.print 'CODE: ',CODEORIGIN,'..',*-1
   911 				CODE: $2000..$22A6
   912
   913 				; ------------------------------------------------------------
   914
   915 22A7			DATAORIGIN
   916 22A7 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $27  $00 $00 $00 $17
   917
   918 = 0014			VARINITSIZE	= *-DATAORIGIN
   919 = 013A			VARDATASIZE	= 314
   920
   921 = 23E1			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   922
   923 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   923 				DATA: $22A7..$23E1
   924
   925 02E0-02E1> 08 21			run START
   926
   927 				; ------------------------------------------------------------
   928
   929 				.macro	STATICDATA
   930 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $00 $00 $21  $50 $72 $65 $73 $73 $20 $61 $6E
   931 				.by  $79 $20 $6B $65 $79 $20 $74 $6F  $20 $73 $65 $65 $20 $73 $6F $6D  $65 $20 $65 $66 $66 $65 $63 $74
   932 				.by  $21 $00 $16 $4C $4F $4F $4B $2C  $49 $20 $41 $4D $20 $55 $50 $53  $49 $44 $45 $20 $44 $4F $57 $4E
   933 				.by  $21 $00 $14 $50 $72 $65 $73 $73  $20 $61 $6E $79 $20 $6B $65 $79  $20 $61 $67 $61 $69 $6E $21 $00
   934 				.endm
   935
   936 					end
