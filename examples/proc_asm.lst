mads 2.1.0
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $2060..$20C4
    97
    98 				; ------------------------------------------------------------
    99
   100 20C4			START
   101 20C4 BA				tsx
   102 20C5 8E E6 21			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 0024			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 220D			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 20C8 A2 DC			ldx #256-VLEN
   115 20CA A9 00			lda #0
   116 20CC 9D 31 21 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   119 					eif
   120
   121 20D2 A2 0F			ldx #$0f
   122 20D4 BD 40 03 9D E9 21 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 20DD E8				inx		; X = 0 !!!
   125 20DE 86 8E			stx bp		; lo BP = 0
   126
   127 20E0				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: proc_asm.a65]
   128
   129 20E0			.local	MAIN						; PROCEDURE
   130
   131 20E0 4C E2 21			jmp l_0067
   132
   133 				; ------------------------------------------------------------
   134
   135 20E3			.local	SYSTEM						; UNIT
   136
   137 				; ------------------------------------------------------------
   138
   139 = 0648			M_PI_2	= $0648
   140 = 0192			D_PI_2	= $0192
   141 = 0004			D_PI_180	= $0004
   142 = 0000			MGTIA	= $0000
   143 = 0080			MVBXE	= $0080
   144 = 0000			VBXE_XDLADR	= $0000
   145 = 0100			VBXE_BCBADR	= $0100
   146 = 1000			VBXE_MAPADR	= $1000
   147 = 5000			VBXE_OVRADR	= $5000
   148 = B000			VBXE_WINDOW	= $B000
   149 = 0000			IDLI	= $0000
   150 = 0001			IVBL	= $0001
   151 = 00FE			CH_DELCHR	= $00FE
   152 = 009B			CH_ENTER	= $009B
   153 = 001B			CH_ESC	= $001B
   154 = 001C			CH_CURS_UP	= $001C
   155 = 001D			CH_CURS_DOWN	= $001D
   156 = 001E			CH_CURS_LEFT	= $001E
   157 = 001F			CH_CURS_RIGHT	= $001F
   158 = 007F			CH_TAB	= $007F
   159 = 009B			CH_EOL	= $009B
   160 = 007D			CH_CLR	= $007D
   161 = 00FD			CH_BELL	= $00FD
   162 = 007E			CH_DEL	= $007E
   163 = 009C			CH_DELLINE	= $009C
   164 = 009D			CH_INSLINE	= $009D
   165 = 0000			COLOR_BLACK	= $0000
   166 = 000E			COLOR_WHITE	= $000E
   167 = 0032			COLOR_RED	= $0032
   168 = 0096			COLOR_CYAN	= $0096
   169 = 0068			COLOR_VIOLET	= $0068
   170 = 00C4			COLOR_GREEN	= $00C4
   171 = 0074			COLOR_BLUE	= $0074
   172 = 00EE			COLOR_YELLOW	= $00EE
   173 = 0028			COLOR_ORANGE	= $0028
   174 = 00E4			COLOR_BROWN	= $00E4
   175 = 003C			COLOR_LIGHTRED	= $003C
   176 = 0004			COLOR_GRAY1	= $0004
   177 = 0006			COLOR_GRAY2	= $0006
   178 = 000A			COLOR_GRAY3	= $000A
   179 = 00CC			COLOR_LIGHTGREEN	= $00CC
   180 = 007C			COLOR_LIGHTBLUE	= $007C
   181 = 0004			FMOPENREAD	= $0004
   182 = 0008			FMOPENWRITE	= $0008
   183 = 0009			FMOPENAPPEND	= $0009
   184 = 000C			FMOPENREADWRITE	= $000C
   185 = 21F9			SCREENWIDTH	= DATAORIGIN+$0000
   186 = 21FB			SCREENHEIGHT	= DATAORIGIN+$0002
   187 = 21FD			DATESEPARATOR	= DATAORIGIN+$0004
   188 = D014			TVSYSTEM	= $D014
   189 = 02C0			adr.PALETTE	= $02C0
   190 20E3			.var PALETTE	= adr.PALETTE .word
   191 = D012			adr.HPALETTE	= $D012
   192 20E3			.var HPALETTE	= adr.HPALETTE .word
   193 = 21FE			FILEMODE	= DATAORIGIN+$0005
   194 = 21FF			SCREENMODE	= DATAORIGIN+$0006
   195 = 2200			IORESULT	= DATAORIGIN+$0007
   196 = 2201			EOLN	= DATAORIGIN+$0008
   197 = 2202			RNDSEED	= DATAORIGIN+$0009
   198
   199 = 20E3 C0 02		PALETTE
   199 = 20E5 12 D0		HPALETTE
   199 				.endl							; UNIT SYSTEM
   200
   201 				; ------------------------------------------------------------
   202
   203 20E7			.local	DOS						; UNIT
   204
   205 				; ------------------------------------------------------------
   206
   207 = D014			PALNTSC	= $D014
   208
   209 				.endl							; UNIT DOS
   210
   211 				; ------------------------------------------------------------
   212
   213 20E7			.local	STRUTILS					; UNIT
   214
   215 				; ------------------------------------------------------------
   216
   217 				.endl							; UNIT STRUTILS
   218
   219 				; ------------------------------------------------------------
   220
   221 20E7			.local	SYSUTILS					; UNIT
   222
   223 				; ------------------------------------------------------------
   224
   225 = 0001			FAREADONLY	= $0001
   226 = 0002			FAHIDDEN	= $0002
   227 = 0004			FASYSFILE	= $0004
   228 = 0008			FAVOLUMEID	= $0008
   229 = 0010			FADIRECTORY	= $0010
   230 = 0020			FAARCHIVE	= $0020
   231 = 003F			FAANYFILE	= $003F
   232
   233 				.endl							; UNIT SYSUTILS
   234
   235 				; ------------------------------------------------------------
   236
   237 20E7			.local	ATARI						; UNIT
   238
   239 				; ------------------------------------------------------------
   240
   241 = 0012			RTCLOK	= $0012
   242 = 004D			ATRACT	= $004D
   243 = 0052			LMARGIN	= $0052
   244 = 0053			RMARGIN	= $0053
   245 = 0054			ROWCRS	= $0054
   246 = 0055			COLCRS	= $0055
   247 = 0057			DINDEX	= $0057
   248 = 0058			SAVMSC	= $0058
   249 = 006A			RAMTOP	= $006A
   250 = 0200			VDSLST	= $0200
   251 = 0230			SDLSTL	= $0230
   252 = 0290			TXTROW	= $0290
   253 = 0291			TXTCOL	= $0291
   254 = 0293			TINDEX	= $0293
   255 = 0294			TXTMSC	= $0294
   256 = 022F			SDMCTL	= $022F
   257 = 026F			GPRIOR	= $026F
   258 = 02F0			CRSINH	= $02F0
   259 = 02F3			CHACT	= $02F3
   260 = 02F4			CHBAS	= $02F4
   261 = 02FC			CH	= $02FC
   262 = 02C0			PCOLR0	= $02C0
   263 = 02C1			PCOLR1	= $02C1
   264 = 02C2			PCOLR2	= $02C2
   265 = 02C3			PCOLR3	= $02C3
   266 = 02C4			COLOR0	= $02C4
   267 = 02C5			COLOR1	= $02C5
   268 = 02C6			COLOR2	= $02C6
   269 = 02C7			COLOR3	= $02C7
   270 = 02C8			COLOR4	= $02C8
   271 = 02C8			COLBAKS	= $02C8
   272 = D000			HPOSP0	= $D000
   273 = D001			HPOSP1	= $D001
   274 = D002			HPOSP2	= $D002
   275 = D003			HPOSP3	= $D003
   276 = D004			HPOSM0	= $D004
   277 = D005			HPOSM1	= $D005
   278 = D006			HPOSM2	= $D006
   279 = D007			HPOSM3	= $D007
   280 = D008			SIZEP0	= $D008
   281 = D009			SIZEP1	= $D009
   282 = D00A			SIZEP2	= $D00A
   283 = D00B			SIZEP3	= $D00B
   284 = D00C			SIZEM	= $D00C
   285 = D00D			GRAFP0	= $D00D
   286 = D00E			GRAFP1	= $D00E
   287 = D00F			GRAFP2	= $D00F
   288 = D010			GRAFP3	= $D010
   289 = D011			GRAFM	= $D011
   290 = D004			P0PF	= $D004
   291 = D014			PAL	= $D014
   292 = D012			COLPM0	= $D012
   293 = D013			COLPM1	= $D013
   294 = D014			COLPM2	= $D014
   295 = D015			COLPM3	= $D015
   296 = D016			COLPF0	= $D016
   297 = D017			COLPF1	= $D017
   298 = D018			COLPF2	= $D018
   299 = D019			COLPF3	= $D019
   300 = D01A			COLBK	= $D01A
   301 = D01B			PRIOR	= $D01B
   302 = D01D			GRACTL	= $D01D
   303 = D01E			HITCLR	= $D01E
   304 = D200			AUDF1	= $D200
   305 = D201			AUDC1	= $D201
   306 = D202			AUDF2	= $D202
   307 = D203			AUDC2	= $D203
   308 = D204			AUDF3	= $D204
   309 = D205			AUDC3	= $D205
   310 = D206			AUDF4	= $D206
   311 = D207			AUDC4	= $D207
   312 = D208			AUDCTL	= $D208
   313 = D20F			SKSTAT	= $D20F
   314 = D301			PORTB	= $D301
   315 = D400			DMACTL	= $D400
   316 = D401			CHACTL	= $D401
   317 = D402			DLISTL	= $D402
   318 = D404			HSCROL	= $D404
   319 = D405			VSCROL	= $D405
   320 = D407			PMBASE	= $D407
   321 = D409			CHBASE	= $D409
   322 = D40A			WSYNC	= $D40A
   323 = D40B			VCOUNT	= $D40B
   324 = D40C			PENH	= $D40C
   325 = D40D			PENV	= $D40D
   326 = D40E			NMIEN	= $D40E
   327
   328 				.endl							; UNIT ATARI
   329
   330 				; ------------------------------------------------------------
   331
   332 20E7			.local	CRT						; UNIT
   333
   334 20E7			.local	READKEY						; FUNCTION | ASSEMBLER
   335
   336 				; ---------------------  ASM Block 063  ---------------------
   337
   338 20E7 8A 48			txa:pha
   339
   340 20E9 20 B4 20			@GetKey
   341
   342 20EC 8D 05 22			sta Result
   343
   344 20EF 68 AA			pla:tax
   345
   346 20F1			@exit
   347
   348 				; ------------------------------------------------------------
   349
   350 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   351 				; as Pointer
   352
   353 20F1 E8				inx						; add bx, 1
   354 20F2 AD 05 22 95 98		mva RESULT :STACKORIGIN,x
   355
   356 					.ifdef @new
   357 					@FreeMem #@VarData #@VarDataSize
   358 					eif
   359
   360 				; ------------------------------------------------------------
   361
   362 = 2205			RESULT	= DATAORIGIN+$000C
   363
   364 = 2205			@VarData	= RESULT
   365 = 0001			@VarDataSize	= 1
   366
   367 20F7 60				rts						; ret
   368 				.endl
   369
   370 				; ------------------------------------------------------------
   371
   372 = 2204			TEXTATTR	= DATAORIGIN+$000B
   373 = D01F			CONSOL	= $D01F
   374 = 0000			CN_START_SELECT_OPTION	= $0000
   375 = 0001			CN_SELECT_OPTION	= $0001
   376 = 0002			CN_START_OPTION	= $0002
   377 = 0003			CN_OPTION	= $0003
   378 = 0004			CN_START_SELECT	= $0004
   379 = 0005			CN_SELECT	= $0005
   380 = 0006			CN_START	= $0006
   381 = 0007			CN_NONE	= $0007
   382 = 0000			BW40	= $0000
   383 = 0001			CO40	= $0001
   384 = 0002			BW80	= $0002
   385 = 0003			CO80	= $0003
   386 = 0007			MONO	= $0007
   387 = 0001			C40	= $0001
   388 = 0003			C80	= $0003
   389 = 0000			BLACK	= $0000
   390 = 0001			BLUE	= $0001
   391 = 0002			GREEN	= $0002
   392 = 0003			CYAN	= $0003
   393 = 0004			RED	= $0004
   394 = 0005			MAGENTA	= $0005
   395 = 0006			BROWN	= $0006
   396 = 0007			LIGHTGRAY	= $0007
   397 = 0008			DARKGRAY	= $0008
   398 = 0009			LIGHTBLUE	= $0009
   399 = 000A			LIGHTGREEN	= $000A
   400 = 000B			LIGHTCYAN	= $000B
   401 = 000C			LIGHTRED	= $000C
   402 = 000D			LIGHTMAGENTA	= $000D
   403 = 000E			YELLOW	= $000E
   404 = 000F			WHITE	= $000F
   405 = 0080			BLINK	= $0080
   406
   407 				.endl							; UNIT CRT
   408
   409 				; ------------------------------------------------------------
   410
   411 20F8			.local	TYPES						; UNIT
   412
   413 				; ------------------------------------------------------------
   414
   415 				.endl							; UNIT TYPES
   416
   417 				; ------------------------------------------------------------
   418
   419 20F8			.local	GRAPH						; UNIT
   420
   421 				; ------------------------------------------------------------
   422
   423 = FFFFFF80		CURRENTDRIVER	= $FFFFFF80
   424 = 0000			DETECT	= $0000
   425 = 0001			CGA	= $0001
   426 = 0002			MCGA	= $0002
   427 = 0003			EGA	= $0003
   428 = 0004			EGA64	= $0004
   429 = 0005			EGAMONO	= $0005
   430 = 0006			LOWRES	= $0006
   431 = 0007			HERCMONO	= $0007
   432 = 0009			VGA	= $0009
   433 = 000A			VESA	= $000A
   434 = 000B			D1BIT	= $000B
   435 = 000C			D2BIT	= $000C
   436 = 000D			D4BIT	= $000D
   437 = 000E			D6BIT	= $000E
   438 = 000F			D8BIT	= $000F
   439 = 0010			D12BIT	= $0010
   440 = 0018			M640X400	= $0018
   441 = 0018			M640X480	= $0018
   442 = 0000			GROK	= $0000
   443 = FFFFFFFF		GRNOINITGRAPH	= $FFFFFFFF
   444 = FFFFFFFE		GRNOTDETECTED	= $FFFFFFFE
   445 = FFFFFFFD		GRFILENOTFOUND	= $FFFFFFFD
   446 = FFFFFFFC		GRINVALIDDRIVER	= $FFFFFFFC
   447 = FFFFFFFB		GRNOLOADMEM	= $FFFFFFFB
   448 = FFFFFFFA		GRNOSCANMEM	= $FFFFFFFA
   449 = FFFFFFF9		GRNOFLOODMEM	= $FFFFFFF9
   450 = FFFFFFF8		GRFONTNOTFOUND	= $FFFFFFF8
   451 = FFFFFFF7		GRNOFONTMEM	= $FFFFFFF7
   452 = FFFFFFF6		GRINVALIDMODE	= $FFFFFFF6
   453 = FFFFFFF5		GRERROR	= $FFFFFFF5
   454 = FFFFFFF4		GRIOERROR	= $FFFFFFF4
   455 = FFFFFFF3		GRINVALIDFONT	= $FFFFFFF3
   456 = FFFFFFF2		GRINVALIDFONTNUM	= $FFFFFFF2
   457 = FFFFFFEE		GRINVALIDVERSION	= $FFFFFFEE
   458 = 0000			CGAC0	= $0000
   459 = 0001			CGAC1	= $0001
   460 = 0002			CGAC2	= $0002
   461 = 0003			CGAC3	= $0003
   462 = 0004			CGAHI	= $0004
   463 = 0000			MCGAC0	= $0000
   464 = 0001			MCGAC1	= $0001
   465 = 0002			MCGAC2	= $0002
   466 = 0003			MCGAC3	= $0003
   467 = 0004			MCGAMED	= $0004
   468 = 0005			MCGAHI	= $0005
   469 = 0000			EGALO	= $0000
   470 = 0001			EGAHI	= $0001
   471 = 0000			EGA64LO	= $0000
   472 = 0001			EGA64HI	= $0001
   473 = 0003			EGAMONOHI	= $0003
   474 = 000A			VGALO	= $000A
   475 = 001F			VGAMED	= $001F
   476 = 0018			VGAHI	= $0018
   477 = 2206			WIN_LEFT	= DATAORIGIN+$000D
   478 = 2208			WIN_RIGHT	= DATAORIGIN+$000F
   479 = 220A			WIN_TOP	= DATAORIGIN+$0011
   480 = 220C			WIN_BOTTOM	= DATAORIGIN+$0013
   481 = 220E			GRAPHRESULT	= DATAORIGIN+$0015
   482 = 220F			GETCOLOR	= DATAORIGIN+$0016
   483 = 2210			adr.LASTARCCOORDS	= DATAORIGIN+$0017
   484 20F8			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   485 = 2210			LASTARCCOORDS.X	= DATAORIGIN+$0017
   486 = 2212			LASTARCCOORDS.Y	= DATAORIGIN+$0019
   487 = 2214			LASTARCCOORDS.XSTART	= DATAORIGIN+$001B
   488 = 2216			LASTARCCOORDS.YSTART	= DATAORIGIN+$001D
   489 = 2218			LASTARCCOORDS.XEND	= DATAORIGIN+$001F
   490 = 221A			LASTARCCOORDS.YEND	= DATAORIGIN+$0021
   491 = 221C			CURRENTX	= DATAORIGIN+$0023
   492 = 221E			CURRENTY	= DATAORIGIN+$0025
   493 = 2220			VIDEORAM	= DATAORIGIN+$0027
   494 = 2222			SCANLINE_WIDTH	= DATAORIGIN+$0029
   495
   496 = 20F8 10 22		LASTARCCOORDS
   496 				.endl							; UNIT GRAPH
   497
   498 20FA			.local	POKETESTPROC					; PROCEDURE | ASSEMBLER
   499
   500 				; ------------------------------------------------------------
   501
   502 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   503 				; as Pointer
   504 20FA B5 98 8D 24 22		mva :STACKORIGIN,x D
   505 20FF CA				dex						; sub bx, 1
   506
   507 				; ---------------------  ASM Block 089  ---------------------
   508
   509
   510 2100 AD 24 22		  lda d
   511 2103 8D C6 02 60		    .by $8D $C6 $02 $60 
   512 				  
   513
   514 				; ------------------------------------------------------------
   515
   516 = 2224			D	= DATAORIGIN+$002B
   517
   518 = 2224			@VarData	= D
   519 = 0001			@VarDataSize	= 1
   520
   521 2107			@exit
   522 					.ifdef @new
   523 					@FreeMem #@VarData #@VarDataSize
   524 					eif
   525 2107 60				rts						; ret
   526 				.endl
   527
   528 2108			.local	TESTPROC					; PROCEDURE | ASSEMBLER
   529
   530 				; ------------------------------------------------------------
   531
   532 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   533 				; as Pointer
   534 2108 B5 98 8D 2A 22		mva :STACKORIGIN,x UPDOWN
   535 210D CA				dex						; sub bx, 1
   536
   537 				; ------------------------------------------------------------
   538
   539 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   540 				; as Pointer
   541 210E B5 98 8D 29 22		mva :STACKORIGIN,x Y
   542 2113 CA				dex						; sub bx, 1
   543
   544 				; ------------------------------------------------------------
   545
   546 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   547 				; as Pointer
   548 2114 B5 98 8D 28 22		mva :STACKORIGIN,x X
   549 2119 CA				dex						; sub bx, 1
   550
   551 				; ------------------------------------------------------------
   552
   553 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   554 				; as Pointer
   555 211A B5 98 8D 27 22		mva :STACKORIGIN,x BORDER
   556 211F CA				dex						; sub bx, 1
   557
   558 				; ------------------------------------------------------------
   559
   560 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   561 				; as Pointer
   562 2120 B5 98 8D 26 22		mva :STACKORIGIN,x BACK
   563 2125 CA				dex						; sub bx, 1
   564
   565 				; ------------------------------------------------------------
   566
   567 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   568 				; as Pointer
   569 2126 B5 98 8D 25 22		mva :STACKORIGIN,x CURSOR
   570 212B CA				dex						; sub bx, 1
   571
   572 				; ---------------------  ASM Block 090  ---------------------
   573
   574
   575 212C AD 25 22		  lda CURSOR
   576 212F AE 26 22		  ldx BACK
   577 2132 AC 27 22		  ldy BORDER
   578 2135 AD 28 22 85 A3	  mva X $a3
   579 213A AD 29 22 85 A4	  mva Y $a4
   580 213F AD 2A 22 85 A5	  mva UPDOWN $a5
   581 2144 8E C6 02 8C C8 02 +     .by $8E $C6 $02 $8C $C8 $02 $8D $F0 $02 $A5 $A5 $8D $F3 $02 $A5 $A3 $8D $55 $00 $A5 $A4 $8D $54 $00 $60 
   582 				  
   583
   584 				; ------------------------------------------------------------
   585
   586 = 2225			CURSOR	= DATAORIGIN+$002C
   587 = 2226			BACK	= DATAORIGIN+$002D
   588 = 2227			BORDER	= DATAORIGIN+$002E
   589 = 2228			X	= DATAORIGIN+$002F
   590 = 2229			Y	= DATAORIGIN+$0030
   591 = 222A			UPDOWN	= DATAORIGIN+$0031
   592
   593 = 2225			@VarData	= CURSOR
   594 = 0006			@VarDataSize	= 6
   595
   596 215D			@exit
   597 					.ifdef @new
   598 					@FreeMem #@VarData #@VarDataSize
   599 					eif
   600 215D 60				rts						; ret
   601 				.endl
   602
   603 215E			.local	MAINPROC					; PROCEDURE
   604
   605 				; optimize FAIL (100, examples\proc_asm.pas), line = 39
   606 					@print #$7D
   606 				 LDY# $7D\ JSR @PRINT
   606 215E A0 7D		 LDY# $7D
   606 2160 20 65 20		 JSR @PRINT
   607
   608 				; optimize FAIL (100, examples\proc_asm.pas), line = 40
   609 					@printSTRING #CODEORIGIN+$000D
   609 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   609 2163 A0 20		 LDY> CODEORIGIN+$000D
   609 2165 A9 0D		 LDA< CODEORIGIN+$000D
   609 2167 20 6E 20		 JSR @PRINTSTRING
   610 					@print #$9B
   610 				 LDY# $9B\ JSR @PRINT
   610 216A A0 9B		 LDY# $9B
   610 216C 20 65 20		 JSR @PRINT
   611 					@printSTRING #CODEORIGIN+$000F
   611 				 LDY> CODEORIGIN+$000F\ LDA< CODEORIGIN+$000F\ JSR @PRINTSTRING
   611 216F A0 20		 LDY> CODEORIGIN+$000F
   611 2171 A9 0F		 LDA< CODEORIGIN+$000F
   611 2173 20 6E 20		 JSR @PRINTSTRING
   612 					@print #$9B
   612 				 LDY# $9B\ JSR @PRINT
   612 2176 A0 9B		 LDY# $9B
   612 2178 20 65 20		 JSR @PRINT
   613 					@printSTRING #CODEORIGIN+$000C
   613 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   613 217B A0 20		 LDY> CODEORIGIN+$000C
   613 217D A9 0C		 LDA< CODEORIGIN+$000C
   613 217F 20 6E 20		 JSR @PRINTSTRING
   614
   615 				; optimize FAIL ('CRT.READKEY', examples\proc_asm.pas), line = 41
   616 2182 20 E7 20			jsr CRT.READKEY
   617 2185 B5 98 8D 23 22		mva :STACKORIGIN,x KEY
   618 218A CA				dex
   619
   620 				; optimize FAIL ('TESTPROC', examples\proc_asm.pas), line = 42
   621 218B E8				inx
   622 218C A9 01 95 98			mva #$01 :STACKORIGIN,x
   623 2190 E8				inx
   624 2191 A9 14 95 98			mva #$14 :STACKORIGIN,x
   625 2195 E8				inx
   626 2196 A9 1E 95 98			mva #$1E :STACKORIGIN,x
   627 219A E8				inx
   628 219B A9 08 95 98			mva #$08 :STACKORIGIN,x
   629 219F E8				inx
   630 21A0 95 98			sta :STACKORIGIN,x
   631 21A2 E8				inx
   632 21A3 A9 04 95 98			mva #$04 :STACKORIGIN,x
   633 21A7 20 08 21			jsr TESTPROC
   634
   635 				; optimize FAIL (100, examples\proc_asm.pas), line = 43
   636 					@printSTRING #CODEORIGIN+$0032
   636 				 LDY> CODEORIGIN+$0032\ LDA< CODEORIGIN+$0032\ JSR @PRINTSTRING
   636 21AA A0 20		 LDY> CODEORIGIN+$0032
   636 21AC A9 32		 LDA< CODEORIGIN+$0032
   636 21AE 20 6E 20		 JSR @PRINTSTRING
   637 					@print #$9B
   637 				 LDY# $9B\ JSR @PRINT
   637 21B1 A0 9B		 LDY# $9B
   637 21B3 20 65 20		 JSR @PRINT
   638 					@printSTRING #CODEORIGIN+$000C
   638 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   638 21B6 A0 20		 LDY> CODEORIGIN+$000C
   638 21B8 A9 0C		 LDA< CODEORIGIN+$000C
   638 21BA 20 6E 20		 JSR @PRINTSTRING
   639
   640 				; optimize FAIL (100, examples\proc_asm.pas), line = 44
   641 					@printSTRING #CODEORIGIN+$004A
   641 				 LDY> CODEORIGIN+$004A\ LDA< CODEORIGIN+$004A\ JSR @PRINTSTRING
   641 21BD A0 20		 LDY> CODEORIGIN+$004A
   641 21BF A9 4A		 LDA< CODEORIGIN+$004A
   641 21C1 20 6E 20		 JSR @PRINTSTRING
   642 21C4 20 60 20			@printEOL
   643
   644 				; optimize FAIL ('CRT.READKEY', examples\proc_asm.pas), line = 45
   645 21C7 20 E7 20			jsr CRT.READKEY
   646 21CA B5 98 8D 23 22		mva :STACKORIGIN,x KEY
   647 21CF CA				dex
   648
   649 				; optimize FAIL ('POKETESTPROC', examples\proc_asm.pas), line = 46
   650 21D0 E8				inx
   651 21D1 A9 90 95 98			mva #$90 :STACKORIGIN,x
   652 21D5 20 FA 20			jsr POKETESTPROC
   653
   654 				; optimize FAIL ('CRT.READKEY', examples\proc_asm.pas), line = 47
   655 21D8 20 E7 20			jsr CRT.READKEY
   656 21DB B5 98 8D 23 22		mva :STACKORIGIN,x KEY
   657 21E0 CA				dex
   658
   659 				; ------------------------------------------------------------
   660
   661 = 222B			N1	= DATAORIGIN+$0032
   662 = 222D			N2	= DATAORIGIN+$0034
   663 = 222F			N3	= DATAORIGIN+$0036
   664
   665 = 222B			@VarData	= N1
   666 = 0006			@VarDataSize	= 6
   667
   668 21E1			@exit
   669 					.ifdef @new
   670 					@FreeMem #@VarData #@VarDataSize
   671 					eif
   672 21E1 60				rts						; ret
   673 				.endl
   674 21E2			l_0067
   675
   676 				; optimize FAIL ('MAINPROC', examples\proc_asm.pas), line = 51
   677 21E2 20 5E 21			jsr MAINPROC
   678
   679 				; ------------------------------------------------------------
   680
   681 = 2223			KEY	= DATAORIGIN+$002A
   682 21E5			@exit
   683
   684 21E5 A2 00		@halt	ldx #0
   685 21E7 9A				txs
   686
   687 21E8 60				rts
   688
   689 				; ------------------------------------------------------------
   690
   691 21E9 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   692
   693 				; ------------------------------------------------------------
   694
   695 21F9			.local	@DEFINES
   696 21F9			ATARI
   697 				.endl
   698
   699 				.endl							; MAIN
   700
   701 				; ------------------------------------------------------------
   702 				; ------------------------------------------------------------
   703
   704 				.macro	UNITINITIALIZATION
   705 				
   706 					.ifdef MAIN.SYSTEM.@UnitInit
   707 					jsr MAIN.SYSTEM.@UnitInit
   708 					eif
   709 				
   710 					.ifdef MAIN.DOS.@UnitInit
   711 					jsr MAIN.DOS.@UnitInit
   712 					eif
   713 				
   714 					.ifdef MAIN.STRUTILS.@UnitInit
   715 					jsr MAIN.STRUTILS.@UnitInit
   716 					eif
   717 				
   718 					.ifdef MAIN.SYSUTILS.@UnitInit
   719 					jsr MAIN.SYSUTILS.@UnitInit
   720 					eif
   721 				
   722 					.ifdef MAIN.ATARI.@UnitInit
   723 					jsr MAIN.ATARI.@UnitInit
   724 					eif
   725 				
   726 					.ifdef MAIN.CRT.@UnitInit
   727 					jsr MAIN.CRT.@UnitInit
   728 					eif
   729 				
   730 					.ifdef MAIN.TYPES.@UnitInit
   731 					jsr MAIN.TYPES.@UnitInit
   732 					eif
   733 				
   734 					.ifdef MAIN.GRAPH.@UnitInit
   735 					jsr MAIN.GRAPH.@UnitInit
   736 					eif
   737 				.endm
   738
   739 				; ------------------------------------------------------------
   740
   741 					ift .SIZEOF(MAIN.SYSTEM) > 0
   742 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   742 				SYSTEM: $20E3..$20E6
   743 					eif
   744
   745 					ift .SIZEOF(MAIN.DOS) > 0
   746 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   747 					eif
   748
   749 					ift .SIZEOF(MAIN.STRUTILS) > 0
   750 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   751 					eif
   752
   753 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   754 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   755 					eif
   756
   757 					ift .SIZEOF(MAIN.ATARI) > 0
   758 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   759 					eif
   760
   761 					ift .SIZEOF(MAIN.CRT) > 0
   762 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   762 				CRT: $20E7..$20F7
   763 					eif
   764
   765 					ift .SIZEOF(MAIN.TYPES) > 0
   766 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
   767 					eif
   768
   769 					ift .SIZEOF(MAIN.GRAPH) > 0
   770 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
   770 				GRAPH: $20F8..$20F9
   771 					eif
   772
   773 					.print 'CODE: ',CODEORIGIN,'..',*-1
   773 				CODE: $2000..$21F8
   774
   775 				; ------------------------------------------------------------
   776
   777 21F9			DATAORIGIN
   778 21F9 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $27  $00 $00 $00 $17
   779
   780 = 0014			VARINITSIZE	= *-DATAORIGIN
   781 = 0038			VARDATASIZE	= 56
   782
   783 = 2231			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   784
   785 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   785 				DATA: $21F9..$2231
   786
   787 02E0-02E1> C4 20			run START
   788
   789 				; ------------------------------------------------------------
   790
   791 				.macro	STATICDATA
   792 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $00 $00 $21  $50 $72 $65 $73 $73 $20 $61 $6E
   793 				.by  $79 $20 $6B $65 $79 $20 $74 $6F  $20 $73 $65 $65 $20 $73 $6F $6D  $65 $20 $65 $66 $66 $65 $63 $74
   794 				.by  $21 $00 $16 $4C $4F $4F $4B $2C  $49 $20 $41 $4D $20 $55 $50 $53  $49 $44 $45 $20 $44 $4F $57 $4E
   795 				.by  $21 $00 $14 $50 $72 $65 $73 $73  $20 $61 $6E $79 $20 $6B $65 $79  $20 $61 $67 $61 $69 $6E $21 $00
   796 				.endm
   797
   798 					end
