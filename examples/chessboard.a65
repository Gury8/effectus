; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.4 [2020/06/20] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

fxptr	.ds 2						; VBXE pointer
psptr	.ds 2						; PROGRAMSTACK Pointer

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4
bp	.ds 2
bp2	.ds 2

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1

FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.endif

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502.asm'

.print 'ZPAGE: ',fxptr,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	eif

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #0
	sta:rne VADR+VLEN-256,x+
	eli VLEN>0
	@fill #VADR #VLEN #0
	eif

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.endif

	mwa #PROGRAMSTACK psptr

	ldx #$0f					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0016

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
TVSYSTEM	= $D014
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

RTCLOK	= $12
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
SKSTAT	= $D20F
PORTB	= $D301
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$000B
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
BLUE	= $01
GREEN	= $02
CYAN	= $03
RED	= $04
MAGENTA	= $05
BROWN	= $06
LIGHTGRAY	= $07
DARKGRAY	= $08
LIGHTBLUE	= $09
LIGHTGREEN	= $0A
LIGHTCYAN	= $0B
LIGHTRED	= $0C
LIGHTMAGENTA	= $0D
YELLOW	= $0E
WHITE	= $0F
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	TYPES						; UNIT

; ------------------------------------------------------------

.endl							; UNIT TYPES

; ------------------------------------------------------------

.local	GRAPH						; UNIT

.local	INITGRAPH_0077					; PROCEDURE | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x MODE
	dex

; ---------------------  ASM Block 060  ---------------------


	txa:pha

	lda mode
	sta MAIN.SYSTEM.GraphMode
	and #$0f
	tay

	ldx #$60		; 6*16
	lda mode		; %00010000 with text window
	and #$10
	eor #$10
	ora #2			; read

	.nowarn @GRAPHICS

	sty GraphResult


	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.endif

tlshc	equ $ee6d

	ldx dindex
	ldy tlshc,x
	lda #5
shift	asl @
	dey
	bne shift

	sta SCANLINE_WIDTH

; Fox/TQA

dindex	equ $57
tmccn	equ $ee7d
tmrcn	equ $ee8d

	ldx dindex
	lda tmccn,x
	ldy tmrcn,x
	ldx #0
	cmp #<320
	sne:inx

; X:A = horizontal resolution
; Y = vertical resolution

	@SCREENSIZE

	.ifdef MAIN.@DEFINES.ROMOFF
	dec portb
	.endif

	pla:tax


; optimize OK (GRAPH), line = 132

	mva ATARI.SAVMSC VIDEORAM
	mva ATARI.SAVMSC+1 VIDEORAM+1

; ------------------------------------------------------------

MODE	= DATAORIGIN+$0029

@VarData	= MODE
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------

CURRENTDRIVER	= $80
DETECT	= $00
CGA	= $01
MCGA	= $02
EGA	= $03
EGA64	= $04
EGAMONO	= $05
LOWRES	= $06
HERCMONO	= $07
VGA	= $09
VESA	= $0A
D1BIT	= $0B
D2BIT	= $0C
D4BIT	= $0D
D6BIT	= $0E
D8BIT	= $0F
D12BIT	= $10
M640X400	= $18
M640X480	= $18
GROK	= $01
GRNOINITGRAPH	= $FF
GRNOTDETECTED	= $FE
GRFILENOTFOUND	= $FD
GRINVALIDDRIVER	= $FC
GRNOLOADMEM	= $FB
GRNOSCANMEM	= $FA
GRNOFLOODMEM	= $F9
GRFONTNOTFOUND	= $F8
GRNOFONTMEM	= $F7
GRINVALIDMODE	= $F6
GRERROR	= $F5
GRIOERROR	= $F4
GRINVALIDFONT	= $F3
GRINVALIDFONTNUM	= $F2
GRINVALIDVERSION	= $EE
CGAC0	= $00
CGAC1	= $01
CGAC2	= $02
CGAC3	= $03
CGAHI	= $04
MCGAC0	= $00
MCGAC1	= $01
MCGAC2	= $02
MCGAC3	= $03
MCGAMED	= $04
MCGAHI	= $05
EGALO	= $00
EGAHI	= $01
EGA64LO	= $00
EGA64HI	= $01
EGAMONOHI	= $03
VGALO	= $0A
VGAMED	= $1F
VGAHI	= $18
WIN_LEFT	= DATAORIGIN+$000C
WIN_RIGHT	= DATAORIGIN+$000E
WIN_TOP	= DATAORIGIN+$0010
WIN_BOTTOM	= DATAORIGIN+$0012
GRAPHRESULT	= DATAORIGIN+$0014
GETCOLOR	= DATAORIGIN+$0015
adr.LASTARCCOORDS	= DATAORIGIN+$0016
.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
LASTARCCOORDS.X	= DATAORIGIN+$0016
LASTARCCOORDS.Y	= DATAORIGIN+$0018
LASTARCCOORDS.XSTART	= DATAORIGIN+$001A
LASTARCCOORDS.YSTART	= DATAORIGIN+$001C
LASTARCCOORDS.XEND	= DATAORIGIN+$001E
LASTARCCOORDS.YEND	= DATAORIGIN+$0020
CURRENTX	= DATAORIGIN+$0022
CURRENTY	= DATAORIGIN+$0024
VIDEORAM	= DATAORIGIN+$0026
SCANLINE_WIDTH	= DATAORIGIN+$0028

.endl							; UNIT GRAPH

.local	DRAWBOARDPROC					; PROCEDURE

; optimize OK (examples\chessboard.pas), line = 27

	mva SAVMSC SCREEN
	mva SAVMSC+1 SCREEN+1
; --- For

; optimize OK (examples\chessboard.pas), line = 28

	mva #$01 I3B

; optimize OK (examples\chessboard.pas), line = 28

l_00DC
; --- ForToDoCondition

; optimize OK (examples\chessboard.pas), line = 28

	lda I3B
	cmp #$09
	jcs l_00EA
; --- For

; optimize OK (examples\chessboard.pas), line = 29

	mva #$01 I2B

; optimize OK (examples\chessboard.pas), line = 29

l_00F3
; --- ForToDoCondition

; optimize OK (examples\chessboard.pas), line = 29

	lda I2B
	cmp #$19
	jcs l_0101
; --- For

; optimize OK (examples\chessboard.pas), line = 30

	mva #$01 I1B

; optimize OK (examples\chessboard.pas), line = 30

l_010A
; --- ForToDoCondition

; optimize OK (examples\chessboard.pas), line = 30

	lda I1B
	cmp #$05
	jcs l_0118

; optimize OK (examples\chessboard.pas), line = 31

	mwy SCREEN :bp2
	ldy #$00
	lda #$FF
	sta (:bp2),y

; optimize OK (examples\chessboard.pas), line = 32

	iny
	sta (:bp2),y

; optimize OK (examples\chessboard.pas), line = 33

	iny
	sta (:bp2),y

; optimize OK (examples\chessboard.pas), line = 34

	lda SCREEN
	add #$06
	sta SCREEN
	scc
	inc SCREEN+1

; --- ForToDoEpilog
	inc I1B						; inc ptr byte [CounterAddress]
	jne l_010A
l_0118

; optimize OK (examples\chessboard.pas), line = 36

	lda SCREEN
	add #$10
	sta SCREEN
	scc
	inc SCREEN+1

; --- ForToDoEpilog
	inc I2B						; inc ptr byte [CounterAddress]
	jne l_00F3
l_0101

; optimize OK (examples\chessboard.pas), line = 38

	lda I3B
	and #$01
	jne l_0149

; optimize OK (examples\chessboard.pas), line = 39

	lda SCREEN
	sub #$03
	sta SCREEN
	scs
	dec SCREEN+1
	jmp l_0154
l_0149

; optimize OK (examples\chessboard.pas), line = 42

	lda SCREEN
	add #$03
	sta SCREEN
	scc
	inc SCREEN+1
l_0154

; --- ForToDoEpilog
	inc I3B						; inc ptr byte [CounterAddress]
	jne l_00DC
l_00EA

; ------------------------------------------------------------

I1B	= DATAORIGIN+$002B
I2B	= DATAORIGIN+$002C
I3B	= DATAORIGIN+$002D
SCREEN	= DATAORIGIN+$002E
@FORTMP_00D9	= $08
@FORTMP_00F0	= $18
@FORTMP_0107	= $04

@VarData	= I1B
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	MAINPROC					; PROCEDURE

; optimize FAIL ('GRAPH.INITGRAPH_0077', examples\chessboard.pas), line = 51
	inx
	mva #$18 :STACKORIGIN,x
	jsr GRAPH.INITGRAPH_0077

; optimize OK (examples\chessboard.pas), line = 52

	mva #$01 COL1

; optimize OK (examples\chessboard.pas), line = 53

	mva #$0B COL2

; optimize OK (examples\chessboard.pas), line = 54

	mva #$0C COLB

; optimize OK (examples\chessboard.pas), line = 55

	mva #$00 RTCLOCK

; --- WhileProlog
	jmp l_0172
l_0173

; optimize FAIL ('DRAWBOARDPROC', examples\chessboard.pas), line = 57
	jsr DRAWBOARDPROC

; optimize FAIL (0, examples\chessboard.pas), line = 58
	inc I
l_0172

; optimize OK (examples\chessboard.pas), line = 56

	lda RTCLOCK
	cmp #$96
	jcc l_0173

; optimize OK (examples\chessboard.pas), line = 60

	mva RTCLOCK STOP

; optimize FAIL ('GRAPH.INITGRAPH_0077', examples\chessboard.pas), line = 61
	inx
	mva #$00 :STACKORIGIN,x
	jsr GRAPH.INITGRAPH_0077

; optimize FAIL (100, examples\chessboard.pas), line = 62
	@printSTRING #CODEORIGIN+$0000
	@print #$9B
	@print #$20
	lda I
	jsr @printBYTE._a
	@printSTRING #CODEORIGIN+$0002

; --- WhileProlog
l_01A3

; optimize OK (examples\chessboard.pas), line = 63

	lda CH
	cmp #$FF
	jeq l_01A3

; ------------------------------------------------------------

I	= DATAORIGIN+$0030

@VarData	= I
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl
l_0016

; optimize FAIL ('MAINPROC', examples\chessboard.pas), line = 68
	jsr MAINPROC

; ------------------------------------------------------------

CH	= $02FC
RTCLOCK	= $14
SAVMSC	= $58
COL1	= $02C5
COL2	= $02C6
COLB	= $02C8
STOP	= DATAORIGIN+$002A
@exit

@halt	ldx #0
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.endif

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	eif

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	eif

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	eif

	.ifdef MAIN.TYPES.@UnitInit
	jsr MAIN.TYPES.@UnitInit
	eif

	.ifdef MAIN.GRAPH.@UnitInit
	jsr MAIN.GRAPH.@UnitInit
	eif
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.TYPES) > 0
	.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
	eif

	ift .SIZEOF(MAIN.GRAPH) > 0
	.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',*-1

; ------------------------------------------------------------

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $27 $00  $00 $00 $17

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 49

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $00 $00 $0B $20 $69 $74 $65 $72  $61 $74 $69 $6F $6E $73 $00
.endm

	end
