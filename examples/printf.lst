mads 2.1.0 build 4 (27 Oct 19)
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $20E3..$2295
    97
    98 				; ------------------------------------------------------------
    99
   100 2295			START
   101 2295 BA				tsx
   102 2296 8E 70 25			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 0030			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 2589			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 2299 A2 D0			ldx #256-VLEN
   115 229B A9 00			lda #0
   116 229D 9D B9 24 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   119 					eif
   120
   121 22A3 A2 0F			ldx #$0f
   122 22A5 BD 40 03 9D 73 25 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 22AE E8				inx		; X = 0 !!!
   125 22AF 86 8E			stx bp		; lo BP = 0
   126
   127 22B1				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: printf.a65]
   128
   129 22B1			.local	MAIN						; PROCEDURE
   130
   131 22B1 4C 6C 25			jmp l_00EA
   132
   133 				; ------------------------------------------------------------
   134
   135 22B4			.local	SYSTEM						; UNIT
   136
   137 22B4			.local	HEXSTR						; FUNCTION | ASSEMBLER | REGISTER
   138
   139 				; ------------------------------------------------------------
   140
   141 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   142 				; as Pointer
   143 22B4 B5 98 85 8A			mva :STACKORIGIN,x DIGITS
   144 22B8 CA				dex						; sub bx, 1
   145
   146 				; ------------------------------------------------------------
   147
   148 				; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
   149 				; as Pointer
   150 22B9 B5 98 85 86			mva :STACKORIGIN,x VALUE
   151 22BD B5 A8 85 87			mva :STACKORIGIN+STACKWIDTH,x VALUE+1
   152 22C1 B5 B8 85 88			mva :STACKORIGIN+STACKWIDTH*2,x VALUE+2
   153 22C5 B5 C8 85 89			mva :STACKORIGIN+STACKWIDTH*3,x VALUE+3
   154 22C9 CA				dex						; sub bx, 1
   155
   156 				; ---------------------  ASM Block 003  ---------------------
   157
   158 22CA 8A 48			txa:pha
   159
   160 22CC 20 2A 22			jsr @hexStr
   161
   162 				;	@move #@buf Result #33
   163 22CF A0 DF			ldy #256-33
   164 22D1 B9 21 03 99 AF 24 + 	mva:rne @buf+33-256,y adr.Result+33-256,y+	
   165
   166 22DA 68 AA			pla:tax
   167
   168 22DC			@exit
   169
   170 				; ------------------------------------------------------------
   171
   172 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   173 				; as Pointer
   174
   175 22DC E8				inx						; add bx, 1
   176 22DD AD E8 22 95 98		mva RESULT :STACKORIGIN,x
   177 22E2 AD E9 22 95 A8		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   178
   179 					.ifdef @new
   180 					@FreeMem #@VarData #@VarDataSize
   181 					eif
   182
   183 				; ------------------------------------------------------------
   184
   185 = 0086			VALUE	= edx
   186 = 008A			DIGITS	= ecx
   187 = 258E			adr.RESULT	= DATAORIGIN+$000B
   188 22E7			.var RESULT	= adr.RESULT .word
   189
   190 = 22E8			@VarData	= RESULT
   191 = 0021			@VarDataSize	= 33
   192
   193 22E7 60				rts						; ret
   194 = 22E8 8E 25		RESULT
   194 				.endl
   195
   196 				; ------------------------------------------------------------
   197
   198 = 0648			M_PI_2	= $0648
   199 = 0192			D_PI_2	= $0192
   200 = 0004			D_PI_180	= $0004
   201 = 0000			MGTIA	= $0000
   202 = 0080			MVBXE	= $0080
   203 = 0000			VBXE_XDLADR	= $0000
   204 = 0100			VBXE_BCBADR	= $0100
   205 = 1000			VBXE_MAPADR	= $1000
   206 = 5000			VBXE_OVRADR	= $5000
   207 = B000			VBXE_WINDOW	= $B000
   208 = 0000			IDLI	= $0000
   209 = 0001			IVBL	= $0001
   210 = 00FE			CH_DELCHR	= $00FE
   211 = 009B			CH_ENTER	= $009B
   212 = 001B			CH_ESC	= $001B
   213 = 001C			CH_CURS_UP	= $001C
   214 = 001D			CH_CURS_DOWN	= $001D
   215 = 001E			CH_CURS_LEFT	= $001E
   216 = 001F			CH_CURS_RIGHT	= $001F
   217 = 007F			CH_TAB	= $007F
   218 = 009B			CH_EOL	= $009B
   219 = 007D			CH_CLR	= $007D
   220 = 00FD			CH_BELL	= $00FD
   221 = 007E			CH_DEL	= $007E
   222 = 009C			CH_DELLINE	= $009C
   223 = 009D			CH_INSLINE	= $009D
   224 = 0000			COLOR_BLACK	= $0000
   225 = 000E			COLOR_WHITE	= $000E
   226 = 0032			COLOR_RED	= $0032
   227 = 0096			COLOR_CYAN	= $0096
   228 = 0068			COLOR_VIOLET	= $0068
   229 = 00C4			COLOR_GREEN	= $00C4
   230 = 0074			COLOR_BLUE	= $0074
   231 = 00EE			COLOR_YELLOW	= $00EE
   232 = 0028			COLOR_ORANGE	= $0028
   233 = 00E4			COLOR_BROWN	= $00E4
   234 = 003C			COLOR_LIGHTRED	= $003C
   235 = 0004			COLOR_GRAY1	= $0004
   236 = 0006			COLOR_GRAY2	= $0006
   237 = 000A			COLOR_GRAY3	= $000A
   238 = 00CC			COLOR_LIGHTGREEN	= $00CC
   239 = 007C			COLOR_LIGHTBLUE	= $007C
   240 = 0004			FMOPENREAD	= $0004
   241 = 0008			FMOPENWRITE	= $0008
   242 = 0009			FMOPENAPPEND	= $0009
   243 = 000C			FMOPENREADWRITE	= $000C
   244 = 2583			SCREENWIDTH	= DATAORIGIN+$0000
   245 = 2585			SCREENHEIGHT	= DATAORIGIN+$0002
   246 = 2587			DATESEPARATOR	= DATAORIGIN+$0004
   247 = D014			TVSYSTEM	= $D014
   248 = 02C0			adr.PALETTE	= $02C0
   249 22EA			.var PALETTE	= adr.PALETTE .word
   250 = D012			adr.HPALETTE	= $D012
   251 22EA			.var HPALETTE	= adr.HPALETTE .word
   252 = 2588			FILEMODE	= DATAORIGIN+$0005
   253 = 2589			SCREENMODE	= DATAORIGIN+$0006
   254 = 258A			IORESULT	= DATAORIGIN+$0007
   255 = 258B			EOLN	= DATAORIGIN+$0008
   256 = 258C			RNDSEED	= DATAORIGIN+$0009
   257
   258 = 22EA C0 02		PALETTE
   258 = 22EC 12 D0		HPALETTE
   258 				.endl							; UNIT SYSTEM
   259
   260 				; ------------------------------------------------------------
   261
   262 22EE			.local	DOS						; UNIT
   263
   264 				; ------------------------------------------------------------
   265
   266 = D014			PALNTSC	= $D014
   267
   268 				.endl							; UNIT DOS
   269
   270 				; ------------------------------------------------------------
   271
   272 22EE			.local	STRUTILS					; UNIT
   273
   274 				; ------------------------------------------------------------
   275
   276 				.endl							; UNIT STRUTILS
   277
   278 				; ------------------------------------------------------------
   279
   280 22EE			.local	SYSUTILS					; UNIT
   281
   282 				; ------------------------------------------------------------
   283
   284 = 0001			FAREADONLY	= $0001
   285 = 0002			FAHIDDEN	= $0002
   286 = 0004			FASYSFILE	= $0004
   287 = 0008			FAVOLUMEID	= $0008
   288 = 0010			FADIRECTORY	= $0010
   289 = 0020			FAARCHIVE	= $0020
   290 = 003F			FAANYFILE	= $003F
   291
   292 				.endl							; UNIT SYSUTILS
   293
   294 				; ------------------------------------------------------------
   295
   296 22EE			.local	ATARI						; UNIT
   297
   298 				; ------------------------------------------------------------
   299
   300 = 0012			RTCLOK	= $0012
   301 = 004D			ATRACT	= $004D
   302 = 0052			LMARGIN	= $0052
   303 = 0053			RMARGIN	= $0053
   304 = 0054			ROWCRS	= $0054
   305 = 0055			COLCRS	= $0055
   306 = 0057			DINDEX	= $0057
   307 = 0058			SAVMSC	= $0058
   308 = 006A			RAMTOP	= $006A
   309 = 0200			VDSLST	= $0200
   310 = 0230			SDLSTL	= $0230
   311 = 0290			TXTROW	= $0290
   312 = 0291			TXTCOL	= $0291
   313 = 0293			TINDEX	= $0293
   314 = 0294			TXTMSC	= $0294
   315 = 022F			SDMCTL	= $022F
   316 = 026F			GPRIOR	= $026F
   317 = 02F0			CRSINH	= $02F0
   318 = 02F3			CHACT	= $02F3
   319 = 02F4			CHBAS	= $02F4
   320 = 02FC			CH	= $02FC
   321 = 02C0			PCOLR0	= $02C0
   322 = 02C1			PCOLR1	= $02C1
   323 = 02C2			PCOLR2	= $02C2
   324 = 02C3			PCOLR3	= $02C3
   325 = 02C4			COLOR0	= $02C4
   326 = 02C5			COLOR1	= $02C5
   327 = 02C6			COLOR2	= $02C6
   328 = 02C7			COLOR3	= $02C7
   329 = 02C8			COLOR4	= $02C8
   330 = 02C8			COLBAKS	= $02C8
   331 = D000			HPOSP0	= $D000
   332 = D001			HPOSP1	= $D001
   333 = D002			HPOSP2	= $D002
   334 = D003			HPOSP3	= $D003
   335 = D004			HPOSM0	= $D004
   336 = D005			HPOSM1	= $D005
   337 = D006			HPOSM2	= $D006
   338 = D007			HPOSM3	= $D007
   339 = D008			SIZEP0	= $D008
   340 = D009			SIZEP1	= $D009
   341 = D00A			SIZEP2	= $D00A
   342 = D00B			SIZEP3	= $D00B
   343 = D00C			SIZEM	= $D00C
   344 = D00D			GRAFP0	= $D00D
   345 = D00E			GRAFP1	= $D00E
   346 = D00F			GRAFP2	= $D00F
   347 = D010			GRAFP3	= $D010
   348 = D011			GRAFM	= $D011
   349 = D004			P0PF	= $D004
   350 = D014			PAL	= $D014
   351 = D012			COLPM0	= $D012
   352 = D013			COLPM1	= $D013
   353 = D014			COLPM2	= $D014
   354 = D015			COLPM3	= $D015
   355 = D016			COLPF0	= $D016
   356 = D017			COLPF1	= $D017
   357 = D018			COLPF2	= $D018
   358 = D019			COLPF3	= $D019
   359 = D01A			COLBK	= $D01A
   360 = D01B			PRIOR	= $D01B
   361 = D01D			GRACTL	= $D01D
   362 = D01E			HITCLR	= $D01E
   363 = D200			AUDF1	= $D200
   364 = D201			AUDC1	= $D201
   365 = D202			AUDF2	= $D202
   366 = D203			AUDC2	= $D203
   367 = D204			AUDF3	= $D204
   368 = D205			AUDC3	= $D205
   369 = D206			AUDF4	= $D206
   370 = D207			AUDC4	= $D207
   371 = D208			AUDCTL	= $D208
   372 = D20F			SKSTAT	= $D20F
   373 = D301			PORTB	= $D301
   374 = D400			DMACTL	= $D400
   375 = D401			CHACTL	= $D401
   376 = D402			DLISTL	= $D402
   377 = D404			HSCROL	= $D404
   378 = D405			VSCROL	= $D405
   379 = D407			PMBASE	= $D407
   380 = D409			CHBASE	= $D409
   381 = D40A			WSYNC	= $D40A
   382 = D40B			VCOUNT	= $D40B
   383 = D40C			PENH	= $D40C
   384 = D40D			PENV	= $D40D
   385 = D40E			NMIEN	= $D40E
   386
   387 				.endl							; UNIT ATARI
   388
   389 				; ------------------------------------------------------------
   390
   391 22EE			.local	CRT						; UNIT
   392
   393 22EE			.local	READKEY						; FUNCTION | ASSEMBLER
   394
   395 				; ---------------------  ASM Block 063  ---------------------
   396
   397 22EE 8A 48			txa:pha
   398
   399 22F0 20 85 22			@GetKey
   400
   401 22F3 8D B0 25			sta Result
   402
   403 22F6 68 AA			pla:tax
   404
   405 22F8			@exit
   406
   407 				; ------------------------------------------------------------
   408
   409 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   410 				; as Pointer
   411
   412 22F8 E8				inx						; add bx, 1
   413 22F9 AD B0 25 95 98		mva RESULT :STACKORIGIN,x
   414
   415 					.ifdef @new
   416 					@FreeMem #@VarData #@VarDataSize
   417 					eif
   418
   419 				; ------------------------------------------------------------
   420
   421 = 25B0			RESULT	= DATAORIGIN+$002D
   422
   423 = 25B0			@VarData	= RESULT
   424 = 0001			@VarDataSize	= 1
   425
   426 22FE 60				rts						; ret
   427 				.endl
   428
   429 				; ------------------------------------------------------------
   430
   431 = 25AF			TEXTATTR	= DATAORIGIN+$002C
   432 = D01F			CONSOL	= $D01F
   433 = 0000			CN_START_SELECT_OPTION	= $0000
   434 = 0001			CN_SELECT_OPTION	= $0001
   435 = 0002			CN_START_OPTION	= $0002
   436 = 0003			CN_OPTION	= $0003
   437 = 0004			CN_START_SELECT	= $0004
   438 = 0005			CN_SELECT	= $0005
   439 = 0006			CN_START	= $0006
   440 = 0007			CN_NONE	= $0007
   441 = 0000			BW40	= $0000
   442 = 0001			CO40	= $0001
   443 = 0002			BW80	= $0002
   444 = 0003			CO80	= $0003
   445 = 0007			MONO	= $0007
   446 = 0001			C40	= $0001
   447 = 0003			C80	= $0003
   448 = 0000			BLACK	= $0000
   449 = 0001			BLUE	= $0001
   450 = 0002			GREEN	= $0002
   451 = 0003			CYAN	= $0003
   452 = 0004			RED	= $0004
   453 = 0005			MAGENTA	= $0005
   454 = 0006			BROWN	= $0006
   455 = 0007			LIGHTGRAY	= $0007
   456 = 0008			DARKGRAY	= $0008
   457 = 0009			LIGHTBLUE	= $0009
   458 = 000A			LIGHTGREEN	= $000A
   459 = 000B			LIGHTCYAN	= $000B
   460 = 000C			LIGHTRED	= $000C
   461 = 000D			LIGHTMAGENTA	= $000D
   462 = 000E			YELLOW	= $000E
   463 = 000F			WHITE	= $000F
   464 = 0080			BLINK	= $0080
   465
   466 				.endl							; UNIT CRT
   467
   468 22FF			.local	MAINPROC					; PROCEDURE
   469
   470 				; optimize FAIL (100, examples\printf.pas), line = 18
   471 					@print #$7D
   471 				 LDY# $7D\ JSR @PRINT
   471 22FF A0 7D		 LDY# $7D
   471 2301 20 1F 21		 JSR @PRINT
   472
   473 				; optimize FAIL (100, examples\printf.pas), line = 19
   474 					@printSTRING #CODEORIGIN+$000D
   474 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   474 2304 A0 20		 LDY> CODEORIGIN+$000D
   474 2306 A9 0D		 LDA< CODEORIGIN+$000D
   474 2308 20 28 21		 JSR @PRINTSTRING
   475 230B 20 1A 21			@printEOL
   476
   477 				; optimize FAIL (100, examples\printf.pas), line = 20
   478 					@printSTRING #CODEORIGIN+$001F
   478 				 LDY> CODEORIGIN+$001F\ LDA< CODEORIGIN+$001F\ JSR @PRINTSTRING
   478 230E A0 20		 LDY> CODEORIGIN+$001F
   478 2310 A9 1F		 LDA< CODEORIGIN+$001F
   478 2312 20 28 21		 JSR @PRINTSTRING
   479 2315 20 1A 21			@printEOL
   480
   481 				; optimize FAIL (100, examples\printf.pas), line = 21
   482 					@printSTRING #CODEORIGIN+$002C
   482 				 LDY> CODEORIGIN+$002C\ LDA< CODEORIGIN+$002C\ JSR @PRINTSTRING
   482 2318 A0 20		 LDY> CODEORIGIN+$002C
   482 231A A9 2C		 LDA< CODEORIGIN+$002C
   482 231C 20 28 21		 JSR @PRINTSTRING
   483 231F 20 1A 21			@printEOL
   484
   485 				; optimize OK (examples\printf.pas), line = 22
   486
   487 2322 A9 78 8D B1 25		mva #$78 X
   488
   489 				; optimize OK (examples\printf.pas), line = 23
   490
   491 2327 A9 80			lda #$80
   492 2329 8D B2 25			sta Y
   493 232C A0 FF			ldy #$FF
   494 232E A9 F3			lda #$F3
   495 2330 8D B3 25			sta Y+1
   496 2333 8C B4 25			sty Y+2
   497 2336 8C B5 25			sty Y+3
   498
   499 				; optimize OK (examples\printf.pas), line = 24
   500
   501 2339 A9 E9 8D B6 25		mva #$E9 Z
   502 233E A9 FD 8D B7 25		mva #$FD Z+1
   503
   504 				; optimize FAIL (100, examples\printf.pas), line = 25
   505 					@printSTRING #CODEORIGIN+$002E
   505 				 LDY> CODEORIGIN+$002E\ LDA< CODEORIGIN+$002E\ JSR @PRINTSTRING
   505 2343 A0 20		 LDY> CODEORIGIN+$002E
   505 2345 A9 2E		 LDA< CODEORIGIN+$002E
   505 2347 20 28 21		 JSR @PRINTSTRING
   506 					@print #$9B
   506 				 LDY# $9B\ JSR @PRINT
   506 234A A0 9B		 LDY# $9B
   506 234C 20 1F 21		 JSR @PRINT
   507 					@printSTRING #CODEORIGIN+$0040
   507 				 LDY> CODEORIGIN+$0040\ LDA< CODEORIGIN+$0040\ JSR @PRINTSTRING
   507 234F A0 20		 LDY> CODEORIGIN+$0040
   507 2351 A9 40		 LDA< CODEORIGIN+$0040
   507 2353 20 28 21		 JSR @PRINTSTRING
   508 2356 E8				inx
   509 2357 AD B1 25 95 98		mva X :STACKORIGIN,x
   510 235C 20 A6 21			jsr @printBYTE
   511 235F CA				dex
   512 					@printSTRING #CODEORIGIN+$0044
   512 				 LDY> CODEORIGIN+$0044\ LDA< CODEORIGIN+$0044\ JSR @PRINTSTRING
   512 2360 A0 20		 LDY> CODEORIGIN+$0044
   512 2362 A9 44		 LDA< CODEORIGIN+$0044
   512 2364 20 28 21		 JSR @PRINTSTRING
   513 2367 E8				inx
   514 2368 AD B2 25 95 98		mva Y :STACKORIGIN,x
   515 236D AD B3 25 95 A8		mva Y+1 :STACKORIGIN+STACKWIDTH,x
   516 2372 AD B4 25 95 B8		mva Y+2 :STACKORIGIN+STACKWIDTH*2,x
   517 2377 AD B5 25 95 C8		mva Y+3 :STACKORIGIN+STACKWIDTH*3,x
   518 237C 20 90 21			jsr @printINT
   519 237F CA				dex
   520 					@printSTRING #CODEORIGIN+$0049
   520 				 LDY> CODEORIGIN+$0049\ LDA< CODEORIGIN+$0049\ JSR @PRINTSTRING
   520 2380 A0 20		 LDY> CODEORIGIN+$0049
   520 2382 A9 49		 LDA< CODEORIGIN+$0049
   520 2384 20 28 21		 JSR @PRINTSTRING
   521 2387 E8				inx
   522 2388 AD B6 25 95 98		mva Z :STACKORIGIN,x
   523 238D AD B7 25 95 A8		mva Z+1 :STACKORIGIN+STACKWIDTH,x
   524 2392 20 A0 21			jsr @printWORD
   525 2395 CA				dex
   526 					@print #$2E
   526 				 LDY# $2E\ JSR @PRINT
   526 2396 A0 2E		 LDY# $2E
   526 2398 20 1F 21		 JSR @PRINT
   527 					@print #$9B
   527 				 LDY# $9B\ JSR @PRINT
   527 239B A0 9B		 LDY# $9B
   527 239D 20 1F 21		 JSR @PRINT
   528 					@printSTRING #CODEORIGIN+$002B
   528 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   528 23A0 A0 20		 LDY> CODEORIGIN+$002B
   528 23A2 A9 2B		 LDA< CODEORIGIN+$002B
   528 23A4 20 28 21		 JSR @PRINTSTRING
   529
   530 				; optimize FAIL (100, examples\printf.pas), line = 26
   531 					@printSTRING #CODEORIGIN+$002B
   531 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   531 23A7 A0 20		 LDY> CODEORIGIN+$002B
   531 23A9 A9 2B		 LDA< CODEORIGIN+$002B
   531 23AB 20 28 21		 JSR @PRINTSTRING
   532 					@print #$9B
   532 				 LDY# $9B\ JSR @PRINT
   532 23AE A0 9B		 LDY# $9B
   532 23B0 20 1F 21		 JSR @PRINT
   533 					@printSTRING #CODEORIGIN+$004E
   533 				 LDY> CODEORIGIN+$004E\ LDA< CODEORIGIN+$004E\ JSR @PRINTSTRING
   533 23B3 A0 20		 LDY> CODEORIGIN+$004E
   533 23B5 A9 4E		 LDA< CODEORIGIN+$004E
   533 23B7 20 28 21		 JSR @PRINTSTRING
   534
   535 				; optimize FAIL (100, examples\printf.pas), line = 27
   536 					@printSTRING #CODEORIGIN+$002B
   536 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   536 23BA A0 20		 LDY> CODEORIGIN+$002B
   536 23BC A9 2B		 LDA< CODEORIGIN+$002B
   536 23BE 20 28 21		 JSR @PRINTSTRING
   537 					@print #$25
   537 				 LDY# $25\ JSR @PRINT
   537 23C1 A0 25		 LDY# $25
   537 23C3 20 1F 21		 JSR @PRINT
   538
   539 				; optimize FAIL (100, examples\printf.pas), line = 28
   540 					@printSTRING #CODEORIGIN+$002B
   540 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   540 23C6 A0 20		 LDY> CODEORIGIN+$002B
   540 23C8 A9 2B		 LDA< CODEORIGIN+$002B
   540 23CA 20 28 21		 JSR @PRINTSTRING
   541 					@print #$9B
   541 				 LDY# $9B\ JSR @PRINT
   541 23CD A0 9B		 LDY# $9B
   541 23CF 20 1F 21		 JSR @PRINT
   542 					@printSTRING #CODEORIGIN+$002B
   542 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   542 23D2 A0 20		 LDY> CODEORIGIN+$002B
   542 23D4 A9 2B		 LDA< CODEORIGIN+$002B
   542 23D6 20 28 21		 JSR @PRINTSTRING
   543 					@printSTRING #CODEORIGIN+$005E
   543 				 LDY> CODEORIGIN+$005E\ LDA< CODEORIGIN+$005E\ JSR @PRINTSTRING
   543 23D9 A0 20		 LDY> CODEORIGIN+$005E
   543 23DB A9 5E		 LDA< CODEORIGIN+$005E
   543 23DD 20 28 21		 JSR @PRINTSTRING
   544
   545 				; optimize FAIL (100, examples\printf.pas), line = 29
   546 					@printSTRING #CODEORIGIN+$002B
   546 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   546 23E0 A0 20		 LDY> CODEORIGIN+$002B
   546 23E2 A9 2B		 LDA< CODEORIGIN+$002B
   546 23E4 20 28 21		 JSR @PRINTSTRING
   547 					@print #$9B
   547 				 LDY# $9B\ JSR @PRINT
   547 23E7 A0 9B		 LDY# $9B
   547 23E9 20 1F 21		 JSR @PRINT
   548 					@printSTRING #CODEORIGIN+$0066
   548 				 LDY> CODEORIGIN+$0066\ LDA< CODEORIGIN+$0066\ JSR @PRINTSTRING
   548 23EC A0 20		 LDY> CODEORIGIN+$0066
   548 23EE A9 66		 LDA< CODEORIGIN+$0066
   548 23F0 20 28 21		 JSR @PRINTSTRING
   549 					@print #$25
   549 				 LDY# $25\ JSR @PRINT
   549 23F3 A0 25		 LDY# $25
   549 23F5 20 1F 21		 JSR @PRINT
   550
   551 				; optimize FAIL (100, examples\printf.pas), line = 30
   552 					@printSTRING #CODEORIGIN+$002B
   552 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   552 23F8 A0 20		 LDY> CODEORIGIN+$002B
   552 23FA A9 2B		 LDA< CODEORIGIN+$002B
   552 23FC 20 28 21		 JSR @PRINTSTRING
   553 					@print #$9B
   553 				 LDY# $9B\ JSR @PRINT
   553 23FF A0 9B		 LDY# $9B
   553 2401 20 1F 21		 JSR @PRINT
   554 					@printSTRING #CODEORIGIN+$006E
   554 				 LDY> CODEORIGIN+$006E\ LDA< CODEORIGIN+$006E\ JSR @PRINTSTRING
   554 2404 A0 20		 LDY> CODEORIGIN+$006E
   554 2406 A9 6E		 LDA< CODEORIGIN+$006E
   554 2408 20 28 21		 JSR @PRINTSTRING
   555 					@printSTRING #CODEORIGIN+$007E
   555 				 LDY> CODEORIGIN+$007E\ LDA< CODEORIGIN+$007E\ JSR @PRINTSTRING
   555 240B A0 20		 LDY> CODEORIGIN+$007E
   555 240D A9 7E		 LDA< CODEORIGIN+$007E
   555 240F 20 28 21		 JSR @PRINTSTRING
   556
   557 				; optimize FAIL (100, examples\printf.pas), line = 31
   558 					@printSTRING #CODEORIGIN+$002B
   558 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   558 2412 A0 20		 LDY> CODEORIGIN+$002B
   558 2414 A9 2B		 LDA< CODEORIGIN+$002B
   558 2416 20 28 21		 JSR @PRINTSTRING
   559 					@print #$9B
   559 				 LDY# $9B\ JSR @PRINT
   559 2419 A0 9B		 LDY# $9B
   559 241B 20 1F 21		 JSR @PRINT
   560 					@printSTRING #CODEORIGIN+$002B
   560 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   560 241E A0 20		 LDY> CODEORIGIN+$002B
   560 2420 A9 2B		 LDA< CODEORIGIN+$002B
   560 2422 20 28 21		 JSR @PRINTSTRING
   561 					@print #$9B
   561 				 LDY# $9B\ JSR @PRINT
   561 2425 A0 9B		 LDY# $9B
   561 2427 20 1F 21		 JSR @PRINT
   562 					@printSTRING #CODEORIGIN+$0096
   562 				 LDY> CODEORIGIN+$0096\ LDA< CODEORIGIN+$0096\ JSR @PRINTSTRING
   562 242A A0 20		 LDY> CODEORIGIN+$0096
   562 242C A9 96		 LDA< CODEORIGIN+$0096
   562 242E 20 28 21		 JSR @PRINTSTRING
   563 2431 E8				inx
   564 2432 AD B1 25 95 98		mva X :STACKORIGIN,x
   565 2437 20 A6 21			jsr @printBYTE
   566 243A CA				dex
   567 					@print #$3D
   567 				 LDY# $3D\ JSR @PRINT
   567 243B A0 3D		 LDY# $3D
   567 243D 20 1F 21		 JSR @PRINT
   568 					@print #$24
   568 				 LDY# $24\ JSR @PRINT
   568 2440 A0 24		 LDY# $24
   568 2442 20 1F 21		 JSR @PRINT
   569 2445 E8				inx
   570 2446 AD B1 25 95 98		mva X :STACKORIGIN,x
   571 244B 20 F7 20			jsr @expandToCARD.BYTE
   572 244E E8				inx
   573 244F A9 04 95 98			mva #$04 :STACKORIGIN,x
   574 2453 20 B4 22			jsr SYSTEM.HEXSTR
   575 2456 B5 98			lda :STACKORIGIN,x
   576 2458 B4 A8			ldy :STACKORIGIN+STACKWIDTH,x
   577 245A 20 28 21			jsr @printSTRING
   578 245D CA				dex
   579 					@printSTRING #CODEORIGIN+$002B
   579 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   579 245E A0 20		 LDY> CODEORIGIN+$002B
   579 2460 A9 2B		 LDA< CODEORIGIN+$002B
   579 2462 20 28 21		 JSR @PRINTSTRING
   580
   581 				; optimize FAIL (100, examples\printf.pas), line = 32
   582 					@printSTRING #CODEORIGIN+$002B
   582 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   582 2465 A0 20		 LDY> CODEORIGIN+$002B
   582 2467 A9 2B		 LDA< CODEORIGIN+$002B
   582 2469 20 28 21		 JSR @PRINTSTRING
   583 					@print #$9B
   583 				 LDY# $9B\ JSR @PRINT
   583 246C A0 9B		 LDY# $9B
   583 246E 20 1F 21		 JSR @PRINT
   584 					@printSTRING #CODEORIGIN+$00A5
   584 				 LDY> CODEORIGIN+$00A5\ LDA< CODEORIGIN+$00A5\ JSR @PRINTSTRING
   584 2471 A0 20		 LDY> CODEORIGIN+$00A5
   584 2473 A9 A5		 LDA< CODEORIGIN+$00A5
   584 2475 20 28 21		 JSR @PRINTSTRING
   585 2478 E8				inx
   586 2479 AD B2 25 95 98		mva Y :STACKORIGIN,x
   587 247E AD B3 25 95 A8		mva Y+1 :STACKORIGIN+STACKWIDTH,x
   588 2483 AD B4 25 95 B8		mva Y+2 :STACKORIGIN+STACKWIDTH*2,x
   589 2488 AD B5 25 95 C8		mva Y+3 :STACKORIGIN+STACKWIDTH*3,x
   590 248D 20 90 21			jsr @printINT
   591 2490 CA				dex
   592 					@print #$3D
   592 				 LDY# $3D\ JSR @PRINT
   592 2491 A0 3D		 LDY# $3D
   592 2493 20 1F 21		 JSR @PRINT
   593 					@print #$24
   593 				 LDY# $24\ JSR @PRINT
   593 2496 A0 24		 LDY# $24
   593 2498 20 1F 21		 JSR @PRINT
   594 249B E8				inx
   595 249C AD B2 25 95 98		mva Y :STACKORIGIN,x
   596 24A1 AD B3 25 95 A8		mva Y+1 :STACKORIGIN+STACKWIDTH,x
   597 24A6 AD B4 25 95 B8		mva Y+2 :STACKORIGIN+STACKWIDTH*2,x
   598 24AB AD B5 25 95 C8		mva Y+3 :STACKORIGIN+STACKWIDTH*3,x
   599 24B0 E8				inx
   600 24B1 A9 04 95 98			mva #$04 :STACKORIGIN,x
   601 24B5 20 B4 22			jsr SYSTEM.HEXSTR
   602 24B8 B5 98			lda :STACKORIGIN,x
   603 24BA B4 A8			ldy :STACKORIGIN+STACKWIDTH,x
   604 24BC 20 28 21			jsr @printSTRING
   605 24BF CA				dex
   606 					@printSTRING #CODEORIGIN+$002B
   606 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   606 24C0 A0 20		 LDY> CODEORIGIN+$002B
   606 24C2 A9 2B		 LDA< CODEORIGIN+$002B
   606 24C4 20 28 21		 JSR @PRINTSTRING
   607
   608 				; optimize FAIL (100, examples\printf.pas), line = 33
   609 					@printSTRING #CODEORIGIN+$002B
   609 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   609 24C7 A0 20		 LDY> CODEORIGIN+$002B
   609 24C9 A9 2B		 LDA< CODEORIGIN+$002B
   609 24CB 20 28 21		 JSR @PRINTSTRING
   610 					@print #$9B
   610 				 LDY# $9B\ JSR @PRINT
   610 24CE A0 9B		 LDY# $9B
   610 24D0 20 1F 21		 JSR @PRINT
   611 					@printSTRING #CODEORIGIN+$00B3
   611 				 LDY> CODEORIGIN+$00B3\ LDA< CODEORIGIN+$00B3\ JSR @PRINTSTRING
   611 24D3 A0 20		 LDY> CODEORIGIN+$00B3
   611 24D5 A9 B3		 LDA< CODEORIGIN+$00B3
   611 24D7 20 28 21		 JSR @PRINTSTRING
   612 24DA E8				inx
   613 24DB AD B6 25 95 98		mva Z :STACKORIGIN,x
   614 24E0 AD B7 25 95 A8		mva Z+1 :STACKORIGIN+STACKWIDTH,x
   615 24E5 20 A0 21			jsr @printWORD
   616 24E8 CA				dex
   617 					@print #$3D
   617 				 LDY# $3D\ JSR @PRINT
   617 24E9 A0 3D		 LDY# $3D
   617 24EB 20 1F 21		 JSR @PRINT
   618 					@print #$24
   618 				 LDY# $24\ JSR @PRINT
   618 24EE A0 24		 LDY# $24
   618 24F0 20 1F 21		 JSR @PRINT
   619 24F3 E8				inx
   620 24F4 AD B6 25 95 98		mva Z :STACKORIGIN,x
   621 24F9 AD B7 25 95 A8		mva Z+1 :STACKORIGIN+STACKWIDTH,x
   622 24FE 20 EB 20			jsr @expandToCARD.WORD
   623 2501 E8				inx
   624 2502 A9 04 95 98			mva #$04 :STACKORIGIN,x
   625 2506 20 B4 22			jsr SYSTEM.HEXSTR
   626 2509 B5 98			lda :STACKORIGIN,x
   627 250B B4 A8			ldy :STACKORIGIN+STACKWIDTH,x
   628 250D 20 28 21			jsr @printSTRING
   629 2510 CA				dex
   630 					@printSTRING #CODEORIGIN+$002B
   630 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   630 2511 A0 20		 LDY> CODEORIGIN+$002B
   630 2513 A9 2B		 LDA< CODEORIGIN+$002B
   630 2515 20 28 21		 JSR @PRINTSTRING
   631
   632 				; optimize FAIL (100, examples\printf.pas), line = 34
   633 					@printSTRING #CODEORIGIN+$002B
   633 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   633 2518 A0 20		 LDY> CODEORIGIN+$002B
   633 251A A9 2B		 LDA< CODEORIGIN+$002B
   633 251C 20 28 21		 JSR @PRINTSTRING
   634 					@print #$9B
   634 				 LDY# $9B\ JSR @PRINT
   634 251F A0 9B		 LDY# $9B
   634 2521 20 1F 21		 JSR @PRINT
   635 					@printSTRING #CODEORIGIN+$002B
   635 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   635 2524 A0 20		 LDY> CODEORIGIN+$002B
   635 2526 A9 2B		 LDA< CODEORIGIN+$002B
   635 2528 20 28 21		 JSR @PRINTSTRING
   636 					@print #$9B
   636 				 LDY# $9B\ JSR @PRINT
   636 252B A0 9B		 LDY# $9B
   636 252D 20 1F 21		 JSR @PRINT
   637 					@printSTRING #CODEORIGIN+$00C2
   637 				 LDY> CODEORIGIN+$00C2\ LDA< CODEORIGIN+$00C2\ JSR @PRINTSTRING
   637 2530 A0 20		 LDY> CODEORIGIN+$00C2
   637 2532 A9 C2		 LDA< CODEORIGIN+$00C2
   637 2534 20 28 21		 JSR @PRINTSTRING
   638 					@print #$41
   638 				 LDY# $41\ JSR @PRINT
   638 2537 A0 41		 LDY# $41
   638 2539 20 1F 21		 JSR @PRINT
   639 					@printSTRING #CODEORIGIN+$002B
   639 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   639 253C A0 20		 LDY> CODEORIGIN+$002B
   639 253E A9 2B		 LDA< CODEORIGIN+$002B
   639 2540 20 28 21		 JSR @PRINTSTRING
   640
   641 				; optimize FAIL (100, examples\printf.pas), line = 35
   642 					@printSTRING #CODEORIGIN+$002B
   642 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   642 2543 A0 20		 LDY> CODEORIGIN+$002B
   642 2545 A9 2B		 LDA< CODEORIGIN+$002B
   642 2547 20 28 21		 JSR @PRINTSTRING
   643 					@print #$9B
   643 				 LDY# $9B\ JSR @PRINT
   643 254A A0 9B		 LDY# $9B
   643 254C 20 1F 21		 JSR @PRINT
   644 					@printSTRING #CODEORIGIN+$00D5
   644 				 LDY> CODEORIGIN+$00D5\ LDA< CODEORIGIN+$00D5\ JSR @PRINTSTRING
   644 254F A0 20		 LDY> CODEORIGIN+$00D5
   644 2551 A9 D5		 LDA< CODEORIGIN+$00D5
   644 2553 20 28 21		 JSR @PRINTSTRING
   645 					@print #$31
   645 				 LDY# $31\ JSR @PRINT
   645 2556 A0 31		 LDY# $31
   645 2558 20 1F 21		 JSR @PRINT
   646 					@printSTRING #CODEORIGIN+$002B
   646 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   646 255B A0 20		 LDY> CODEORIGIN+$002B
   646 255D A9 2B		 LDA< CODEORIGIN+$002B
   646 255F 20 28 21		 JSR @PRINTSTRING
   647
   648 				; optimize FAIL ('CRT.READKEY', examples\printf.pas), line = 36
   649 2562 20 EE 22			jsr CRT.READKEY
   650 2565 B5 98 8D B8 25		mva :STACKORIGIN,x KEY
   651 256A CA				dex
   652 256B			@exit
   653 					.ifdef @new
   654 					@FreeMem #@VarData #@VarDataSize
   655 					eif
   656 256B 60				rts						; ret
   657 				.endl
   658 256C			l_00EA
   659
   660 				; optimize FAIL ('MAINPROC', examples\printf.pas), line = 40
   661 256C 20 FF 22			jsr MAINPROC
   662
   663 				; ------------------------------------------------------------
   664
   665 = 25B1			X	= DATAORIGIN+$002E
   666 = 25B2			Y	= DATAORIGIN+$002F
   667 = 25B6			Z	= DATAORIGIN+$0033
   668 = 25B8			KEY	= DATAORIGIN+$0035
   669 256F			@exit
   670
   671 256F A2 00		@halt	ldx #0
   672 2571 9A				txs
   673
   674 2572 60				rts
   675
   676 				; ------------------------------------------------------------
   677
   678 2573 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   679
   680 				; ------------------------------------------------------------
   681
   682 2583			.local	@DEFINES
   683 2583			ATARI
   684 				.endl
   685
   686 				.endl							; MAIN
   687
   688 				; ------------------------------------------------------------
   689 				; ------------------------------------------------------------
   690
   691 				.macro	UNITINITIALIZATION
   692 				
   693 					.ifdef MAIN.SYSTEM.@UnitInit
   694 					jsr MAIN.SYSTEM.@UnitInit
   695 					eif
   696 				
   697 					.ifdef MAIN.DOS.@UnitInit
   698 					jsr MAIN.DOS.@UnitInit
   699 					eif
   700 				
   701 					.ifdef MAIN.STRUTILS.@UnitInit
   702 					jsr MAIN.STRUTILS.@UnitInit
   703 					eif
   704 				
   705 					.ifdef MAIN.SYSUTILS.@UnitInit
   706 					jsr MAIN.SYSUTILS.@UnitInit
   707 					eif
   708 				
   709 					.ifdef MAIN.ATARI.@UnitInit
   710 					jsr MAIN.ATARI.@UnitInit
   711 					eif
   712 				
   713 					.ifdef MAIN.CRT.@UnitInit
   714 					jsr MAIN.CRT.@UnitInit
   715 					eif
   716 				.endm
   717
   718 				; ------------------------------------------------------------
   719
   720 					ift .SIZEOF(MAIN.SYSTEM) > 0
   721 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   721 				SYSTEM: $22B4..$22ED
   722 					eif
   723
   724 					ift .SIZEOF(MAIN.DOS) > 0
   725 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   726 					eif
   727
   728 					ift .SIZEOF(MAIN.STRUTILS) > 0
   729 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   730 					eif
   731
   732 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   733 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   734 					eif
   735
   736 					ift .SIZEOF(MAIN.ATARI) > 0
   737 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   738 					eif
   739
   740 					ift .SIZEOF(MAIN.CRT) > 0
   741 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   741 				CRT: $22EE..$22FE
   742 					eif
   743
   744 					.print 'CODE: ',CODEORIGIN,'..',*-1
   744 				CODE: $2000..$2582
   745
   746 				; ------------------------------------------------------------
   747
   748 2583			DATAORIGIN
   749 2583 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   750
   751 = 0006			VARINITSIZE	= *-DATAORIGIN
   752 = 0036			VARDATASIZE	= 54
   753
   754 = 25B9			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   755
   756 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   756 				DATA: $2583..$25B9
   757
   758 02E0-02E1> 95 22			run START
   759
   760 				; ------------------------------------------------------------
   761
   762 				.macro	STATICDATA
   763 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $10 $45 $66  $66 $65 $63 $74 $75 $73 $20 $65
   764 				.by  $78 $61 $6D $70 $6C $65 $00 $0B  $50 $72 $69 $6E $74 $46 $20 $64  $65 $6D $6F $00 $00 $00 $10 $54
   765 				.by  $68 $65 $20 $6E $75 $6D $62 $65  $72 $73 $20 $61 $72 $65 $3A $00  $02 $78 $3D $00 $03 $2C $79 $3D
   766 				.by  $00 $03 $2C $7A $3D $00 $0E $50  $72 $6F $63 $65 $6E $74 $20 $73  $69 $67 $6E $3A $20 $00 $06 $25
   767 				.by  $61 $66 $74 $65 $72 $00 $06 $62  $65 $66 $6F $72 $65 $00 $0E $50  $72 $6F $63 $65 $6E $74 $20 $73
   768 				.by  $69 $67 $6E $20 $27 $00 $16 $25  $27 $20 $69 $6E $20 $6F $6E $65  $20 $6C $69 $6E $65 $20 $66 $6F
   769 				.by  $72 $6D $61 $74 $21 $00 $0D $48  $45 $58 $20 $78 $20 $28 $42 $59  $54 $45 $29 $20 $00 $0C $48 $45
   770 				.by  $58 $20 $79 $20 $28 $49 $4E $54  $29 $20 $00 $0D $48 $45 $58 $20  $7A $20 $28 $43 $41 $52 $44 $29
   771 				.by  $20 $00 $11 $46 $69 $72 $73 $74  $20 $63 $68 $61 $72 $61 $63 $74  $65 $72 $3A $20 $00 $0C $4E $75
   772 				.by  $6D $62 $65 $72 $20 $6F $6E $65  $3A $20 $00
   773 				.endm
   774
   775 					end
