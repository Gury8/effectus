mads 2.1.0 build 8 (23 Dec 19)
   388 					opt l+
   101
   102 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   102 				ZPAGE: $0080..$00D7
   103
   104 				.print 'RTLIB: ',RTLIB,'..',*-1
   104 				RTLIB: $20E0..$22C9
   105
   106 				; ------------------------------------------------------------
   107
   108 22CA			START
   109 22CA BA				tsx
   110 22CB 8E E7 25			stx MAIN.@halt+1
   111
   112 					.ifdef fmulinit
   113 					fmulinit
   114 					eif
   115
   116 = 0132			VLEN	= VARDATASIZE-VARINITSIZE
   117 = 2602			VADR	= DATAORIGIN+VARINITSIZE
   118
   119 					ift VADR > $BFFF
   120 					ert 'Invalid memory address range ',VADR
   121 					eli (VLEN>0) && (VLEN<=256)
   122 					ldx #256-VLEN
   123 					lda #0
   124 					sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>0
   126 					@fill #VADR #VLEN #0
   126 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   126 22CE A9 02 85 88 A9 26 +  MWA #VADR @FILL.PTR1
   126 22D6 A9 32 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   126 22DE A9 00 85 84		 MVA #0 @FILL.PTR2
   126 22E2 20 3A 21		 JSR @FILL
   127 					eif
   128
   129 					.ifdef MAIN.@DEFINES.ROMOFF
   130 					icl 'atari\romoff.asm'
   131 					.endif
   132
   133 22E5 A9 34 85 82 A9 27 + 	mwa #PROGRAMSTACK psptr
   134
   135 22ED A2 0F			ldx #$0f					; DOS II+/D ParamStr
   136 22EF BD 40 03 9D EA 25 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   137
   138 22F8 E8				inx						; X = 0
   139 22F9 86 90			stx bp						; BP = 0
   140
   141 22FB 8E 08 D2			stx audctl					; reset POKEY
   142 22FE A9 03			lda #3
   143 2300 8D 0F D2			sta skctl
   144
   145 2303 CA				dex						; X = 255
   146
   147 2304				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: printf.a65]
Source: printf.a65
   148
   149 2304			.local	MAIN						; PROCEDURE
   150
   151 2304 4C E3 25			jmp l_00E7
   152
   153 				; ------------------------------------------------------------
   154
   155 2307			.local	SYSTEM						; UNIT
   156
   157 2307			.local	HEXSTR						; FUNCTION | ASSEMBLER | REGISTER
   158
   159 				; ------------------------------------------------------------
   160
   161 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   162 				; as Pointer
   163 2307 B5 98 85 8C			mva :STACKORIGIN,x DIGITS
   164 230B CA				dex
   165
   166 				; ------------------------------------------------------------
   167
   168 				; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
   169 				; as Pointer
   170 230C B5 98 85 88			mva :STACKORIGIN,x VALUE
   171 2310 B5 A8 85 89			mva :STACKORIGIN+STACKWIDTH,x VALUE+1
   172 2314 B5 B8 85 8A			mva :STACKORIGIN+STACKWIDTH*2,x VALUE+2
   173 2318 B5 C8 85 8B			mva :STACKORIGIN+STACKWIDTH*3,x VALUE+3
   174 231C CA				dex
   175
   176 				; ---------------------  ASM Block 000  ---------------------
   177
   178 231D 8A 48			txa:pha
   179
   180 231F 20 82 21			jsr @hexStr
   181
   182 				;	@move #@buf Result #33
   183 2322 A0 DF			ldy #256-33
   184 2324 B9 21 03 99 28 25 + 	mva:rne @buf+33-256,y adr.Result+33-256,y+	
   185
   186 232D 68 AA			pla:tax
   187
   188 232F			@exit
   189
   190 				; ------------------------------------------------------------
   191
   192 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   193 				; as Pointer
   194
   195 232F E8				inx
   196 2330 AD 3B 23 95 98		mva RESULT :STACKORIGIN,x
   197 2335 AD 3C 23 95 A8		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   198
   199 					.ifdef @new
   200 					lda <@VarData
   201 					sta :ztmp
   202 					lda >@VarData
   203 					ldy #@VarDataSize-1
   204 					jmp @FreeMem
   205 					eif
   206
   207 				; ------------------------------------------------------------
   208
   209 = 0088			VALUE	= edx
   210 = 008C			DIGITS	= ecx
   211 = 2607			adr.RESULT	= DATAORIGIN+$000B
   212 233A			.var RESULT	= adr.RESULT .word
   213
   214 = 233B			@VarData	= RESULT
   215 = 0021			@VarDataSize	= 33
   216
   217 233A 60				rts						; ret
   218 = 233B 07 26		RESULT
   218 				.endl
   219
   220 				; ------------------------------------------------------------
   221
   222 = 0101			__PORTB_BANKS	= $0101
   223 = 0648			M_PI_2	= $0648
   224 = 0192			D_PI_2	= $0192
   225 = 0004			D_PI_180	= $04
   226 = 0000			MGTIA	= $00
   227 = 0080			MVBXE	= $80
   228 = 0000			VBXE_XDLADR	= $00
   229 = 0100			VBXE_BCBADR	= $0100
   230 = 1000			VBXE_MAPADR	= $1000
   231 = 5000			VBXE_OVRADR	= $5000
   232 = B000			VBXE_WINDOW	= $B000
   233 = 0000			IDLI	= $00
   234 = 0001			IVBL	= $01
   235 = 00FE			CH_DELCHR	= $FE
   236 = 009B			CH_ENTER	= $9B
   237 = 001B			CH_ESC	= $1B
   238 = 001C			CH_CURS_UP	= $1C
   239 = 001D			CH_CURS_DOWN	= $1D
   240 = 001E			CH_CURS_LEFT	= $1E
   241 = 001F			CH_CURS_RIGHT	= $1F
   242 = 007F			CH_TAB	= $7F
   243 = 009B			CH_EOL	= $9B
   244 = 007D			CH_CLR	= $7D
   245 = 00FD			CH_BELL	= $FD
   246 = 007E			CH_DEL	= $7E
   247 = 009C			CH_DELLINE	= $9C
   248 = 009D			CH_INSLINE	= $9D
   249 = 0000			COLOR_BLACK	= $00
   250 = 000E			COLOR_WHITE	= $0E
   251 = 0032			COLOR_RED	= $32
   252 = 0096			COLOR_CYAN	= $96
   253 = 0068			COLOR_VIOLET	= $68
   254 = 00C4			COLOR_GREEN	= $C4
   255 = 0074			COLOR_BLUE	= $74
   256 = 00EE			COLOR_YELLOW	= $EE
   257 = 0028			COLOR_ORANGE	= $28
   258 = 00E4			COLOR_BROWN	= $E4
   259 = 003C			COLOR_LIGHTRED	= $3C
   260 = 0004			COLOR_GRAY1	= $04
   261 = 0006			COLOR_GRAY2	= $06
   262 = 000A			COLOR_GRAY3	= $0A
   263 = 00CC			COLOR_LIGHTGREEN	= $CC
   264 = 007C			COLOR_LIGHTBLUE	= $7C
   265 = 0004			FMOPENREAD	= $04
   266 = 0008			FMOPENWRITE	= $08
   267 = 0009			FMOPENAPPEND	= $09
   268 = 000C			FMOPENREADWRITE	= $0C
   269 = 25FC			SCREENWIDTH	= DATAORIGIN+$0000
   270 = 25FE			SCREENHEIGHT	= DATAORIGIN+$0002
   271 = 2600			DATESEPARATOR	= DATAORIGIN+$0004
   272 = D014			TVSYSTEM	= $D014
   273 = 02C0			adr.PALETTE	= $02C0
   274 233D			.var PALETTE	= adr.PALETTE .word
   275 = D012			adr.HPALETTE	= $D012
   276 233D			.var HPALETTE	= adr.HPALETTE .word
   277 = 2601			FILEMODE	= DATAORIGIN+$0005
   278 = 2602			GRAPHMODE	= DATAORIGIN+$0006
   279 = 2603			IORESULT	= DATAORIGIN+$0007
   280 = 2604			EOLN	= DATAORIGIN+$0008
   281 = 2605			RNDSEED	= DATAORIGIN+$0009
   282
   283 = 233D C0 02		PALETTE
   283 = 233F 12 D0		HPALETTE
   283 				.endl							; UNIT SYSTEM
   284
   285 				; ------------------------------------------------------------
   286
   287 2341			.local	ATARI						; UNIT
   288
   289 				; ------------------------------------------------------------
   290
   291 = 0012			RTCLOK	= $12
   292 = 004D			ATRACT	= $4D
   293 = 0052			LMARGIN	= $52
   294 = 0053			RMARGIN	= $53
   295 = 0054			ROWCRS	= $54
   296 = 0055			COLCRS	= $55
   297 = 0057			DINDEX	= $57
   298 = 0058			SAVMSC	= $58
   299 = 0062			PALNTS	= $62
   300 = 006A			RAMTOP	= $6A
   301 = 0200			VDSLST	= $0200
   302 = 0230			SDLSTL	= $0230
   303 = 0290			TXTROW	= $0290
   304 = 0291			TXTCOL	= $0291
   305 = 0293			TINDEX	= $0293
   306 = 0294			TXTMSC	= $0294
   307 = 022F			SDMCTL	= $022F
   308 = 026F			GPRIOR	= $026F
   309 = 02F0			CRSINH	= $02F0
   310 = 02F3			CHACT	= $02F3
   311 = 02F4			CHBAS	= $02F4
   312 = 02FC			CH	= $02FC
   313 = 02C0			PCOLR0	= $02C0
   314 = 02C1			PCOLR1	= $02C1
   315 = 02C2			PCOLR2	= $02C2
   316 = 02C3			PCOLR3	= $02C3
   317 = 02C4			COLOR0	= $02C4
   318 = 02C5			COLOR1	= $02C5
   319 = 02C6			COLOR2	= $02C6
   320 = 02C7			COLOR3	= $02C7
   321 = 02C8			COLOR4	= $02C8
   322 = 02C8			COLBAKS	= $02C8
   323 = D000			HPOSP0	= $D000
   324 = D001			HPOSP1	= $D001
   325 = D002			HPOSP2	= $D002
   326 = D003			HPOSP3	= $D003
   327 = D004			HPOSM0	= $D004
   328 = D005			HPOSM1	= $D005
   329 = D006			HPOSM2	= $D006
   330 = D007			HPOSM3	= $D007
   331 = D008			SIZEP0	= $D008
   332 = D009			SIZEP1	= $D009
   333 = D00A			SIZEP2	= $D00A
   334 = D00B			SIZEP3	= $D00B
   335 = D00C			SIZEM	= $D00C
   336 = D00D			GRAFP0	= $D00D
   337 = D00E			GRAFP1	= $D00E
   338 = D00F			GRAFP2	= $D00F
   339 = D010			GRAFP3	= $D010
   340 = D011			GRAFM	= $D011
   341 = D004			P0PF	= $D004
   342 = D014			PAL	= $D014
   343 = D012			COLPM0	= $D012
   344 = D013			COLPM1	= $D013
   345 = D014			COLPM2	= $D014
   346 = D015			COLPM3	= $D015
   347 = D016			COLPF0	= $D016
   348 = D017			COLPF1	= $D017
   349 = D018			COLPF2	= $D018
   350 = D019			COLPF3	= $D019
   351 = D01A			COLBK	= $D01A
   352 = D01B			PRIOR	= $D01B
   353 = D01D			GRACTL	= $D01D
   354 = D01E			HITCLR	= $D01E
   355 = D200			AUDF1	= $D200
   356 = D201			AUDC1	= $D201
   357 = D202			AUDF2	= $D202
   358 = D203			AUDC2	= $D203
   359 = D204			AUDF3	= $D204
   360 = D205			AUDC3	= $D205
   361 = D206			AUDF4	= $D206
   362 = D207			AUDC4	= $D207
   363 = D208			AUDCTL	= $D208
   364 = D20F			SKSTAT	= $D20F
   365 = D301			PORTB	= $D301
   366 = D400			DMACTL	= $D400
   367 = D401			CHACTL	= $D401
   368 = D402			DLISTL	= $D402
   369 = D404			HSCROL	= $D404
   370 = D405			VSCROL	= $D405
   371 = D407			PMBASE	= $D407
   372 = D409			CHBASE	= $D409
   373 = D40A			WSYNC	= $D40A
   374 = D40B			VCOUNT	= $D40B
   375 = D40C			PENH	= $D40C
   376 = D40D			PENV	= $D40D
   377 = D40E			NMIEN	= $D40E
   378
   379 				.endl							; UNIT ATARI
   380
   381 				; ------------------------------------------------------------
   382
   383 2341			.local	CRT						; UNIT
   384
   385 2341			.local	READKEY						; FUNCTION | ASSEMBLER
   386
   387 				; ---------------------  ASM Block 049  ---------------------
   388
   389 2341 8A 48			txa:pha
   390
   391 2343 20 E0 20			@GetKey
   392
   393 2346 8D 29 26			sta Result
   394
   395 2349 68 AA			pla:tax
   396
   397 234B			@exit
   398
   399 				; ------------------------------------------------------------
   400
   401 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   402 				; as Pointer
   403
   404 234B E8				inx
   405 234C AD 29 26 95 98		mva RESULT :STACKORIGIN,x
   406
   407 					.ifdef @new
   408 					lda <@VarData
   409 					sta :ztmp
   410 					lda >@VarData
   411 					ldy #@VarDataSize-1
   412 					jmp @FreeMem
   413 					eif
   414
   415 				; ------------------------------------------------------------
   416
   417 = 2629			RESULT	= DATAORIGIN+$002D
   418
   419 = 2629			@VarData	= RESULT
   420 = 0001			@VarDataSize	= 1
   421
   422 2351 60				rts						; ret
   423 				.endl
   424
   425 				; ------------------------------------------------------------
   426
   427 = 2628			TEXTATTR	= DATAORIGIN+$002C
   428 = D01F			CONSOL	= $D01F
   429 = 0000			CN_START_SELECT_OPTION	= $00
   430 = 0001			CN_SELECT_OPTION	= $01
   431 = 0002			CN_START_OPTION	= $02
   432 = 0003			CN_OPTION	= $03
   433 = 0004			CN_START_SELECT	= $04
   434 = 0005			CN_SELECT	= $05
   435 = 0006			CN_START	= $06
   436 = 0007			CN_NONE	= $07
   437 = 0000			BW40	= $00
   438 = 0001			CO40	= $01
   439 = 0002			BW80	= $02
   440 = 0003			CO80	= $03
   441 = 0007			MONO	= $07
   442 = 0001			C40	= $01
   443 = 0003			C80	= $03
   444 = 0000			BLACK	= $00
   445 = 0001			BLUE	= $01
   446 = 0002			GREEN	= $02
   447 = 0003			CYAN	= $03
   448 = 0004			RED	= $04
   449 = 0005			MAGENTA	= $05
   450 = 0006			BROWN	= $06
   451 = 0007			LIGHTGRAY	= $07
   452 = 0008			DARKGRAY	= $08
   453 = 0009			LIGHTBLUE	= $09
   454 = 000A			LIGHTGREEN	= $0A
   455 = 000B			LIGHTCYAN	= $0B
   456 = 000C			LIGHTRED	= $0C
   457 = 000D			LIGHTMAGENTA	= $0D
   458 = 000E			YELLOW	= $0E
   459 = 000F			WHITE	= $0F
   460 = 0080			BLINK	= $80
   461
   462 				.endl							; UNIT CRT
   463
   464 				; ------------------------------------------------------------
   465
   466 2352			.local	DOS						; UNIT
   467
   468 				; ------------------------------------------------------------
   469
   470 = D014			PALNTSC	= $D014
   471
   472 				.endl							; UNIT DOS
   473
   474 				; ------------------------------------------------------------
   475
   476 2352			.local	STRUTILS					; UNIT
   477
   478 				; ------------------------------------------------------------
   479
   480 				.endl							; UNIT STRUTILS
   481
   482 				; ------------------------------------------------------------
   483
   484 2352			.local	SYSUTILS					; UNIT
   485
   486 				; ------------------------------------------------------------
   487
   488 = 0001			FAREADONLY	= $01
   489 = 0002			FAHIDDEN	= $02
   490 = 0004			FASYSFILE	= $04
   491 = 0008			FAVOLUMEID	= $08
   492 = 0010			FADIRECTORY	= $10
   493 = 0020			FAARCHIVE	= $20
   494 = 003F			FAANYFILE	= $3F
   495
   496 				.endl							; UNIT SYSUTILS
   497
   498 				; ------------------------------------------------------------
   499
   500 2352			.local	CIO						; UNIT
   501
   502 2352			.local	GET						; FUNCTION | ASSEMBLER
   503
   504 				; ------------------------------------------------------------
   505
   506 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   507 				; as Pointer
   508 2352 B5 98 8D 2A 26		mva :STACKORIGIN,x CHN
   509 2357 CA				dex
   510
   511 				; ---------------------  ASM Block 080  ---------------------
   512
   513 2358 8A 48			txa:pha
   514
   515 235A AD 2A 26			lda chn
   516 235D 0A 0A 0A 0A			:4 asl @
   517 2361 AA				tax
   518
   519 2362 A9 07			lda #7		;get char command
   520 2364 9D 42 03			sta iccmd,x
   521
   522 2367 A9 00			lda #$00	;zero out the unused
   523 2369 9D 48 03			sta icbufl,x	;store in accumulator
   524 236C 9D 49 03			sta icbufh,x	;...after CIOV jump
   525
   526 236F				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 236F 20 56 E4				jsr CIOV
Source: printf.a65
   527
   528 2372 8C 03 26			sty MAIN.SYSTEM.IOResult
   529
   530 2375 8D 2B 26			sta Result
   531
   532 2378 68 AA			pla:tax
   533
   534 237A			@exit
   535
   536 				; ------------------------------------------------------------
   537
   538 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   539 				; as Pointer
   540
   541 237A E8				inx
   542 237B AD 2B 26 95 98		mva RESULT :STACKORIGIN,x
   543
   544 					.ifdef @new
   545 					lda <@VarData
   546 					sta :ztmp
   547 					lda >@VarData
   548 					ldy #@VarDataSize-1
   549 					jmp @FreeMem
   550 					eif
   551
   552 				; ------------------------------------------------------------
   553
   554 = 262A			CHN	= DATAORIGIN+$002E
   555 = 262B			RESULT	= DATAORIGIN+$002F
   556
   557 = 262A			@VarData	= CHN
   558 = 0002			@VarDataSize	= 2
   559
   560 2380 60				rts						; ret
   561 				.endl
   562
   563 				; ------------------------------------------------------------
   564
   565 				.endl							; UNIT CIO
   566
   567 2381			.local	MAINPROC					; PROCEDURE
   568
   569 				; optimize FAIL (100, examples\printf.pas), line = 20
   570 					@print #$7D
   570 				 LDY# $7D\ JSR @PRINT
   570 2381 A0 7D		 LDY# $7D
   570 2383 20 CF 21		 JSR @PRINT
   571
   572 				; optimize FAIL (100, examples\printf.pas), line = 21
   573 					@printSTRING #CODEORIGIN+$000D
   573 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   573 2386 A0 20		 LDY> CODEORIGIN+$000D
   573 2388 A9 0D		 LDA< CODEORIGIN+$000D
   573 238A 20 D8 21		 JSR @PRINTSTRING
   574 238D 20 CA 21			@printEOL
   575
   576 				; optimize FAIL (100, examples\printf.pas), line = 22
   577 					@printSTRING #CODEORIGIN+$001F
   577 				 LDY> CODEORIGIN+$001F\ LDA< CODEORIGIN+$001F\ JSR @PRINTSTRING
   577 2390 A0 20		 LDY> CODEORIGIN+$001F
   577 2392 A9 1F		 LDA< CODEORIGIN+$001F
   577 2394 20 D8 21		 JSR @PRINTSTRING
   578 2397 20 CA 21			@printEOL
   579
   580 				; optimize FAIL (100, examples\printf.pas), line = 23
   581 					@printSTRING #CODEORIGIN+$002C
   581 				 LDY> CODEORIGIN+$002C\ LDA< CODEORIGIN+$002C\ JSR @PRINTSTRING
   581 239A A0 20		 LDY> CODEORIGIN+$002C
   581 239C A9 2C		 LDA< CODEORIGIN+$002C
   581 239E 20 D8 21		 JSR @PRINTSTRING
   582 23A1 20 CA 21			@printEOL
   583
   584 				; optimize OK (examples\printf.pas), line = 24
   585
   586 23A4 A9 78 8D 2C 27		mva #$78 X
   587
   588 				; optimize OK (examples\printf.pas), line = 25
   589
   590 23A9 A9 80			lda #$80
   591 23AB 8D 2D 27			sta Y
   592 23AE A0 FF			ldy #$FF
   593 23B0 A9 F3			lda #$F3
   594 23B2 8D 2E 27			sta Y+1
   595 23B5 8C 2F 27			sty Y+2
   596 23B8 8C 30 27			sty Y+3
   597
   598 				; optimize OK (examples\printf.pas), line = 26
   599
   600 23BB A9 E9 8D 31 27		mva #$E9 Z
   601 23C0 A9 FD 8D 32 27		mva #$FD Z+1
   602
   603 				; optimize FAIL (100, examples\printf.pas), line = 27
   604 					@printSTRING #CODEORIGIN+$002E
   604 				 LDY> CODEORIGIN+$002E\ LDA< CODEORIGIN+$002E\ JSR @PRINTSTRING
   604 23C5 A0 20		 LDY> CODEORIGIN+$002E
   604 23C7 A9 2E		 LDA< CODEORIGIN+$002E
   604 23C9 20 D8 21		 JSR @PRINTSTRING
   605 					@print #$9B
   605 				 LDY# $9B\ JSR @PRINT
   605 23CC A0 9B		 LDY# $9B
   605 23CE 20 CF 21		 JSR @PRINT
   606 					@printSTRING #CODEORIGIN+$0040
   606 				 LDY> CODEORIGIN+$0040\ LDA< CODEORIGIN+$0040\ JSR @PRINTSTRING
   606 23D1 A0 20		 LDY> CODEORIGIN+$0040
   606 23D3 A9 40		 LDA< CODEORIGIN+$0040
   606 23D5 20 D8 21		 JSR @PRINTSTRING
   607 23D8 AD 2C 27			lda X
   608 23DB 20 13 22			jsr @printBYTE._a
   609 					@printSTRING #CODEORIGIN+$0044
   609 				 LDY> CODEORIGIN+$0044\ LDA< CODEORIGIN+$0044\ JSR @PRINTSTRING
   609 23DE A0 20		 LDY> CODEORIGIN+$0044
   609 23E0 A9 44		 LDA< CODEORIGIN+$0044
   609 23E2 20 D8 21		 JSR @PRINTSTRING
   610 23E5 E8				inx
   611 23E6 AD 2D 27 95 98		mva Y :STACKORIGIN,x
   612 23EB AD 2E 27 95 A8		mva Y+1 :STACKORIGIN+STACKWIDTH,x
   613 23F0 AD 2F 27 95 B8		mva Y+2 :STACKORIGIN+STACKWIDTH*2,x
   614 23F5 AD 30 27 95 C8		mva Y+3 :STACKORIGIN+STACKWIDTH*3,x
   615 23FA 20 07 22			jsr @printINT
   616 23FD CA				dex
   617 					@printSTRING #CODEORIGIN+$0049
   617 				 LDY> CODEORIGIN+$0049\ LDA< CODEORIGIN+$0049\ JSR @PRINTSTRING
   617 23FE A0 20		 LDY> CODEORIGIN+$0049
   617 2400 A9 49		 LDA< CODEORIGIN+$0049
   617 2402 20 D8 21		 JSR @PRINTSTRING
   618 2405 AD 31 27			lda Z
   619 2408 AC 32 27			ldy Z+1
   620 240B 20 24 22			jsr @printWORD._ay
   621 					@print #$2E
   621 				 LDY# $2E\ JSR @PRINT
   621 240E A0 2E		 LDY# $2E
   621 2410 20 CF 21		 JSR @PRINT
   622 					@print #$9B
   622 				 LDY# $9B\ JSR @PRINT
   622 2413 A0 9B		 LDY# $9B
   622 2415 20 CF 21		 JSR @PRINT
   623 					@printSTRING #CODEORIGIN+$002B
   623 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   623 2418 A0 20		 LDY> CODEORIGIN+$002B
   623 241A A9 2B		 LDA< CODEORIGIN+$002B
   623 241C 20 D8 21		 JSR @PRINTSTRING
   624
   625 				; optimize FAIL (100, examples\printf.pas), line = 28
   626 					@printSTRING #CODEORIGIN+$002B
   626 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   626 241F A0 20		 LDY> CODEORIGIN+$002B
   626 2421 A9 2B		 LDA< CODEORIGIN+$002B
   626 2423 20 D8 21		 JSR @PRINTSTRING
   627 					@print #$9B
   627 				 LDY# $9B\ JSR @PRINT
   627 2426 A0 9B		 LDY# $9B
   627 2428 20 CF 21		 JSR @PRINT
   628 					@printSTRING #CODEORIGIN+$004E
   628 				 LDY> CODEORIGIN+$004E\ LDA< CODEORIGIN+$004E\ JSR @PRINTSTRING
   628 242B A0 20		 LDY> CODEORIGIN+$004E
   628 242D A9 4E		 LDA< CODEORIGIN+$004E
   628 242F 20 D8 21		 JSR @PRINTSTRING
   629
   630 				; optimize FAIL (100, examples\printf.pas), line = 29
   631 					@printSTRING #CODEORIGIN+$002B
   631 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   631 2432 A0 20		 LDY> CODEORIGIN+$002B
   631 2434 A9 2B		 LDA< CODEORIGIN+$002B
   631 2436 20 D8 21		 JSR @PRINTSTRING
   632 					@print #$25
   632 				 LDY# $25\ JSR @PRINT
   632 2439 A0 25		 LDY# $25
   632 243B 20 CF 21		 JSR @PRINT
   633
   634 				; optimize FAIL (100, examples\printf.pas), line = 30
   635 					@printSTRING #CODEORIGIN+$002B
   635 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   635 243E A0 20		 LDY> CODEORIGIN+$002B
   635 2440 A9 2B		 LDA< CODEORIGIN+$002B
   635 2442 20 D8 21		 JSR @PRINTSTRING
   636 					@print #$9B
   636 				 LDY# $9B\ JSR @PRINT
   636 2445 A0 9B		 LDY# $9B
   636 2447 20 CF 21		 JSR @PRINT
   637 					@printSTRING #CODEORIGIN+$002B
   637 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   637 244A A0 20		 LDY> CODEORIGIN+$002B
   637 244C A9 2B		 LDA< CODEORIGIN+$002B
   637 244E 20 D8 21		 JSR @PRINTSTRING
   638 					@printSTRING #CODEORIGIN+$005E
   638 				 LDY> CODEORIGIN+$005E\ LDA< CODEORIGIN+$005E\ JSR @PRINTSTRING
   638 2451 A0 20		 LDY> CODEORIGIN+$005E
   638 2453 A9 5E		 LDA< CODEORIGIN+$005E
   638 2455 20 D8 21		 JSR @PRINTSTRING
   639
   640 				; optimize FAIL (100, examples\printf.pas), line = 31
   641 					@printSTRING #CODEORIGIN+$002B
   641 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   641 2458 A0 20		 LDY> CODEORIGIN+$002B
   641 245A A9 2B		 LDA< CODEORIGIN+$002B
   641 245C 20 D8 21		 JSR @PRINTSTRING
   642 					@print #$9B
   642 				 LDY# $9B\ JSR @PRINT
   642 245F A0 9B		 LDY# $9B
   642 2461 20 CF 21		 JSR @PRINT
   643 					@printSTRING #CODEORIGIN+$0066
   643 				 LDY> CODEORIGIN+$0066\ LDA< CODEORIGIN+$0066\ JSR @PRINTSTRING
   643 2464 A0 20		 LDY> CODEORIGIN+$0066
   643 2466 A9 66		 LDA< CODEORIGIN+$0066
   643 2468 20 D8 21		 JSR @PRINTSTRING
   644 					@print #$25
   644 				 LDY# $25\ JSR @PRINT
   644 246B A0 25		 LDY# $25
   644 246D 20 CF 21		 JSR @PRINT
   645
   646 				; optimize FAIL (100, examples\printf.pas), line = 32
   647 					@printSTRING #CODEORIGIN+$002B
   647 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   647 2470 A0 20		 LDY> CODEORIGIN+$002B
   647 2472 A9 2B		 LDA< CODEORIGIN+$002B
   647 2474 20 D8 21		 JSR @PRINTSTRING
   648 					@print #$9B
   648 				 LDY# $9B\ JSR @PRINT
   648 2477 A0 9B		 LDY# $9B
   648 2479 20 CF 21		 JSR @PRINT
   649 					@printSTRING #CODEORIGIN+$006E
   649 				 LDY> CODEORIGIN+$006E\ LDA< CODEORIGIN+$006E\ JSR @PRINTSTRING
   649 247C A0 20		 LDY> CODEORIGIN+$006E
   649 247E A9 6E		 LDA< CODEORIGIN+$006E
   649 2480 20 D8 21		 JSR @PRINTSTRING
   650 					@printSTRING #CODEORIGIN+$007E
   650 				 LDY> CODEORIGIN+$007E\ LDA< CODEORIGIN+$007E\ JSR @PRINTSTRING
   650 2483 A0 20		 LDY> CODEORIGIN+$007E
   650 2485 A9 7E		 LDA< CODEORIGIN+$007E
   650 2487 20 D8 21		 JSR @PRINTSTRING
   651
   652 				; optimize FAIL (100, examples\printf.pas), line = 33
   653 					@printSTRING #CODEORIGIN+$002B
   653 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   653 248A A0 20		 LDY> CODEORIGIN+$002B
   653 248C A9 2B		 LDA< CODEORIGIN+$002B
   653 248E 20 D8 21		 JSR @PRINTSTRING
   654 					@print #$9B
   654 				 LDY# $9B\ JSR @PRINT
   654 2491 A0 9B		 LDY# $9B
   654 2493 20 CF 21		 JSR @PRINT
   655 					@printSTRING #CODEORIGIN+$002B
   655 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   655 2496 A0 20		 LDY> CODEORIGIN+$002B
   655 2498 A9 2B		 LDA< CODEORIGIN+$002B
   655 249A 20 D8 21		 JSR @PRINTSTRING
   656 					@print #$9B
   656 				 LDY# $9B\ JSR @PRINT
   656 249D A0 9B		 LDY# $9B
   656 249F 20 CF 21		 JSR @PRINT
   657 					@printSTRING #CODEORIGIN+$0096
   657 				 LDY> CODEORIGIN+$0096\ LDA< CODEORIGIN+$0096\ JSR @PRINTSTRING
   657 24A2 A0 20		 LDY> CODEORIGIN+$0096
   657 24A4 A9 96		 LDA< CODEORIGIN+$0096
   657 24A6 20 D8 21		 JSR @PRINTSTRING
   658 24A9 AD 2C 27			lda X
   659 24AC 20 13 22			jsr @printBYTE._a
   660 					@print #$3D
   660 				 LDY# $3D\ JSR @PRINT
   660 24AF A0 3D		 LDY# $3D
   660 24B1 20 CF 21		 JSR @PRINT
   661 					@print #$24
   661 				 LDY# $24\ JSR @PRINT
   661 24B4 A0 24		 LDY# $24
   661 24B6 20 CF 21		 JSR @PRINT
   662 24B9 E8				inx
   663 24BA AD 2C 27 95 98		mva X :STACKORIGIN,x
   664 24BF 20 31 21			jsr @expandToCARD.BYTE
   665 24C2 E8				inx
   666 24C3 A9 04 95 98			mva #$04 :STACKORIGIN,x
   667 24C7 20 07 23			jsr SYSTEM.HEXSTR
   668 24CA B5 98			lda :STACKORIGIN,x
   669 24CC B4 A8			ldy :STACKORIGIN+STACKWIDTH,x
   670 24CE 20 D8 21			jsr @printSTRING
   671 24D1 CA				dex
   672 					@printSTRING #CODEORIGIN+$002B
   672 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   672 24D2 A0 20		 LDY> CODEORIGIN+$002B
   672 24D4 A9 2B		 LDA< CODEORIGIN+$002B
   672 24D6 20 D8 21		 JSR @PRINTSTRING
   673
   674 				; optimize FAIL (100, examples\printf.pas), line = 34
   675 					@printSTRING #CODEORIGIN+$002B
   675 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   675 24D9 A0 20		 LDY> CODEORIGIN+$002B
   675 24DB A9 2B		 LDA< CODEORIGIN+$002B
   675 24DD 20 D8 21		 JSR @PRINTSTRING
   676 					@print #$9B
   676 				 LDY# $9B\ JSR @PRINT
   676 24E0 A0 9B		 LDY# $9B
   676 24E2 20 CF 21		 JSR @PRINT
   677 					@printSTRING #CODEORIGIN+$00A4
   677 				 LDY> CODEORIGIN+$00A4\ LDA< CODEORIGIN+$00A4\ JSR @PRINTSTRING
   677 24E5 A0 20		 LDY> CODEORIGIN+$00A4
   677 24E7 A9 A4		 LDA< CODEORIGIN+$00A4
   677 24E9 20 D8 21		 JSR @PRINTSTRING
   678 24EC E8				inx
   679 24ED AD 2D 27 95 98		mva Y :STACKORIGIN,x
   680 24F2 AD 2E 27 95 A8		mva Y+1 :STACKORIGIN+STACKWIDTH,x
   681 24F7 AD 2F 27 95 B8		mva Y+2 :STACKORIGIN+STACKWIDTH*2,x
   682 24FC AD 30 27 95 C8		mva Y+3 :STACKORIGIN+STACKWIDTH*3,x
   683 2501 20 07 22			jsr @printINT
   684 2504 CA				dex
   685 					@print #$3D
   685 				 LDY# $3D\ JSR @PRINT
   685 2505 A0 3D		 LDY# $3D
   685 2507 20 CF 21		 JSR @PRINT
   686 					@print #$24
   686 				 LDY# $24\ JSR @PRINT
   686 250A A0 24		 LDY# $24
   686 250C 20 CF 21		 JSR @PRINT
   687 250F E8				inx
   688 2510 AD 2D 27 95 98		mva Y :STACKORIGIN,x
   689 2515 AD 2E 27 95 A8		mva Y+1 :STACKORIGIN+STACKWIDTH,x
   690 251A AD 2F 27 95 B8		mva Y+2 :STACKORIGIN+STACKWIDTH*2,x
   691 251F AD 30 27 95 C8		mva Y+3 :STACKORIGIN+STACKWIDTH*3,x
   692 2524 E8				inx
   693 2525 A9 04 95 98			mva #$04 :STACKORIGIN,x
   694 2529 20 07 23			jsr SYSTEM.HEXSTR
   695 252C B5 98			lda :STACKORIGIN,x
   696 252E B4 A8			ldy :STACKORIGIN+STACKWIDTH,x
   697 2530 20 D8 21			jsr @printSTRING
   698 2533 CA				dex
   699 					@printSTRING #CODEORIGIN+$002B
   699 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   699 2534 A0 20		 LDY> CODEORIGIN+$002B
   699 2536 A9 2B		 LDA< CODEORIGIN+$002B
   699 2538 20 D8 21		 JSR @PRINTSTRING
   700
   701 				; optimize FAIL (100, examples\printf.pas), line = 35
   702 					@printSTRING #CODEORIGIN+$002B
   702 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   702 253B A0 20		 LDY> CODEORIGIN+$002B
   702 253D A9 2B		 LDA< CODEORIGIN+$002B
   702 253F 20 D8 21		 JSR @PRINTSTRING
   703 					@print #$9B
   703 				 LDY# $9B\ JSR @PRINT
   703 2542 A0 9B		 LDY# $9B
   703 2544 20 CF 21		 JSR @PRINT
   704 					@printSTRING #CODEORIGIN+$00B1
   704 				 LDY> CODEORIGIN+$00B1\ LDA< CODEORIGIN+$00B1\ JSR @PRINTSTRING
   704 2547 A0 20		 LDY> CODEORIGIN+$00B1
   704 2549 A9 B1		 LDA< CODEORIGIN+$00B1
   704 254B 20 D8 21		 JSR @PRINTSTRING
   705 254E AD 31 27			lda Z
   706 2551 AC 32 27			ldy Z+1
   707 2554 20 24 22			jsr @printWORD._ay
   708 					@print #$3D
   708 				 LDY# $3D\ JSR @PRINT
   708 2557 A0 3D		 LDY# $3D
   708 2559 20 CF 21		 JSR @PRINT
   709 					@print #$24
   709 				 LDY# $24\ JSR @PRINT
   709 255C A0 24		 LDY# $24
   709 255E 20 CF 21		 JSR @PRINT
   710 2561 E8				inx
   711 2562 AD 31 27 95 98		mva Z :STACKORIGIN,x
   712 2567 AD 32 27 95 A8		mva Z+1 :STACKORIGIN+STACKWIDTH,x
   713 256C 20 25 21			jsr @expandToCARD.WORD
   714 256F E8				inx
   715 2570 A9 04 95 98			mva #$04 :STACKORIGIN,x
   716 2574 20 07 23			jsr SYSTEM.HEXSTR
   717 2577 B5 98			lda :STACKORIGIN,x
   718 2579 B4 A8			ldy :STACKORIGIN+STACKWIDTH,x
   719 257B 20 D8 21			jsr @printSTRING
   720 257E CA				dex
   721 					@printSTRING #CODEORIGIN+$002B
   721 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   721 257F A0 20		 LDY> CODEORIGIN+$002B
   721 2581 A9 2B		 LDA< CODEORIGIN+$002B
   721 2583 20 D8 21		 JSR @PRINTSTRING
   722
   723 				; optimize FAIL (100, examples\printf.pas), line = 36
   724 					@printSTRING #CODEORIGIN+$002B
   724 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   724 2586 A0 20		 LDY> CODEORIGIN+$002B
   724 2588 A9 2B		 LDA< CODEORIGIN+$002B
   724 258A 20 D8 21		 JSR @PRINTSTRING
   725 					@print #$9B
   725 				 LDY# $9B\ JSR @PRINT
   725 258D A0 9B		 LDY# $9B
   725 258F 20 CF 21		 JSR @PRINT
   726 					@printSTRING #CODEORIGIN+$002B
   726 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   726 2592 A0 20		 LDY> CODEORIGIN+$002B
   726 2594 A9 2B		 LDA< CODEORIGIN+$002B
   726 2596 20 D8 21		 JSR @PRINTSTRING
   727 					@print #$9B
   727 				 LDY# $9B\ JSR @PRINT
   727 2599 A0 9B		 LDY# $9B
   727 259B 20 CF 21		 JSR @PRINT
   728 					@printSTRING #CODEORIGIN+$00BF
   728 				 LDY> CODEORIGIN+$00BF\ LDA< CODEORIGIN+$00BF\ JSR @PRINTSTRING
   728 259E A0 20		 LDY> CODEORIGIN+$00BF
   728 25A0 A9 BF		 LDA< CODEORIGIN+$00BF
   728 25A2 20 D8 21		 JSR @PRINTSTRING
   729 					@print #$41
   729 				 LDY# $41\ JSR @PRINT
   729 25A5 A0 41		 LDY# $41
   729 25A7 20 CF 21		 JSR @PRINT
   730 					@printSTRING #CODEORIGIN+$002B
   730 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   730 25AA A0 20		 LDY> CODEORIGIN+$002B
   730 25AC A9 2B		 LDA< CODEORIGIN+$002B
   730 25AE 20 D8 21		 JSR @PRINTSTRING
   731
   732 				; optimize FAIL (100, examples\printf.pas), line = 37
   733 					@printSTRING #CODEORIGIN+$002B
   733 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   733 25B1 A0 20		 LDY> CODEORIGIN+$002B
   733 25B3 A9 2B		 LDA< CODEORIGIN+$002B
   733 25B5 20 D8 21		 JSR @PRINTSTRING
   734 					@print #$9B
   734 				 LDY# $9B\ JSR @PRINT
   734 25B8 A0 9B		 LDY# $9B
   734 25BA 20 CF 21		 JSR @PRINT
   735 					@printSTRING #CODEORIGIN+$00D2
   735 				 LDY> CODEORIGIN+$00D2\ LDA< CODEORIGIN+$00D2\ JSR @PRINTSTRING
   735 25BD A0 20		 LDY> CODEORIGIN+$00D2
   735 25BF A9 D2		 LDA< CODEORIGIN+$00D2
   735 25C1 20 D8 21		 JSR @PRINTSTRING
   736 					@print #$31
   736 				 LDY# $31\ JSR @PRINT
   736 25C4 A0 31		 LDY# $31
   736 25C6 20 CF 21		 JSR @PRINT
   737 					@printSTRING #CODEORIGIN+$002B
   737 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   737 25C9 A0 20		 LDY> CODEORIGIN+$002B
   737 25CB A9 2B		 LDA< CODEORIGIN+$002B
   737 25CD 20 D8 21		 JSR @PRINTSTRING
   738
   739 				; optimize FAIL ('CIO.GET', examples\printf.pas), line = 38
   740 25D0 E8				inx
   741 25D1 A9 07 95 98			mva #$07 :STACKORIGIN,x
   742 25D5 20 52 23			jsr CIO.GET
   743 25D8 B5 98 8D 33 27		mva :STACKORIGIN,x KEY
   744 25DD CA				dex
   745
   746 25DE 20 41 23			jsr CRT.READKEY					; call Entry
   747
   748 25E1 CA				dex
   749 25E2			@exit
   750 					.ifdef @new
   751 					lda <@VarData
   752 					sta :ztmp
   753 					lda >@VarData
   754 					ldy #@VarDataSize-1
   755 					jmp @FreeMem
   756 					eif
   757 25E2 60				rts						; ret
   758 				.endl
   759 25E3			l_00E7
   760
   761 				; optimize FAIL ('MAINPROC', examples\printf.pas), line = 43
   762 25E3 20 81 23			jsr MAINPROC
   763
   764 				; ------------------------------------------------------------
   765
   766 = 262C			adr.STRBUFFER	= DATAORIGIN+$0030
   767 25E6			.var STRBUFFER	= adr.STRBUFFER .word
   768 = 272C			X	= DATAORIGIN+$0130
   769 = 272D			Y	= DATAORIGIN+$0131
   770 = 2731			Z	= DATAORIGIN+$0135
   771 = 2733			KEY	= DATAORIGIN+$0137
   772 25E6			@exit
   773
   774 25E6 A2 00		@halt	ldx #0
   775 25E8 9A				txs
   776 					.ifdef MAIN.@DEFINES.ROMOFF
   777 					inc portb
   778 					.endif
   779
   780 25E9 60				rts
   781
   782 				; ------------------------------------------------------------
   783
   784 25EA 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   785
   786 				; ------------------------------------------------------------
   787
   788 25FA			.local	@DEFINES
   789 25FA			ATARI
   790 				.endl
   791
   792 = 25FA 2C 26		STRBUFFER
   792 				.endl							; MAIN
   793
   794 				; ------------------------------------------------------------
   795 				; ------------------------------------------------------------
   796
   797 				.macro	UNITINITIALIZATION
   798 				
   799 					.ifdef MAIN.SYSTEM.@UnitInit
   800 					jsr MAIN.SYSTEM.@UnitInit
   801 					eif
   802 				
   803 					.ifdef MAIN.ATARI.@UnitInit
   804 					jsr MAIN.ATARI.@UnitInit
   805 					eif
   806 				
   807 					.ifdef MAIN.CRT.@UnitInit
   808 					jsr MAIN.CRT.@UnitInit
   809 					eif
   810 				
   811 					.ifdef MAIN.DOS.@UnitInit
   812 					jsr MAIN.DOS.@UnitInit
   813 					eif
   814 				
   815 					.ifdef MAIN.STRUTILS.@UnitInit
   816 					jsr MAIN.STRUTILS.@UnitInit
   817 					eif
   818 				
   819 					.ifdef MAIN.SYSUTILS.@UnitInit
   820 					jsr MAIN.SYSUTILS.@UnitInit
   821 					eif
   822 				
   823 					.ifdef MAIN.CIO.@UnitInit
   824 					jsr MAIN.CIO.@UnitInit
   825 					eif
   826 				.endm
   827
   828 				; ------------------------------------------------------------
   829
   830 					ift .SIZEOF(MAIN.SYSTEM) > 0
   831 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   831 				SYSTEM: $2307..$2340
   832 					eif
   833
   834 					ift .SIZEOF(MAIN.ATARI) > 0
   835 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   836 					eif
   837
   838 					ift .SIZEOF(MAIN.CRT) > 0
   839 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   839 				CRT: $2341..$2351
   840 					eif
   841
   842 					ift .SIZEOF(MAIN.DOS) > 0
   843 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   844 					eif
   845
   846 					ift .SIZEOF(MAIN.STRUTILS) > 0
   847 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   848 					eif
   849
   850 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   851 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   852 					eif
   853
   854 					ift .SIZEOF(MAIN.CIO) > 0
   855 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
   855 				CIO: $2352..$2380
   856 					eif
   857
   858 					.print 'CODE: ',CODEORIGIN,'..',*-1
   858 				CODE: $2000..$25FB
   859
   860 				; ------------------------------------------------------------
   861
   862 25FC			DATAORIGIN
   863 25FC 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   864
   865 = 0006			VARINITSIZE	= *-DATAORIGIN
   866 = 0138			VARDATASIZE	= 312
   867
   868 = 2734			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   869
   870 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   870 				DATA: $25FC..$2734
   871
   872 02E0-02E1> CA 22			run START
   873
   874 				; ------------------------------------------------------------
   875
   876 				.macro	STATICDATA
   877 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $10 $45 $66  $66 $65 $63 $74 $75 $73 $20 $65
   878 				.by  $78 $61 $6D $70 $6C $65 $00 $0B  $50 $72 $69 $6E $74 $46 $20 $64  $65 $6D $6F $00 $00 $00 $10 $54
   879 				.by  $68 $65 $20 $6E $75 $6D $62 $65  $72 $73 $20 $61 $72 $65 $3A $00  $02 $78 $3D $00 $03 $2C $79 $3D
   880 				.by  $00 $03 $2C $7A $3D $00 $0E $50  $72 $6F $63 $65 $6E $74 $20 $73  $69 $67 $6E $3A $20 $00 $06 $25
   881 				.by  $61 $66 $74 $65 $72 $00 $06 $62  $65 $66 $6F $72 $65 $00 $0E $50  $72 $6F $63 $65 $6E $74 $20 $73
   882 				.by  $69 $67 $6E $20 $27 $00 $16 $25  $27 $20 $69 $6E $20 $6F $6E $65  $20 $6C $69 $6E $65 $20 $66 $6F
   883 				.by  $72 $6D $61 $74 $21 $00 $0C $48  $45 $58 $20 $78 $28 $42 $59 $54  $45 $29 $20 $00 $0B $48 $45 $58
   884 				.by  $20 $79 $28 $49 $4E $54 $29 $20  $00 $0C $48 $45 $58 $20 $7A $28  $43 $41 $52 $44 $29 $20 $00 $11
   885 				.by  $46 $69 $72 $73 $74 $20 $63 $68  $61 $72 $61 $63 $74 $65 $72 $3A  $20 $00 $0C $4E $75 $6D $62 $65
   886 				.by  $72 $20 $6F $6E $65 $3A $20 $00
   887 				.endm
   888
   889 					end
