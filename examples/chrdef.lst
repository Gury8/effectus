mads 2.1.0
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $203C..$2437
    97
    98 				; ------------------------------------------------------------
    99
   100 2437			START
   101 2437 BA				tsx
   102 2438 8E 12 28			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 0000			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 2C80			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 					ldx #256-VLEN
   115 					lda #0
   116 					sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   119 					eif
   120
   121 243B A2 0F			ldx #$0f
   122 243D BD 40 03 9D 15 28 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 2446 E8				inx		; X = 0 !!!
   125 2447 86 8E			stx bp		; lo BP = 0
   126
   127 2449				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: chrdef.a65]
   128
   129 2449			.local	MAIN						; PROCEDURE
   130
   131 2449 4C 00 28			jmp l_0043
   132
   133 				; ------------------------------------------------------------
   134
   135 244C			.local	SYSTEM						; UNIT
   136
   137 244C			.local	MOVE_005D					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   138
   139 				; ------------------------------------------------------------
   140
   141 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   142 				; as Pointer
   143 244C B5 98 85 82			mva :STACKORIGIN,x COUNT
   144 2450 B5 A8 85 83			mva :STACKORIGIN+STACKWIDTH,x COUNT+1
   145 2454 CA				dex						; sub bx, 1
   146
   147 				; ------------------------------------------------------------
   148
   149 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   150 				; as Pointer
   151 2455 B5 98 85 8A			mva :STACKORIGIN,x DEST
   152 2459 B5 A8 85 8B			mva :STACKORIGIN+STACKWIDTH,x DEST+1
   153 245D CA				dex						; sub bx, 1
   154
   155 				; ------------------------------------------------------------
   156
   157 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   158 				; as Pointer
   159 245E B5 98 85 86			mva :STACKORIGIN,x SOURCE
   160 2462 B5 A8 85 87			mva :STACKORIGIN+STACKWIDTH,x SOURCE+1
   161 2466 CA				dex						; sub bx, 1
   162
   163 				; ---------------------  ASM Block 031  ---------------------
   164
   165 2467 20 8F 23			jsr @move
   166
   167
   168 				; ------------------------------------------------------------
   169
   170 = 0086			SOURCE	= edx
   171 = 008A			DEST	= ecx
   172 = 0082			COUNT	= eax
   173 246A			@exit
   174 					.ifdef @new
   175 					@FreeMem #@VarData #@VarDataSize
   176 					eif
   177 246A 60				rts						; ret
   178 				.endl
   179
   180 246B			.local	CONCAT_0073					; FUNCTION | ASSEMBLER | OVERLOAD
   181
   182 				; ------------------------------------------------------------
   183
   184 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   185 				; as Pointer
   186 246B B5 98 8D 38 29		mva :STACKORIGIN,x B
   187 2470 CA				dex						; sub bx, 1
   188
   189 				; ------------------------------------------------------------
   190
   191 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   192 				; as Pointer
   193 2471 B5 98 8D D2 24		mva :STACKORIGIN,x A
   194 2476 B5 A8 8D D3 24		mva :STACKORIGIN+STACKWIDTH,x A+1
   195 247B CA				dex						; sub bx, 1
   196 					@move A #adr.A #256
   196 				 MWA A @MOVE.PTR1\ MWA #ADR.A @MOVE.PTR2\ MWA #256 @MOVE.PTR3\ JSR @MOVE
   196 247C AD D2 24 85 86 AD +  MWA A @MOVE.PTR1
   196 2486 A9 38 85 8A A9 28 +  MWA #ADR.A @MOVE.PTR2
   196 248E A9 00 85 82 A9 01 +  MWA #256 @MOVE.PTR3
   196 2496 20 8F 23		 JSR @MOVE
   197 2499 A9 38 8D D2 24 A9 + 	mwa #adr.A A
   198
   199 				; ---------------------  ASM Block 044  ---------------------
   200
   201 24A3 A9 00 8D 00 04		mva #0 @buf
   202 					@addString #adr.a
   202 				 LDY> ADR.A\ LDA< ADR.A\ JSR @ADDSTRING
   202 24A8 A0 28		 LDY> ADR.A
   202 24AA A9 38		 LDA< ADR.A
   202 24AC 20 E4 23		 JSR @ADDSTRING
   203 24AF EE 00 04			inc @buf
   204 24B2 AC 00 04			ldy @buf
   205 24B5 AD 38 29			lda b
   206 24B8 99 00 04			sta @buf,y
   207 				;	@move #@buf #adr.Result #256
   208 24BB A0 00			ldy #0
   209 24BD B9 00 04 99 39 29 + 	mva:rne @buf,y adr.Result,y+
   210
   211 24C6			@exit
   212
   213 				; ------------------------------------------------------------
   214
   215 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   216 				; as Pointer
   217
   218 24C6 E8				inx						; add bx, 1
   219 24C7 AD D4 24 95 98		mva RESULT :STACKORIGIN,x
   220 24CC AD D5 24 95 A8		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   221
   222 					.ifdef @new
   223 					@FreeMem #@VarData #@VarDataSize
   224 					eif
   225
   226 				; ------------------------------------------------------------
   227
   228 = 2838			adr.A	= DATAORIGIN+$000B
   229 24D1			.var A	= adr.A .word
   230 = 2938			B	= DATAORIGIN+$010B
   231 = 2939			adr.RESULT	= DATAORIGIN+$010C
   232 24D1			.var RESULT	= adr.RESULT .word
   233
   234 = 24D2			@VarData	= A
   235 = 0201			@VarDataSize	= 513
   236
   237 24D1 60				rts						; ret
   238 = 24D2 38 28		A
   238 = 24D4 39 29		RESULT
   238 				.endl
   239
   240 24D6			.local	CONCAT_007C					; FUNCTION | OVERLOAD
   241
   242 				; ------------------------------------------------------------
   243
   244 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   245 				; as Pointer
   246 24D6 B5 98 8D 3A 2A		mva :STACKORIGIN,x B
   247 24DB CA				dex						; sub bx, 1
   248
   249 				; ------------------------------------------------------------
   250
   251 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   252 				; as Pointer
   253 24DC B5 98 8D 39 2A		mva :STACKORIGIN,x A
   254 24E1 CA				dex						; sub bx, 1
   255
   256 				; optimize OK (SYSTEM), line = 2055
   257
   258 24E2 A9 02 8D 3B 2A		mva #$02 adr.RESULT+$00
   259
   260 				; optimize OK (SYSTEM), line = 2056
   261
   262 24E7 A0 01			ldy #$01
   263 24E9 AD 39 2A 99 3B 2A		mva A adr.RESULT,y
   264
   265 				; optimize OK (SYSTEM), line = 2057
   266
   267 24EF A0 02			ldy #$02
   268 24F1 AD 3A 2A 99 3B 2A		mva B adr.RESULT,y
   269 24F7			@exit
   270
   271 				; ------------------------------------------------------------
   272
   273 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   274 				; as Pointer
   275
   276 24F7 E8				inx						; add bx, 1
   277 24F8 AD 03 25 95 98		mva RESULT :STACKORIGIN,x
   278 24FD AD 04 25 95 A8		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   279
   280 					.ifdef @new
   281 					@FreeMem #@VarData #@VarDataSize
   282 					eif
   283
   284 				; ------------------------------------------------------------
   285
   286 = 2A39			A	= DATAORIGIN+$020C
   287 = 2A3A			B	= DATAORIGIN+$020D
   288 = 2A3B			adr.RESULT	= DATAORIGIN+$020E
   289 2502			.var RESULT	= adr.RESULT .word
   290
   291 = 2A39			@VarData	= A
   292 = 0102			@VarDataSize	= 258
   293
   294 2502 60				rts						; ret
   295 = 2503 3B 2A		RESULT
   295 				.endl
   296
   297 				; ------------------------------------------------------------
   298
   299 = 0648			M_PI_2	= $0648
   300 = 0192			D_PI_2	= $0192
   301 = 0004			D_PI_180	= $0004
   302 = 0000			MGTIA	= $0000
   303 = 0080			MVBXE	= $0080
   304 = 0000			VBXE_XDLADR	= $0000
   305 = 0100			VBXE_BCBADR	= $0100
   306 = 1000			VBXE_MAPADR	= $1000
   307 = 5000			VBXE_OVRADR	= $5000
   308 = B000			VBXE_WINDOW	= $B000
   309 = 0000			IDLI	= $0000
   310 = 0001			IVBL	= $0001
   311 = 00FE			CH_DELCHR	= $00FE
   312 = 009B			CH_ENTER	= $009B
   313 = 001B			CH_ESC	= $001B
   314 = 001C			CH_CURS_UP	= $001C
   315 = 001D			CH_CURS_DOWN	= $001D
   316 = 001E			CH_CURS_LEFT	= $001E
   317 = 001F			CH_CURS_RIGHT	= $001F
   318 = 007F			CH_TAB	= $007F
   319 = 009B			CH_EOL	= $009B
   320 = 007D			CH_CLR	= $007D
   321 = 00FD			CH_BELL	= $00FD
   322 = 007E			CH_DEL	= $007E
   323 = 009C			CH_DELLINE	= $009C
   324 = 009D			CH_INSLINE	= $009D
   325 = 0000			COLOR_BLACK	= $0000
   326 = 000E			COLOR_WHITE	= $000E
   327 = 0032			COLOR_RED	= $0032
   328 = 0096			COLOR_CYAN	= $0096
   329 = 0068			COLOR_VIOLET	= $0068
   330 = 00C4			COLOR_GREEN	= $00C4
   331 = 0074			COLOR_BLUE	= $0074
   332 = 00EE			COLOR_YELLOW	= $00EE
   333 = 0028			COLOR_ORANGE	= $0028
   334 = 00E4			COLOR_BROWN	= $00E4
   335 = 003C			COLOR_LIGHTRED	= $003C
   336 = 0004			COLOR_GRAY1	= $0004
   337 = 0006			COLOR_GRAY2	= $0006
   338 = 000A			COLOR_GRAY3	= $000A
   339 = 00CC			COLOR_LIGHTGREEN	= $00CC
   340 = 007C			COLOR_LIGHTBLUE	= $007C
   341 = 0004			FMOPENREAD	= $0004
   342 = 0008			FMOPENWRITE	= $0008
   343 = 0009			FMOPENAPPEND	= $0009
   344 = 000C			FMOPENREADWRITE	= $000C
   345 = 282D			SCREENWIDTH	= DATAORIGIN+$0000
   346 = 282F			SCREENHEIGHT	= DATAORIGIN+$0002
   347 = 2831			DATESEPARATOR	= DATAORIGIN+$0004
   348 = D014			TVSYSTEM	= $D014
   349 = 02C0			adr.PALETTE	= $02C0
   350 2505			.var PALETTE	= adr.PALETTE .word
   351 = D012			adr.HPALETTE	= $D012
   352 2505			.var HPALETTE	= adr.HPALETTE .word
   353 = 2832			FILEMODE	= DATAORIGIN+$0005
   354 = 2833			SCREENMODE	= DATAORIGIN+$0006
   355 = 2834			IORESULT	= DATAORIGIN+$0007
   356 = 2835			EOLN	= DATAORIGIN+$0008
   357 = 2836			RNDSEED	= DATAORIGIN+$0009
   358
   359 = 2505 C0 02		PALETTE
   359 = 2507 12 D0		HPALETTE
   359 				.endl							; UNIT SYSTEM
   360
   361 				; ------------------------------------------------------------
   362
   363 2509			.local	DOS						; UNIT
   364
   365 				; ------------------------------------------------------------
   366
   367 = D014			PALNTSC	= $D014
   368
   369 				.endl							; UNIT DOS
   370
   371 				; ------------------------------------------------------------
   372
   373 2509			.local	STRUTILS					; UNIT
   374
   375 				; ------------------------------------------------------------
   376
   377 				.endl							; UNIT STRUTILS
   378
   379 				; ------------------------------------------------------------
   380
   381 2509			.local	SYSUTILS					; UNIT
   382
   383 				; ------------------------------------------------------------
   384
   385 = 0001			FAREADONLY	= $0001
   386 = 0002			FAHIDDEN	= $0002
   387 = 0004			FASYSFILE	= $0004
   388 = 0008			FAVOLUMEID	= $0008
   389 = 0010			FADIRECTORY	= $0010
   390 = 0020			FAARCHIVE	= $0020
   391 = 003F			FAANYFILE	= $003F
   392
   393 				.endl							; UNIT SYSUTILS
   394
   395 				; ------------------------------------------------------------
   396
   397 2509			.local	ATARI						; UNIT
   398
   399 				; ------------------------------------------------------------
   400
   401 = 0012			RTCLOK	= $0012
   402 = 004D			ATRACT	= $004D
   403 = 0052			LMARGIN	= $0052
   404 = 0053			RMARGIN	= $0053
   405 = 0054			ROWCRS	= $0054
   406 = 0055			COLCRS	= $0055
   407 = 0057			DINDEX	= $0057
   408 = 0058			SAVMSC	= $0058
   409 = 006A			RAMTOP	= $006A
   410 = 0200			VDSLST	= $0200
   411 = 0230			SDLSTL	= $0230
   412 = 0290			TXTROW	= $0290
   413 = 0291			TXTCOL	= $0291
   414 = 0293			TINDEX	= $0293
   415 = 0294			TXTMSC	= $0294
   416 = 022F			SDMCTL	= $022F
   417 = 026F			GPRIOR	= $026F
   418 = 02F0			CRSINH	= $02F0
   419 = 02F3			CHACT	= $02F3
   420 = 02F4			CHBAS	= $02F4
   421 = 02FC			CH	= $02FC
   422 = 02C0			PCOLR0	= $02C0
   423 = 02C1			PCOLR1	= $02C1
   424 = 02C2			PCOLR2	= $02C2
   425 = 02C3			PCOLR3	= $02C3
   426 = 02C4			COLOR0	= $02C4
   427 = 02C5			COLOR1	= $02C5
   428 = 02C6			COLOR2	= $02C6
   429 = 02C7			COLOR3	= $02C7
   430 = 02C8			COLOR4	= $02C8
   431 = 02C8			COLBAKS	= $02C8
   432 = D000			HPOSP0	= $D000
   433 = D001			HPOSP1	= $D001
   434 = D002			HPOSP2	= $D002
   435 = D003			HPOSP3	= $D003
   436 = D004			HPOSM0	= $D004
   437 = D005			HPOSM1	= $D005
   438 = D006			HPOSM2	= $D006
   439 = D007			HPOSM3	= $D007
   440 = D008			SIZEP0	= $D008
   441 = D009			SIZEP1	= $D009
   442 = D00A			SIZEP2	= $D00A
   443 = D00B			SIZEP3	= $D00B
   444 = D00C			SIZEM	= $D00C
   445 = D00D			GRAFP0	= $D00D
   446 = D00E			GRAFP1	= $D00E
   447 = D00F			GRAFP2	= $D00F
   448 = D010			GRAFP3	= $D010
   449 = D011			GRAFM	= $D011
   450 = D004			P0PF	= $D004
   451 = D014			PAL	= $D014
   452 = D012			COLPM0	= $D012
   453 = D013			COLPM1	= $D013
   454 = D014			COLPM2	= $D014
   455 = D015			COLPM3	= $D015
   456 = D016			COLPF0	= $D016
   457 = D017			COLPF1	= $D017
   458 = D018			COLPF2	= $D018
   459 = D019			COLPF3	= $D019
   460 = D01A			COLBK	= $D01A
   461 = D01B			PRIOR	= $D01B
   462 = D01D			GRACTL	= $D01D
   463 = D01E			HITCLR	= $D01E
   464 = D200			AUDF1	= $D200
   465 = D201			AUDC1	= $D201
   466 = D202			AUDF2	= $D202
   467 = D203			AUDC2	= $D203
   468 = D204			AUDF3	= $D204
   469 = D205			AUDC3	= $D205
   470 = D206			AUDF4	= $D206
   471 = D207			AUDC4	= $D207
   472 = D208			AUDCTL	= $D208
   473 = D20F			SKSTAT	= $D20F
   474 = D301			PORTB	= $D301
   475 = D400			DMACTL	= $D400
   476 = D401			CHACTL	= $D401
   477 = D402			DLISTL	= $D402
   478 = D404			HSCROL	= $D404
   479 = D405			VSCROL	= $D405
   480 = D407			PMBASE	= $D407
   481 = D409			CHBASE	= $D409
   482 = D40A			WSYNC	= $D40A
   483 = D40B			VCOUNT	= $D40B
   484 = D40C			PENH	= $D40C
   485 = D40D			PENV	= $D40D
   486 = D40E			NMIEN	= $D40E
   487
   488 				.endl							; UNIT ATARI
   489
   490 				; ------------------------------------------------------------
   491
   492 2509			.local	CRT						; UNIT
   493
   494 2509			.local	READKEY						; FUNCTION | ASSEMBLER
   495
   496 				; ---------------------  ASM Block 063  ---------------------
   497
   498 2509 8A 48			txa:pha
   499
   500 250B 20 37 23			@GetKey
   501
   502 250E 8D 3C 2B			sta Result
   503
   504 2511 68 AA			pla:tax
   505
   506 2513			@exit
   507
   508 				; ------------------------------------------------------------
   509
   510 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   511 				; as Pointer
   512
   513 2513 E8				inx						; add bx, 1
   514 2514 AD 3C 2B 95 98		mva RESULT :STACKORIGIN,x
   515
   516 					.ifdef @new
   517 					@FreeMem #@VarData #@VarDataSize
   518 					eif
   519
   520 				; ------------------------------------------------------------
   521
   522 = 2B3C			RESULT	= DATAORIGIN+$030F
   523
   524 = 2B3C			@VarData	= RESULT
   525 = 0001			@VarDataSize	= 1
   526
   527 2519 60				rts						; ret
   528 				.endl
   529
   530 251A			.local	GOTOXY						; PROCEDURE | ASSEMBLER
   531
   532 				; ------------------------------------------------------------
   533
   534 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   535 				; as Pointer
   536 251A B5 98 8D 3E 2B		mva :STACKORIGIN,x Y
   537 251F CA				dex						; sub bx, 1
   538
   539 				; ------------------------------------------------------------
   540
   541 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   542 				; as Pointer
   543 2520 B5 98 8D 3D 2B		mva :STACKORIGIN,x X
   544 2525 CA				dex						; sub bx, 1
   545
   546 				; ---------------------  ASM Block 068  ---------------------
   547
   548 2526 AC 3D 2B			ldy x
   549 2529 F0 03			beq @+
   550 252B 88				dey
   551 252C 84 55			sty colcrs
   552
   553 252E AC 3E 2B		@	ldy y
   554 2531 F0 03			beq @+
   555 2533 88				dey
   556 2534 84 54			sty rowcrs
   557 2536			@
   558
   559
   560 				; ------------------------------------------------------------
   561
   562 = 2B3D			X	= DATAORIGIN+$0310
   563 = 2B3E			Y	= DATAORIGIN+$0311
   564
   565 = 2B3D			@VarData	= X
   566 = 0002			@VarDataSize	= 2
   567
   568 2536			@exit
   569 					.ifdef @new
   570 					@FreeMem #@VarData #@VarDataSize
   571 					eif
   572 2536 60				rts						; ret
   573 				.endl
   574
   575 				; ------------------------------------------------------------
   576
   577 = 2B3B			TEXTATTR	= DATAORIGIN+$030E
   578 = D01F			CONSOL	= $D01F
   579 = 0000			CN_START_SELECT_OPTION	= $0000
   580 = 0001			CN_SELECT_OPTION	= $0001
   581 = 0002			CN_START_OPTION	= $0002
   582 = 0003			CN_OPTION	= $0003
   583 = 0004			CN_START_SELECT	= $0004
   584 = 0005			CN_SELECT	= $0005
   585 = 0006			CN_START	= $0006
   586 = 0007			CN_NONE	= $0007
   587 = 0000			BW40	= $0000
   588 = 0001			CO40	= $0001
   589 = 0002			BW80	= $0002
   590 = 0003			CO80	= $0003
   591 = 0007			MONO	= $0007
   592 = 0001			C40	= $0001
   593 = 0003			C80	= $0003
   594 = 0000			BLACK	= $0000
   595 = 0001			BLUE	= $0001
   596 = 0002			GREEN	= $0002
   597 = 0003			CYAN	= $0003
   598 = 0004			RED	= $0004
   599 = 0005			MAGENTA	= $0005
   600 = 0006			BROWN	= $0006
   601 = 0007			LIGHTGRAY	= $0007
   602 = 0008			DARKGRAY	= $0008
   603 = 0009			LIGHTBLUE	= $0009
   604 = 000A			LIGHTGREEN	= $000A
   605 = 000B			LIGHTCYAN	= $000B
   606 = 000C			LIGHTRED	= $000C
   607 = 000D			LIGHTMAGENTA	= $000D
   608 = 000E			YELLOW	= $000E
   609 = 000F			WHITE	= $000F
   610 = 0080			BLINK	= $0080
   611
   612 				.endl							; UNIT CRT
   613
   614 				; ------------------------------------------------------------
   615
   616 2537			.local	TYPES						; UNIT
   617
   618 				; ------------------------------------------------------------
   619
   620 				.endl							; UNIT TYPES
   621
   622 				; ------------------------------------------------------------
   623
   624 2537			.local	GRAPH						; UNIT
   625
   626 2537			.local	INITGRAPH_00D0					; PROCEDURE | OVERLOAD
   627
   628 				; ------------------------------------------------------------
   629
   630 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   631 				; as Pointer
   632 2537 B5 98 8D 5C 2B		mva :STACKORIGIN,x MODE
   633 253C CA				dex						; sub bx, 1
   634
   635 				; optimize OK (GRAPH), line = 73
   636
   637 253D A9 00 8D 47 2B		mva #$00 GRAPHRESULT
   638
   639 				; optimize OK (GRAPH), line = 75
   640
   641 2542 AD 5C 2B 8D 33 28		mva MODE SYSTEM.SCREENMODE
   642
   643 				; ---------------------  ASM Block 074  ---------------------
   644
   645
   646 2548 8A 48			txa:pha
   647
   648 254A A9 2C 8D 24 23		mva #$2c @putchar.vbxe
   649
   650 254F AD 5C 2B			lda mode
   651 2552 29 0F			and #$0f
   652 2554 A8				tay
   653
   654 2555 A2 60			ldx #$60	; 6*16
   655 2557 AD 5C 2B			lda mode	; %00010000 with text window
   656 255A 29 10			and #$10
   657 255C 49 10			eor #$10
   658 255E 09 02			ora #2		; read
   659
   660 					.nowarn @graphics
   660 2560 20 F5 22		 JSR @GRAPHICS
   661 					
   662 					
   663 = EE6D			tlshc	equ $ee6d
   664
   665 2563 A6 57			ldx dindex
   666 2565 BC 6D EE			ldy tlshc,x
   667 2568 A9 05			lda #5
   668 256A 0A			shift	asl @
   669 256B 88				dey
   670 256C D0 FC			bne shift
   671
   672 256E 8D 5B 2B			sta SCANLINE_WIDTH
   673 					
   674
   675 				; Fox/TQA
   676
   677 = 0057			dindex	equ $57
   678 = EE7D			tmccn	equ $ee7d
   679 = EE8D			tmrcn	equ $ee8d
   680
   681 2571 A6 57			ldx dindex
   682 2573 BD 7D EE			lda tmccn,x
   683 2576 BC 8D EE			ldy tmrcn,x
   684 2579 A2 00			ldx #0
   685 257B C9 40			cmp #<320
   686 257D D0 01 E8			sne:inx
   687 				    
   688 				; X:A = horizontal resolution
   689 				; Y = vertical resolution
   690
   691 2580 8D 2D 28			sta MAIN.SYSTEM.ScreenWidth
   692 2583 8E 2E 28			stx MAIN.SYSTEM.ScreenWidth+1
   693 					
   694 2586 38 E9 01			sub #1
   695 2589 8D 41 2B			sta WIN_RIGHT
   696 258C 8A				txa
   697 258D E9 00			sbc #0
   698 258F 8D 42 2B			sta WIN_RIGHT+1
   699 					
   700 2592 8C 2F 28			sty MAIN.SYSTEM.ScreenHeight
   701 2595 A9 00			lda #0
   702 2597 8D 30 28			sta MAIN.SYSTEM.ScreenHeight+1
   703 					
   704 259A 8D 3F 2B			sta WIN_LEFT
   705 259D 8D 40 2B			sta WIN_LEFT+1
   706 25A0 8D 43 2B			sta WIN_TOP
   707 25A3 8D 44 2B			sta WIN_TOP+1
   708
   709 25A6 8D 46 2B			sta WIN_BOTTOM+1	
   710 25A9 88				dey
   711 25AA 8C 45 2B			sty WIN_BOTTOM
   712
   713 25AD 68 AA			pla:tax
   714
   715
   716 				; ------------------------------------------------------------
   717
   718 = 2B5C			MODE	= DATAORIGIN+$032F
   719
   720 = 2B5C			@VarData	= MODE
   721 = 0001			@VarDataSize	= 1
   722
   723 25AF			@exit
   724 					.ifdef @new
   725 					@FreeMem #@VarData #@VarDataSize
   726 					eif
   727 25AF 60				rts						; ret
   728 				.endl
   729
   730 				; ------------------------------------------------------------
   731
   732 = FFFFFF80		CURRENTDRIVER	= $FFFFFF80
   733 = 0000			DETECT	= $0000
   734 = 0001			CGA	= $0001
   735 = 0002			MCGA	= $0002
   736 = 0003			EGA	= $0003
   737 = 0004			EGA64	= $0004
   738 = 0005			EGAMONO	= $0005
   739 = 0006			LOWRES	= $0006
   740 = 0007			HERCMONO	= $0007
   741 = 0009			VGA	= $0009
   742 = 000A			VESA	= $000A
   743 = 000B			D1BIT	= $000B
   744 = 000C			D2BIT	= $000C
   745 = 000D			D4BIT	= $000D
   746 = 000E			D6BIT	= $000E
   747 = 000F			D8BIT	= $000F
   748 = 0010			D12BIT	= $0010
   749 = 0018			M640X400	= $0018
   750 = 0018			M640X480	= $0018
   751 = 0000			GROK	= $0000
   752 = FFFFFFFF		GRNOINITGRAPH	= $FFFFFFFF
   753 = FFFFFFFE		GRNOTDETECTED	= $FFFFFFFE
   754 = FFFFFFFD		GRFILENOTFOUND	= $FFFFFFFD
   755 = FFFFFFFC		GRINVALIDDRIVER	= $FFFFFFFC
   756 = FFFFFFFB		GRNOLOADMEM	= $FFFFFFFB
   757 = FFFFFFFA		GRNOSCANMEM	= $FFFFFFFA
   758 = FFFFFFF9		GRNOFLOODMEM	= $FFFFFFF9
   759 = FFFFFFF8		GRFONTNOTFOUND	= $FFFFFFF8
   760 = FFFFFFF7		GRNOFONTMEM	= $FFFFFFF7
   761 = FFFFFFF6		GRINVALIDMODE	= $FFFFFFF6
   762 = FFFFFFF5		GRERROR	= $FFFFFFF5
   763 = FFFFFFF4		GRIOERROR	= $FFFFFFF4
   764 = FFFFFFF3		GRINVALIDFONT	= $FFFFFFF3
   765 = FFFFFFF2		GRINVALIDFONTNUM	= $FFFFFFF2
   766 = FFFFFFEE		GRINVALIDVERSION	= $FFFFFFEE
   767 = 0000			CGAC0	= $0000
   768 = 0001			CGAC1	= $0001
   769 = 0002			CGAC2	= $0002
   770 = 0003			CGAC3	= $0003
   771 = 0004			CGAHI	= $0004
   772 = 0000			MCGAC0	= $0000
   773 = 0001			MCGAC1	= $0001
   774 = 0002			MCGAC2	= $0002
   775 = 0003			MCGAC3	= $0003
   776 = 0004			MCGAMED	= $0004
   777 = 0005			MCGAHI	= $0005
   778 = 0000			EGALO	= $0000
   779 = 0001			EGAHI	= $0001
   780 = 0000			EGA64LO	= $0000
   781 = 0001			EGA64HI	= $0001
   782 = 0003			EGAMONOHI	= $0003
   783 = 000A			VGALO	= $000A
   784 = 001F			VGAMED	= $001F
   785 = 0018			VGAHI	= $0018
   786 = 2B3F			WIN_LEFT	= DATAORIGIN+$0312
   787 = 2B41			WIN_RIGHT	= DATAORIGIN+$0314
   788 = 2B43			WIN_TOP	= DATAORIGIN+$0316
   789 = 2B45			WIN_BOTTOM	= DATAORIGIN+$0318
   790 = 2B47			GRAPHRESULT	= DATAORIGIN+$031A
   791 = 2B48			GETCOLOR	= DATAORIGIN+$031B
   792 = 2B49			adr.LASTARCCOORDS	= DATAORIGIN+$031C
   793 25B0			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   794 = 2B49			LASTARCCOORDS.X	= DATAORIGIN+$031C
   795 = 2B4B			LASTARCCOORDS.Y	= DATAORIGIN+$031E
   796 = 2B4D			LASTARCCOORDS.XSTART	= DATAORIGIN+$0320
   797 = 2B4F			LASTARCCOORDS.YSTART	= DATAORIGIN+$0322
   798 = 2B51			LASTARCCOORDS.XEND	= DATAORIGIN+$0324
   799 = 2B53			LASTARCCOORDS.YEND	= DATAORIGIN+$0326
   800 = 2B55			CURRENTX	= DATAORIGIN+$0328
   801 = 2B57			CURRENTY	= DATAORIGIN+$032A
   802 = 2B59			VIDEORAM	= DATAORIGIN+$032C
   803 = 2B5B			SCANLINE_WIDTH	= DATAORIGIN+$032E
   804
   805 = 25B0 49 2B		LASTARCCOORDS
   805 				.endl							; UNIT GRAPH
   806
   807 25B2			.local	MAINPROC					; PROCEDURE
   808
   809 				; AssignFile
   810
   811 				; optimize OK (examples\chrdef.pas), line = 29
   812
   813 25B2 AD 25 28 85 90 AD + 	mwa F :bp2
   814 25BC A0 00			ldy #s@file.pfname
   815 25BE A9 0D			lda #$0D
   816 25C0 91 90			sta (:bp2),y
   817 25C2 C8				iny
   818 25C3 A9 20			lda #$20
   819 25C5 91 90			sta (:bp2),y
   820
   821 				; optimize OK (examples\chrdef.pas), line = 29
   822
   823 25C7 A0 05			ldy #s@file.status
   824 25C9 A9 00			lda #$00
   825 25CB 91 90			sta (:bp2),y
   826 				; Rewrite
   827
   828 				; optimize OK (examples\chrdef.pas), line = 29
   829
   830 25CD A0 02			ldy #s@file.record
   831 25CF A9 01			lda #$01
   832 25D1 91 90			sta (:bp2),y
   833 25D3 C8				iny
   834 25D4 A9 00			lda #$00
   835 25D6 91 90			sta (:bp2),y
   836
   837 25D8 8A 48			txa:pha
   838 25DA 38				sec
   839 					@openfile F, #8
   839 				 LDY F+1\ LDA F\ LDX# 8\ JSR @OPENFILE
   839 25DB AC 26 28		 LDY F+1
   839 25DE AD 25 28		 LDA F
   839 25E1 A2 08		 LDX# 8
   839 25E3 20 3C 20		 JSR @OPENFILE
   840 25E6 68 AA			pla:tax
   841
   842 				; optimize FAIL ('GRAPH.INITGRAPH_00D0', examples\chrdef.pas), line = 30
   843 25E8 E8				inx
   844 25E9 A9 02 95 98			mva #$02 :STACKORIGIN,x
   845 25ED 20 37 25			jsr GRAPH.INITGRAPH_00D0
   846
   847 				; optimize OK (examples\chrdef.pas), line = 32
   848
   849 25F0 A5 6A			lda RAMTOP
   850 25F2 38 E9 08			sub #$08
   851 25F5 8D 6D 2C			sta TOPMEM
   852 25F8 A9 00			lda #$00
   853 25FA E9 00			sbc #$00
   854 25FC 8D 6E 2C			sta TOPMEM+1
   855
   856 				; optimize OK (examples\chrdef.pas), line = 33
   857
   858 25FF AD 6D 2C 8D F4 02		mva TOPMEM CHBAS
   859
   860 				; optimize OK (examples\chrdef.pas), line = 34
   861
   862 2605 A9 00			lda #$00
   863 2607 85 82			sta :eax
   864 2609 AD 6D 2C			lda TOPMEM
   865 260C 85 83			sta :eax+1
   866 260E A5 82			lda :eax
   867 2610 8D 6D 2C			sta TOPMEM
   868 2613 A5 83			lda :eax+1
   869 2615 8D 6E 2C			sta TOPMEM+1
   870
   871 				; optimize OK (examples\chrdef.pas), line = 38
   872
   873 2618 AD 6D 2C			lda TOPMEM
   874 261B 85 82			sta ax
   875 261D AD 6E 2C			lda TOPMEM+1
   876 2620 85 83			sta ax+1
   877 2622 A9 00			lda #$00
   878 2624 85 8A			sta cx
   879 2626 A9 01			lda #$01
   880 2628 85 8B			sta cx+1
   881 262A 20 F8 21			jsr idivAX_CX
   882 262D A5 82			lda :eax
   883 262F 8D F4 02			sta CHBAS
   884
   885 				; optimize OK (examples\chrdef.pas), line = 40
   886
   887 2632 A9 00			lda #$00
   888 2634 85 86			sta :edx
   889 2636 A9 E0			lda #$E0
   890 2638 85 87			sta :edx+1
   891 263A AD 6D 2C			lda TOPMEM
   892 263D 85 8A			sta :ecx
   893 263F AD 6E 2C			lda TOPMEM+1
   894 2642 85 8B			sta :ecx+1
   895 2644 A9 FF			lda #$FF
   896 2646 85 82			sta :eax
   897 2648 A9 03			lda #$03
   898 264A 85 83			sta :eax+1
   899 264C 20 8F 23			jsr @move
   900
   901 				; optimize OK (examples\chrdef.pas), line = 42
   902
   903 264F A9 00			lda #$00
   904 2651 85 83			sta :eax+1
   905 2653 A9 1C			lda #$1C
   906 2655 0A				asl @
   907 2656 26 83			rol :eax+1
   908 2658 0A				asl @
   909 2659 26 83			rol :eax+1
   910 265B 0A				asl @
   911 265C 26 83			rol :eax+1
   912 265E 18 6D 6D 2C			add TOPMEM
   913 2662 85 8A			sta :ecx
   914 2664 AD 6E 2C			lda TOPMEM+1
   915 2667 65 83			adc :eax+1
   916 2669 85 8B			sta :ecx+1
   917 266B AD 29 28			lda CHECK
   918 266E 85 86			sta :edx
   919 2670 AD 2A 28			lda CHECK+1
   920 2673 85 87			sta :edx+1
   921 2675 A9 08			lda #$08
   922 2677 85 82			sta :eax
   923 2679 A9 00			lda #$00
   924 267B 85 83			sta :eax+1
   925 267D 20 8F 23			jsr @move
   926
   927 				; optimize OK (examples\chrdef.pas), line = 43
   928
   929 2680 A9 00			lda #$00
   930 2682 85 83			sta :eax+1
   931 2684 A9 1E			lda #$1E
   932 2686 0A				asl @
   933 2687 26 83			rol :eax+1
   934 2689 0A				asl @
   935 268A 26 83			rol :eax+1
   936 268C 0A				asl @
   937 268D 26 83			rol :eax+1
   938 268F 18 6D 6D 2C			add TOPMEM
   939 2693 85 8A			sta :ecx
   940 2695 AD 6E 2C			lda TOPMEM+1
   941 2698 65 83			adc :eax+1
   942 269A 85 8B			sta :ecx+1
   943 269C AD 2B 28			lda SMILEY
   944 269F 85 86			sta :edx
   945 26A1 AD 2C 28			lda SMILEY+1
   946 26A4 85 87			sta :edx+1
   947 26A6 A9 08			lda #$08
   948 26A8 85 82			sta :eax
   949 26AA A9 00			lda #$00
   950 26AC 85 83			sta :eax+1
   951 26AE 20 8F 23			jsr @move
   952
   953 				; optimize FAIL ('CRT.GOTOXY', examples\chrdef.pas), line = 45
   954 26B1 E8				inx
   955 26B2 A9 03 95 98			mva #$03 :STACKORIGIN,x
   956 26B6 E8				inx
   957 26B7 95 98			sta :STACKORIGIN,x
   958 26B9 20 1A 25			jsr CRT.GOTOXY
   959
   960 				; optimize FAIL ('SYSTEM.CONCAT_007C', examples\chrdef.pas), line = 46
   961 26BC E8				inx
   962 26BD A9 3E 95 98			mva #$3E :STACKORIGIN,x
   963 26C1 E8				inx
   964 26C2 A9 9B 95 98			mva #$9B :STACKORIGIN,x
   965 26C6 20 D6 24			jsr SYSTEM.CONCAT_007C
   966 					@moveSTRING STRBUFFER
   966 				 LDY STRBUFFER+1\ LDA STRBUFFER\ JSR @MOVESTRING
   966 26C9 AC 28 28		 LDY STRBUFFER+1
   966 26CC AD 27 28		 LDA STRBUFFER
   966 26CF 20 47 23		 JSR @MOVESTRING
   967 26D2 CA				dex						; sub bx, 1
   968 				; BlockWrite
   969
   970 				; optimize OK (examples\chrdef.pas), line = 47
   971
   972 26D3 AD 25 28 85 90 AD + 	mwa F :bp2
   973 26DD A0 06			ldy #s@file.buffer
   974 26DF AD 27 28			lda STRBUFFER
   975 26E2 18 69 01			add #$01
   976 26E5 91 90			sta (:bp2),y
   977 26E7 C8				iny
   978 26E8 AD 28 28			lda STRBUFFER+1
   979 26EB 69 00			adc #$00
   980 26ED 91 90			sta (:bp2),y
   981
   982 				; optimize OK (examples\chrdef.pas), line = 47
   983
   984 26EF AD 27 28 85 90 AD + 	mwa STRBUFFER :bp2
   985 26F9 A0 00			ldy #0
   986 26FB B1 90			lda (:bp2),y
   987 26FD AC 25 28 84 90 AC + 	mwy F :bp2
   988 2707 A0 08			ldy #s@file.nrecord
   989 2709 91 90			sta (:bp2),y
   990 270B C8				iny
   991 270C A9 00			lda #$00
   992 270E 91 90			sta (:bp2),y
   993
   994 2710 8A 48			txa:pha
   995 2712 38				sec
   996 					@readfile F, #11
   996 				 LDY F+1\ LDA F\ LDX# 11\ JSR @READFILE
   996 2713 AC 26 28		 LDY F+1
   996 2716 AD 25 28		 LDA F
   996 2719 A2 0B		 LDX# 11
   996 271B 20 10 21		 JSR @READFILE
   997 271E 68 AA			pla:tax
   998
   999 				; optimize FAIL ('SYSTEM.CONCAT_0073', examples\chrdef.pas), line = 48
  1000 2720 E8				inx
  1001 2721 A9 11 95 98			mva #$11 :STACKORIGIN,x
  1002 2725 A9 20 95 A8			mva #$20 :STACKORIGIN+STACKWIDTH,x
  1003 2729 E8				inx
  1004 272A A9 9B 95 98			mva #$9B :STACKORIGIN,x
  1005 272E 20 6B 24			jsr SYSTEM.CONCAT_0073
  1006 					@moveSTRING STRBUFFER
  1006 				 LDY STRBUFFER+1\ LDA STRBUFFER\ JSR @MOVESTRING
  1006 2731 AC 28 28		 LDY STRBUFFER+1
  1006 2734 AD 27 28		 LDA STRBUFFER
  1006 2737 20 47 23		 JSR @MOVESTRING
  1007 273A CA				dex						; sub bx, 1
  1008 				; BlockWrite
  1009
  1010 				; optimize OK (examples\chrdef.pas), line = 49
  1011
  1012 273B AD 25 28 85 90 AD + 	mwa F :bp2
  1013 2745 A0 06			ldy #s@file.buffer
  1014 2747 AD 27 28			lda STRBUFFER
  1015 274A 18 69 01			add #$01
  1016 274D 91 90			sta (:bp2),y
  1017 274F C8				iny
  1018 2750 AD 28 28			lda STRBUFFER+1
  1019 2753 69 00			adc #$00
  1020 2755 91 90			sta (:bp2),y
  1021
  1022 				; optimize OK (examples\chrdef.pas), line = 49
  1023
  1024 2757 AD 27 28 85 90 AD + 	mwa STRBUFFER :bp2
  1025 2761 A0 00			ldy #0
  1026 2763 B1 90			lda (:bp2),y
  1027 2765 AC 25 28 84 90 AC + 	mwy F :bp2
  1028 276F A0 08			ldy #s@file.nrecord
  1029 2771 91 90			sta (:bp2),y
  1030 2773 C8				iny
  1031 2774 A9 00			lda #$00
  1032 2776 91 90			sta (:bp2),y
  1033
  1034 2778 8A 48			txa:pha
  1035 277A 38				sec
  1036 					@readfile F, #11
  1036 				 LDY F+1\ LDA F\ LDX# 11\ JSR @READFILE
  1036 277B AC 26 28		 LDY F+1
  1036 277E AD 25 28		 LDA F
  1036 2781 A2 0B		 LDX# 11
  1036 2783 20 10 21		 JSR @READFILE
  1037 2786 68 AA			pla:tax
  1038
  1039 2788 A0 F6			ldy #256-10
  1040 278A B9 1F 1F 99 77 2A + 	mva:rne CODEORIGIN+$0015+10-256,y adr.STRBUFFER+10-256,y+
  1041 				; BlockWrite
  1042
  1043 				; optimize OK (examples\chrdef.pas), line = 51
  1044
  1045 2793 AD 25 28 85 90 AD + 	mwa F :bp2
  1046 279D A0 06			ldy #s@file.buffer
  1047 279F AD 27 28			lda STRBUFFER
  1048 27A2 18 69 01			add #$01
  1049 27A5 91 90			sta (:bp2),y
  1050 27A7 C8				iny
  1051 27A8 AD 28 28			lda STRBUFFER+1
  1052 27AB 69 00			adc #$00
  1053 27AD 91 90			sta (:bp2),y
  1054
  1055 				; optimize OK (examples\chrdef.pas), line = 51
  1056
  1057 27AF AD 27 28 85 90 AD + 	mwa STRBUFFER :bp2
  1058 27B9 A0 00			ldy #0
  1059 27BB B1 90			lda (:bp2),y
  1060 27BD AC 25 28 84 90 AC + 	mwy F :bp2
  1061 27C7 A0 08			ldy #s@file.nrecord
  1062 27C9 91 90			sta (:bp2),y
  1063 27CB C8				iny
  1064 27CC A9 00			lda #$00
  1065 27CE 91 90			sta (:bp2),y
  1066
  1067 27D0 8A 48			txa:pha
  1068 27D2 38				sec
  1069 					@readfile F, #11
  1069 				 LDY F+1\ LDA F\ LDX# 11\ JSR @READFILE
  1069 27D3 AC 26 28		 LDY F+1
  1069 27D6 AD 25 28		 LDA F
  1069 27D9 A2 0B		 LDX# 11
  1069 27DB 20 10 21		 JSR @READFILE
  1070 27DE 68 AA			pla:tax
  1071
  1072 				; optimize FAIL (100, examples\chrdef.pas), line = 52
  1073 					@printSTRING #CODEORIGIN+$0020
  1073 				 LDY> CODEORIGIN+$0020\ LDA< CODEORIGIN+$0020\ JSR @PRINTSTRING
  1073 27E0 A0 20		 LDY> CODEORIGIN+$0020
  1073 27E2 A9 20		 LDA< CODEORIGIN+$0020
  1073 27E4 20 37 22		 JSR @PRINTSTRING
  1074 27E7 20 29 22			@printEOL
  1075
  1076 				; optimize OK (examples\chrdef.pas), line = 54
  1077
  1078 27EA A9 FF 8D FC 02		mva #$FF CH
  1079
  1080 				; --- RepeatUntilProlog
  1081 27EF			l_0192
  1082
  1083 				; optimize OK (examples\chrdef.pas), line = 56
  1084
  1085 27EF AD FC 02			lda CH
  1086 27F2 C9 21			cmp #$21
  1087 27F4 D0 F9			jne l_0192
  1088
  1089 				; optimize FAIL ('CRT.READKEY', examples\chrdef.pas), line = 57
  1090 27F6 20 09 25			jsr CRT.READKEY
  1091 27F9 B5 98 8D 6F 2C		mva :STACKORIGIN,x KEY
  1092 27FE CA				dex
  1093 27FF			@exit
  1094 					.ifdef @new
  1095 					@FreeMem #@VarData #@VarDataSize
  1096 					eif
  1097 27FF 60				rts						; ret
  1098 				.endl
  1099 2800			l_0043
  1100
  1101 				; optimize FAIL ('MAINPROC', examples\chrdef.pas), line = 61
  1102 2800 20 B2 25			jsr MAINPROC
  1103 				; CloseFile
  1104
  1105 2803 8A 48			txa:pha
  1106 2805 38				sec
  1107 					@closefile F
  1107 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
  1107 2806 AC 26 28		 LDY F+1
  1107 2809 AD 25 28		 LDA F
  1107 280C 20 E3 20		 JSR @CLOSEFILE
  1108 280F 68 AA			pla:tax
  1109
  1110 				; ------------------------------------------------------------
  1111
  1112 = 2B5D			INTVALUE	= DATAORIGIN+$0330
  1113 2811			.var F	= DATAORIGIN+$0334 .word
  1114 = 2B6D			adr.STRBUFFER	= DATAORIGIN+$0340
  1115 2811			.var STRBUFFER	= adr.STRBUFFER .word
  1116 = 02FC			CH	= $02FC
  1117 = 006A			RAMTOP	= $006A
  1118 = 02F4			CHBAS	= $02F4
  1119 = 2C6D			TOPMEM	= DATAORIGIN+$0440
  1120 = 2C6F			KEY	= DATAORIGIN+$0442
  1121 = 2C70			adr.CHECK	= DATAORIGIN+$0443
  1122 2811			.var CHECK	= adr.CHECK .word
  1123 = 2C78			adr.SMILEY	= DATAORIGIN+$044B
  1124 2811			.var SMILEY	= adr.SMILEY .word
  1125 2811			@exit
  1126
  1127 2811 A2 00		@halt	ldx #0
  1128 2813 9A				txs
  1129
  1130 2814 60				rts
  1131
  1132 				; ------------------------------------------------------------
  1133
  1134 2815 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1135
  1136 				; ------------------------------------------------------------
  1137
  1138 2825			.local	@DEFINES
  1139 2825			ATARI
  1140 				.endl
  1141
  1142 = 2825 61 2B		F
  1142 = 2827 6D 2B		STRBUFFER
  1142 = 2829 70 2C		CHECK
  1142 = 282B 78 2C		SMILEY
  1142 				.endl							; MAIN
  1143
  1144 				; ------------------------------------------------------------
  1145 				; ------------------------------------------------------------
  1146
  1147 				.macro	UNITINITIALIZATION
  1148 				
  1149 					.ifdef MAIN.SYSTEM.@UnitInit
  1150 					jsr MAIN.SYSTEM.@UnitInit
  1151 					eif
  1152 				
  1153 					.ifdef MAIN.DOS.@UnitInit
  1154 					jsr MAIN.DOS.@UnitInit
  1155 					eif
  1156 				
  1157 					.ifdef MAIN.STRUTILS.@UnitInit
  1158 					jsr MAIN.STRUTILS.@UnitInit
  1159 					eif
  1160 				
  1161 					.ifdef MAIN.SYSUTILS.@UnitInit
  1162 					jsr MAIN.SYSUTILS.@UnitInit
  1163 					eif
  1164 				
  1165 					.ifdef MAIN.ATARI.@UnitInit
  1166 					jsr MAIN.ATARI.@UnitInit
  1167 					eif
  1168 				
  1169 					.ifdef MAIN.CRT.@UnitInit
  1170 					jsr MAIN.CRT.@UnitInit
  1171 					eif
  1172 				
  1173 					.ifdef MAIN.TYPES.@UnitInit
  1174 					jsr MAIN.TYPES.@UnitInit
  1175 					eif
  1176 				
  1177 					.ifdef MAIN.GRAPH.@UnitInit
  1178 					jsr MAIN.GRAPH.@UnitInit
  1179 					eif
  1180 				.endm
  1181
  1182 				; ------------------------------------------------------------
  1183
  1184 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1185 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1185 				SYSTEM: $244C..$2508
  1186 					eif
  1187
  1188 					ift .SIZEOF(MAIN.DOS) > 0
  1189 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
  1190 					eif
  1191
  1192 					ift .SIZEOF(MAIN.STRUTILS) > 0
  1193 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
  1194 					eif
  1195
  1196 					ift .SIZEOF(MAIN.SYSUTILS) > 0
  1197 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
  1198 					eif
  1199
  1200 					ift .SIZEOF(MAIN.ATARI) > 0
  1201 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1202 					eif
  1203
  1204 					ift .SIZEOF(MAIN.CRT) > 0
  1205 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1205 				CRT: $2509..$2536
  1206 					eif
  1207
  1208 					ift .SIZEOF(MAIN.TYPES) > 0
  1209 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
  1210 					eif
  1211
  1212 					ift .SIZEOF(MAIN.GRAPH) > 0
  1213 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
  1213 				GRAPH: $2537..$25B1
  1214 					eif
  1215
  1216 					.print 'CODE: ',CODEORIGIN,'..',*-1
  1216 				CODE: $2000..$282C
  1217
  1218 				; ------------------------------------------------------------
  1219
  1220 282D			DATAORIGIN
  1221 282D 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1222 2845 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1223 285D 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1224 2875 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1225 288D 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1226 28A5 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1227 28BD 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1228 28D5 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1229 28ED 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1230 2905 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1231 291D 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1232 2935 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1233 294D 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1234 2965 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1235 297D 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1236 2995 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1237 29AD 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1238 29C5 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1239 29DD 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1240 29F5 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1241 2A0D 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1242 2A25 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1243 2A3D 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1244 2A55 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1245 2A6D 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1246 2A85 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1247 2A9D 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1248 2AB5 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1249 2ACD 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1250 2AE5 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1251 2AFD 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1252 2B15 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1253 2B2D 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $27 $00 $00 $00
  1254 2B45 17 00 00 00 00 00 + .by  $17 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1255 2B5D 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1256 2B75 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1257 2B8D 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1258 2BA5 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1259 2BBD 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1260 2BD5 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1261 2BED 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1262 2C05 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1263 2C1D 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1264 2C35 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1265 2C4D 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1266 2C65 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $01 $03 $06 $8C  $D8 $70 $20 $3C $42 $A5 $81 $A5
  1267 2C7D 99 42 3C		.by  $99 $42 $3C
  1268
  1269 = 0453			VARINITSIZE	= *-DATAORIGIN
  1270 = 0453			VARDATASIZE	= 1107
  1271
  1272 = 2C80			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1273
  1274 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1274 				DATA: $282D..$2C80
  1275
  1276 02E0-02E1> 37 24			run START
  1277
  1278 				; ------------------------------------------------------------
  1279
  1280 				.macro	STATICDATA
  1281 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $02 $53 $3A  $00 $02 $22 $22 $00 $09 $43 $48
  1282 				.by  $45 $43 $4B $45 $44 $20 $3C $00  $1A $50 $52 $45 $53 $53 $20 $3C  $53 $50 $41 $43 $45 $3E $20 $4B
  1283 				.by  $45 $59 $20 $54 $4F $20 $45 $58  $49 $54 $21 $00
  1284 				.endm
  1285
  1286 					end
