mads 2.1.0 build 8 (23 Dec 19)
   388 					opt l+
   101
   102 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   102 				ZPAGE: $0080..$00D7
   103
   104 				.print 'RTLIB: ',RTLIB,'..',*-1
   104 				RTLIB: $2038..$2218
   105
   106 				; ------------------------------------------------------------
   107
   108 2219			START
   109 2219 BA				tsx
   110 221A 8E 5F 25			stx MAIN.@halt+1
   111
   112 					.ifdef fmulinit
   113 					fmulinit
   114 					eif
   115
   116 = 0000			VLEN	= VARDATASIZE-VARINITSIZE
   117 = 28BF			VADR	= DATAORIGIN+VARINITSIZE
   118
   119 					ift VADR > $BFFF
   120 					ert 'Invalid memory address range ',VADR
   121 					eli (VLEN>0) && (VLEN<=256)
   122 					ldx #256-VLEN
   123 					lda #0
   124 					sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>0
   126 					@fill #VADR #VLEN #0
   127 					eif
   128
   129 					.ifdef MAIN.@DEFINES.ROMOFF
   130 					icl 'atari\romoff.asm'
   131 					.endif
   132
   133 221D A9 BF 85 82 A9 28 + 	mwa #PROGRAMSTACK psptr
   134
   135 2225 A2 0F			ldx #$0f					; DOS II+/D ParamStr
   136 2227 BD 40 03 9D 62 25 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   137
   138 2230 E8				inx						; X = 0
   139 2231 86 90			stx bp						; BP = 0
   140
   141 2233 8E 08 D2			stx audctl					; reset POKEY
   142 2236 A9 03			lda #3
   143 2238 8D 0F D2			sta skctl
   144
   145 223B CA				dex						; X = 255
   146
   147 223C				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: chrdef.a65]
   148
   149 223C			.local	MAIN						; PROCEDURE
   150
   151 223C 4C 5B 25			jmp l_003F
   152
   153 				; ------------------------------------------------------------
   154
   155 223F			.local	SYSTEM						; UNIT
   156
   157 223F			.local	MOVE_007A					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   158
   159 				; ------------------------------------------------------------
   160
   161 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   162 				; as Pointer
   163 223F B5 98 85 84			mva :STACKORIGIN,x COUNT
   164 2243 B5 A8 85 85			mva :STACKORIGIN+STACKWIDTH,x COUNT+1
   165 2247 CA				dex
   166
   167 				; ------------------------------------------------------------
   168
   169 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   170 				; as Pointer
   171 2248 B5 98 85 8C			mva :STACKORIGIN,x DEST
   172 224C B5 A8 85 8D			mva :STACKORIGIN+STACKWIDTH,x DEST+1
   173 2250 CA				dex
   174
   175 				; ------------------------------------------------------------
   176
   177 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   178 				; as Pointer
   179 2251 B5 98 85 88			mva :STACKORIGIN,x SOURCE
   180 2255 B5 A8 85 89			mva :STACKORIGIN+STACKWIDTH,x SOURCE+1
   181 2259 CA				dex
   182
   183 				; ---------------------  ASM Block 031  ---------------------
   184
   185 225A 20 0C 21			jsr @move
   186
   187
   188 				; ------------------------------------------------------------
   189
   190 = 0088			SOURCE	= edx
   191 = 008C			DEST	= ecx
   192 = 0084			COUNT	= eax
   193 225D			@exit
   194 					.ifdef @new
   195 					lda <@VarData
   196 					sta :ztmp
   197 					lda >@VarData
   198 					ldy #@VarDataSize-1
   199 					jmp @FreeMem
   200 					eif
   201 225D 60				rts						; ret
   202 				.endl
   203
   204 225E			.local	CONCAT_0098					; FUNCTION | ASSEMBLER | OVERLOAD
   205
   206 				; ------------------------------------------------------------
   207
   208 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   209 				; as Pointer
   210 225E B5 98 8D 85 25		mva :STACKORIGIN,x B
   211 2263 CA				dex
   212
   213 				; ------------------------------------------------------------
   214
   215 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   216 				; as Pointer
   217 2264 B5 98 8D 83 25		mva :STACKORIGIN,x A
   218 2269 B5 A8 8D 84 25		mva :STACKORIGIN+STACKWIDTH,x A+1
   219 226E CA				dex
   220
   221 				; ---------------------  ASM Block 044  ---------------------
   222
   223 226F AD 84 25 C9 04 D0 + 	cpw a #@buf
   224 227B F0 0E			beq skp
   225
   226 227D A9 00 8D 00 04		mva #0 @buf
   227 					@addString a
   227 				 LDY A+1\ LDA A\ JSR @ADDSTRING
   227 2282 AC 84 25		 LDY A+1
   227 2285 AD 83 25		 LDA A
   227 2288 20 7E 21		 JSR @ADDSTRING
   228 228B			skp
   229 228B EE 00 04			inc @buf
   230 228E AC 00 04			ldy @buf
   231 2291 AD 85 25			lda b
   232 2294 99 00 04			sta @buf,y
   233
   234 2297 A0 00			ldy #0
   235 2299 B9 00 04 99 86 25 + 	mva:rne @buf,y adr.Result,y+
   236
   237 22A2			@exit
   238
   239 				; ------------------------------------------------------------
   240
   241 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   242 				; as Pointer
   243
   244 22A2 E8				inx
   245 22A3 AD AE 22 95 98		mva RESULT :STACKORIGIN,x
   246 22A8 AD AF 22 95 A8		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   247
   248 					.ifdef @new
   249 					lda <@VarData
   250 					sta :ztmp
   251 					lda >@VarData
   252 					ldy #@VarDataSize-1
   253 					jmp @FreeMem
   254 					eif
   255
   256 				; ------------------------------------------------------------
   257
   258 = 2583			A	= DATAORIGIN+$000B
   259 = 2585			B	= DATAORIGIN+$000D
   260 = 2586			adr.RESULT	= DATAORIGIN+$000E
   261 22AD			.var RESULT	= adr.RESULT .word
   262
   263 = 2583			@VarData	= A
   264 = 0103			@VarDataSize	= 259
   265
   266 22AD 60				rts						; ret
   267 = 22AE 86 25		RESULT
   267 				.endl
   268
   269 22B0			.local	CONCAT_00A1					; FUNCTION | OVERLOAD
   270
   271 				; ------------------------------------------------------------
   272
   273 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   274 				; as Pointer
   275 22B0 B5 98 8D 87 26		mva :STACKORIGIN,x B
   276 22B5 CA				dex
   277
   278 				; ------------------------------------------------------------
   279
   280 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   281 				; as Pointer
   282 22B6 B5 98 8D 86 26		mva :STACKORIGIN,x A
   283 22BB CA				dex
   284
   285 				; optimize OK (SYSTEM), line = 2178
   286
   287 22BC A9 02 8D 88 26		mva #$02 adr.RESULT+$00
   288
   289 				; optimize OK (SYSTEM), line = 2179
   290
   291 22C1 A0 01			ldy #$01
   292 22C3 AD 86 26 99 88 26		mva A adr.RESULT,y
   293
   294 				; optimize OK (SYSTEM), line = 2180
   295
   296 22C9 C8				iny
   297 22CA AD 87 26 99 88 26		mva B adr.RESULT,y
   298 22D0			@exit
   299
   300 				; ------------------------------------------------------------
   301
   302 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   303 				; as Pointer
   304
   305 22D0 E8				inx
   306 22D1 AD DC 22 95 98		mva RESULT :STACKORIGIN,x
   307 22D6 AD DD 22 95 A8		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   308
   309 					.ifdef @new
   310 					lda <@VarData
   311 					sta :ztmp
   312 					lda >@VarData
   313 					ldy #@VarDataSize-1
   314 					jmp @FreeMem
   315 					eif
   316
   317 				; ------------------------------------------------------------
   318
   319 = 2686			A	= DATAORIGIN+$010E
   320 = 2687			B	= DATAORIGIN+$010F
   321 = 2688			adr.RESULT	= DATAORIGIN+$0110
   322 22DB			.var RESULT	= adr.RESULT .word
   323
   324 = 2686			@VarData	= A
   325 = 0102			@VarDataSize	= 258
   326
   327 22DB 60				rts						; ret
   328 = 22DC 88 26		RESULT
   328 				.endl
   329
   330 				; ------------------------------------------------------------
   331
   332 = 0101			__PORTB_BANKS	= $0101
   333 = 0648			M_PI_2	= $0648
   334 = 0192			D_PI_2	= $0192
   335 = 0004			D_PI_180	= $04
   336 = 0000			MGTIA	= $00
   337 = 0080			MVBXE	= $80
   338 = 0000			VBXE_XDLADR	= $00
   339 = 0100			VBXE_BCBADR	= $0100
   340 = 1000			VBXE_MAPADR	= $1000
   341 = 5000			VBXE_OVRADR	= $5000
   342 = B000			VBXE_WINDOW	= $B000
   343 = 0000			IDLI	= $00
   344 = 0001			IVBL	= $01
   345 = 00FE			CH_DELCHR	= $FE
   346 = 009B			CH_ENTER	= $9B
   347 = 001B			CH_ESC	= $1B
   348 = 001C			CH_CURS_UP	= $1C
   349 = 001D			CH_CURS_DOWN	= $1D
   350 = 001E			CH_CURS_LEFT	= $1E
   351 = 001F			CH_CURS_RIGHT	= $1F
   352 = 007F			CH_TAB	= $7F
   353 = 009B			CH_EOL	= $9B
   354 = 007D			CH_CLR	= $7D
   355 = 00FD			CH_BELL	= $FD
   356 = 007E			CH_DEL	= $7E
   357 = 009C			CH_DELLINE	= $9C
   358 = 009D			CH_INSLINE	= $9D
   359 = 0000			COLOR_BLACK	= $00
   360 = 000E			COLOR_WHITE	= $0E
   361 = 0032			COLOR_RED	= $32
   362 = 0096			COLOR_CYAN	= $96
   363 = 0068			COLOR_VIOLET	= $68
   364 = 00C4			COLOR_GREEN	= $C4
   365 = 0074			COLOR_BLUE	= $74
   366 = 00EE			COLOR_YELLOW	= $EE
   367 = 0028			COLOR_ORANGE	= $28
   368 = 00E4			COLOR_BROWN	= $E4
   369 = 003C			COLOR_LIGHTRED	= $3C
   370 = 0004			COLOR_GRAY1	= $04
   371 = 0006			COLOR_GRAY2	= $06
   372 = 000A			COLOR_GRAY3	= $0A
   373 = 00CC			COLOR_LIGHTGREEN	= $CC
   374 = 007C			COLOR_LIGHTBLUE	= $7C
   375 = 0004			FMOPENREAD	= $04
   376 = 0008			FMOPENWRITE	= $08
   377 = 0009			FMOPENAPPEND	= $09
   378 = 000C			FMOPENREADWRITE	= $0C
   379 = 2578			SCREENWIDTH	= DATAORIGIN+$0000
   380 = 257A			SCREENHEIGHT	= DATAORIGIN+$0002
   381 = 257C			DATESEPARATOR	= DATAORIGIN+$0004
   382 = D014			TVSYSTEM	= $D014
   383 = 02C0			adr.PALETTE	= $02C0
   384 22DE			.var PALETTE	= adr.PALETTE .word
   385 = D012			adr.HPALETTE	= $D012
   386 22DE			.var HPALETTE	= adr.HPALETTE .word
   387 = 257D			FILEMODE	= DATAORIGIN+$0005
   388 = 257E			GRAPHMODE	= DATAORIGIN+$0006
   389 = 257F			IORESULT	= DATAORIGIN+$0007
   390 = 2580			EOLN	= DATAORIGIN+$0008
   391 = 2581			RNDSEED	= DATAORIGIN+$0009
   392
   393 = 22DE C0 02		PALETTE
   393 = 22E0 12 D0		HPALETTE
   393 				.endl							; UNIT SYSTEM
   394
   395 				; ------------------------------------------------------------
   396
   397 22E2			.local	ATARI						; UNIT
   398
   399 				; ------------------------------------------------------------
   400
   401 = 0012			RTCLOK	= $12
   402 = 004D			ATRACT	= $4D
   403 = 0052			LMARGIN	= $52
   404 = 0053			RMARGIN	= $53
   405 = 0054			ROWCRS	= $54
   406 = 0055			COLCRS	= $55
   407 = 0057			DINDEX	= $57
   408 = 0058			SAVMSC	= $58
   409 = 0062			PALNTS	= $62
   410 = 006A			RAMTOP	= $6A
   411 = 0200			VDSLST	= $0200
   412 = 0230			SDLSTL	= $0230
   413 = 0290			TXTROW	= $0290
   414 = 0291			TXTCOL	= $0291
   415 = 0293			TINDEX	= $0293
   416 = 0294			TXTMSC	= $0294
   417 = 022F			SDMCTL	= $022F
   418 = 026F			GPRIOR	= $026F
   419 = 02F0			CRSINH	= $02F0
   420 = 02F3			CHACT	= $02F3
   421 = 02F4			CHBAS	= $02F4
   422 = 02FC			CH	= $02FC
   423 = 02C0			PCOLR0	= $02C0
   424 = 02C1			PCOLR1	= $02C1
   425 = 02C2			PCOLR2	= $02C2
   426 = 02C3			PCOLR3	= $02C3
   427 = 02C4			COLOR0	= $02C4
   428 = 02C5			COLOR1	= $02C5
   429 = 02C6			COLOR2	= $02C6
   430 = 02C7			COLOR3	= $02C7
   431 = 02C8			COLOR4	= $02C8
   432 = 02C8			COLBAKS	= $02C8
   433 = D000			HPOSP0	= $D000
   434 = D001			HPOSP1	= $D001
   435 = D002			HPOSP2	= $D002
   436 = D003			HPOSP3	= $D003
   437 = D004			HPOSM0	= $D004
   438 = D005			HPOSM1	= $D005
   439 = D006			HPOSM2	= $D006
   440 = D007			HPOSM3	= $D007
   441 = D008			SIZEP0	= $D008
   442 = D009			SIZEP1	= $D009
   443 = D00A			SIZEP2	= $D00A
   444 = D00B			SIZEP3	= $D00B
   445 = D00C			SIZEM	= $D00C
   446 = D00D			GRAFP0	= $D00D
   447 = D00E			GRAFP1	= $D00E
   448 = D00F			GRAFP2	= $D00F
   449 = D010			GRAFP3	= $D010
   450 = D011			GRAFM	= $D011
   451 = D004			P0PF	= $D004
   452 = D014			PAL	= $D014
   453 = D012			COLPM0	= $D012
   454 = D013			COLPM1	= $D013
   455 = D014			COLPM2	= $D014
   456 = D015			COLPM3	= $D015
   457 = D016			COLPF0	= $D016
   458 = D017			COLPF1	= $D017
   459 = D018			COLPF2	= $D018
   460 = D019			COLPF3	= $D019
   461 = D01A			COLBK	= $D01A
   462 = D01B			PRIOR	= $D01B
   463 = D01D			GRACTL	= $D01D
   464 = D01E			HITCLR	= $D01E
   465 = D200			AUDF1	= $D200
   466 = D201			AUDC1	= $D201
   467 = D202			AUDF2	= $D202
   468 = D203			AUDC2	= $D203
   469 = D204			AUDF3	= $D204
   470 = D205			AUDC3	= $D205
   471 = D206			AUDF4	= $D206
   472 = D207			AUDC4	= $D207
   473 = D208			AUDCTL	= $D208
   474 = D20F			SKSTAT	= $D20F
   475 = D301			PORTB	= $D301
   476 = D400			DMACTL	= $D400
   477 = D401			CHACTL	= $D401
   478 = D402			DLISTL	= $D402
   479 = D404			HSCROL	= $D404
   480 = D405			VSCROL	= $D405
   481 = D407			PMBASE	= $D407
   482 = D409			CHBASE	= $D409
   483 = D40A			WSYNC	= $D40A
   484 = D40B			VCOUNT	= $D40B
   485 = D40C			PENH	= $D40C
   486 = D40D			PENV	= $D40D
   487 = D40E			NMIEN	= $D40E
   488
   489 				.endl							; UNIT ATARI
   490
   491 				; ------------------------------------------------------------
   492
   493 22E2			.local	CRT						; UNIT
   494
   495 22E2			.local	READKEY						; FUNCTION | ASSEMBLER
   496
   497 				; ---------------------  ASM Block 049  ---------------------
   498
   499 22E2 8A 48			txa:pha
   500
   501 22E4 20 38 20			@GetKey
   502
   503 22E7 8D 89 27			sta Result
   504
   505 22EA 68 AA			pla:tax
   506
   507 22EC			@exit
   508
   509 				; ------------------------------------------------------------
   510
   511 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   512 				; as Pointer
   513
   514 22EC E8				inx
   515 22ED AD 89 27 95 98		mva RESULT :STACKORIGIN,x
   516
   517 					.ifdef @new
   518 					lda <@VarData
   519 					sta :ztmp
   520 					lda >@VarData
   521 					ldy #@VarDataSize-1
   522 					jmp @FreeMem
   523 					eif
   524
   525 				; ------------------------------------------------------------
   526
   527 = 2789			RESULT	= DATAORIGIN+$0211
   528
   529 = 2789			@VarData	= RESULT
   530 = 0001			@VarDataSize	= 1
   531
   532 22F2 60				rts						; ret
   533 				.endl
   534
   535 22F3			.local	GOTOXY						; PROCEDURE | ASSEMBLER
   536
   537 				; ------------------------------------------------------------
   538
   539 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   540 				; as Pointer
   541 22F3 B5 98 8D 8B 27		mva :STACKORIGIN,x Y
   542 22F8 CA				dex
   543
   544 				; ------------------------------------------------------------
   545
   546 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   547 				; as Pointer
   548 22F9 B5 98 8D 8A 27		mva :STACKORIGIN,x X
   549 22FE CA				dex
   550
   551 				; ---------------------  ASM Block 054  ---------------------
   552
   553 22FF AC 8A 27			ldy x
   554 2302 F0 01			beq @+
   555
   556 2304 88				dey
   557
   558 2305 84 55		@	sty colcrs
   559 2307 A0 00 84 56			mvy #$00 colcrs+1
   560
   561 230B AC 8B 27			ldy y
   562 230E F0 01			beq @+
   563
   564 2310 88				dey
   565
   566 2311 84 54		@	sty rowcrs
   567
   568
   569 				; ------------------------------------------------------------
   570
   571 = 278A			X	= DATAORIGIN+$0212
   572 = 278B			Y	= DATAORIGIN+$0213
   573
   574 = 278A			@VarData	= X
   575 = 0002			@VarDataSize	= 2
   576
   577 2313			@exit
   578 					.ifdef @new
   579 					lda <@VarData
   580 					sta :ztmp
   581 					lda >@VarData
   582 					ldy #@VarDataSize-1
   583 					jmp @FreeMem
   584 					eif
   585 2313 60				rts						; ret
   586 				.endl
   587
   588 				; ------------------------------------------------------------
   589
   590 = 2788			TEXTATTR	= DATAORIGIN+$0210
   591 = D01F			CONSOL	= $D01F
   592 = 0000			CN_START_SELECT_OPTION	= $00
   593 = 0001			CN_SELECT_OPTION	= $01
   594 = 0002			CN_START_OPTION	= $02
   595 = 0003			CN_OPTION	= $03
   596 = 0004			CN_START_SELECT	= $04
   597 = 0005			CN_SELECT	= $05
   598 = 0006			CN_START	= $06
   599 = 0007			CN_NONE	= $07
   600 = 0000			BW40	= $00
   601 = 0001			CO40	= $01
   602 = 0002			BW80	= $02
   603 = 0003			CO80	= $03
   604 = 0007			MONO	= $07
   605 = 0001			C40	= $01
   606 = 0003			C80	= $03
   607 = 0000			BLACK	= $00
   608 = 0001			BLUE	= $01
   609 = 0002			GREEN	= $02
   610 = 0003			CYAN	= $03
   611 = 0004			RED	= $04
   612 = 0005			MAGENTA	= $05
   613 = 0006			BROWN	= $06
   614 = 0007			LIGHTGRAY	= $07
   615 = 0008			DARKGRAY	= $08
   616 = 0009			LIGHTBLUE	= $09
   617 = 000A			LIGHTGREEN	= $0A
   618 = 000B			LIGHTCYAN	= $0B
   619 = 000C			LIGHTRED	= $0C
   620 = 000D			LIGHTMAGENTA	= $0D
   621 = 000E			YELLOW	= $0E
   622 = 000F			WHITE	= $0F
   623 = 0080			BLINK	= $80
   624
   625 				.endl							; UNIT CRT
   626
   627 				; ------------------------------------------------------------
   628
   629 2314			.local	DOS						; UNIT
   630
   631 				; ------------------------------------------------------------
   632
   633 = D014			PALNTSC	= $D014
   634
   635 				.endl							; UNIT DOS
   636
   637 				; ------------------------------------------------------------
   638
   639 2314			.local	STRUTILS					; UNIT
   640
   641 				; ------------------------------------------------------------
   642
   643 				.endl							; UNIT STRUTILS
   644
   645 				; ------------------------------------------------------------
   646
   647 2314			.local	SYSUTILS					; UNIT
   648
   649 				; ------------------------------------------------------------
   650
   651 = 0001			FAREADONLY	= $01
   652 = 0002			FAHIDDEN	= $02
   653 = 0004			FASYSFILE	= $04
   654 = 0008			FAVOLUMEID	= $08
   655 = 0010			FADIRECTORY	= $10
   656 = 0020			FAARCHIVE	= $20
   657 = 003F			FAANYFILE	= $3F
   658
   659 				.endl							; UNIT SYSUTILS
   660
   661 				; ------------------------------------------------------------
   662
   663 2314			.local	TYPES						; UNIT
   664
   665 				; ------------------------------------------------------------
   666
   667 				.endl							; UNIT TYPES
   668
   669 				; ------------------------------------------------------------
   670
   671 2314			.local	GRAPH						; UNIT
   672
   673 2314			.local	INITGRAPH_010A					; PROCEDURE | OVERLOAD
   674
   675 				; ------------------------------------------------------------
   676
   677 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   678 				; as Pointer
   679 2314 B5 98 8D A9 27		mva :STACKORIGIN,x MODE
   680 2319 CA				dex
   681
   682 				; ---------------------  ASM Block 078  ---------------------
   683
   684
   685 231A 8A 48			txa:pha
   686
   687 231C AD A9 27			lda mode
   688 231F 8D 7E 25			sta MAIN.SYSTEM.GraphMode
   689 2322 29 0F			and #$0f
   690 2324 A8				tay
   691
   692 2325 A2 60			ldx #$60		; 6*16
   693 2327 AD A9 27			lda mode		; %00010000 with text window
   694 232A 29 10			and #$10
   695 232C 49 10			eor #$10
   696 232E 09 02			ora #2			; read
   697
   698 					.nowarn @GRAPHICS
   698 2330 20 79 20		 JSR @GRAPHICS
   699
   700 2333 8C 94 27			sty GraphResult
   701
   702
   703 					.ifdef MAIN.@DEFINES.ROMOFF
   704 					inc portb
   705 					.endif
   706
   707 = EE6D			tlshc	equ $ee6d
   708
   709 2336 A6 57			ldx dindex
   710 2338 BC 6D EE			ldy tlshc,x
   711 233B A9 05			lda #5
   712 233D 0A			shift	asl @
   713 233E 88				dey
   714 233F D0 FC			bne shift
   715
   716 2341 8D A8 27			sta SCANLINE_WIDTH
   717
   718 				; Fox/TQA
   719
   720 = 0057			dindex	equ $57
   721 = EE7D			tmccn	equ $ee7d
   722 = EE8D			tmrcn	equ $ee8d
   723
   724 2344 A6 57			ldx dindex
   725 2346 BD 7D EE			lda tmccn,x
   726 2349 BC 8D EE			ldy tmrcn,x
   727 234C A2 00			ldx #0
   728 234E C9 40			cmp #<320
   729 2350 D0 01 E8			sne:inx
   730
   731 				; X:A = horizontal resolution
   732 				; Y = vertical resolution
   733
   734 2353 20 B3 20			@SCREENSIZE
   735
   736 					.ifdef MAIN.@DEFINES.ROMOFF
   737 					dec portb
   738 					.endif
   739
   740 2356 68 AA			pla:tax
   741
   742
   743 				; optimize OK (GRAPH), line = 132
   744
   745 2358 A5 58 8D A6 27		mva ATARI.SAVMSC VIDEORAM
   746 235D A5 59 8D A7 27		mva ATARI.SAVMSC+1 VIDEORAM+1
   747
   748 				; ------------------------------------------------------------
   749
   750 = 27A9			MODE	= DATAORIGIN+$0231
   751
   752 = 27A9			@VarData	= MODE
   753 = 0001			@VarDataSize	= 1
   754
   755 2362			@exit
   756 					.ifdef @new
   757 					lda <@VarData
   758 					sta :ztmp
   759 					lda >@VarData
   760 					ldy #@VarDataSize-1
   761 					jmp @FreeMem
   762 					eif
   763 2362 60				rts						; ret
   764 				.endl
   765
   766 				; ------------------------------------------------------------
   767
   768 = 0080			CURRENTDRIVER	= $80
   769 = 0000			DETECT	= $00
   770 = 0001			CGA	= $01
   771 = 0002			MCGA	= $02
   772 = 0003			EGA	= $03
   773 = 0004			EGA64	= $04
   774 = 0005			EGAMONO	= $05
   775 = 0006			LOWRES	= $06
   776 = 0007			HERCMONO	= $07
   777 = 0009			VGA	= $09
   778 = 000A			VESA	= $0A
   779 = 000B			D1BIT	= $0B
   780 = 000C			D2BIT	= $0C
   781 = 000D			D4BIT	= $0D
   782 = 000E			D6BIT	= $0E
   783 = 000F			D8BIT	= $0F
   784 = 0010			D12BIT	= $10
   785 = 0018			M640X400	= $18
   786 = 0018			M640X480	= $18
   787 = 0001			GROK	= $01
   788 = 00FF			GRNOINITGRAPH	= $FF
   789 = 00FE			GRNOTDETECTED	= $FE
   790 = 00FD			GRFILENOTFOUND	= $FD
   791 = 00FC			GRINVALIDDRIVER	= $FC
   792 = 00FB			GRNOLOADMEM	= $FB
   793 = 00FA			GRNOSCANMEM	= $FA
   794 = 00F9			GRNOFLOODMEM	= $F9
   795 = 00F8			GRFONTNOTFOUND	= $F8
   796 = 00F7			GRNOFONTMEM	= $F7
   797 = 00F6			GRINVALIDMODE	= $F6
   798 = 00F5			GRERROR	= $F5
   799 = 00F4			GRIOERROR	= $F4
   800 = 00F3			GRINVALIDFONT	= $F3
   801 = 00F2			GRINVALIDFONTNUM	= $F2
   802 = 00EE			GRINVALIDVERSION	= $EE
   803 = 0000			CGAC0	= $00
   804 = 0001			CGAC1	= $01
   805 = 0002			CGAC2	= $02
   806 = 0003			CGAC3	= $03
   807 = 0004			CGAHI	= $04
   808 = 0000			MCGAC0	= $00
   809 = 0001			MCGAC1	= $01
   810 = 0002			MCGAC2	= $02
   811 = 0003			MCGAC3	= $03
   812 = 0004			MCGAMED	= $04
   813 = 0005			MCGAHI	= $05
   814 = 0000			EGALO	= $00
   815 = 0001			EGAHI	= $01
   816 = 0000			EGA64LO	= $00
   817 = 0001			EGA64HI	= $01
   818 = 0003			EGAMONOHI	= $03
   819 = 000A			VGALO	= $0A
   820 = 001F			VGAMED	= $1F
   821 = 0018			VGAHI	= $18
   822 = 278C			WIN_LEFT	= DATAORIGIN+$0214
   823 = 278E			WIN_RIGHT	= DATAORIGIN+$0216
   824 = 2790			WIN_TOP	= DATAORIGIN+$0218
   825 = 2792			WIN_BOTTOM	= DATAORIGIN+$021A
   826 = 2794			GRAPHRESULT	= DATAORIGIN+$021C
   827 = 2795			GETCOLOR	= DATAORIGIN+$021D
   828 = 2796			adr.LASTARCCOORDS	= DATAORIGIN+$021E
   829 2363			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   830 = 2796			LASTARCCOORDS.X	= DATAORIGIN+$021E
   831 = 2798			LASTARCCOORDS.Y	= DATAORIGIN+$0220
   832 = 279A			LASTARCCOORDS.XSTART	= DATAORIGIN+$0222
   833 = 279C			LASTARCCOORDS.YSTART	= DATAORIGIN+$0224
   834 = 279E			LASTARCCOORDS.XEND	= DATAORIGIN+$0226
   835 = 27A0			LASTARCCOORDS.YEND	= DATAORIGIN+$0228
   836 = 27A2			CURRENTX	= DATAORIGIN+$022A
   837 = 27A4			CURRENTY	= DATAORIGIN+$022C
   838 = 27A6			VIDEORAM	= DATAORIGIN+$022E
   839 = 27A8			SCANLINE_WIDTH	= DATAORIGIN+$0230
   840
   841 = 2363 96 27		LASTARCCOORDS
   841 				.endl							; UNIT GRAPH
   842
   843 				; ------------------------------------------------------------
   844
   845 2365			.local	CIO						; UNIT
   846
   847 2365			.local	GET						; FUNCTION | ASSEMBLER
   848
   849 				; ------------------------------------------------------------
   850
   851 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   852 				; as Pointer
   853 2365 B5 98 8D AA 27		mva :STACKORIGIN,x CHN
   854 236A CA				dex
   855
   856 				; ---------------------  ASM Block 095  ---------------------
   857
   858 236B 8A 48			txa:pha
   859
   860 236D AD AA 27			lda chn
   861 2370 0A 0A 0A 0A			:4 asl @
   862 2374 AA				tax
   863
   864 2375 A9 07			lda #7		;get char command
   865 2377 9D 42 03			sta iccmd,x
   866
   867 237A A9 00			lda #$00	;zero out the unused
   868 237C 9D 48 03			sta icbufl,x	;store in accumulator
   869 237F 9D 49 03			sta icbufh,x	;...after CIOV jump
   870
   871 2382				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 2382 20 56 E4				jsr CIOV
Source: chrdef.a65
   872
   873 2385 8C 7F 25			sty MAIN.SYSTEM.IOResult
   874
   875 2388 8D AB 27			sta Result
   876
   877 238B 68 AA			pla:tax
   878
   879 238D			@exit
   880
   881 				; ------------------------------------------------------------
   882
   883 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   884 				; as Pointer
   885
   886 238D E8				inx
   887 238E AD AB 27 95 98		mva RESULT :STACKORIGIN,x
   888
   889 					.ifdef @new
   890 					lda <@VarData
   891 					sta :ztmp
   892 					lda >@VarData
   893 					ldy #@VarDataSize-1
   894 					jmp @FreeMem
   895 					eif
   896
   897 				; ------------------------------------------------------------
   898
   899 = 27AA			CHN	= DATAORIGIN+$0232
   900 = 27AB			RESULT	= DATAORIGIN+$0233
   901
   902 = 27AA			@VarData	= CHN
   903 = 0002			@VarDataSize	= 2
   904
   905 2393 60				rts						; ret
   906 				.endl
   907
   908 2394			.local	BPUT						; PROCEDURE | ASSEMBLER | REGISTER
   909
   910 				; ------------------------------------------------------------
   911
   912 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   913 				; as Pointer
   914 2394 B5 98 85 84			mva :STACKORIGIN,x CNT
   915 2398 B5 A8 85 85			mva :STACKORIGIN+STACKWIDTH,x CNT+1
   916 239C CA				dex
   917
   918 				; ------------------------------------------------------------
   919
   920 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   921 				; as Pointer
   922 239D B5 98 85 8C			mva :STACKORIGIN,x BUF
   923 23A1 B5 A8 85 8D			mva :STACKORIGIN+STACKWIDTH,x BUF+1
   924 23A5 CA				dex
   925
   926 				; ------------------------------------------------------------
   927
   928 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   929 				; as Pointer
   930 23A6 B5 98 85 88			mva :STACKORIGIN,x CHN
   931 23AA CA				dex
   932
   933 				; ---------------------  ASM Block 098  ---------------------
   934
   935 23AB 8A 48			txa:pha
   936
   937 23AD A5 88			lda chn
   938 23AF 0A 0A 0A 0A			:4 asl @
   939 23B3 AA				tax
   940
   941 23B4 A9 0B			lda #11		;put char/s command
   942 23B6 9D 42 03			sta iccmd,x
   943
   944 23B9 A5 8C			lda buf
   945 23BB 9D 44 03			sta icbufa,x
   946 23BE A5 8D			lda buf+1
   947 23C0 9D 45 03			sta icbufa+1,x
   948
   949 23C3 A5 84			lda cnt
   950 23C5 9D 48 03			sta icbufl,x
   951 23C8 A5 85			lda cnt+1
   952 23CA 9D 49 03			sta icbufh,x
   953
   954 23CD				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 23CD 20 56 E4				jsr CIOV
Source: chrdef.a65
   955
   956 23D0 8C 7F 25			sty MAIN.SYSTEM.IOResult
   957
   958 23D3 68 AA			pla:tax
   959
   960
   961 				; ------------------------------------------------------------
   962
   963 = 0088			CHN	= edx
   964 = 008C			BUF	= ecx
   965 = 0084			CNT	= eax
   966 23D5			@exit
   967 					.ifdef @new
   968 					lda <@VarData
   969 					sta :ztmp
   970 					lda >@VarData
   971 					ldy #@VarDataSize-1
   972 					jmp @FreeMem
   973 					eif
   974 23D5 60				rts						; ret
   975 				.endl
   976
   977 				; ------------------------------------------------------------
   978
   979 				.endl							; UNIT CIO
   980
   981 23D6			.local	MAINPROC					; PROCEDURE
   982
   983 				; optimize FAIL ('GRAPH.INITGRAPH_010A', examples\chrdef.pas), line = 26
   984 23D6 E8				inx
   985 23D7 A9 02 95 98			mva #$02 :STACKORIGIN,x
   986 23DB 20 14 23			jsr GRAPH.INITGRAPH_010A
   987
   988 				; optimize OK (examples\chrdef.pas), line = 28
   989
   990 23DE A5 6A			lda RAMTOP
   991 23E0 38 E9 08			sub #$08
   992 23E3 8D AC 28			sta TOPMEM
   993 23E6 A9 00			lda #$00
   994 23E8 E9 00			sbc #$00
   995 23EA 8D AD 28			sta TOPMEM+1
   996
   997 				; optimize OK (examples\chrdef.pas), line = 29
   998
   999 23ED AD AC 28 8D F4 02		mva TOPMEM CHBAS
  1000
  1001 				; optimize OK (examples\chrdef.pas), line = 30
  1002
  1003 23F3 A9 00			lda #$00
  1004 23F5 85 84			sta :eax
  1005 23F7 AD AC 28			lda TOPMEM
  1006 23FA 85 85			sta :eax+1
  1007 23FC A5 84			lda :eax
  1008 23FE 8D AC 28			sta TOPMEM
  1009 2401 A5 85			lda :eax+1
  1010 2403 8D AD 28			sta TOPMEM+1
  1011
  1012 				; optimize OK (examples\chrdef.pas), line = 34
  1013
  1014 2406 AD AC 28			lda TOPMEM
  1015 2409 85 84			sta :ax
  1016 240B AD AD 28			lda TOPMEM+1
  1017 240E 85 85			sta :ax+1
  1018 2410 A9 00			lda #$00
  1019 2412 85 8C			sta :cx
  1020 2414 A9 01			lda #$01
  1021 2416 85 8D			sta :cx+1
  1022 2418 20 AB 21			jsr idivAX_CX
  1023 241B A5 84			lda :eax
  1024 241D 8D F4 02			sta CHBAS
  1025
  1026 				; optimize OK (examples\chrdef.pas), line = 36
  1027
  1028 2420 A9 00			lda #$00
  1029 2422 85 88			sta :edx
  1030 2424 A9 E0			lda #$E0
  1031 2426 85 89			sta :edx+1
  1032 2428 AD AC 28			lda TOPMEM
  1033 242B 85 8C			sta :ecx
  1034 242D AD AD 28			lda TOPMEM+1
  1035 2430 85 8D			sta :ecx+1
  1036 2432 A9 FF			lda #$FF
  1037 2434 85 84			sta :eax
  1038 2436 A9 03			lda #$03
  1039 2438 85 85			sta :eax+1
  1040 243A 20 0C 21			jsr @move
  1041
  1042 				; optimize OK (examples\chrdef.pas), line = 38
  1043
  1044 243D AD AC 28			lda TOPMEM
  1045 2440 18 69 E0			add #$E0
  1046 2443 85 8C			sta :ecx
  1047 2445 AD AD 28			lda TOPMEM+1
  1048 2448 69 00			adc #$00
  1049 244A 85 8D			sta :ecx+1
  1050 244C AD 74 25			lda CHECK
  1051 244F 85 88			sta :edx
  1052 2451 AD 75 25			lda CHECK+1
  1053 2454 85 89			sta :edx+1
  1054 2456 A9 08			lda #$08
  1055 2458 85 84			sta :eax
  1056 245A A9 00			lda #$00
  1057 245C 85 85			sta :eax+1
  1058 245E 20 0C 21			jsr @move
  1059
  1060 				; optimize OK (examples\chrdef.pas), line = 39
  1061
  1062 2461 AD AC 28			lda TOPMEM
  1063 2464 18 69 F0			add #$F0
  1064 2467 85 8C			sta :ecx
  1065 2469 AD AD 28			lda TOPMEM+1
  1066 246C 69 00			adc #$00
  1067 246E 85 8D			sta :ecx+1
  1068 2470 AD 76 25			lda SMILEY
  1069 2473 85 88			sta :edx
  1070 2475 AD 77 25			lda SMILEY+1
  1071 2478 85 89			sta :edx+1
  1072 247A A9 08			lda #$08
  1073 247C 85 84			sta :eax
  1074 247E A9 00			lda #$00
  1075 2480 85 85			sta :eax+1
  1076 2482 20 0C 21			jsr @move
  1077
  1078 				; optimize FAIL ('CRT.GOTOXY', examples\chrdef.pas), line = 41
  1079 2485 E8				inx
  1080 2486 A9 03 95 98			mva #$03 :STACKORIGIN,x
  1081 248A E8				inx
  1082 248B 95 98			sta :STACKORIGIN,x
  1083 248D 20 F3 22			jsr CRT.GOTOXY
  1084
  1085 				; optimize FAIL ('SYSTEM.CONCAT_00A1', examples\chrdef.pas), line = 42
  1086 2490 E8				inx
  1087 2491 A9 3E 95 98			mva #$3E :STACKORIGIN,x
  1088 2495 E8				inx
  1089 2496 A9 9B 95 98			mva #$9B :STACKORIGIN,x
  1090 249A 20 B0 22			jsr SYSTEM.CONCAT_00A1
  1091 					@moveSTRING STRBUFFER
  1091 				 LDY STRBUFFER+1\ LDA STRBUFFER\ JSR @MOVESTRING
  1091 249D AC 73 25		 LDY STRBUFFER+1
  1091 24A0 AD 72 25		 LDA STRBUFFER
  1091 24A3 20 61 21		 JSR @MOVESTRING
  1092 24A6 CA				dex
  1093
  1094 				; optimize FAIL ('CIO.BPUT', examples\chrdef.pas), line = 43
  1095 24A7 E8				inx
  1096 24A8 A9 06 95 98			mva #$06 :STACKORIGIN,x
  1097 24AC E8				inx
  1098 24AD A9 AC			lda <adr.STRBUFFER
  1099 24AF 18 69 01			add #$01
  1100 24B2 95 98			sta :STACKORIGIN,x
  1101 24B4 A9 27			lda >adr.STRBUFFER
  1102 24B6 69 00			adc #$00
  1103 24B8 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  1104 24BA E8				inx
  1105 24BB AD AC 27			lda adr.STRBUFFER
  1106 24BE 95 98			sta :STACKORIGIN,x
  1107 24C0 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1108 24C4 20 94 23			jsr CIO.BPUT
  1109
  1110 				; optimize FAIL ('SYSTEM.CONCAT_0098', examples\chrdef.pas), line = 44
  1111 24C7 E8				inx
  1112 24C8 A9 0D 95 98			mva #$0D :STACKORIGIN,x
  1113 24CC A9 20 95 A8			mva #$20 :STACKORIGIN+STACKWIDTH,x
  1114 24D0 E8				inx
  1115 24D1 A9 9B 95 98			mva #$9B :STACKORIGIN,x
  1116 24D5 20 5E 22			jsr SYSTEM.CONCAT_0098
  1117 					@moveSTRING STRBUFFER
  1117 				 LDY STRBUFFER+1\ LDA STRBUFFER\ JSR @MOVESTRING
  1117 24D8 AC 73 25		 LDY STRBUFFER+1
  1117 24DB AD 72 25		 LDA STRBUFFER
  1117 24DE 20 61 21		 JSR @MOVESTRING
  1118 24E1 CA				dex
  1119
  1120 				; optimize FAIL ('CIO.BPUT', examples\chrdef.pas), line = 45
  1121 24E2 E8				inx
  1122 24E3 A9 06 95 98			mva #$06 :STACKORIGIN,x
  1123 24E7 E8				inx
  1124 24E8 A9 AC			lda <adr.STRBUFFER
  1125 24EA 18 69 01			add #$01
  1126 24ED 95 98			sta :STACKORIGIN,x
  1127 24EF A9 27			lda >adr.STRBUFFER
  1128 24F1 69 00			adc #$00
  1129 24F3 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  1130 24F5 E8				inx
  1131 24F6 AD AC 27			lda adr.STRBUFFER
  1132 24F9 95 98			sta :STACKORIGIN,x
  1133 24FB A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1134 24FF 20 94 23			jsr CIO.BPUT
  1135 2502 A0 F6			ldy #256-10
  1136 2504 B9 1B 1F 99 B6 26 + 	mva:rne CODEORIGIN+$0011+10-256,y adr.STRBUFFER+10-256,y+
  1137
  1138 				; optimize FAIL ('CIO.BPUT', examples\chrdef.pas), line = 47
  1139 250D E8				inx
  1140 250E A9 06 95 98			mva #$06 :STACKORIGIN,x
  1141 2512 E8				inx
  1142 2513 A9 AC			lda <adr.STRBUFFER
  1143 2515 18 69 01			add #$01
  1144 2518 95 98			sta :STACKORIGIN,x
  1145 251A A9 27			lda >adr.STRBUFFER
  1146 251C 69 00			adc #$00
  1147 251E 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  1148 2520 E8				inx
  1149 2521 AD AC 27			lda adr.STRBUFFER
  1150 2524 95 98			sta :STACKORIGIN,x
  1151 2526 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1152 252A 20 94 23			jsr CIO.BPUT
  1153
  1154 				; optimize FAIL (100, examples\chrdef.pas), line = 48
  1155 					@printSTRING #CODEORIGIN+$001C
  1155 				 LDY> CODEORIGIN+$001C\ LDA< CODEORIGIN+$001C\ JSR @PRINTSTRING
  1155 252D A0 20		 LDY> CODEORIGIN+$001C
  1155 252F A9 1C		 LDA< CODEORIGIN+$001C
  1155 2531 20 EA 21		 JSR @PRINTSTRING
  1156 2534 20 DC 21			@printEOL
  1157
  1158 				; optimize OK (examples\chrdef.pas), line = 50
  1159
  1160 2537 A9 FF 8D FC 02		mva #$FF CH
  1161
  1162 				; --- RepeatUntilProlog
  1163 253C			l_01D2
  1164
  1165 				; optimize OK (examples\chrdef.pas), line = 52
  1166
  1167 253C AD FC 02			lda CH
  1168 253F C9 21			cmp #$21
  1169 2541 D0 F9			jne l_01D2
  1170
  1171 				; optimize OK (examples\chrdef.pas), line = 53
  1172
  1173 2543 A9 FF 8D FC 02		mva #$FF CH
  1174
  1175 				; optimize FAIL ('CIO.GET', examples\chrdef.pas), line = 54
  1176 2548 E8				inx
  1177 2549 A9 07 95 98			mva #$07 :STACKORIGIN,x
  1178 254D 20 65 23			jsr CIO.GET
  1179 2550 B5 98 8D AE 28		mva :STACKORIGIN,x KEY
  1180 2555 CA				dex
  1181
  1182 2556 20 E2 22			jsr CRT.READKEY					; call Entry
  1183
  1184 2559 CA				dex
  1185 255A			@exit
  1186 					.ifdef @new
  1187 					lda <@VarData
  1188 					sta :ztmp
  1189 					lda >@VarData
  1190 					ldy #@VarDataSize-1
  1191 					jmp @FreeMem
  1192 					eif
  1193 255A 60				rts						; ret
  1194 				.endl
  1195 255B			l_003F
  1196
  1197 				; optimize FAIL ('MAINPROC', examples\chrdef.pas), line = 59
  1198 255B 20 D6 23			jsr MAINPROC
  1199
  1200 				; ------------------------------------------------------------
  1201
  1202 = 27AC			adr.STRBUFFER	= DATAORIGIN+$0234
  1203 255E			.var STRBUFFER	= adr.STRBUFFER .word
  1204 = 02FC			CH	= $02FC
  1205 = 006A			RAMTOP	= $6A
  1206 = 02F4			CHBAS	= $02F4
  1207 = 28AC			TOPMEM	= DATAORIGIN+$0334
  1208 = 28AE			KEY	= DATAORIGIN+$0336
  1209 = 28AF			adr.CHECK	= DATAORIGIN+$0337
  1210 255E			.var CHECK	= adr.CHECK .word
  1211 = 28B7			adr.SMILEY	= DATAORIGIN+$033F
  1212 255E			.var SMILEY	= adr.SMILEY .word
  1213 255E			@exit
  1214
  1215 255E A2 00		@halt	ldx #0
  1216 2560 9A				txs
  1217 					.ifdef MAIN.@DEFINES.ROMOFF
  1218 					inc portb
  1219 					.endif
  1220
  1221 2561 60				rts
  1222
  1223 				; ------------------------------------------------------------
  1224
  1225 2562 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1226
  1227 				; ------------------------------------------------------------
  1228
  1229 2572			.local	@DEFINES
  1230 2572			ATARI
  1231 				.endl
  1232
  1233 = 2572 AC 27		STRBUFFER
  1233 = 2574 AF 28		CHECK
  1233 = 2576 B7 28		SMILEY
  1233 				.endl							; MAIN
  1234
  1235 				; ------------------------------------------------------------
  1236 				; ------------------------------------------------------------
  1237
  1238 				.macro	UNITINITIALIZATION
  1239 				
  1240 					.ifdef MAIN.SYSTEM.@UnitInit
  1241 					jsr MAIN.SYSTEM.@UnitInit
  1242 					eif
  1243 				
  1244 					.ifdef MAIN.ATARI.@UnitInit
  1245 					jsr MAIN.ATARI.@UnitInit
  1246 					eif
  1247 				
  1248 					.ifdef MAIN.CRT.@UnitInit
  1249 					jsr MAIN.CRT.@UnitInit
  1250 					eif
  1251 				
  1252 					.ifdef MAIN.DOS.@UnitInit
  1253 					jsr MAIN.DOS.@UnitInit
  1254 					eif
  1255 				
  1256 					.ifdef MAIN.STRUTILS.@UnitInit
  1257 					jsr MAIN.STRUTILS.@UnitInit
  1258 					eif
  1259 				
  1260 					.ifdef MAIN.SYSUTILS.@UnitInit
  1261 					jsr MAIN.SYSUTILS.@UnitInit
  1262 					eif
  1263 				
  1264 					.ifdef MAIN.TYPES.@UnitInit
  1265 					jsr MAIN.TYPES.@UnitInit
  1266 					eif
  1267 				
  1268 					.ifdef MAIN.GRAPH.@UnitInit
  1269 					jsr MAIN.GRAPH.@UnitInit
  1270 					eif
  1271 				
  1272 					.ifdef MAIN.CIO.@UnitInit
  1273 					jsr MAIN.CIO.@UnitInit
  1274 					eif
  1275 				.endm
  1276
  1277 				; ------------------------------------------------------------
  1278
  1279 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1280 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1280 				SYSTEM: $223F..$22E1
  1281 					eif
  1282
  1283 					ift .SIZEOF(MAIN.ATARI) > 0
  1284 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1285 					eif
  1286
  1287 					ift .SIZEOF(MAIN.CRT) > 0
  1288 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1288 				CRT: $22E2..$2313
  1289 					eif
  1290
  1291 					ift .SIZEOF(MAIN.DOS) > 0
  1292 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
  1293 					eif
  1294
  1295 					ift .SIZEOF(MAIN.STRUTILS) > 0
  1296 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
  1297 					eif
  1298
  1299 					ift .SIZEOF(MAIN.SYSUTILS) > 0
  1300 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
  1301 					eif
  1302
  1303 					ift .SIZEOF(MAIN.TYPES) > 0
  1304 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
  1305 					eif
  1306
  1307 					ift .SIZEOF(MAIN.GRAPH) > 0
  1308 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
  1308 				GRAPH: $2314..$2364
  1309 					eif
  1310
  1311 					ift .SIZEOF(MAIN.CIO) > 0
  1312 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
  1312 				CIO: $2365..$23D5
  1313 					eif
  1314
  1315 					.print 'CODE: ',CODEORIGIN,'..',*-1
  1315 				CODE: $2000..$2577
  1316
  1317 				; ------------------------------------------------------------
  1318
  1319 2578			DATAORIGIN
  1320 2578 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1321 2590 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1322 25A8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1323 25C0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1324 25D8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1325 25F0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1326 2608 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1327 2620 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1328 2638 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1329 2650 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1330 2668 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1331 2680 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1332 2698 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1333 26B0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1334 26C8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1335 26E0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1336 26F8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1337 2710 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1338 2728 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1339 2740 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1340 2758 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1341 2770 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1342 2788 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $27 $00  $00 $00 $17 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1343 27A0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1344 27B8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1345 27D0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1346 27E8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1347 2800 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1348 2818 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1349 2830 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1350 2848 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1351 2860 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1352 2878 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1353 2890 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1354 28A8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $01 $03 $06 $8C $D8 $70 $20 $3C  $42 $A5 $81 $A5 $99 $42 $3C
  1355
  1356 = 0347			VARINITSIZE	= *-DATAORIGIN
  1357 = 0347			VARDATASIZE	= 839
  1358
  1359 = 28BF			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1360
  1361 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1361 				DATA: $2578..$28BF
  1362
  1363 02E0-02E1> 19 22			run START
  1364
  1365 				; ------------------------------------------------------------
  1366
  1367 				.macro	STATICDATA
  1368 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $02 $22 $22  $00 $09 $43 $48 $45 $43 $4B $45
  1369 				.by  $44 $20 $3C $00 $1A $50 $52 $45  $53 $53 $20 $3C $53 $50 $41 $43  $45 $3E $20 $4B $45 $59 $20 $54
  1370 				.by  $4F $20 $45 $58 $49 $54 $21 $00
  1371 				.endm
  1372
  1373 					end
