mads 2.1.0
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $202C..$212D
    97
    98 				; ------------------------------------------------------------
    99
   100 212D			START
   101 212D BA				tsx
   102 212E 8E A0 21			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 00FD			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 22C4			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 2131 A2 03			ldx #256-VLEN
   115 2133 A9 00			lda #0
   116 2135 9D C1 22 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   119 					eif
   120
   121 213B A2 0F			ldx #$0f
   122 213D BD 40 03 9D A3 21 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 2146 E8				inx		; X = 0 !!!
   125 2147 86 8E			stx bp		; lo BP = 0
   126
   127 2149				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: strconst.a65]
   128
   129 2149			.local	MAIN						; PROCEDURE
   130
   131 2149 4C 9C 21			jmp l_0033
   132
   133 				; ------------------------------------------------------------
   134
   135 214C			.local	SYSTEM						; UNIT
   136
   137 				; ------------------------------------------------------------
   138
   139 = 0648			M_PI_2	= $0648
   140 = 0192			D_PI_2	= $0192
   141 = 0004			D_PI_180	= $0004
   142 = 0000			MGTIA	= $0000
   143 = 0080			MVBXE	= $0080
   144 = 0000			VBXE_XDLADR	= $0000
   145 = 0100			VBXE_BCBADR	= $0100
   146 = 1000			VBXE_MAPADR	= $1000
   147 = 5000			VBXE_OVRADR	= $5000
   148 = B000			VBXE_WINDOW	= $B000
   149 = 0000			IDLI	= $0000
   150 = 0001			IVBL	= $0001
   151 = 00FE			CH_DELCHR	= $00FE
   152 = 009B			CH_ENTER	= $009B
   153 = 001B			CH_ESC	= $001B
   154 = 001C			CH_CURS_UP	= $001C
   155 = 001D			CH_CURS_DOWN	= $001D
   156 = 001E			CH_CURS_LEFT	= $001E
   157 = 001F			CH_CURS_RIGHT	= $001F
   158 = 007F			CH_TAB	= $007F
   159 = 009B			CH_EOL	= $009B
   160 = 007D			CH_CLR	= $007D
   161 = 00FD			CH_BELL	= $00FD
   162 = 007E			CH_DEL	= $007E
   163 = 009C			CH_DELLINE	= $009C
   164 = 009D			CH_INSLINE	= $009D
   165 = 0000			COLOR_BLACK	= $0000
   166 = 000E			COLOR_WHITE	= $000E
   167 = 0032			COLOR_RED	= $0032
   168 = 0096			COLOR_CYAN	= $0096
   169 = 0068			COLOR_VIOLET	= $0068
   170 = 00C4			COLOR_GREEN	= $00C4
   171 = 0074			COLOR_BLUE	= $0074
   172 = 00EE			COLOR_YELLOW	= $00EE
   173 = 0028			COLOR_ORANGE	= $0028
   174 = 00E4			COLOR_BROWN	= $00E4
   175 = 003C			COLOR_LIGHTRED	= $003C
   176 = 0004			COLOR_GRAY1	= $0004
   177 = 0006			COLOR_GRAY2	= $0006
   178 = 000A			COLOR_GRAY3	= $000A
   179 = 00CC			COLOR_LIGHTGREEN	= $00CC
   180 = 007C			COLOR_LIGHTBLUE	= $007C
   181 = 0004			FMOPENREAD	= $0004
   182 = 0008			FMOPENWRITE	= $0008
   183 = 0009			FMOPENAPPEND	= $0009
   184 = 000C			FMOPENREADWRITE	= $000C
   185 = 21B3			SCREENWIDTH	= DATAORIGIN+$0000
   186 = 21B5			SCREENHEIGHT	= DATAORIGIN+$0002
   187 = 21B7			DATESEPARATOR	= DATAORIGIN+$0004
   188 = D014			TVSYSTEM	= $D014
   189 = 02C0			adr.PALETTE	= $02C0
   190 214C			.var PALETTE	= adr.PALETTE .word
   191 = D012			adr.HPALETTE	= $D012
   192 214C			.var HPALETTE	= adr.HPALETTE .word
   193 = 21B8			FILEMODE	= DATAORIGIN+$0005
   194 = 21B9			SCREENMODE	= DATAORIGIN+$0006
   195 = 21BA			IORESULT	= DATAORIGIN+$0007
   196 = 21BB			EOLN	= DATAORIGIN+$0008
   197 = 21BC			RNDSEED	= DATAORIGIN+$0009
   198
   199 = 214C C0 02		PALETTE
   199 = 214E 12 D0		HPALETTE
   199 				.endl							; UNIT SYSTEM
   200
   201 				; ------------------------------------------------------------
   202
   203 2150			.local	DOS						; UNIT
   204
   205 				; ------------------------------------------------------------
   206
   207 = D014			PALNTSC	= $D014
   208
   209 				.endl							; UNIT DOS
   210
   211 				; ------------------------------------------------------------
   212
   213 2150			.local	STRUTILS					; UNIT
   214
   215 				; ------------------------------------------------------------
   216
   217 				.endl							; UNIT STRUTILS
   218
   219 				; ------------------------------------------------------------
   220
   221 2150			.local	SYSUTILS					; UNIT
   222
   223 				; ------------------------------------------------------------
   224
   225 = 0001			FAREADONLY	= $0001
   226 = 0002			FAHIDDEN	= $0002
   227 = 0004			FASYSFILE	= $0004
   228 = 0008			FAVOLUMEID	= $0008
   229 = 0010			FADIRECTORY	= $0010
   230 = 0020			FAARCHIVE	= $0020
   231 = 003F			FAANYFILE	= $003F
   232
   233 				.endl							; UNIT SYSUTILS
   234
   235 				; ------------------------------------------------------------
   236
   237 2150			.local	ATARI						; UNIT
   238
   239 				; ------------------------------------------------------------
   240
   241 = 0012			RTCLOK	= $0012
   242 = 004D			ATRACT	= $004D
   243 = 0052			LMARGIN	= $0052
   244 = 0053			RMARGIN	= $0053
   245 = 0054			ROWCRS	= $0054
   246 = 0055			COLCRS	= $0055
   247 = 0057			DINDEX	= $0057
   248 = 0058			SAVMSC	= $0058
   249 = 006A			RAMTOP	= $006A
   250 = 0200			VDSLST	= $0200
   251 = 0230			SDLSTL	= $0230
   252 = 0290			TXTROW	= $0290
   253 = 0291			TXTCOL	= $0291
   254 = 0293			TINDEX	= $0293
   255 = 0294			TXTMSC	= $0294
   256 = 022F			SDMCTL	= $022F
   257 = 026F			GPRIOR	= $026F
   258 = 02F0			CRSINH	= $02F0
   259 = 02F3			CHACT	= $02F3
   260 = 02F4			CHBAS	= $02F4
   261 = 02FC			CH	= $02FC
   262 = 02C0			PCOLR0	= $02C0
   263 = 02C1			PCOLR1	= $02C1
   264 = 02C2			PCOLR2	= $02C2
   265 = 02C3			PCOLR3	= $02C3
   266 = 02C4			COLOR0	= $02C4
   267 = 02C5			COLOR1	= $02C5
   268 = 02C6			COLOR2	= $02C6
   269 = 02C7			COLOR3	= $02C7
   270 = 02C8			COLOR4	= $02C8
   271 = 02C8			COLBAKS	= $02C8
   272 = D000			HPOSP0	= $D000
   273 = D001			HPOSP1	= $D001
   274 = D002			HPOSP2	= $D002
   275 = D003			HPOSP3	= $D003
   276 = D004			HPOSM0	= $D004
   277 = D005			HPOSM1	= $D005
   278 = D006			HPOSM2	= $D006
   279 = D007			HPOSM3	= $D007
   280 = D008			SIZEP0	= $D008
   281 = D009			SIZEP1	= $D009
   282 = D00A			SIZEP2	= $D00A
   283 = D00B			SIZEP3	= $D00B
   284 = D00C			SIZEM	= $D00C
   285 = D00D			GRAFP0	= $D00D
   286 = D00E			GRAFP1	= $D00E
   287 = D00F			GRAFP2	= $D00F
   288 = D010			GRAFP3	= $D010
   289 = D011			GRAFM	= $D011
   290 = D004			P0PF	= $D004
   291 = D014			PAL	= $D014
   292 = D012			COLPM0	= $D012
   293 = D013			COLPM1	= $D013
   294 = D014			COLPM2	= $D014
   295 = D015			COLPM3	= $D015
   296 = D016			COLPF0	= $D016
   297 = D017			COLPF1	= $D017
   298 = D018			COLPF2	= $D018
   299 = D019			COLPF3	= $D019
   300 = D01A			COLBK	= $D01A
   301 = D01B			PRIOR	= $D01B
   302 = D01D			GRACTL	= $D01D
   303 = D01E			HITCLR	= $D01E
   304 = D200			AUDF1	= $D200
   305 = D201			AUDC1	= $D201
   306 = D202			AUDF2	= $D202
   307 = D203			AUDC2	= $D203
   308 = D204			AUDF3	= $D204
   309 = D205			AUDC3	= $D205
   310 = D206			AUDF4	= $D206
   311 = D207			AUDC4	= $D207
   312 = D208			AUDCTL	= $D208
   313 = D20F			SKSTAT	= $D20F
   314 = D301			PORTB	= $D301
   315 = D400			DMACTL	= $D400
   316 = D401			CHACTL	= $D401
   317 = D402			DLISTL	= $D402
   318 = D404			HSCROL	= $D404
   319 = D405			VSCROL	= $D405
   320 = D407			PMBASE	= $D407
   321 = D409			CHBASE	= $D409
   322 = D40A			WSYNC	= $D40A
   323 = D40B			VCOUNT	= $D40B
   324 = D40C			PENH	= $D40C
   325 = D40D			PENV	= $D40D
   326 = D40E			NMIEN	= $D40E
   327
   328 				.endl							; UNIT ATARI
   329
   330 				; ------------------------------------------------------------
   331
   332 2150			.local	CRT						; UNIT
   333
   334 2150			.local	READKEY						; FUNCTION | ASSEMBLER
   335
   336 				; ---------------------  ASM Block 063  ---------------------
   337
   338 2150 8A 48			txa:pha
   339
   340 2152 20 80 20			@GetKey
   341
   342 2155 8D BF 21			sta Result
   343
   344 2158 68 AA			pla:tax
   345
   346 215A			@exit
   347
   348 				; ------------------------------------------------------------
   349
   350 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   351 				; as Pointer
   352
   353 215A E8				inx						; add bx, 1
   354 215B AD BF 21 95 98		mva RESULT :STACKORIGIN,x
   355
   356 					.ifdef @new
   357 					@FreeMem #@VarData #@VarDataSize
   358 					eif
   359
   360 				; ------------------------------------------------------------
   361
   362 = 21BF			RESULT	= DATAORIGIN+$000C
   363
   364 = 21BF			@VarData	= RESULT
   365 = 0001			@VarDataSize	= 1
   366
   367 2160 60				rts						; ret
   368 				.endl
   369
   370 				; ------------------------------------------------------------
   371
   372 = 21BE			TEXTATTR	= DATAORIGIN+$000B
   373 = D01F			CONSOL	= $D01F
   374 = 0000			CN_START_SELECT_OPTION	= $0000
   375 = 0001			CN_SELECT_OPTION	= $0001
   376 = 0002			CN_START_OPTION	= $0002
   377 = 0003			CN_OPTION	= $0003
   378 = 0004			CN_START_SELECT	= $0004
   379 = 0005			CN_SELECT	= $0005
   380 = 0006			CN_START	= $0006
   381 = 0007			CN_NONE	= $0007
   382 = 0000			BW40	= $0000
   383 = 0001			CO40	= $0001
   384 = 0002			BW80	= $0002
   385 = 0003			CO80	= $0003
   386 = 0007			MONO	= $0007
   387 = 0001			C40	= $0001
   388 = 0003			C80	= $0003
   389 = 0000			BLACK	= $0000
   390 = 0001			BLUE	= $0001
   391 = 0002			GREEN	= $0002
   392 = 0003			CYAN	= $0003
   393 = 0004			RED	= $0004
   394 = 0005			MAGENTA	= $0005
   395 = 0006			BROWN	= $0006
   396 = 0007			LIGHTGRAY	= $0007
   397 = 0008			DARKGRAY	= $0008
   398 = 0009			LIGHTBLUE	= $0009
   399 = 000A			LIGHTGREEN	= $000A
   400 = 000B			LIGHTCYAN	= $000B
   401 = 000C			LIGHTRED	= $000C
   402 = 000D			LIGHTMAGENTA	= $000D
   403 = 000E			YELLOW	= $000E
   404 = 000F			WHITE	= $000F
   405 = 0080			BLINK	= $0080
   406
   407 				.endl							; UNIT CRT
   408
   409 2161			.local	MAINPROC					; PROCEDURE
   410
   411 				; optimize FAIL (100, examples\strconst.pas), line = 21
   412 					@printSTRING A
   412 				 LDY A+1\ LDA A\ JSR @PRINTSTRING
   412 2161 AC 99 21		 LDY A+1
   412 2164 AD 98 21		 LDA A
   412 2167 20 3A 20		 JSR @PRINTSTRING
   413 216A 20 2C 20			@printEOL
   414
   415 				; optimize FAIL (1, examples\strconst.pas), line = 22
   416 216D E8				inx
   417 216E AD 98 21 95 98		mva A :STACKORIGIN,x
   418 2173 AD 99 21 95 A8		mva A+1 :STACKORIGIN+STACKWIDTH,x
   419 					@moveSTRING B
   419 				 LDY B+1\ LDA B\ JSR @MOVESTRING
   419 2178 AC 9B 21		 LDY B+1
   419 217B AD 9A 21		 LDA B
   419 217E 20 90 20		 JSR @MOVESTRING
   420 2181 CA				dex						; sub bx, 1
   421
   422 				; optimize FAIL (100, examples\strconst.pas), line = 23
   423 					@printSTRING B
   423 				 LDY B+1\ LDA B\ JSR @PRINTSTRING
   423 2182 AC 9B 21		 LDY B+1
   423 2185 AD 9A 21		 LDA B
   423 2188 20 3A 20		 JSR @PRINTSTRING
   424 218B 20 2C 20			@printEOL
   425
   426 				; optimize FAIL ('CRT.READKEY', examples\strconst.pas), line = 24
   427 218E 20 50 21			jsr CRT.READKEY
   428 2191 B5 98 8D C0 21		mva :STACKORIGIN,x KEY
   429 2196 CA				dex
   430
   431 				; ------------------------------------------------------------
   432
   433 = 21C0			KEY	= DATAORIGIN+$000D
   434 = 21C1			adr.A	= DATAORIGIN+$000E
   435 2197			.var A	= adr.A .word
   436 = 22C1			adr.B	= DATAORIGIN+$010E
   437 2197			.var B	= adr.B .word
   438
   439 = 21C0			@VarData	= KEY
   440 = 0201			@VarDataSize	= 513
   441
   442 2197			@exit
   443 					.ifdef @new
   444 					@FreeMem #@VarData #@VarDataSize
   445 					eif
   446 2197 60				rts						; ret
   447 = 2198 C1 21		A
   447 = 219A C1 22		B
   447 				.endl
   448 219C			l_0033
   449
   450 				; optimize FAIL ('MAINPROC', examples\strconst.pas), line = 28
   451 219C 20 61 21			jsr MAINPROC
   452
   453 				; ------------------------------------------------------------
   454
   455 219F			@exit
   456
   457 219F A2 00		@halt	ldx #0
   458 21A1 9A				txs
   459
   460 21A2 60				rts
   461
   462 				; ------------------------------------------------------------
   463
   464 21A3 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   465
   466 				; ------------------------------------------------------------
   467
   468 21B3			.local	@DEFINES
   469 21B3			ATARI
   470 				.endl
   471
   472 				.endl							; MAIN
   473
   474 				; ------------------------------------------------------------
   475 				; ------------------------------------------------------------
   476
   477 				.macro	UNITINITIALIZATION
   478 				
   479 					.ifdef MAIN.SYSTEM.@UnitInit
   480 					jsr MAIN.SYSTEM.@UnitInit
   481 					eif
   482 				
   483 					.ifdef MAIN.DOS.@UnitInit
   484 					jsr MAIN.DOS.@UnitInit
   485 					eif
   486 				
   487 					.ifdef MAIN.STRUTILS.@UnitInit
   488 					jsr MAIN.STRUTILS.@UnitInit
   489 					eif
   490 				
   491 					.ifdef MAIN.SYSUTILS.@UnitInit
   492 					jsr MAIN.SYSUTILS.@UnitInit
   493 					eif
   494 				
   495 					.ifdef MAIN.ATARI.@UnitInit
   496 					jsr MAIN.ATARI.@UnitInit
   497 					eif
   498 				
   499 					.ifdef MAIN.CRT.@UnitInit
   500 					jsr MAIN.CRT.@UnitInit
   501 					eif
   502 				.endm
   503
   504 				; ------------------------------------------------------------
   505
   506 					ift .SIZEOF(MAIN.SYSTEM) > 0
   507 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   507 				SYSTEM: $214C..$214F
   508 					eif
   509
   510 					ift .SIZEOF(MAIN.DOS) > 0
   511 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   512 					eif
   513
   514 					ift .SIZEOF(MAIN.STRUTILS) > 0
   515 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   516 					eif
   517
   518 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   519 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   520 					eif
   521
   522 					ift .SIZEOF(MAIN.ATARI) > 0
   523 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   524 					eif
   525
   526 					ift .SIZEOF(MAIN.CRT) > 0
   527 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   527 				CRT: $2150..$2160
   528 					eif
   529
   530 					.print 'CODE: ',CODEORIGIN,'..',*-1
   530 				CODE: $2000..$21B2
   531
   532 				; ------------------------------------------------------------
   533
   534 21B3			DATAORIGIN
   535 21B3 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $19 $54  $48 $49 $53 $20 $49 $53 $20 $41
   536 21CB 20 53 54 52 49 4E + .by  $20 $53 $54 $52 $49 $4E $47 $20  $43 $4F $4E $53 $54 $41 $4E $54  $00 $00 $00 $00 $00 $00 $00 $00
   537 21E3 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   538 21FB 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   539 2213 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   540 222B 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   541 2243 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   542 225B 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   543 2273 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   544 228B 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   545 22A3 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   546 22BB 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $02 $4E  $31
   547
   548 = 0111			VARINITSIZE	= *-DATAORIGIN
   549 = 020E			VARDATASIZE	= 526
   550
   551 = 23C1			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   552
   553 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   553 				DATA: $21B3..$23C1
   554
   555 02E0-02E1> 2D 21			run START
   556
   557 				; ------------------------------------------------------------
   558
   559 				.macro	STATICDATA
   560 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $19 $54 $48  $49 $53 $20 $49 $53 $20 $41 $20
   561 				.by  $53 $54 $52 $49 $4E $47 $20 $43  $4F $4E $53 $54 $41 $4E $54 $00  $02 $4E $31 $00
   562 				.endm
   563
   564 					end
