mads 2.1.0 build 8 (23 Dec 19)
   388 					opt l+
   101
   102 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   102 				ZPAGE: $0080..$00D7
   103
   104 				.print 'RTLIB: ',RTLIB,'..',*-1
   104 				RTLIB: $201F..$21BC
   105
   106 				; ------------------------------------------------------------
   107
   108 21BD			START
   109 21BD BA				tsx
   110 21BE 8E 5C 24			stx MAIN.@halt+1
   111
   112 					.ifdef fmulinit
   113 					fmulinit
   114 					eif
   115
   116 = 0004			VLEN	= VARDATASIZE-VARINITSIZE
   117 = 25CD			VADR	= DATAORIGIN+VARINITSIZE
   118
   119 					ift VADR > $BFFF
   120 					ert 'Invalid memory address range ',VADR
   121 					eli (VLEN>0) && (VLEN<=256)
   122 21C1 A2 FC			ldx #256-VLEN
   123 21C3 A9 00			lda #0
   124 21C5 9D D1 24 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>0
   126 					@fill #VADR #VLEN #0
   127 					eif
   128
   129 					.ifdef MAIN.@DEFINES.ROMOFF
   130 					icl 'atari\romoff.asm'
   131 					.endif
   132
   133 21CB A9 D1 85 82 A9 25 + 	mwa #PROGRAMSTACK psptr
   134
   135 21D3 A2 0F			ldx #$0f					; DOS II+/D ParamStr
   136 21D5 BD 40 03 9D 5F 24 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   137
   138 21DE E8				inx						; X = 0
   139 21DF 86 90			stx bp						; BP = 0
   140
   141 21E1 8E 08 D2			stx audctl					; reset POKEY
   142 21E4 A9 03			lda #3
   143 21E6 8D 0F D2			sta skctl
   144
   145 21E9 CA				dex						; X = 255
   146
   147 21EA				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: fs.a65]
   148
   149 21EA			.local	MAIN						; PROCEDURE
   150
   151 21EA 4C 58 24			jmp l_0026
   152
   153 				; ------------------------------------------------------------
   154
   155 21ED			.local	SYSTEM						; UNIT
   156
   157 				; ------------------------------------------------------------
   158
   159 = 0101			__PORTB_BANKS	= $0101
   160 = 0648			M_PI_2	= $0648
   161 = 0192			D_PI_2	= $0192
   162 = 0004			D_PI_180	= $04
   163 = 0000			MGTIA	= $00
   164 = 0080			MVBXE	= $80
   165 = 0000			VBXE_XDLADR	= $00
   166 = 0100			VBXE_BCBADR	= $0100
   167 = 1000			VBXE_MAPADR	= $1000
   168 = 5000			VBXE_OVRADR	= $5000
   169 = B000			VBXE_WINDOW	= $B000
   170 = 0000			IDLI	= $00
   171 = 0001			IVBL	= $01
   172 = 00FE			CH_DELCHR	= $FE
   173 = 009B			CH_ENTER	= $9B
   174 = 001B			CH_ESC	= $1B
   175 = 001C			CH_CURS_UP	= $1C
   176 = 001D			CH_CURS_DOWN	= $1D
   177 = 001E			CH_CURS_LEFT	= $1E
   178 = 001F			CH_CURS_RIGHT	= $1F
   179 = 007F			CH_TAB	= $7F
   180 = 009B			CH_EOL	= $9B
   181 = 007D			CH_CLR	= $7D
   182 = 00FD			CH_BELL	= $FD
   183 = 007E			CH_DEL	= $7E
   184 = 009C			CH_DELLINE	= $9C
   185 = 009D			CH_INSLINE	= $9D
   186 = 0000			COLOR_BLACK	= $00
   187 = 000E			COLOR_WHITE	= $0E
   188 = 0032			COLOR_RED	= $32
   189 = 0096			COLOR_CYAN	= $96
   190 = 0068			COLOR_VIOLET	= $68
   191 = 00C4			COLOR_GREEN	= $C4
   192 = 0074			COLOR_BLUE	= $74
   193 = 00EE			COLOR_YELLOW	= $EE
   194 = 0028			COLOR_ORANGE	= $28
   195 = 00E4			COLOR_BROWN	= $E4
   196 = 003C			COLOR_LIGHTRED	= $3C
   197 = 0004			COLOR_GRAY1	= $04
   198 = 0006			COLOR_GRAY2	= $06
   199 = 000A			COLOR_GRAY3	= $0A
   200 = 00CC			COLOR_LIGHTGREEN	= $CC
   201 = 007C			COLOR_LIGHTBLUE	= $7C
   202 = 0004			FMOPENREAD	= $04
   203 = 0008			FMOPENWRITE	= $08
   204 = 0009			FMOPENAPPEND	= $09
   205 = 000C			FMOPENREADWRITE	= $0C
   206 = 2473			SCREENWIDTH	= DATAORIGIN+$0000
   207 = 2475			SCREENHEIGHT	= DATAORIGIN+$0002
   208 = 2477			DATESEPARATOR	= DATAORIGIN+$0004
   209 = D014			TVSYSTEM	= $D014
   210 = 02C0			adr.PALETTE	= $02C0
   211 21ED			.var PALETTE	= adr.PALETTE .word
   212 = D012			adr.HPALETTE	= $D012
   213 21ED			.var HPALETTE	= adr.HPALETTE .word
   214 = 2478			FILEMODE	= DATAORIGIN+$0005
   215 = 2479			GRAPHMODE	= DATAORIGIN+$0006
   216 = 247A			IORESULT	= DATAORIGIN+$0007
   217 = 247B			EOLN	= DATAORIGIN+$0008
   218 = 247C			RNDSEED	= DATAORIGIN+$0009
   219
   220 = 21ED C0 02		PALETTE
   220 = 21EF 12 D0		HPALETTE
   220 				.endl							; UNIT SYSTEM
   221
   222 				; ------------------------------------------------------------
   223
   224 21F1			.local	ATARI						; UNIT
   225
   226 				; ------------------------------------------------------------
   227
   228 = 0012			RTCLOK	= $12
   229 = 004D			ATRACT	= $4D
   230 = 0052			LMARGIN	= $52
   231 = 0053			RMARGIN	= $53
   232 = 0054			ROWCRS	= $54
   233 = 0055			COLCRS	= $55
   234 = 0057			DINDEX	= $57
   235 = 0058			SAVMSC	= $58
   236 = 0062			PALNTS	= $62
   237 = 006A			RAMTOP	= $6A
   238 = 0200			VDSLST	= $0200
   239 = 0230			SDLSTL	= $0230
   240 = 0290			TXTROW	= $0290
   241 = 0291			TXTCOL	= $0291
   242 = 0293			TINDEX	= $0293
   243 = 0294			TXTMSC	= $0294
   244 = 022F			SDMCTL	= $022F
   245 = 026F			GPRIOR	= $026F
   246 = 02F0			CRSINH	= $02F0
   247 = 02F3			CHACT	= $02F3
   248 = 02F4			CHBAS	= $02F4
   249 = 02FC			CH	= $02FC
   250 = 02C0			PCOLR0	= $02C0
   251 = 02C1			PCOLR1	= $02C1
   252 = 02C2			PCOLR2	= $02C2
   253 = 02C3			PCOLR3	= $02C3
   254 = 02C4			COLOR0	= $02C4
   255 = 02C5			COLOR1	= $02C5
   256 = 02C6			COLOR2	= $02C6
   257 = 02C7			COLOR3	= $02C7
   258 = 02C8			COLOR4	= $02C8
   259 = 02C8			COLBAKS	= $02C8
   260 = D000			HPOSP0	= $D000
   261 = D001			HPOSP1	= $D001
   262 = D002			HPOSP2	= $D002
   263 = D003			HPOSP3	= $D003
   264 = D004			HPOSM0	= $D004
   265 = D005			HPOSM1	= $D005
   266 = D006			HPOSM2	= $D006
   267 = D007			HPOSM3	= $D007
   268 = D008			SIZEP0	= $D008
   269 = D009			SIZEP1	= $D009
   270 = D00A			SIZEP2	= $D00A
   271 = D00B			SIZEP3	= $D00B
   272 = D00C			SIZEM	= $D00C
   273 = D00D			GRAFP0	= $D00D
   274 = D00E			GRAFP1	= $D00E
   275 = D00F			GRAFP2	= $D00F
   276 = D010			GRAFP3	= $D010
   277 = D011			GRAFM	= $D011
   278 = D004			P0PF	= $D004
   279 = D014			PAL	= $D014
   280 = D012			COLPM0	= $D012
   281 = D013			COLPM1	= $D013
   282 = D014			COLPM2	= $D014
   283 = D015			COLPM3	= $D015
   284 = D016			COLPF0	= $D016
   285 = D017			COLPF1	= $D017
   286 = D018			COLPF2	= $D018
   287 = D019			COLPF3	= $D019
   288 = D01A			COLBK	= $D01A
   289 = D01B			PRIOR	= $D01B
   290 = D01D			GRACTL	= $D01D
   291 = D01E			HITCLR	= $D01E
   292 = D200			AUDF1	= $D200
   293 = D201			AUDC1	= $D201
   294 = D202			AUDF2	= $D202
   295 = D203			AUDC2	= $D203
   296 = D204			AUDF3	= $D204
   297 = D205			AUDC3	= $D205
   298 = D206			AUDF4	= $D206
   299 = D207			AUDC4	= $D207
   300 = D208			AUDCTL	= $D208
   301 = D20F			SKSTAT	= $D20F
   302 = D301			PORTB	= $D301
   303 = D400			DMACTL	= $D400
   304 = D401			CHACTL	= $D401
   305 = D402			DLISTL	= $D402
   306 = D404			HSCROL	= $D404
   307 = D405			VSCROL	= $D405
   308 = D407			PMBASE	= $D407
   309 = D409			CHBASE	= $D409
   310 = D40A			WSYNC	= $D40A
   311 = D40B			VCOUNT	= $D40B
   312 = D40C			PENH	= $D40C
   313 = D40D			PENV	= $D40D
   314 = D40E			NMIEN	= $D40E
   315
   316 				.endl							; UNIT ATARI
   317
   318 				; ------------------------------------------------------------
   319
   320 21F1			.local	CRT						; UNIT
   321
   322 21F1			.local	READKEY						; FUNCTION | ASSEMBLER
   323
   324 				; ---------------------  ASM Block 049  ---------------------
   325
   326 21F1 8A 48			txa:pha
   327
   328 21F3 20 1F 20			@GetKey
   329
   330 21F6 8D 7F 24			sta Result
   331
   332 21F9 68 AA			pla:tax
   333
   334 21FB			@exit
   335
   336 				; ------------------------------------------------------------
   337
   338 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   339 				; as Pointer
   340
   341 21FB E8				inx
   342 21FC AD 7F 24 95 98		mva RESULT :STACKORIGIN,x
   343
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					eif
   351
   352 				; ------------------------------------------------------------
   353
   354 = 247F			RESULT	= DATAORIGIN+$000C
   355
   356 = 247F			@VarData	= RESULT
   357 = 0001			@VarDataSize	= 1
   358
   359 2201 60				rts						; ret
   360 				.endl
   361
   362 				; ------------------------------------------------------------
   363
   364 = 247E			TEXTATTR	= DATAORIGIN+$000B
   365 = D01F			CONSOL	= $D01F
   366 = 0000			CN_START_SELECT_OPTION	= $00
   367 = 0001			CN_SELECT_OPTION	= $01
   368 = 0002			CN_START_OPTION	= $02
   369 = 0003			CN_OPTION	= $03
   370 = 0004			CN_START_SELECT	= $04
   371 = 0005			CN_SELECT	= $05
   372 = 0006			CN_START	= $06
   373 = 0007			CN_NONE	= $07
   374 = 0000			BW40	= $00
   375 = 0001			CO40	= $01
   376 = 0002			BW80	= $02
   377 = 0003			CO80	= $03
   378 = 0007			MONO	= $07
   379 = 0001			C40	= $01
   380 = 0003			C80	= $03
   381 = 0000			BLACK	= $00
   382 = 0001			BLUE	= $01
   383 = 0002			GREEN	= $02
   384 = 0003			CYAN	= $03
   385 = 0004			RED	= $04
   386 = 0005			MAGENTA	= $05
   387 = 0006			BROWN	= $06
   388 = 0007			LIGHTGRAY	= $07
   389 = 0008			DARKGRAY	= $08
   390 = 0009			LIGHTBLUE	= $09
   391 = 000A			LIGHTGREEN	= $0A
   392 = 000B			LIGHTCYAN	= $0B
   393 = 000C			LIGHTRED	= $0C
   394 = 000D			LIGHTMAGENTA	= $0D
   395 = 000E			YELLOW	= $0E
   396 = 000F			WHITE	= $0F
   397 = 0080			BLINK	= $80
   398
   399 				.endl							; UNIT CRT
   400
   401 				; ------------------------------------------------------------
   402
   403 2202			.local	DOS						; UNIT
   404
   405 				; ------------------------------------------------------------
   406
   407 = D014			PALNTSC	= $D014
   408
   409 				.endl							; UNIT DOS
   410
   411 				; ------------------------------------------------------------
   412
   413 2202			.local	STRUTILS					; UNIT
   414
   415 				; ------------------------------------------------------------
   416
   417 				.endl							; UNIT STRUTILS
   418
   419 				; ------------------------------------------------------------
   420
   421 2202			.local	SYSUTILS					; UNIT
   422
   423 				; ------------------------------------------------------------
   424
   425 = 0001			FAREADONLY	= $01
   426 = 0002			FAHIDDEN	= $02
   427 = 0004			FASYSFILE	= $04
   428 = 0008			FAVOLUMEID	= $08
   429 = 0010			FADIRECTORY	= $10
   430 = 0020			FAARCHIVE	= $20
   431 = 003F			FAANYFILE	= $3F
   432
   433 				.endl							; UNIT SYSUTILS
   434
   435 				; ------------------------------------------------------------
   436
   437 2202			.local	TYPES						; UNIT
   438
   439 				; ------------------------------------------------------------
   440
   441 				.endl							; UNIT TYPES
   442
   443 				; ------------------------------------------------------------
   444
   445 2202			.local	GRAPH						; UNIT
   446
   447 2202			.local	INITGRAPH_00B8					; PROCEDURE | OVERLOAD
   448
   449 				; ------------------------------------------------------------
   450
   451 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   452 				; as Pointer
   453 2202 B5 98 8D 9D 24		mva :STACKORIGIN,x MODE
   454 2207 CA				dex
   455
   456 				; ---------------------  ASM Block 078  ---------------------
   457
   458
   459 2208 8A 48			txa:pha
   460
   461 220A AD 9D 24			lda mode
   462 220D 8D 79 24			sta MAIN.SYSTEM.GraphMode
   463 2210 29 0F			and #$0f
   464 2212 A8				tay
   465
   466 2213 A2 60			ldx #$60		; 6*16
   467 2215 AD 9D 24			lda mode		; %00010000 with text window
   468 2218 29 10			and #$10
   469 221A 49 10			eor #$10
   470 221C 09 02			ora #2			; read
   471
   472 					.nowarn @GRAPHICS
   472 221E 20 60 20		 JSR @GRAPHICS
   473
   474 2221 8C 88 24			sty GraphResult
   475
   476
   477 					.ifdef MAIN.@DEFINES.ROMOFF
   478 					inc portb
   479 					.endif
   480
   481 = EE6D			tlshc	equ $ee6d
   482
   483 2224 A6 57			ldx dindex
   484 2226 BC 6D EE			ldy tlshc,x
   485 2229 A9 05			lda #5
   486 222B 0A			shift	asl @
   487 222C 88				dey
   488 222D D0 FC			bne shift
   489
   490 222F 8D 9C 24			sta SCANLINE_WIDTH
   491
   492 				; Fox/TQA
   493
   494 = 0057			dindex	equ $57
   495 = EE7D			tmccn	equ $ee7d
   496 = EE8D			tmrcn	equ $ee8d
   497
   498 2232 A6 57			ldx dindex
   499 2234 BD 7D EE			lda tmccn,x
   500 2237 BC 8D EE			ldy tmrcn,x
   501 223A A2 00			ldx #0
   502 223C C9 40			cmp #<320
   503 223E D0 01 E8			sne:inx
   504
   505 				; X:A = horizontal resolution
   506 				; Y = vertical resolution
   507
   508 2241 20 9A 20			@SCREENSIZE
   509
   510 					.ifdef MAIN.@DEFINES.ROMOFF
   511 					dec portb
   512 					.endif
   513
   514 2244 68 AA			pla:tax
   515
   516
   517 				; optimize OK (GRAPH), line = 132
   518
   519 2246 A5 58 8D 9A 24		mva ATARI.SAVMSC VIDEORAM
   520 224B A5 59 8D 9B 24		mva ATARI.SAVMSC+1 VIDEORAM+1
   521
   522 				; ------------------------------------------------------------
   523
   524 = 249D			MODE	= DATAORIGIN+$002A
   525
   526 = 249D			@VarData	= MODE
   527 = 0001			@VarDataSize	= 1
   528
   529 2250			@exit
   530 					.ifdef @new
   531 					lda <@VarData
   532 					sta :ztmp
   533 					lda >@VarData
   534 					ldy #@VarDataSize-1
   535 					jmp @FreeMem
   536 					eif
   537 2250 60				rts						; ret
   538 				.endl
   539
   540 				; ------------------------------------------------------------
   541
   542 = 0080			CURRENTDRIVER	= $80
   543 = 0000			DETECT	= $00
   544 = 0001			CGA	= $01
   545 = 0002			MCGA	= $02
   546 = 0003			EGA	= $03
   547 = 0004			EGA64	= $04
   548 = 0005			EGAMONO	= $05
   549 = 0006			LOWRES	= $06
   550 = 0007			HERCMONO	= $07
   551 = 0009			VGA	= $09
   552 = 000A			VESA	= $0A
   553 = 000B			D1BIT	= $0B
   554 = 000C			D2BIT	= $0C
   555 = 000D			D4BIT	= $0D
   556 = 000E			D6BIT	= $0E
   557 = 000F			D8BIT	= $0F
   558 = 0010			D12BIT	= $10
   559 = 0018			M640X400	= $18
   560 = 0018			M640X480	= $18
   561 = 0001			GROK	= $01
   562 = 00FF			GRNOINITGRAPH	= $FF
   563 = 00FE			GRNOTDETECTED	= $FE
   564 = 00FD			GRFILENOTFOUND	= $FD
   565 = 00FC			GRINVALIDDRIVER	= $FC
   566 = 00FB			GRNOLOADMEM	= $FB
   567 = 00FA			GRNOSCANMEM	= $FA
   568 = 00F9			GRNOFLOODMEM	= $F9
   569 = 00F8			GRFONTNOTFOUND	= $F8
   570 = 00F7			GRNOFONTMEM	= $F7
   571 = 00F6			GRINVALIDMODE	= $F6
   572 = 00F5			GRERROR	= $F5
   573 = 00F4			GRIOERROR	= $F4
   574 = 00F3			GRINVALIDFONT	= $F3
   575 = 00F2			GRINVALIDFONTNUM	= $F2
   576 = 00EE			GRINVALIDVERSION	= $EE
   577 = 0000			CGAC0	= $00
   578 = 0001			CGAC1	= $01
   579 = 0002			CGAC2	= $02
   580 = 0003			CGAC3	= $03
   581 = 0004			CGAHI	= $04
   582 = 0000			MCGAC0	= $00
   583 = 0001			MCGAC1	= $01
   584 = 0002			MCGAC2	= $02
   585 = 0003			MCGAC3	= $03
   586 = 0004			MCGAMED	= $04
   587 = 0005			MCGAHI	= $05
   588 = 0000			EGALO	= $00
   589 = 0001			EGAHI	= $01
   590 = 0000			EGA64LO	= $00
   591 = 0001			EGA64HI	= $01
   592 = 0003			EGAMONOHI	= $03
   593 = 000A			VGALO	= $0A
   594 = 001F			VGAMED	= $1F
   595 = 0018			VGAHI	= $18
   596 = 2480			WIN_LEFT	= DATAORIGIN+$000D
   597 = 2482			WIN_RIGHT	= DATAORIGIN+$000F
   598 = 2484			WIN_TOP	= DATAORIGIN+$0011
   599 = 2486			WIN_BOTTOM	= DATAORIGIN+$0013
   600 = 2488			GRAPHRESULT	= DATAORIGIN+$0015
   601 = 2489			GETCOLOR	= DATAORIGIN+$0016
   602 = 248A			adr.LASTARCCOORDS	= DATAORIGIN+$0017
   603 2251			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   604 = 248A			LASTARCCOORDS.X	= DATAORIGIN+$0017
   605 = 248C			LASTARCCOORDS.Y	= DATAORIGIN+$0019
   606 = 248E			LASTARCCOORDS.XSTART	= DATAORIGIN+$001B
   607 = 2490			LASTARCCOORDS.YSTART	= DATAORIGIN+$001D
   608 = 2492			LASTARCCOORDS.XEND	= DATAORIGIN+$001F
   609 = 2494			LASTARCCOORDS.YEND	= DATAORIGIN+$0021
   610 = 2496			CURRENTX	= DATAORIGIN+$0023
   611 = 2498			CURRENTY	= DATAORIGIN+$0025
   612 = 249A			VIDEORAM	= DATAORIGIN+$0027
   613 = 249C			SCANLINE_WIDTH	= DATAORIGIN+$0029
   614
   615 = 2251 8A 24		LASTARCCOORDS
   615 				.endl							; UNIT GRAPH
   616
   617 				; ------------------------------------------------------------
   618
   619 2253			.local	CIO						; UNIT
   620
   621 2253			.local	GET						; FUNCTION | ASSEMBLER
   622
   623 				; ------------------------------------------------------------
   624
   625 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   626 				; as Pointer
   627 2253 B5 98 8D 9E 24		mva :STACKORIGIN,x CHN
   628 2258 CA				dex
   629
   630 				; ---------------------  ASM Block 095  ---------------------
   631
   632 2259 8A 48			txa:pha
   633
   634 225B AD 9E 24			lda chn
   635 225E 0A 0A 0A 0A			:4 asl @
   636 2262 AA				tax
   637
   638 2263 A9 07			lda #7		;get char command
   639 2265 9D 42 03			sta iccmd,x
   640
   641 2268 A9 00			lda #$00	;zero out the unused
   642 226A 9D 48 03			sta icbufl,x	;store in accumulator
   643 226D 9D 49 03			sta icbufh,x	;...after CIOV jump
   644
   645 2270				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 2270 20 56 E4				jsr CIOV
   646
   647 2273 8C 7A 24			sty MAIN.SYSTEM.IOResult
   648
   649 2276 8D 9F 24			sta Result
   650
   651 2279 68 AA			pla:tax
   652
   653 227B			@exit
   654
   655 				; ------------------------------------------------------------
   656
   657 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   658 				; as Pointer
   659
   660 227B E8				inx
   661 227C AD 9F 24 95 98		mva RESULT :STACKORIGIN,x
   662
   663 					.ifdef @new
   664 					lda <@VarData
   665 					sta :ztmp
   666 					lda >@VarData
   667 					ldy #@VarDataSize-1
   668 					jmp @FreeMem
   669 					eif
   670
   671 				; ------------------------------------------------------------
   672
   673 = 249E			CHN	= DATAORIGIN+$002B
   674 = 249F			RESULT	= DATAORIGIN+$002C
   675
   676 = 249E			@VarData	= CHN
   677 = 0002			@VarDataSize	= 2
   678
   679 2281 60				rts						; ret
   680 				.endl
   681
   682 				; ------------------------------------------------------------
   683
   684 				.endl							; UNIT CIO
   685
   686 2282			.local	CHNDLPROC					; PROCEDURE
   687
   688 				; optimize OK (examples\fs.pas), line = 26
   689
   690 2282 AD C8 25			lda adr.NDL+$1C
   691 2285 8D AB 25			sta TMP
   692
   693 				; optimize OK (examples\fs.pas), line = 27
   694
   695 2288 C9 02			cmp #$02
   696 228A B0 17			jcs l_012F
   697
   698 				; optimize OK (examples\fs.pas), line = 28
   699
   700 228C A9 FF 8D C8 25		mva #$FF adr.NDL+$1C
   701
   702 				; optimize OK (examples\fs.pas), line = 29
   703
   704 2291 AC C9 25			ldy adr.NDL+$1D
   705 2294 88				dey
   706 2295 8C AB 25			sty TMP
   707
   708 				; optimize OK (examples\fs.pas), line = 30
   709
   710 2298 A0 1D			ldy #$1D
   711 229A AD AB 25 99 AC 25		mva TMP adr.NDL,y
   712 22A0 4C B4 22			jmp l_0150
   713 22A3			l_012F
   714
   715 				; optimize OK (examples\fs.pas), line = 33
   716
   717 22A3 AD C8 25			lda adr.NDL+$1C
   718 22A6 38 E9 02			sub #$02
   719 22A9 8D AB 25			sta TMP
   720
   721 				; optimize OK (examples\fs.pas), line = 34
   722
   723 22AC A0 1C			ldy #$1C
   724 22AE AD AB 25 99 AC 25		mva TMP adr.NDL,y
   725 22B4			l_0150
   726 22B4			@exit
   727 					.ifdef @new
   728 					lda <@VarData
   729 					sta :ztmp
   730 					lda >@VarData
   731 					ldy #@VarDataSize-1
   732 					jmp @FreeMem
   733 					eif
   734 22B4 60				rts						; ret
   735 				.endl
   736
   737 22B5			.local	SCROLPROC					; PROCEDURE
   738
   739 				; optimize OK (examples\fs.pas), line = 40
   740
   741 22B5 AD A1 25 8D 04 D4		mva J HSC
   742
   743 				; optimize OK (examples\fs.pas), line = 41
   744
   745 22BB EE A1 25 D0 0D EE + 	ind J
   746
   747 				; optimize OK (examples\fs.pas), line = 42
   748
   749 22CD AD A4 25			lda J+3
   750 22D0 49 00			eor #$00
   751 22D2 D0 38			jne l_0182
   752 22D4 AD A3 25			lda J+2
   753 22D7 49 00			eor #$00
   754 22D9 D0 31			jne l_0182
   755 22DB AD A2 25			lda J+1
   756 22DE 49 00			eor #$00
   757 22E0 D0 2A			jne l_0182
   758 22E2 AD A1 25			lda J
   759 22E5 49 11			eor #$11
   760 22E7 D0 23			jne l_0182
   761
   762 				; optimize FAIL ('CHNDLPROC', examples\fs.pas), line = 43
   763 22E9 20 82 22			jsr CHNDLPROC
   764
   765 				; optimize OK (examples\fs.pas), line = 44
   766
   767 22EC A9 00 8D A1 25		mva #$00 J
   768 22F1 8D A2 25			sta J+1
   769 22F4 8D A3 25			sta J+2
   770 22F7 8D A4 25			sta J+3
   771
   772 				; optimize OK (examples\fs.pas), line = 45
   773
   774 22FA EE A5 25 D0 0D EE + 	ind K
   775 230C			l_0182
   776
   777 				; optimize OK (examples\fs.pas), line = 47
   778
   779 230C AD A8 25			lda K+3
   780 230F 49 00			eor #$00
   781 2311 D0 32			jne l_01A2
   782 2313 AD A7 25			lda K+2
   783 2316 49 00			eor #$00
   784 2318 D0 2B			jne l_01A2
   785 231A AD A6 25			lda K+1
   786 231D 49 00			eor #$00
   787 231F D0 24			jne l_01A2
   788 2321 AD A5 25			lda K
   789 2324 49 0E			eor #$0E
   790 2326 D0 1D			jne l_01A2
   791
   792 				; optimize OK (examples\fs.pas), line = 48
   793
   794 2328 A0 1C			ldy #$1C
   795 232A AD A9 25 99 AC 25		mva TMPL adr.NDL,y
   796
   797 				; optimize OK (examples\fs.pas), line = 49
   798
   799 2330 C8				iny
   800 2331 AD AA 25 99 AC 25		mva TMPH adr.NDL,y
   801
   802 				; optimize OK (examples\fs.pas), line = 50
   803
   804 2337 A9 00 8D A5 25		mva #$00 K
   805 233C 8D A6 25			sta K+1
   806 233F 8D A7 25			sta K+2
   807 2342 8D A8 25			sta K+3
   808 2345			l_01A2
   809
   810 				; ---------------------  ASM Block 100  ---------------------
   811
   812
   813 2345 4C 62 E4		    .by $4C $62 $E4 
   814 				  
   815 2348			@exit
   816 					.ifdef @new
   817 					lda <@VarData
   818 					sta :ztmp
   819 					lda >@VarData
   820 					ldy #@VarDataSize-1
   821 					jmp @FreeMem
   822 					eif
   823 2348 60				rts						; ret
   824 				.endl
   825
   826 2349			.local	MAINPROC					; PROCEDURE
   827
   828 				; optimize FAIL ('GRAPH.INITGRAPH_00B8', examples\fs.pas), line = 69
   829 2349 E8				inx
   830 234A A9 00 95 98			mva #$00 :STACKORIGIN,x
   831 234E 20 02 22			jsr GRAPH.INITGRAPH_00B8
   832
   833 				; optimize OK (examples\fs.pas), line = 70
   834
   835 2351 AD 71 24 8D 30 02		mva NDL DLIST
   836 2357 AD 72 24 8D 31 02		mva NDL+1 DLIST+1
   837
   838 				; optimize OK (examples\fs.pas), line = 71
   839
   840 235D A9 40 85 58			mva #$40 SAV
   841 2361 A9 9C 85 59			mva #$9C SAV+1
   842
   843 				; optimize OK (examples\fs.pas), line = 72
   844
   845 2365 A9 0E 8D C4 02		mva #$0E COL0
   846
   847 				; optimize OK (examples\fs.pas), line = 73
   848
   849 236A 8D C5 02			sta COL1
   850 				; --- For
   851
   852 				; optimize OK (examples\fs.pas), line = 74
   853
   854 236D A9 01 8D CD 25		mva #$01 I
   855 2372 A9 00 8D CE 25		mva #$00 I+1
   856 2377 8D CF 25			sta I+2
   857 237A 8D D0 25			sta I+3
   858
   859 				; optimize OK (examples\fs.pas), line = 74
   860
   861 237D			l_01D7
   862 				; --- ForToDoCondition
   863
   864 				; optimize OK (examples\fs.pas), line = 74
   865
   866 237D				.LOCAL
   867 237D AD D0 25			lda I+3
   868 2380 38 E9 00			sub #$00
   869 2383 D0 1F			bne L4
   870 2385 AD CF 25			lda I+2
   871 2388 C9 00			cmp #$00
   872 238A D0 0C			bne L1
   873 238C AD CE 25			lda I+1
   874 238F C9 00			cmp #$00
   875 2391 D0 05			bne L1
   876 2393 AD CD 25			lda I
   877 2396 C9 17			cmp #$17
   878 2398 F0 10		L1	beq L5
   879 239A B0 04			bcs L3
   880 239C A9 FF			lda #$FF
   881 239E D0 0A			bne L5
   882 23A0 A9 01		L3	lda #$01
   883 23A2 D0 06			bne L5
   884 23A4 50 04		L4	bvc L5
   885 23A6 49 FF			eor #$FF
   886 23A8 09 01			ora #$01
   887 23AA			L5
   888 					.ENDL
   889 23AA 30 02			smi
   890 23AC D0 48			jne l_01E1
   891
   892 				; optimize FAIL (100, examples\fs.pas), line = 75
   893 					@printSTRING #CODEORIGIN+$000D
   893 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   893 23AE A0 20		 LDY> CODEORIGIN+$000D
   893 23B0 A9 0D		 LDA< CODEORIGIN+$000D
   893 23B2 20 EB 20		 JSR @PRINTSTRING
   894 23B5 E8				inx
   895 23B6 AD CD 25 95 98		mva I :STACKORIGIN,x
   896 23BB AD CE 25 95 A8		mva I+1 :STACKORIGIN+STACKWIDTH,x
   897 23C0 AD CF 25 95 B8		mva I+2 :STACKORIGIN+STACKWIDTH*2,x
   898 23C5 AD D0 25 95 C8		mva I+3 :STACKORIGIN+STACKWIDTH*3,x
   899 23CA 20 1A 21			jsr @printINT
   900 23CD CA				dex
   901 					@printSTRING #CODEORIGIN+$0014
   901 				 LDY> CODEORIGIN+$0014\ LDA< CODEORIGIN+$0014\ JSR @PRINTSTRING
   901 23CE A0 20		 LDY> CODEORIGIN+$0014
   901 23D0 A9 14		 LDA< CODEORIGIN+$0014
   901 23D2 20 EB 20		 JSR @PRINTSTRING
   902 					@print #$9B
   902 				 LDY# $9B\ JSR @PRINT
   902 23D5 A0 9B		 LDY# $9B
   902 23D7 20 E2 20		 JSR @PRINT
   903 					@printSTRING #CODEORIGIN+$0013
   903 				 LDY> CODEORIGIN+$0013\ LDA< CODEORIGIN+$0013\ JSR @PRINTSTRING
   903 23DA A0 20		 LDY> CODEORIGIN+$0013
   903 23DC A9 13		 LDA< CODEORIGIN+$0013
   903 23DE 20 EB 20		 JSR @PRINTSTRING
   904
   905 				; --- ForToDoEpilog
   906 23E1 EE CD 25 D0 0D EE + 	ind I						; inc ptr dword [CounterAddress]
   907 23F3 4C 7D 23			jmp l_01D7
   908 23F6			l_01E1
   909
   910 				; optimize FAIL (100, examples\fs.pas), line = 77
   911 					@printSTRING #CODEORIGIN+$0016
   911 				 LDY> CODEORIGIN+$0016\ LDA< CODEORIGIN+$0016\ JSR @PRINTSTRING
   911 23F6 A0 20		 LDY> CODEORIGIN+$0016
   911 23F8 A9 16		 LDA< CODEORIGIN+$0016
   911 23FA 20 EB 20		 JSR @PRINTSTRING
   912
   913 				; optimize OK (examples\fs.pas), line = 78
   914
   915 23FD AD C8 25			lda adr.NDL+$1C
   916 2400 8D A9 25			sta TMPL
   917
   918 				; optimize OK (examples\fs.pas), line = 79
   919
   920 2403 AD C9 25			lda adr.NDL+$1D
   921 2406 8D AA 25			sta TMPH
   922
   923 				; optimize OK (examples\fs.pas), line = 80
   924
   925 2409 A5 14 8D CD 25		mva CLOCK I
   926 240E A9 00 8D CE 25		mva #$00 I+1
   927 2413 8D CF 25			sta I+2
   928 2416 8D D0 25			sta I+3
   929
   930 				; --- WhileProlog
   931 2419			l_0216
   932
   933 				; optimize OK (examples\fs.pas), line = 81
   934
   935 2419 A9 00			lda #$00
   936 241B CD D0 25			cmp I+3
   937 241E D0 11			bne @+
   938 2420 CD CF 25			cmp I+2
   939 2423 D0 0C			bne @+
   940 2425 CD CE 25			cmp I+1
   941 2428 D0 07			bne @+
   942 242A A5 14			lda CLOCK
   943 242C CD CD 25			cmp I
   944 242F F0 E8			jeq l_0216
   945 2431			@
   946
   947 				; optimize OK (examples\fs.pas), line = 83
   948
   949 2431 A9 00 8D 0E D4		mva #$00 NMI
   950
   951 				; optimize OK (examples\fs.pas), line = 84
   952
   953 2436 A9 B5 8D 24 02		mva <SCROLPROC VVBLKD
   954 243B A9 22 8D 25 02		mva >SCROLPROC VVBLKD+1
   955
   956 				; optimize OK (examples\fs.pas), line = 85
   957
   958 2440 A9 40 8D 0E D4		mva #$40 NMI
   959
   960 				; optimize FAIL ('CIO.GET', examples\fs.pas), line = 86
   961 2445 E8				inx
   962 2446 A9 07 95 98			mva #$07 :STACKORIGIN,x
   963 244A 20 53 22			jsr CIO.GET
   964 244D B5 98 8D A0 25		mva :STACKORIGIN,x KEY
   965 2452 CA				dex
   966
   967 2453 20 F1 21			jsr CRT.READKEY					; call Entry
   968
   969 2456 CA				dex
   970
   971 				; ------------------------------------------------------------
   972
   973 = 25CD			I	= DATAORIGIN+$015A
   974 = 0058			SAV	= $58
   975 = 0014			CLOCK	= $14
   976 = D40E			NMI	= $D40E
   977 = 0230			DLIST	= $0230
   978 = 0224			VVBLKD	= $0224
   979 = 02C4			COL0	= $02C4
   980 = 02C5			COL1	= $02C5
   981 = 0017			@FORTMP_01D4	= $17
   982
   983 = 25CD			@VarData	= I
   984 = 0004			@VarDataSize	= 4
   985
   986 2457			@exit
   987 					.ifdef @new
   988 					lda <@VarData
   989 					sta :ztmp
   990 					lda >@VarData
   991 					ldy #@VarDataSize-1
   992 					jmp @FreeMem
   993 					eif
   994 2457 60				rts						; ret
   995 				.endl
   996 2458			l_0026
   997
   998 				; optimize FAIL ('MAINPROC', examples\fs.pas), line = 91
   999 2458 20 49 23			jsr MAINPROC
  1000
  1001 				; ------------------------------------------------------------
  1002
  1003 = 24A0			adr.STRBUFFER	= DATAORIGIN+$002D
  1004 245B			.var STRBUFFER	= adr.STRBUFFER .word
  1005 = 25A0			KEY	= DATAORIGIN+$012D
  1006 = 25A1			J	= DATAORIGIN+$012E
  1007 = 25A5			K	= DATAORIGIN+$0132
  1008 = D404			HSC	= $D404
  1009 = 25A9			TMPL	= DATAORIGIN+$0136
  1010 = 25AA			TMPH	= DATAORIGIN+$0137
  1011 = 25AB			TMP	= DATAORIGIN+$0138
  1012 = 25AC			adr.NDL	= DATAORIGIN+$0139
  1013 245B			.var NDL	= adr.NDL .word
  1014 245B			@exit
  1015
  1016 245B A2 00		@halt	ldx #0
  1017 245D 9A				txs
  1018 					.ifdef MAIN.@DEFINES.ROMOFF
  1019 					inc portb
  1020 					.endif
  1021
  1022 245E 60				rts
  1023
  1024 				; ------------------------------------------------------------
  1025
  1026 245F 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1027
  1028 				; ------------------------------------------------------------
  1029
  1030 246F			.local	@DEFINES
  1031 246F			ATARI
  1032 				.endl
  1033
  1034 = 246F A0 24		STRBUFFER
  1034 = 2471 AC 25		NDL
  1034 				.endl							; MAIN
  1035
  1036 				; ------------------------------------------------------------
  1037 				; ------------------------------------------------------------
  1038
  1039 				.macro	UNITINITIALIZATION
  1040 				
  1041 					.ifdef MAIN.SYSTEM.@UnitInit
  1042 					jsr MAIN.SYSTEM.@UnitInit
  1043 					eif
  1044 				
  1045 					.ifdef MAIN.ATARI.@UnitInit
  1046 					jsr MAIN.ATARI.@UnitInit
  1047 					eif
  1048 				
  1049 					.ifdef MAIN.CRT.@UnitInit
  1050 					jsr MAIN.CRT.@UnitInit
  1051 					eif
  1052 				
  1053 					.ifdef MAIN.DOS.@UnitInit
  1054 					jsr MAIN.DOS.@UnitInit
  1055 					eif
  1056 				
  1057 					.ifdef MAIN.STRUTILS.@UnitInit
  1058 					jsr MAIN.STRUTILS.@UnitInit
  1059 					eif
  1060 				
  1061 					.ifdef MAIN.SYSUTILS.@UnitInit
  1062 					jsr MAIN.SYSUTILS.@UnitInit
  1063 					eif
  1064 				
  1065 					.ifdef MAIN.TYPES.@UnitInit
  1066 					jsr MAIN.TYPES.@UnitInit
  1067 					eif
  1068 				
  1069 					.ifdef MAIN.GRAPH.@UnitInit
  1070 					jsr MAIN.GRAPH.@UnitInit
  1071 					eif
  1072 				
  1073 					.ifdef MAIN.CIO.@UnitInit
  1074 					jsr MAIN.CIO.@UnitInit
  1075 					eif
  1076 				.endm
  1077
  1078 				; ------------------------------------------------------------
  1079
  1080 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1081 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1081 				SYSTEM: $21ED..$21F0
  1082 					eif
  1083
  1084 					ift .SIZEOF(MAIN.ATARI) > 0
  1085 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1086 					eif
  1087
  1088 					ift .SIZEOF(MAIN.CRT) > 0
  1089 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1089 				CRT: $21F1..$2201
  1090 					eif
  1091
  1092 					ift .SIZEOF(MAIN.DOS) > 0
  1093 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
  1094 					eif
  1095
  1096 					ift .SIZEOF(MAIN.STRUTILS) > 0
  1097 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
  1098 					eif
  1099
  1100 					ift .SIZEOF(MAIN.SYSUTILS) > 0
  1101 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
  1102 					eif
  1103
  1104 					ift .SIZEOF(MAIN.TYPES) > 0
  1105 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
  1106 					eif
  1107
  1108 					ift .SIZEOF(MAIN.GRAPH) > 0
  1109 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
  1109 				GRAPH: $2202..$2252
  1110 					eif
  1111
  1112 					ift .SIZEOF(MAIN.CIO) > 0
  1113 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
  1113 				CIO: $2253..$2281
  1114 					eif
  1115
  1116 					.print 'CODE: ',CODEORIGIN,'..',*-1
  1116 				CODE: $2000..$2472
  1117
  1118 				; ------------------------------------------------------------
  1119
  1120 2473			DATAORIGIN
  1121 2473 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $27  $00 $00 $00 $17 $00 $00 $00 $00
  1122 248B 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1123 24A3 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1124 24BB 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1125 24D3 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1126 24EB 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1127 2503 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1128 251B 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1129 2533 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1130 254B 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1131 2563 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1132 257B 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1133 2593 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1134 25AB 00 70 70 70 42 40 + .by  $00 $70 $70 $70 $42 $40 $9C $02  $02 $02 $02 $02 $02 $02 $02 $02  $02 $02 $02 $02 $02 $02 $02 $02
  1135 25C3 02 02 02 02 56 D8 + .by  $02 $02 $02 $02 $56 $D8 $9F $41  $20 $9C
  1136
  1137 = 015A			VARINITSIZE	= *-DATAORIGIN
  1138 = 015E			VARDATASIZE	= 350
  1139
  1140 = 25D1			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1141
  1142 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1142 				DATA: $2473..$25D1
  1143
  1144 02E0-02E1> BD 21			run START
  1145
  1146 				; ------------------------------------------------------------
  1147
  1148 				.macro	STATICDATA
  1149 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $05 $6C $69  $6E $65 $3A $00 $00 $00 $07 $41
  1150 				.by  $63 $74 $69 $6F $6E $21 $00
  1151 				.endm
  1152
  1153 					end
