mads 2.1.0 build 4 (27 Oct 19)
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $2041..$2138
    97
    98 				; ------------------------------------------------------------
    99
   100 2138			START
   101 2138 BA				tsx
   102 2139 8E 01 23			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 000D			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 231A			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 213C A2 F3			ldx #256-VLEN
   115 213E A9 00			lda #0
   116 2140 9D 27 22 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   119 					eif
   120
   121 2146 A2 0F			ldx #$0f
   122 2148 BD 40 03 9D 04 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 2151 E8				inx		; X = 0 !!!
   125 2152 86 8E			stx bp		; lo BP = 0
   126
   127 2154				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: arrmemc.a65]
   128
   129 2154			.local	MAIN						; PROCEDURE
   130
   131 2154 4C FD 22			jmp l_0048
   132
   133 				; ------------------------------------------------------------
   134
   135 2157			.local	SYSTEM						; UNIT
   136
   137 2157			.local	DPEEK						; FUNCTION | ASSEMBLER | REGISTER
   138
   139 				; ------------------------------------------------------------
   140
   141 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   142 				; as Pointer
   143 2157 B5 98 85 86			mva :STACKORIGIN,x A
   144 215B B5 A8 85 87			mva :STACKORIGIN+STACKWIDTH,x A+1
   145 215F CA				dex						; sub bx, 1
   146
   147 				; ---------------------  ASM Block 005  ---------------------
   148
   149 2160 A0 00			ldy #0
   150 2162 B1 86 8D 1F 23		mva (edx),y Result
   151 2167 C8				iny
   152 2168 B1 86 8D 20 23		mva (edx),y Result+1
   153
   154 216D			@exit
   155
   156 				; ------------------------------------------------------------
   157
   158 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   159 				; as Pointer
   160
   161 216D E8				inx						; add bx, 1
   162 216E AD 1F 23 95 98		mva RESULT :STACKORIGIN,x
   163 2173 AD 20 23 95 A8		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   164
   165 					.ifdef @new
   166 					@FreeMem #@VarData #@VarDataSize
   167 					eif
   168
   169 				; ------------------------------------------------------------
   170
   171 = 0086			A	= edx
   172 = 231F			RESULT	= DATAORIGIN+$000B
   173
   174 = 231F			@VarData	= RESULT
   175 = 0002			@VarDataSize	= 2
   176
   177 2178 60				rts						; ret
   178 				.endl
   179
   180 				; ------------------------------------------------------------
   181
   182 = 0648			M_PI_2	= $0648
   183 = 0192			D_PI_2	= $0192
   184 = 0004			D_PI_180	= $0004
   185 = 0000			MGTIA	= $0000
   186 = 0080			MVBXE	= $0080
   187 = 0000			VBXE_XDLADR	= $0000
   188 = 0100			VBXE_BCBADR	= $0100
   189 = 1000			VBXE_MAPADR	= $1000
   190 = 5000			VBXE_OVRADR	= $5000
   191 = B000			VBXE_WINDOW	= $B000
   192 = 0000			IDLI	= $0000
   193 = 0001			IVBL	= $0001
   194 = 00FE			CH_DELCHR	= $00FE
   195 = 009B			CH_ENTER	= $009B
   196 = 001B			CH_ESC	= $001B
   197 = 001C			CH_CURS_UP	= $001C
   198 = 001D			CH_CURS_DOWN	= $001D
   199 = 001E			CH_CURS_LEFT	= $001E
   200 = 001F			CH_CURS_RIGHT	= $001F
   201 = 007F			CH_TAB	= $007F
   202 = 009B			CH_EOL	= $009B
   203 = 007D			CH_CLR	= $007D
   204 = 00FD			CH_BELL	= $00FD
   205 = 007E			CH_DEL	= $007E
   206 = 009C			CH_DELLINE	= $009C
   207 = 009D			CH_INSLINE	= $009D
   208 = 0000			COLOR_BLACK	= $0000
   209 = 000E			COLOR_WHITE	= $000E
   210 = 0032			COLOR_RED	= $0032
   211 = 0096			COLOR_CYAN	= $0096
   212 = 0068			COLOR_VIOLET	= $0068
   213 = 00C4			COLOR_GREEN	= $00C4
   214 = 0074			COLOR_BLUE	= $0074
   215 = 00EE			COLOR_YELLOW	= $00EE
   216 = 0028			COLOR_ORANGE	= $0028
   217 = 00E4			COLOR_BROWN	= $00E4
   218 = 003C			COLOR_LIGHTRED	= $003C
   219 = 0004			COLOR_GRAY1	= $0004
   220 = 0006			COLOR_GRAY2	= $0006
   221 = 000A			COLOR_GRAY3	= $000A
   222 = 00CC			COLOR_LIGHTGREEN	= $00CC
   223 = 007C			COLOR_LIGHTBLUE	= $007C
   224 = 0004			FMOPENREAD	= $0004
   225 = 0008			FMOPENWRITE	= $0008
   226 = 0009			FMOPENAPPEND	= $0009
   227 = 000C			FMOPENREADWRITE	= $000C
   228 = 2314			SCREENWIDTH	= DATAORIGIN+$0000
   229 = 2316			SCREENHEIGHT	= DATAORIGIN+$0002
   230 = 2318			DATESEPARATOR	= DATAORIGIN+$0004
   231 = D014			TVSYSTEM	= $D014
   232 = 02C0			adr.PALETTE	= $02C0
   233 2179			.var PALETTE	= adr.PALETTE .word
   234 = D012			adr.HPALETTE	= $D012
   235 2179			.var HPALETTE	= adr.HPALETTE .word
   236 = 2319			FILEMODE	= DATAORIGIN+$0005
   237 = 231A			SCREENMODE	= DATAORIGIN+$0006
   238 = 231B			IORESULT	= DATAORIGIN+$0007
   239 = 231C			EOLN	= DATAORIGIN+$0008
   240 = 231D			RNDSEED	= DATAORIGIN+$0009
   241
   242 = 2179 C0 02		PALETTE
   242 = 217B 12 D0		HPALETTE
   242 				.endl							; UNIT SYSTEM
   243
   244 				; ------------------------------------------------------------
   245
   246 217D			.local	DOS						; UNIT
   247
   248 				; ------------------------------------------------------------
   249
   250 = D014			PALNTSC	= $D014
   251
   252 				.endl							; UNIT DOS
   253
   254 				; ------------------------------------------------------------
   255
   256 217D			.local	STRUTILS					; UNIT
   257
   258 				; ------------------------------------------------------------
   259
   260 				.endl							; UNIT STRUTILS
   261
   262 				; ------------------------------------------------------------
   263
   264 217D			.local	SYSUTILS					; UNIT
   265
   266 				; ------------------------------------------------------------
   267
   268 = 0001			FAREADONLY	= $0001
   269 = 0002			FAHIDDEN	= $0002
   270 = 0004			FASYSFILE	= $0004
   271 = 0008			FAVOLUMEID	= $0008
   272 = 0010			FADIRECTORY	= $0010
   273 = 0020			FAARCHIVE	= $0020
   274 = 003F			FAANYFILE	= $003F
   275
   276 				.endl							; UNIT SYSUTILS
   277
   278 				; ------------------------------------------------------------
   279
   280 217D			.local	ATARI						; UNIT
   281
   282 				; ------------------------------------------------------------
   283
   284 = 0012			RTCLOK	= $0012
   285 = 004D			ATRACT	= $004D
   286 = 0052			LMARGIN	= $0052
   287 = 0053			RMARGIN	= $0053
   288 = 0054			ROWCRS	= $0054
   289 = 0055			COLCRS	= $0055
   290 = 0057			DINDEX	= $0057
   291 = 0058			SAVMSC	= $0058
   292 = 006A			RAMTOP	= $006A
   293 = 0200			VDSLST	= $0200
   294 = 0230			SDLSTL	= $0230
   295 = 0290			TXTROW	= $0290
   296 = 0291			TXTCOL	= $0291
   297 = 0293			TINDEX	= $0293
   298 = 0294			TXTMSC	= $0294
   299 = 022F			SDMCTL	= $022F
   300 = 026F			GPRIOR	= $026F
   301 = 02F0			CRSINH	= $02F0
   302 = 02F3			CHACT	= $02F3
   303 = 02F4			CHBAS	= $02F4
   304 = 02FC			CH	= $02FC
   305 = 02C0			PCOLR0	= $02C0
   306 = 02C1			PCOLR1	= $02C1
   307 = 02C2			PCOLR2	= $02C2
   308 = 02C3			PCOLR3	= $02C3
   309 = 02C4			COLOR0	= $02C4
   310 = 02C5			COLOR1	= $02C5
   311 = 02C6			COLOR2	= $02C6
   312 = 02C7			COLOR3	= $02C7
   313 = 02C8			COLOR4	= $02C8
   314 = 02C8			COLBAKS	= $02C8
   315 = D000			HPOSP0	= $D000
   316 = D001			HPOSP1	= $D001
   317 = D002			HPOSP2	= $D002
   318 = D003			HPOSP3	= $D003
   319 = D004			HPOSM0	= $D004
   320 = D005			HPOSM1	= $D005
   321 = D006			HPOSM2	= $D006
   322 = D007			HPOSM3	= $D007
   323 = D008			SIZEP0	= $D008
   324 = D009			SIZEP1	= $D009
   325 = D00A			SIZEP2	= $D00A
   326 = D00B			SIZEP3	= $D00B
   327 = D00C			SIZEM	= $D00C
   328 = D00D			GRAFP0	= $D00D
   329 = D00E			GRAFP1	= $D00E
   330 = D00F			GRAFP2	= $D00F
   331 = D010			GRAFP3	= $D010
   332 = D011			GRAFM	= $D011
   333 = D004			P0PF	= $D004
   334 = D014			PAL	= $D014
   335 = D012			COLPM0	= $D012
   336 = D013			COLPM1	= $D013
   337 = D014			COLPM2	= $D014
   338 = D015			COLPM3	= $D015
   339 = D016			COLPF0	= $D016
   340 = D017			COLPF1	= $D017
   341 = D018			COLPF2	= $D018
   342 = D019			COLPF3	= $D019
   343 = D01A			COLBK	= $D01A
   344 = D01B			PRIOR	= $D01B
   345 = D01D			GRACTL	= $D01D
   346 = D01E			HITCLR	= $D01E
   347 = D200			AUDF1	= $D200
   348 = D201			AUDC1	= $D201
   349 = D202			AUDF2	= $D202
   350 = D203			AUDC2	= $D203
   351 = D204			AUDF3	= $D204
   352 = D205			AUDC3	= $D205
   353 = D206			AUDF4	= $D206
   354 = D207			AUDC4	= $D207
   355 = D208			AUDCTL	= $D208
   356 = D20F			SKSTAT	= $D20F
   357 = D301			PORTB	= $D301
   358 = D400			DMACTL	= $D400
   359 = D401			CHACTL	= $D401
   360 = D402			DLISTL	= $D402
   361 = D404			HSCROL	= $D404
   362 = D405			VSCROL	= $D405
   363 = D407			PMBASE	= $D407
   364 = D409			CHBASE	= $D409
   365 = D40A			WSYNC	= $D40A
   366 = D40B			VCOUNT	= $D40B
   367 = D40C			PENH	= $D40C
   368 = D40D			PENV	= $D40D
   369 = D40E			NMIEN	= $D40E
   370
   371 				.endl							; UNIT ATARI
   372
   373 				; ------------------------------------------------------------
   374
   375 217D			.local	CRT						; UNIT
   376
   377 217D			.local	READKEY						; FUNCTION | ASSEMBLER
   378
   379 				; ---------------------  ASM Block 063  ---------------------
   380
   381 217D 8A 48			txa:pha
   382
   383 217F 20 28 21			@GetKey
   384
   385 2182 8D 22 23			sta Result
   386
   387 2185 68 AA			pla:tax
   388
   389 2187			@exit
   390
   391 				; ------------------------------------------------------------
   392
   393 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   394 				; as Pointer
   395
   396 2187 E8				inx						; add bx, 1
   397 2188 AD 22 23 95 98		mva RESULT :STACKORIGIN,x
   398
   399 					.ifdef @new
   400 					@FreeMem #@VarData #@VarDataSize
   401 					eif
   402
   403 				; ------------------------------------------------------------
   404
   405 = 2322			RESULT	= DATAORIGIN+$000E
   406
   407 = 2322			@VarData	= RESULT
   408 = 0001			@VarDataSize	= 1
   409
   410 218D 60				rts						; ret
   411 				.endl
   412
   413 				; ------------------------------------------------------------
   414
   415 = 2321			TEXTATTR	= DATAORIGIN+$000D
   416 = D01F			CONSOL	= $D01F
   417 = 0000			CN_START_SELECT_OPTION	= $0000
   418 = 0001			CN_SELECT_OPTION	= $0001
   419 = 0002			CN_START_OPTION	= $0002
   420 = 0003			CN_OPTION	= $0003
   421 = 0004			CN_START_SELECT	= $0004
   422 = 0005			CN_SELECT	= $0005
   423 = 0006			CN_START	= $0006
   424 = 0007			CN_NONE	= $0007
   425 = 0000			BW40	= $0000
   426 = 0001			CO40	= $0001
   427 = 0002			BW80	= $0002
   428 = 0003			CO80	= $0003
   429 = 0007			MONO	= $0007
   430 = 0001			C40	= $0001
   431 = 0003			C80	= $0003
   432 = 0000			BLACK	= $0000
   433 = 0001			BLUE	= $0001
   434 = 0002			GREEN	= $0002
   435 = 0003			CYAN	= $0003
   436 = 0004			RED	= $0004
   437 = 0005			MAGENTA	= $0005
   438 = 0006			BROWN	= $0006
   439 = 0007			LIGHTGRAY	= $0007
   440 = 0008			DARKGRAY	= $0008
   441 = 0009			LIGHTBLUE	= $0009
   442 = 000A			LIGHTGREEN	= $000A
   443 = 000B			LIGHTCYAN	= $000B
   444 = 000C			LIGHTRED	= $000C
   445 = 000D			LIGHTMAGENTA	= $000D
   446 = 000E			YELLOW	= $000E
   447 = 000F			WHITE	= $000F
   448 = 0080			BLINK	= $0080
   449
   450 				.endl							; UNIT CRT
   451
   452 218E			.local	MAINPROC					; PROCEDURE
   453
   454 				; optimize FAIL (100, examples\arrmemc.pas), line = 19
   455 					@print #$7D
   455 				 LDY# $7D\ JSR @PRINT
   455 218E A0 7D		 LDY# $7D
   455 2190 20 46 20		 JSR @PRINT
   456
   457 				; optimize OK (examples\arrmemc.pas), line = 20
   458
   459 2193 AD FB 22			lda ARR
   460 2196 85 90			sta :bp2
   461 2198 AD FC 22			lda ARR+1
   462 219B 85 91			sta :bp2+1
   463 219D A0 00			ldy #$00
   464 219F A9 0E			lda #$0E
   465 21A1 91 90			sta (:bp2),y
   466 21A3 C8				iny
   467 21A4 A9 00			lda #$00
   468 21A6 91 90			sta (:bp2),y
   469
   470 				; optimize OK (examples\arrmemc.pas), line = 21
   471
   472 21A8 AD FB 22			lda ARR
   473 21AB 18 69 02			add #$02
   474 21AE 85 90			sta :bp2
   475 21B0 AD FC 22			lda ARR+1
   476 21B3 69 00			adc #$00
   477 21B5 85 91			sta :bp2+1
   478 21B7 A0 00			ldy #$00
   479 21B9 A9 E6			lda #$E6
   480 21BB 91 90			sta (:bp2),y
   481 21BD C8				iny
   482 21BE A9 00			lda #$00
   483 21C0 91 90			sta (:bp2),y
   484
   485 				; optimize OK (examples\arrmemc.pas), line = 22
   486
   487 21C2 AD FB 22			lda ARR
   488 21C5 18 69 04			add #$04
   489 21C8 85 90			sta :bp2
   490 21CA AD FC 22			lda ARR+1
   491 21CD 69 00			adc #$00
   492 21CF 85 91			sta :bp2+1
   493 21D1 A0 00			ldy #$00
   494 21D3 A9 EC			lda #$EC
   495 21D5 91 90			sta (:bp2),y
   496 21D7 C8				iny
   497 21D8 A9 13			lda #$13
   498 21DA 91 90			sta (:bp2),y
   499
   500 				; optimize OK (examples\arrmemc.pas), line = 23
   501
   502 21DC AD FB 22			lda ARR
   503 21DF 18 69 06			add #$06
   504 21E2 85 90			sta :bp2
   505 21E4 AD FC 22			lda ARR+1
   506 21E7 69 00			adc #$00
   507 21E9 85 91			sta :bp2+1
   508 21EB A0 00			ldy #$00
   509 21ED A9 18			lda #$18
   510 21EF 91 90			sta (:bp2),y
   511 21F1 C8				iny
   512 21F2 A9 F6			lda #$F6
   513 21F4 91 90			sta (:bp2),y
   514
   515 				; optimize FAIL (100, examples\arrmemc.pas), line = 24
   516 					@printSTRING #CODEORIGIN+$000D
   516 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   516 21F6 A0 20		 LDY> CODEORIGIN+$000D
   516 21F8 A9 0D		 LDA< CODEORIGIN+$000D
   516 21FA 20 4F 20		 JSR @PRINTSTRING
   517 					@print #$9B
   517 				 LDY# $9B\ JSR @PRINT
   517 21FD A0 9B		 LDY# $9B
   517 21FF 20 46 20		 JSR @PRINT
   518 					@printSTRING #CODEORIGIN+$000F
   518 				 LDY> CODEORIGIN+$000F\ LDA< CODEORIGIN+$000F\ JSR @PRINTSTRING
   518 2202 A0 20		 LDY> CODEORIGIN+$000F
   518 2204 A9 0F		 LDA< CODEORIGIN+$000F
   518 2206 20 4F 20		 JSR @PRINTSTRING
   519 					@print #$9B
   519 				 LDY# $9B\ JSR @PRINT
   519 2209 A0 9B		 LDY# $9B
   519 220B 20 46 20		 JSR @PRINT
   520 					@printSTRING #CODEORIGIN+$000C
   520 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   520 220E A0 20		 LDY> CODEORIGIN+$000C
   520 2210 A9 0C		 LDA< CODEORIGIN+$000C
   520 2212 20 4F 20		 JSR @PRINTSTRING
   521
   522 				; optimize OK (examples\arrmemc.pas), line = 25
   523
   524 2215 A9 00 8D 24 23		mva #$00 I
   525 				; --- For
   526
   527 				; optimize OK (examples\arrmemc.pas), line = 26
   528
   529 221A 8D 24 23			sta I
   530
   531 				; optimize OK (examples\arrmemc.pas), line = 26
   532
   533 				; --- To
   534 221D			l_00CF
   535
   536 				; --- ForToDoCondition
   537
   538 				; optimize OK (examples\arrmemc.pas), line = 26
   539
   540 221D AD 24 23			lda I
   541 2220 C9 03			cmp #$03
   542 2222 90 02			scc
   543 2224 D0 34			jne l_00DD
   544
   545 				; optimize FAIL (100, examples\arrmemc.pas), line = 27
   546 2226 E8				inx
   547 2227 AD 24 23 95 98		mva I :STACKORIGIN,x
   548 222C A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   549 2230				m@index2 0
Macro: M@INDEX2 [Source: cpu6502.asm]
     1 2230 16 98			asl :STACKORIGIN-0,x
     2 2232 36 A8			rol :STACKORIGIN-0+STACKWIDTH,x
Source: arrmemc.a65
   550 2234 AD FB 22			lda ARR
   551 2237 18 75 98			add :STACKORIGIN,x
   552 223A 85 90			sta :bp2
   553 223C AD FC 22			lda ARR+1
   554 223F 75 A8			adc :STACKORIGIN+STACKWIDTH,x
   555 2241 85 91			sta :bp2+1
   556 2243 A0 00			ldy #$00
   557 2245 B1 90 95 98			mva (:bp2),y :STACKORIGIN,x
   558 2249 C8				iny
   559 224A B1 90 95 A8			mva (:bp2),y :STACKORIGIN+STACKWIDTH,x
   560 224E 20 91 20			jsr @printWORD
   561 2251 CA				dex
   562 2252 20 41 20			@printEOL
   563
   564 				; --- ForToDoEpilog
   565 2255 EE 24 23			inc I						; inc ptr byte [CounterAddress]
   566
   567 2258 D0 C3			jne l_00CF
   568
   569 225A			l_00DD
   570
   571 				; optimize FAIL (100, examples\arrmemc.pas), line = 29
   572 					@printSTRING #CODEORIGIN+$000C
   572 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   572 225A A0 20		 LDY> CODEORIGIN+$000C
   572 225C A9 0C		 LDA< CODEORIGIN+$000C
   572 225E 20 4F 20		 JSR @PRINTSTRING
   573 					@print #$9B
   573 				 LDY# $9B\ JSR @PRINT
   573 2261 A0 9B		 LDY# $9B
   573 2263 20 46 20		 JSR @PRINT
   574 					@printSTRING #CODEORIGIN+$001E
   574 				 LDY> CODEORIGIN+$001E\ LDA< CODEORIGIN+$001E\ JSR @PRINTSTRING
   574 2266 A0 20		 LDY> CODEORIGIN+$001E
   574 2268 A9 1E		 LDA< CODEORIGIN+$001E
   574 226A 20 4F 20		 JSR @PRINTSTRING
   575 					@print #$9B
   575 				 LDY# $9B\ JSR @PRINT
   575 226D A0 9B		 LDY# $9B
   575 226F 20 46 20		 JSR @PRINT
   576 					@printSTRING #CODEORIGIN+$000C
   576 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   576 2272 A0 20		 LDY> CODEORIGIN+$000C
   576 2274 A9 0C		 LDA< CODEORIGIN+$000C
   576 2276 20 4F 20		 JSR @PRINTSTRING
   577
   578 				; optimize OK (examples\arrmemc.pas), line = 30
   579
   580 2279 AD 06 80			lda $8006
   581 227C 8D 25 23			sta MEM
   582 227F AD 07 80			lda $8006+1
   583 2282 8D 26 23			sta MEM+1
   584
   585 				; optimize FAIL (100, examples\arrmemc.pas), line = 31
   586 2285 E8				inx
   587 2286 AD 25 23 95 98		mva MEM :STACKORIGIN,x
   588 228B AD 26 23 95 A8		mva MEM+1 :STACKORIGIN+STACKWIDTH,x
   589 2290 20 91 20			jsr @printWORD
   590 2293 CA				dex
   591 2294 20 41 20			@printEOL
   592
   593 				; optimize OK (examples\arrmemc.pas), line = 32
   594
   595 2297 AD 04 80			lda $8004
   596 229A 8D 25 23			sta MEM
   597 229D AD 05 80			lda $8004+1
   598 22A0 8D 26 23			sta MEM+1
   599
   600 				; optimize FAIL (100, examples\arrmemc.pas), line = 33
   601 22A3 E8				inx
   602 22A4 AD 25 23 95 98		mva MEM :STACKORIGIN,x
   603 22A9 AD 26 23 95 A8		mva MEM+1 :STACKORIGIN+STACKWIDTH,x
   604 22AE 20 91 20			jsr @printWORD
   605 22B1 CA				dex
   606 22B2 20 41 20			@printEOL
   607
   608 				; optimize OK (examples\arrmemc.pas), line = 34
   609
   610 22B5 AD 02 80			lda $8002
   611 22B8 8D 25 23			sta MEM
   612 22BB AD 03 80			lda $8002+1
   613 22BE 8D 26 23			sta MEM+1
   614
   615 				; optimize FAIL (100, examples\arrmemc.pas), line = 35
   616 22C1 E8				inx
   617 22C2 AD 25 23 95 98		mva MEM :STACKORIGIN,x
   618 22C7 AD 26 23 95 A8		mva MEM+1 :STACKORIGIN+STACKWIDTH,x
   619 22CC 20 91 20			jsr @printWORD
   620 22CF CA				dex
   621 22D0 20 41 20			@printEOL
   622
   623 				; optimize OK (examples\arrmemc.pas), line = 36
   624
   625 22D3 AD 00 80			lda $8000
   626 22D6 8D 25 23			sta MEM
   627 22D9 AD 01 80			lda $8000+1
   628 22DC 8D 26 23			sta MEM+1
   629
   630 				; optimize FAIL (100, examples\arrmemc.pas), line = 37
   631 22DF E8				inx
   632 22E0 AD 25 23 95 98		mva MEM :STACKORIGIN,x
   633 22E5 AD 26 23 95 A8		mva MEM+1 :STACKORIGIN+STACKWIDTH,x
   634 22EA 20 91 20			jsr @printWORD
   635 22ED CA				dex
   636 22EE 20 41 20			@printEOL
   637
   638 				; optimize FAIL ('CRT.READKEY', examples\arrmemc.pas), line = 38
   639 22F1 20 7D 21			jsr CRT.READKEY
   640 22F4 B5 98 8D 23 23		mva :STACKORIGIN,x KEY
   641 22F9 CA				dex
   642
   643 				; ------------------------------------------------------------
   644
   645 = 2323			KEY	= DATAORIGIN+$000F
   646 = 2324			I	= DATAORIGIN+$0010
   647 = 2325			MEM	= DATAORIGIN+$0011
   648 = 8000			adr.ARR	= $8000
   649 22FA			.var ARR	= adr.ARR .word
   650 = 0003			@FORTMP_00CC	= $0003
   651
   652 = 2323			@VarData	= KEY
   653 = 0204			@VarDataSize	= 516
   654
   655 22FA			@exit
   656 					.ifdef @new
   657 					@FreeMem #@VarData #@VarDataSize
   658 					eif
   659 22FA 60				rts						; ret
   660 = 22FB 00 80		ARR
   660 				.endl
   661 22FD			l_0048
   662
   663 				; optimize FAIL ('MAINPROC', examples\arrmemc.pas), line = 42
   664 22FD 20 8E 21			jsr MAINPROC
   665
   666 				; ------------------------------------------------------------
   667
   668 2300			@exit
   669
   670 2300 A2 00		@halt	ldx #0
   671 2302 9A				txs
   672
   673 2303 60				rts
   674
   675 				; ------------------------------------------------------------
   676
   677 2304 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   678
   679 				; ------------------------------------------------------------
   680
   681 2314			.local	@DEFINES
   682 2314			ATARI
   683 				.endl
   684
   685 				.endl							; MAIN
   686
   687 				; ------------------------------------------------------------
   688 				; ------------------------------------------------------------
   689
   690 				.macro	UNITINITIALIZATION
   691 				
   692 					.ifdef MAIN.SYSTEM.@UnitInit
   693 					jsr MAIN.SYSTEM.@UnitInit
   694 					eif
   695 				
   696 					.ifdef MAIN.DOS.@UnitInit
   697 					jsr MAIN.DOS.@UnitInit
   698 					eif
   699 				
   700 					.ifdef MAIN.STRUTILS.@UnitInit
   701 					jsr MAIN.STRUTILS.@UnitInit
   702 					eif
   703 				
   704 					.ifdef MAIN.SYSUTILS.@UnitInit
   705 					jsr MAIN.SYSUTILS.@UnitInit
   706 					eif
   707 				
   708 					.ifdef MAIN.ATARI.@UnitInit
   709 					jsr MAIN.ATARI.@UnitInit
   710 					eif
   711 				
   712 					.ifdef MAIN.CRT.@UnitInit
   713 					jsr MAIN.CRT.@UnitInit
   714 					eif
   715 				.endm
   716
   717 				; ------------------------------------------------------------
   718
   719 					ift .SIZEOF(MAIN.SYSTEM) > 0
   720 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   720 				SYSTEM: $2157..$217C
   721 					eif
   722
   723 					ift .SIZEOF(MAIN.DOS) > 0
   724 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   725 					eif
   726
   727 					ift .SIZEOF(MAIN.STRUTILS) > 0
   728 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   729 					eif
   730
   731 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   732 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   733 					eif
   734
   735 					ift .SIZEOF(MAIN.ATARI) > 0
   736 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   737 					eif
   738
   739 					ift .SIZEOF(MAIN.CRT) > 0
   740 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   740 				CRT: $217D..$218D
   741 					eif
   742
   743 					.print 'CODE: ',CODEORIGIN,'..',*-1
   743 				CODE: $2000..$2313
   744
   745 				; ------------------------------------------------------------
   746
   747 2314			DATAORIGIN
   748 2314 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   749
   750 = 0006			VARINITSIZE	= *-DATAORIGIN
   751 = 0013			VARDATASIZE	= 19
   752
   753 = 2327			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   754
   755 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   755 				DATA: $2314..$2327
   756
   757 02E0-02E1> 38 21			run START
   758
   759 				; ------------------------------------------------------------
   760
   761 				.macro	STATICDATA
   762 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $00 $00 $0D  $41 $72 $72 $61 $79 $20 $76 $61
   763 				.by  $6C $75 $65 $73 $3A $00 $21 $41  $72 $72 $61 $79 $20 $76 $61 $6C  $75 $65 $73 $20 $69 $6E $20 $64
   764 				.by  $65 $73 $63 $65 $6E $64 $69 $6E  $67 $20 $6F $72 $64 $65 $72 $3A  $00
   765 				.endm
   766
   767 					end
