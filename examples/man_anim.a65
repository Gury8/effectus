; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.3 [2020/05/10] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

fxptr	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4
bp	.ds 2
bp2	.ds 2

ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

TMP	.ds 2

STACKORIGIN	.ds STACKWIDTH*4

.print 'ZPFREE: $0000..',fxptr-1,' / ',*,'..',$ff

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RUNLIB
	icl 'cpu6502.asm'

.print 'RUNLIB: ',RUNLIB,'..',*

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	eif

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #0
	sta:rne VADR+VLEN-256,x+
	eli VLEN>0
	@fill #VADR #VLEN #0
	eif

	ldx #$0f
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx		; X = 0 !!!
	stx bp		; lo BP = 0

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_002F

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x VALUE
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x A
	mva :STACKORIGIN+STACKWIDTH,x A+1
	dex						; sub bx, 1

; ---------------------  ASM Block 021  ---------------------

	ldy #0
	mva value (edx),y


; ------------------------------------------------------------

A	= edx
VALUE	= ecx
@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	FILLCHAR_0050					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x VALUE
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x COUNT
	mva :STACKORIGIN+STACKWIDTH,x COUNT+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x A
	mva :STACKORIGIN+STACKWIDTH,x A+1
	dex						; sub bx, 1

; ---------------------  ASM Block 024  ---------------------

	jsr @fill


; ------------------------------------------------------------

A	= edx
COUNT	= ecx
VALUE	= eax
@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	MOVE_005A					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x COUNT
	mva :STACKORIGIN+STACKWIDTH,x COUNT+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x DEST
	mva :STACKORIGIN+STACKWIDTH,x DEST+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x SOURCE
	mva :STACKORIGIN+STACKWIDTH,x SOURCE+1
	dex						; sub bx, 1

; ---------------------  ASM Block 031  ---------------------

	jsr @move


; ------------------------------------------------------------

SOURCE	= edx
DEST	= ecx
COUNT	= eax
@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

; ------------------------------------------------------------

M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $0004
MGTIA	= $0000
MVBXE	= $0080
VBXE_XDLADR	= $0000
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $0000
IVBL	= $0001
CH_DELCHR	= $00FE
CH_ENTER	= $009B
CH_ESC	= $001B
CH_CURS_UP	= $001C
CH_CURS_DOWN	= $001D
CH_CURS_LEFT	= $001E
CH_CURS_RIGHT	= $001F
CH_TAB	= $007F
CH_EOL	= $009B
CH_CLR	= $007D
CH_BELL	= $00FD
CH_DEL	= $007E
CH_DELLINE	= $009C
CH_INSLINE	= $009D
COLOR_BLACK	= $0000
COLOR_WHITE	= $000E
COLOR_RED	= $0032
COLOR_CYAN	= $0096
COLOR_VIOLET	= $0068
COLOR_GREEN	= $00C4
COLOR_BLUE	= $0074
COLOR_YELLOW	= $00EE
COLOR_ORANGE	= $0028
COLOR_BROWN	= $00E4
COLOR_LIGHTRED	= $003C
COLOR_GRAY1	= $0004
COLOR_GRAY2	= $0006
COLOR_GRAY3	= $000A
COLOR_LIGHTGREEN	= $00CC
COLOR_LIGHTBLUE	= $007C
FMOPENREAD	= $0004
FMOPENWRITE	= $0008
FMOPENAPPEND	= $0009
FMOPENREADWRITE	= $000C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
TVSYSTEM	= $D014
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
SCREENMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	DOS						; UNIT

; ------------------------------------------------------------

PALNTSC	= $D014

.endl							; UNIT DOS

; ------------------------------------------------------------

.local	STRUTILS					; UNIT

; ------------------------------------------------------------

.endl							; UNIT STRUTILS

; ------------------------------------------------------------

.local	SYSUTILS					; UNIT

; ------------------------------------------------------------

FAREADONLY	= $0001
FAHIDDEN	= $0002
FASYSFILE	= $0004
FAVOLUMEID	= $0008
FADIRECTORY	= $0010
FAARCHIVE	= $0020
FAANYFILE	= $003F

.endl							; UNIT SYSUTILS

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

RTCLOK	= $0012
ATRACT	= $004D
LMARGIN	= $0052
RMARGIN	= $0053
ROWCRS	= $0054
COLCRS	= $0055
DINDEX	= $0057
SAVMSC	= $0058
RAMTOP	= $006A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
SKSTAT	= $D20F
PORTB	= $D301
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$000B
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $0000
CN_SELECT_OPTION	= $0001
CN_START_OPTION	= $0002
CN_OPTION	= $0003
CN_START_SELECT	= $0004
CN_SELECT	= $0005
CN_START	= $0006
CN_NONE	= $0007
BW40	= $0000
CO40	= $0001
BW80	= $0002
CO80	= $0003
MONO	= $0007
C40	= $0001
C80	= $0003
BLACK	= $0000
BLUE	= $0001
GREEN	= $0002
CYAN	= $0003
RED	= $0004
MAGENTA	= $0005
BROWN	= $0006
LIGHTGRAY	= $0007
DARKGRAY	= $0008
LIGHTBLUE	= $0009
LIGHTGREEN	= $000A
LIGHTCYAN	= $000B
LIGHTRED	= $000C
LIGHTMAGENTA	= $000D
YELLOW	= $000E
WHITE	= $000F
BLINK	= $0080

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	TYPES						; UNIT

; ------------------------------------------------------------

.endl							; UNIT TYPES

; ------------------------------------------------------------

.local	GRAPH						; UNIT

.local	INITGRAPH_009A					; PROCEDURE | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x MODE
	dex						; sub bx, 1

; optimize OK (GRAPH), line = 73

	mva #$00 GRAPHRESULT

; optimize OK (GRAPH), line = 75

	mva MODE SYSTEM.SCREENMODE

; ---------------------  ASM Block 074  ---------------------


	txa:pha

	mva #$2c @putchar.vbxe

	lda mode
	and #$0f
	tay

	ldx #$60	; 6*16
	lda mode	; %00010000 with text window
	and #$10
	eor #$10
	ora #2		; read

	.nowarn @graphics
	
	
tlshc	equ $ee6d

	ldx dindex
	ldy tlshc,x
	lda #5
shift	asl @
	dey
	bne shift

	sta SCANLINE_WIDTH
	

; Fox/TQA

dindex	equ $57
tmccn	equ $ee7d
tmrcn	equ $ee8d

	ldx dindex
	lda tmccn,x
	ldy tmrcn,x
	ldx #0
	cmp #<320
	sne:inx
    
; X:A = horizontal resolution
; Y = vertical resolution

	sta MAIN.SYSTEM.ScreenWidth
	stx MAIN.SYSTEM.ScreenWidth+1
	
	sub #1
	sta WIN_RIGHT
	txa
	sbc #0
	sta WIN_RIGHT+1
	
	sty MAIN.SYSTEM.ScreenHeight
	lda #0
	sta MAIN.SYSTEM.ScreenHeight+1
	
	sta WIN_LEFT
	sta WIN_LEFT+1
	sta WIN_TOP
	sta WIN_TOP+1

	sta WIN_BOTTOM+1	
	dey
	sty WIN_BOTTOM

	pla:tax


; ------------------------------------------------------------

MODE	= DATAORIGIN+$0029

@VarData	= MODE
@VarDataSize	= 1

@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	SETCOLOR					; PROCEDURE | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x COLOR
	dex						; sub bx, 1

; ---------------------  ASM Block 076  ---------------------

	mva color @COMMAND.colscr
	sta GetColor


; ------------------------------------------------------------

COLOR	= DATAORIGIN+$002A

@VarData	= COLOR
@VarDataSize	= 1

@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	PUTPIXEL_00AF					; PROCEDURE | ASSEMBLER | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x Y
	mva :STACKORIGIN+STACKWIDTH,x Y+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x X
	mva :STACKORIGIN+STACKWIDTH,x X+1
	dex						; sub bx, 1

; ---------------------  ASM Block 077  ---------------------

	txa:pha
{
	lda y+1
	bmi stop
	cmp MAIN.SYSTEM.ScreenHeight+1
	bne sk0
	lda y
	cmp MAIN.SYSTEM.ScreenHeight
sk0
	bcs stop

	lda x+1
	bmi stop
	cmp MAIN.SYSTEM.ScreenWidth+1
	bne sk1
	lda x
	cmp MAIN.SYSTEM.ScreenWidth
sk1
	bcs stop

	mwa x colcrs
	mva y rowcrs

	lda #@IDput

	jsr @COMMAND

stop	pla:tax


; ------------------------------------------------------------

X	= DATAORIGIN+$002B
Y	= DATAORIGIN+$002D

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	MOVETO						; PROCEDURE | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x Y
	mva :STACKORIGIN+STACKWIDTH,x Y+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x X
	mva :STACKORIGIN+STACKWIDTH,x X+1
	dex						; sub bx, 1

; ---------------------  ASM Block 080  ---------------------

	lda y+1
	bpl _0

	lda #0
	sta y
	sta y+1
_0
	lda x+1
	bpl _1

	lda #0
	sta x
	sta x+1
_1
	cpw y main.system.ScreenHeight
	bcc _2

	sbw main.system.ScreenHeight #1 y
_2
	cpw x main.system.ScreenWidth
	bcc _3

	sbw main.system.ScreenWidth #1 x
_3
	mwa x CurrentX
	mwa y CurrentY


; ------------------------------------------------------------

X	= DATAORIGIN+$002F
Y	= DATAORIGIN+$0031

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	LINETO						; PROCEDURE | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x Y
	mva :STACKORIGIN+STACKWIDTH,x Y+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x X
	mva :STACKORIGIN+STACKWIDTH,x X+1
	dex						; sub bx, 1

; ---------------------  ASM Block 081  ---------------------

	lda y+1
	bpl _0

	lda #0
	sta y
	sta y+1
_0
	lda x+1
	bpl _1

	lda #0
	sta x
	sta x+1
_1
	cpw y main.system.ScreenHeight
	bcc _2

	sbw main.system.ScreenHeight #1 y
_2
	cpw x main.system.ScreenWidth
	bcc _3

	sbw main.system.ScreenWidth #1 x
_3
	txa:pha

	mwa CurrentX colcrs
	mva CurrentY rowcrs

	lda #@IDput

	jsr @COMMAND

	lda x
	sta colcrs
	sta CurrentX
	lda x+1
	sta colcrs+1
	sta CurrentX+1

	mva y rowcrs
	sta CurrentY
	lda y+1
	sta CurrentY+1

	lda #@IDdraw

	jsr @COMMAND

	pla:tax


; ------------------------------------------------------------

X	= DATAORIGIN+$0033
Y	= DATAORIGIN+$0035

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

; ------------------------------------------------------------

CURRENTDRIVER	= $FFFFFF80
DETECT	= $0000
CGA	= $0001
MCGA	= $0002
EGA	= $0003
EGA64	= $0004
EGAMONO	= $0005
LOWRES	= $0006
HERCMONO	= $0007
VGA	= $0009
VESA	= $000A
D1BIT	= $000B
D2BIT	= $000C
D4BIT	= $000D
D6BIT	= $000E
D8BIT	= $000F
D12BIT	= $0010
M640X400	= $0018
M640X480	= $0018
GROK	= $0000
GRNOINITGRAPH	= $FFFFFFFF
GRNOTDETECTED	= $FFFFFFFE
GRFILENOTFOUND	= $FFFFFFFD
GRINVALIDDRIVER	= $FFFFFFFC
GRNOLOADMEM	= $FFFFFFFB
GRNOSCANMEM	= $FFFFFFFA
GRNOFLOODMEM	= $FFFFFFF9
GRFONTNOTFOUND	= $FFFFFFF8
GRNOFONTMEM	= $FFFFFFF7
GRINVALIDMODE	= $FFFFFFF6
GRERROR	= $FFFFFFF5
GRIOERROR	= $FFFFFFF4
GRINVALIDFONT	= $FFFFFFF3
GRINVALIDFONTNUM	= $FFFFFFF2
GRINVALIDVERSION	= $FFFFFFEE
CGAC0	= $0000
CGAC1	= $0001
CGAC2	= $0002
CGAC3	= $0003
CGAHI	= $0004
MCGAC0	= $0000
MCGAC1	= $0001
MCGAC2	= $0002
MCGAC3	= $0003
MCGAMED	= $0004
MCGAHI	= $0005
EGALO	= $0000
EGAHI	= $0001
EGA64LO	= $0000
EGA64HI	= $0001
EGAMONOHI	= $0003
VGALO	= $000A
VGAMED	= $001F
VGAHI	= $0018
WIN_LEFT	= DATAORIGIN+$000C
WIN_RIGHT	= DATAORIGIN+$000E
WIN_TOP	= DATAORIGIN+$0010
WIN_BOTTOM	= DATAORIGIN+$0012
GRAPHRESULT	= DATAORIGIN+$0014
GETCOLOR	= DATAORIGIN+$0015
adr.LASTARCCOORDS	= DATAORIGIN+$0016
.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
LASTARCCOORDS.X	= DATAORIGIN+$0016
LASTARCCOORDS.Y	= DATAORIGIN+$0018
LASTARCCOORDS.XSTART	= DATAORIGIN+$001A
LASTARCCOORDS.YSTART	= DATAORIGIN+$001C
LASTARCCOORDS.XEND	= DATAORIGIN+$001E
LASTARCCOORDS.YEND	= DATAORIGIN+$0020
CURRENTX	= DATAORIGIN+$0022
CURRENTY	= DATAORIGIN+$0024
VIDEORAM	= DATAORIGIN+$0026
SCANLINE_WIDTH	= DATAORIGIN+$0028

.endl							; UNIT GRAPH

.local	NEXTFRAMEPROC					; PROCEDURE

; optimize OK (examples\man_anim.pas), line = 47

	lda FRAME
	cmp #$01
	jne l_010F

; optimize OK (examples\man_anim.pas), line = 48

	lda PMGMEM+1
	add #$02
	sta :ecx+1
	lda PMGMEM
	add PY0
	sta :ecx
	scc
	inc :ecx+1
	lda P0FRAME1
	sta :edx
	lda P0FRAME1+1
	sta :edx+1
	lda HEIGHT
	sta :eax
	lda #$00
	sta :eax+1
	jsr @move

; optimize OK (examples\man_anim.pas), line = 49

	lda PMGMEM
	add #$80
	sta :STACKORIGIN+10
	lda PMGMEM+1
	adc #$02
	sta :ecx+1
	lda :STACKORIGIN+10
	add PY0
	sta :ecx
	scc
	inc :ecx+1
	lda P1FRAME1
	sta :edx
	lda P1FRAME1+1
	sta :edx+1
	lda HEIGHT
	sta :eax
	lda #$00
	sta :eax+1
	jsr @move

	jmp l_013D
l_010F

; optimize OK (examples\man_anim.pas), line = 51

	lda FRAME
	cmp #$02
	jne l_014F

; optimize OK (examples\man_anim.pas), line = 52

	lda PMGMEM+1
	add #$02
	sta :ecx+1
	lda PMGMEM
	add PY0
	sta :ecx
	scc
	inc :ecx+1
	lda P0FRAME2
	sta :edx
	lda P0FRAME2+1
	sta :edx+1
	lda HEIGHT
	sta :eax
	lda #$00
	sta :eax+1
	jsr @move

; optimize OK (examples\man_anim.pas), line = 53

	lda PMGMEM
	add #$80
	sta :STACKORIGIN+10
	lda PMGMEM+1
	adc #$02
	sta :ecx+1
	lda :STACKORIGIN+10
	add PY0
	sta :ecx
	scc
	inc :ecx+1
	lda P1FRAME2
	sta :edx
	lda P1FRAME2+1
	sta :edx+1
	lda HEIGHT
	sta :eax
	lda #$00
	sta :eax+1
	jsr @move

	jmp l_017D
l_014F

; optimize OK (examples\man_anim.pas), line = 55

	lda FRAME
	cmp #$03
	jne l_018F

; optimize OK (examples\man_anim.pas), line = 56

	lda PMGMEM+1
	add #$02
	sta :ecx+1
	lda PMGMEM
	add PY0
	sta :ecx
	scc
	inc :ecx+1
	lda P0FRAME3
	sta :edx
	lda P0FRAME3+1
	sta :edx+1
	lda HEIGHT
	sta :eax
	lda #$00
	sta :eax+1
	jsr @move

; optimize OK (examples\man_anim.pas), line = 57

	lda PMGMEM
	add #$80
	sta :STACKORIGIN+10
	lda PMGMEM+1
	adc #$02
	sta :ecx+1
	lda :STACKORIGIN+10
	add PY0
	sta :ecx
	scc
	inc :ecx+1
	lda P1FRAME3
	sta :edx
	lda P1FRAME3+1
	sta :edx+1
	lda HEIGHT
	sta :eax
	lda #$00
	sta :eax+1
	jsr @move

	jmp l_01BD
l_018F

; optimize OK (examples\man_anim.pas), line = 59

	lda FRAME
	cmp #$04
	jne l_01CF

; optimize OK (examples\man_anim.pas), line = 60

	lda PMGMEM+1
	add #$02
	sta :ecx+1
	lda PMGMEM
	add PY0
	sta :ecx
	scc
	inc :ecx+1
	lda P0FRAME4
	sta :edx
	lda P0FRAME4+1
	sta :edx+1
	lda HEIGHT
	sta :eax
	lda #$00
	sta :eax+1
	jsr @move

; optimize OK (examples\man_anim.pas), line = 61

	lda PMGMEM
	add #$80
	sta :STACKORIGIN+10
	lda PMGMEM+1
	adc #$02
	sta :ecx+1
	lda :STACKORIGIN+10
	add PY0
	sta :ecx
	scc
	inc :ecx+1
	lda P1FRAME4
	sta :edx
	lda P1FRAME4+1
	sta :edx+1
	lda HEIGHT
	sta :eax
	lda #$00
	sta :eax+1
	jsr @move
l_01CF
l_01BD
l_017D
l_013D
@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	PLAYGROUNDPROC					; PROCEDURE

; optimize OK (examples\man_anim.pas), line = 69

	lda #$B8
	sta $02C4

; optimize OK (examples\man_anim.pas), line = 70

	lda #$06
	sta $02C5

; optimize OK (examples\man_anim.pas), line = 71

	lda #$BA
	sta $02C6
; --- For

; optimize OK (examples\man_anim.pas), line = 72

	mva #$1A I

; optimize OK (examples\man_anim.pas), line = 72

; --- To
l_020C

; --- ForToDoCondition

; optimize OK (examples\man_anim.pas), line = 72

	lda I
	cmp #$2A
	scc
	jne l_021A

; optimize FAIL ('GRAPH.SETCOLOR', examples\man_anim.pas), line = 73
	inx
	mva I :STACKORIGIN,x
	jsr GRAPH.SETCOLOR

; optimize FAIL ('GRAPH.PUTPIXEL_00AF', examples\man_anim.pas), line = 74
	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva I :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_00AF

; optimize FAIL ('GRAPH.MOVETO', examples\man_anim.pas), line = 75
	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva I :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.MOVETO

; optimize FAIL ('GRAPH.LINETO', examples\man_anim.pas), line = 76
	inx
	mva #$9F :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva I :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINETO

; --- ForToDoEpilog
	inc I						; inc ptr byte [CounterAddress]

	jne l_020C

l_021A

; optimize FAIL ('GRAPH.SETCOLOR', examples\man_anim.pas), line = 78
	inx
	mva #$01 :STACKORIGIN,x
	jsr GRAPH.SETCOLOR

; optimize FAIL ('GRAPH.PUTPIXEL_00AF', examples\man_anim.pas), line = 79
	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$36 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_00AF

; optimize FAIL ('GRAPH.MOVETO', examples\man_anim.pas), line = 80
	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$36 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.MOVETO

; optimize FAIL ('GRAPH.LINETO', examples\man_anim.pas), line = 81
	inx
	mva #$9F :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$36 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINETO

; optimize FAIL ('GRAPH.PUTPIXEL_00AF', examples\man_anim.pas), line = 82
	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$40 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_00AF

; optimize FAIL ('GRAPH.MOVETO', examples\man_anim.pas), line = 83
	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$40 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.MOVETO

; optimize FAIL ('GRAPH.LINETO', examples\man_anim.pas), line = 84
	inx
	mva #$9F :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$40 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINETO

; optimize FAIL ('GRAPH.SETCOLOR', examples\man_anim.pas), line = 85
	inx
	mva #$02 :STACKORIGIN,x
	jsr GRAPH.SETCOLOR
; --- For

; optimize OK (examples\man_anim.pas), line = 86

	mva #$37 I

; optimize OK (examples\man_anim.pas), line = 86

; --- To
l_0251

; --- ForToDoCondition

; optimize OK (examples\man_anim.pas), line = 86

	lda I
	cmp #$3F
	scc
	jne l_025F

; optimize FAIL ('GRAPH.PUTPIXEL_00AF', examples\man_anim.pas), line = 87
	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva I :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_00AF

; optimize FAIL ('GRAPH.MOVETO', examples\man_anim.pas), line = 88
	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva I :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.MOVETO

; optimize FAIL ('GRAPH.LINETO', examples\man_anim.pas), line = 89
	inx
	mva #$9F :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva I :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINETO

; --- ForToDoEpilog
	inc I						; inc ptr byte [CounterAddress]

	jne l_0251

l_025F

; ------------------------------------------------------------

I	= DATAORIGIN+$013E
@FORTMP_0209	= $002A
@FORTMP_024E	= $003F

@VarData	= I
@VarDataSize	= 1

@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	MAINPROC					; PROCEDURE

; optimize FAIL ('GRAPH.INITGRAPH_009A', examples\man_anim.pas), line = 96
	inx
	mva #$07 :STACKORIGIN,x
	jsr GRAPH.INITGRAPH_009A

; optimize OK (examples\man_anim.pas), line = 97

	lda #$00
	sta $02C6

; optimize OK (examples\man_anim.pas), line = 98

	lda #$00
	sta $02C8

; optimize OK (examples\man_anim.pas), line = 99

	lda #$01
	sta $02F0

; optimize FAIL ('PLAYGROUNDPROC', examples\man_anim.pas), line = 100
	jsr PLAYGROUNDPROC

; optimize OK (examples\man_anim.pas), line = 102

	mva #$00 GRACTL

; optimize OK (examples\man_anim.pas), line = 103

	lda RAMTOP
	sub #$18
	sta PMGMEM
	lda #$00
	sbc #$00
	sta PMGMEM+1

; optimize OK (examples\man_anim.pas), line = 104

	mva PMGMEM PMBASE

; optimize OK (examples\man_anim.pas), line = 105

	lda #$00
	sta :eax
	lda PMGMEM
	sta :eax+1
	lda :eax
	sta PMGMEM
	lda :eax+1
	sta PMGMEM+1

; optimize OK (examples\man_anim.pas), line = 107

	mva #$2E SDMCTL

; optimize OK (examples\man_anim.pas), line = 109

	lda PMGMEM
	add #$80
	sta :edx
	lda PMGMEM+1
	adc #$01
	sta :edx+1
	lda #$7F
	sta :ecx
	lda #$02
	sta :ecx+1
	lda #$00
	sta :eax
	jsr @fill

; optimize OK (examples\man_anim.pas), line = 111

	mva #$21 PRIOR

; optimize OK (examples\man_anim.pas), line = 113

	ldy #256-$02
	lda #$00
	sta:rne $D008+$02-256,y+

; optimize OK (examples\man_anim.pas), line = 115

	mva #$03 GRACTL

; optimize FAIL (100, examples\man_anim.pas), line = 116
	@printSTRING #CODEORIGIN+$000D

; optimize OK (examples\man_anim.pas), line = 117

	ldy #$00
	mva PX0 adr.HPOSP,y

; optimize OK (examples\man_anim.pas), line = 118

	ldy #$01
	mva PX1 adr.HPOSP,y

; optimize OK (examples\man_anim.pas), line = 119

	mva #$FF CH

; optimize OK (examples\man_anim.pas), line = 120

	sta CH

; --- WhileProlog
l_02D2

; optimize OK (examples\man_anim.pas), line = 121

	lda CH
	cmp #$FF
	jne l_02E1

; optimize FAIL ('NEXTFRAMEPROC', examples\man_anim.pas), line = 122
	jsr NEXTFRAMEPROC

; optimize OK (examples\man_anim.pas), line = 123

	lda adr.P0COLOR+$00
	sta adr.PCOLR+$00

; optimize OK (examples\man_anim.pas), line = 124

	lda adr.P1COLOR+$00
	sta adr.PCOLR+$01

; optimize OK (examples\man_anim.pas), line = 125

	ldy #$00
	mva PX0 adr.HPOSP,y

; optimize OK (examples\man_anim.pas), line = 126

	ldy #$01
	mva PX1 adr.HPOSP,y

; optimize OK (examples\man_anim.pas), line = 127

	lda PX0
	add #$02
	sta PX0

; optimize OK (examples\man_anim.pas), line = 128

	lda PX1
	add #$02
	sta PX1

; optimize OK (examples\man_anim.pas), line = 129

	lda PX0
	cmp #$D2
	seq
	bcs @+
	jmp l_0314
@

; optimize OK (examples\man_anim.pas), line = 130

	mva #$28 PX0

; optimize OK (examples\man_anim.pas), line = 131

	sta PX1
l_0314
; --- For

; optimize OK (examples\man_anim.pas), line = 133

	mva #$00 DELAY
	sta DELAY+1
	sta DELAY+2
	sta DELAY+3

; optimize OK (examples\man_anim.pas), line = 133

; --- To
l_0328

; --- ForToDoCondition

; optimize OK (examples\man_anim.pas), line = 133

	.LOCAL
	lda DELAY+3
	clv:sec
	sbc #$00
	bne L4
	lda DELAY+2
	cmp #$00
	bne L1
	lda DELAY+1
	cmp #$05
	bne L1
	lda DELAY
	cmp #$DC
L1	beq L5
	bcs L3
	lda #$FF
	jmp L5
L3	lda #$01
	jmp L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	smi
	jne l_0332

; --- ForToDoEpilog
	ind DELAY					; inc ptr dword [CounterAddress]
	jmp l_0328
l_0332

; optimize FAIL (0, examples\man_anim.pas), line = 135
	inc FRAME

; optimize OK (examples\man_anim.pas), line = 136

	lda FRAME
	cmp #$04
	seq
	bcs @+
	jmp l_034E
@

; optimize OK (examples\man_anim.pas), line = 137

	mva #$01 FRAME
l_034E
	jmp l_02D2
l_02E1

; optimize OK (examples\man_anim.pas), line = 140

	mva #$FF CH

; optimize OK (examples\man_anim.pas), line = 142

	mva #$00 GRACTL

; ------------------------------------------------------------

@FORTMP_0325	= $05DC
@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl
l_002F

; optimize FAIL ('MAINPROC', examples\man_anim.pas), line = 146
	jsr MAINPROC

; ------------------------------------------------------------

adr.P0COLOR	= DATAORIGIN+$0037
.var P0COLOR	= adr.P0COLOR .word
adr.P1COLOR	= DATAORIGIN+$003B
.var P1COLOR	= adr.P1COLOR .word
adr.P0FRAME1	= DATAORIGIN+$003F
.var P0FRAME1	= adr.P0FRAME1 .word
adr.P0FRAME2	= DATAORIGIN+$005D
.var P0FRAME2	= adr.P0FRAME2 .word
adr.P0FRAME3	= DATAORIGIN+$007B
.var P0FRAME3	= adr.P0FRAME3 .word
adr.P0FRAME4	= DATAORIGIN+$0099
.var P0FRAME4	= adr.P0FRAME4 .word
adr.P1FRAME1	= DATAORIGIN+$00B7
.var P1FRAME1	= adr.P1FRAME1 .word
adr.P1FRAME2	= DATAORIGIN+$00D5
.var P1FRAME2	= adr.P1FRAME2 .word
adr.P1FRAME3	= DATAORIGIN+$00F3
.var P1FRAME3	= adr.P1FRAME3 .word
adr.P1FRAME4	= DATAORIGIN+$0111
.var P1FRAME4	= adr.P1FRAME4 .word
PMBASE	= $D407
SDMCTL	= $022F
GRACTL	= $D01D
RAMTOP	= $006A
PRIOR	= $026F
CH	= $02FC
PMGMEM	= DATAORIGIN+$012F
adr.PCOLR	= $02C0
.var PCOLR	= adr.PCOLR .word
adr.HPOSP	= $D000
.var HPOSP	= adr.HPOSP .word
adr.SIZEP	= $D008
.var SIZEP	= adr.SIZEP .word
adr.PCOLR33	= DATAORIGIN+$0131
.var PCOLR33	= adr.PCOLR33 .word
PX0	= DATAORIGIN+$0135
PX1	= DATAORIGIN+$0136
PY0	= DATAORIGIN+$0137
HEIGHT	= DATAORIGIN+$0138
FRAME	= DATAORIGIN+$0139
DELAY	= DATAORIGIN+$013A
@exit

@halt	ldx #0
	txs

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	eif

	.ifdef MAIN.DOS.@UnitInit
	jsr MAIN.DOS.@UnitInit
	eif

	.ifdef MAIN.STRUTILS.@UnitInit
	jsr MAIN.STRUTILS.@UnitInit
	eif

	.ifdef MAIN.SYSUTILS.@UnitInit
	jsr MAIN.SYSUTILS.@UnitInit
	eif

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	eif

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	eif

	.ifdef MAIN.TYPES.@UnitInit
	jsr MAIN.TYPES.@UnitInit
	eif

	.ifdef MAIN.GRAPH.@UnitInit
	jsr MAIN.GRAPH.@UnitInit
	eif
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.DOS) > 0
	.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
	eif

	ift .SIZEOF(MAIN.STRUTILS) > 0
	.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
	eif

	ift .SIZEOF(MAIN.SYSUTILS) > 0
	.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.TYPES) > 0
	.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
	eif

	ift .SIZEOF(MAIN.GRAPH) > 0
	.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',*-1

; ------------------------------------------------------------

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $27 $00  $00 $00 $17 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $1A  $1A $1A $1A $24 $24 $24 $24 $00  $00 $0C $08 $1C $1C $1C $18 $18
.by  $10 $19 $3D $7F $7F $5E $DC $DC  $9C $9C $A0 $BC $1C $2C $34 $74  $60 $60 $00 $00 $00 $00 $00 $0C
.by  $08 $1C $1C $1C $18 $18 $10 $18  $38 $3C $7C $5E $5E $5E $7E $7C  $20 $3C $3C $3C $34 $34 $30 $30
.by  $00 $00 $00 $00 $00 $00 $0C $08  $1C $1C $1C $18 $18 $10 $38 $3C  $3C $5C $5C $5E $66 $7C $7C $20
.by  $3C $3A $36 $36 $06 $06 $06 $00  $00 $00 $00 $0C $08 $1C $1C $1C  $18 $18 $10 $18 $38 $3C $7C $5E
.by  $5E $5E $7E $7C $20 $3C $3C $3C  $34 $34 $30 $30 $00 $00 $00 $1C  $1C $3C $3C $3C $3C $3C $38 $18
.by  $08 $01 $01 $00 $00 $20 $20 $20  $20 $20 $9C $80 $21 $13 $0B $03  $03 $80 $C0 $E0 $60 $1C $1C $3C
.by  $3C $3C $3C $3C $38 $18 $08 $00  $00 $00 $00 $20 $20 $22 $22 $60  $3C $00 $00 $00 $08 $08 $0E $0E
.by  $3E $38 $18 $00 $1C $1C $3C $3C  $3C $3C $3C $38 $18 $08 $00 $00  $00 $20 $20 $26 $1E $00 $00 $1C
.by  $00 $04 $C8 $C0 $F0 $80 $80 $07  $07 $1C $1C $3C $3C $3C $3C $3C  $38 $18 $08 $00 $00 $00 $00 $20
.by  $20 $22 $22 $60 $3C $00 $00 $00  $08 $08 $0E $0E $3E $38 $18 $00  $00 $00 $00 $00 $00 $28 $28 $2E
.by  $1E $01

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 319

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $19 $4D $61  $6E $20 $72 $75 $6E $6E $69 $6E
.by  $67 $20 $6F $6E $20 $74 $68 $65  $20 $73 $74 $72 $65 $65 $74 $00
.endm

	end
