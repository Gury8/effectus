mads 2.1.0
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $20F6..$21EB
    97
    98 				; ------------------------------------------------------------
    99
   100 21EB			START
   101 21EB BA				tsx
   102 21EC 8E 57 23			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 0009			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 2370			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 21EF A2 F7			ldx #256-VLEN
   115 21F1 A9 00			lda #0
   116 21F3 9D 79 22 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   119 					eif
   120
   121 21F9 A2 0F			ldx #$0f
   122 21FB BD 40 03 9D 5A 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 2204 E8				inx		; X = 0 !!!
   125 2205 86 8E			stx bp		; lo BP = 0
   126
   127 2207				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: loop_exit.a65]
   128
   129 2207			.local	MAIN						; PROCEDURE
   130
   131 2207 4C 53 23			jmp l_00FD
   132
   133 				; ------------------------------------------------------------
   134
   135 220A			.local	SYSTEM						; UNIT
   136
   137 				; ------------------------------------------------------------
   138
   139 = 0648			M_PI_2	= $0648
   140 = 0192			D_PI_2	= $0192
   141 = 0004			D_PI_180	= $0004
   142 = 0000			MGTIA	= $0000
   143 = 0080			MVBXE	= $0080
   144 = 0000			VBXE_XDLADR	= $0000
   145 = 0100			VBXE_BCBADR	= $0100
   146 = 1000			VBXE_MAPADR	= $1000
   147 = 5000			VBXE_OVRADR	= $5000
   148 = B000			VBXE_WINDOW	= $B000
   149 = 0000			IDLI	= $0000
   150 = 0001			IVBL	= $0001
   151 = 00FE			CH_DELCHR	= $00FE
   152 = 009B			CH_ENTER	= $009B
   153 = 001B			CH_ESC	= $001B
   154 = 001C			CH_CURS_UP	= $001C
   155 = 001D			CH_CURS_DOWN	= $001D
   156 = 001E			CH_CURS_LEFT	= $001E
   157 = 001F			CH_CURS_RIGHT	= $001F
   158 = 007F			CH_TAB	= $007F
   159 = 009B			CH_EOL	= $009B
   160 = 007D			CH_CLR	= $007D
   161 = 00FD			CH_BELL	= $00FD
   162 = 007E			CH_DEL	= $007E
   163 = 009C			CH_DELLINE	= $009C
   164 = 009D			CH_INSLINE	= $009D
   165 = 0000			COLOR_BLACK	= $0000
   166 = 000E			COLOR_WHITE	= $000E
   167 = 0032			COLOR_RED	= $0032
   168 = 0096			COLOR_CYAN	= $0096
   169 = 0068			COLOR_VIOLET	= $0068
   170 = 00C4			COLOR_GREEN	= $00C4
   171 = 0074			COLOR_BLUE	= $0074
   172 = 00EE			COLOR_YELLOW	= $00EE
   173 = 0028			COLOR_ORANGE	= $0028
   174 = 00E4			COLOR_BROWN	= $00E4
   175 = 003C			COLOR_LIGHTRED	= $003C
   176 = 0004			COLOR_GRAY1	= $0004
   177 = 0006			COLOR_GRAY2	= $0006
   178 = 000A			COLOR_GRAY3	= $000A
   179 = 00CC			COLOR_LIGHTGREEN	= $00CC
   180 = 007C			COLOR_LIGHTBLUE	= $007C
   181 = 0004			FMOPENREAD	= $0004
   182 = 0008			FMOPENWRITE	= $0008
   183 = 0009			FMOPENAPPEND	= $0009
   184 = 000C			FMOPENREADWRITE	= $000C
   185 = 236A			SCREENWIDTH	= DATAORIGIN+$0000
   186 = 236C			SCREENHEIGHT	= DATAORIGIN+$0002
   187 = 236E			DATESEPARATOR	= DATAORIGIN+$0004
   188 = D014			TVSYSTEM	= $D014
   189 = 02C0			adr.PALETTE	= $02C0
   190 220A			.var PALETTE	= adr.PALETTE .word
   191 = D012			adr.HPALETTE	= $D012
   192 220A			.var HPALETTE	= adr.HPALETTE .word
   193 = 236F			FILEMODE	= DATAORIGIN+$0005
   194 = 2370			SCREENMODE	= DATAORIGIN+$0006
   195 = 2371			IORESULT	= DATAORIGIN+$0007
   196 = 2372			EOLN	= DATAORIGIN+$0008
   197 = 2373			RNDSEED	= DATAORIGIN+$0009
   198
   199 = 220A C0 02		PALETTE
   199 = 220C 12 D0		HPALETTE
   199 				.endl							; UNIT SYSTEM
   200
   201 				; ------------------------------------------------------------
   202
   203 220E			.local	DOS						; UNIT
   204
   205 				; ------------------------------------------------------------
   206
   207 = D014			PALNTSC	= $D014
   208
   209 				.endl							; UNIT DOS
   210
   211 				; ------------------------------------------------------------
   212
   213 220E			.local	STRUTILS					; UNIT
   214
   215 				; ------------------------------------------------------------
   216
   217 				.endl							; UNIT STRUTILS
   218
   219 				; ------------------------------------------------------------
   220
   221 220E			.local	SYSUTILS					; UNIT
   222
   223 				; ------------------------------------------------------------
   224
   225 = 0001			FAREADONLY	= $0001
   226 = 0002			FAHIDDEN	= $0002
   227 = 0004			FASYSFILE	= $0004
   228 = 0008			FAVOLUMEID	= $0008
   229 = 0010			FADIRECTORY	= $0010
   230 = 0020			FAARCHIVE	= $0020
   231 = 003F			FAANYFILE	= $003F
   232
   233 				.endl							; UNIT SYSUTILS
   234
   235 				; ------------------------------------------------------------
   236
   237 220E			.local	ATARI						; UNIT
   238
   239 				; ------------------------------------------------------------
   240
   241 = 0012			RTCLOK	= $0012
   242 = 004D			ATRACT	= $004D
   243 = 0052			LMARGIN	= $0052
   244 = 0053			RMARGIN	= $0053
   245 = 0054			ROWCRS	= $0054
   246 = 0055			COLCRS	= $0055
   247 = 0057			DINDEX	= $0057
   248 = 0058			SAVMSC	= $0058
   249 = 006A			RAMTOP	= $006A
   250 = 0200			VDSLST	= $0200
   251 = 0230			SDLSTL	= $0230
   252 = 0290			TXTROW	= $0290
   253 = 0291			TXTCOL	= $0291
   254 = 0293			TINDEX	= $0293
   255 = 0294			TXTMSC	= $0294
   256 = 022F			SDMCTL	= $022F
   257 = 026F			GPRIOR	= $026F
   258 = 02F0			CRSINH	= $02F0
   259 = 02F3			CHACT	= $02F3
   260 = 02F4			CHBAS	= $02F4
   261 = 02FC			CH	= $02FC
   262 = 02C0			PCOLR0	= $02C0
   263 = 02C1			PCOLR1	= $02C1
   264 = 02C2			PCOLR2	= $02C2
   265 = 02C3			PCOLR3	= $02C3
   266 = 02C4			COLOR0	= $02C4
   267 = 02C5			COLOR1	= $02C5
   268 = 02C6			COLOR2	= $02C6
   269 = 02C7			COLOR3	= $02C7
   270 = 02C8			COLOR4	= $02C8
   271 = 02C8			COLBAKS	= $02C8
   272 = D000			HPOSP0	= $D000
   273 = D001			HPOSP1	= $D001
   274 = D002			HPOSP2	= $D002
   275 = D003			HPOSP3	= $D003
   276 = D004			HPOSM0	= $D004
   277 = D005			HPOSM1	= $D005
   278 = D006			HPOSM2	= $D006
   279 = D007			HPOSM3	= $D007
   280 = D008			SIZEP0	= $D008
   281 = D009			SIZEP1	= $D009
   282 = D00A			SIZEP2	= $D00A
   283 = D00B			SIZEP3	= $D00B
   284 = D00C			SIZEM	= $D00C
   285 = D00D			GRAFP0	= $D00D
   286 = D00E			GRAFP1	= $D00E
   287 = D00F			GRAFP2	= $D00F
   288 = D010			GRAFP3	= $D010
   289 = D011			GRAFM	= $D011
   290 = D004			P0PF	= $D004
   291 = D014			PAL	= $D014
   292 = D012			COLPM0	= $D012
   293 = D013			COLPM1	= $D013
   294 = D014			COLPM2	= $D014
   295 = D015			COLPM3	= $D015
   296 = D016			COLPF0	= $D016
   297 = D017			COLPF1	= $D017
   298 = D018			COLPF2	= $D018
   299 = D019			COLPF3	= $D019
   300 = D01A			COLBK	= $D01A
   301 = D01B			PRIOR	= $D01B
   302 = D01D			GRACTL	= $D01D
   303 = D01E			HITCLR	= $D01E
   304 = D200			AUDF1	= $D200
   305 = D201			AUDC1	= $D201
   306 = D202			AUDF2	= $D202
   307 = D203			AUDC2	= $D203
   308 = D204			AUDF3	= $D204
   309 = D205			AUDC3	= $D205
   310 = D206			AUDF4	= $D206
   311 = D207			AUDC4	= $D207
   312 = D208			AUDCTL	= $D208
   313 = D20F			SKSTAT	= $D20F
   314 = D301			PORTB	= $D301
   315 = D400			DMACTL	= $D400
   316 = D401			CHACTL	= $D401
   317 = D402			DLISTL	= $D402
   318 = D404			HSCROL	= $D404
   319 = D405			VSCROL	= $D405
   320 = D407			PMBASE	= $D407
   321 = D409			CHBASE	= $D409
   322 = D40A			WSYNC	= $D40A
   323 = D40B			VCOUNT	= $D40B
   324 = D40C			PENH	= $D40C
   325 = D40D			PENV	= $D40D
   326 = D40E			NMIEN	= $D40E
   327
   328 				.endl							; UNIT ATARI
   329
   330 				; ------------------------------------------------------------
   331
   332 220E			.local	CRT						; UNIT
   333
   334 220E			.local	READKEY						; FUNCTION | ASSEMBLER
   335
   336 				; ---------------------  ASM Block 063  ---------------------
   337
   338 220E 8A 48			txa:pha
   339
   340 2210 20 DB 21			@GetKey
   341
   342 2213 8D 76 23			sta Result
   343
   344 2216 68 AA			pla:tax
   345
   346 2218			@exit
   347
   348 				; ------------------------------------------------------------
   349
   350 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   351 				; as Pointer
   352
   353 2218 E8				inx						; add bx, 1
   354 2219 AD 76 23 95 98		mva RESULT :STACKORIGIN,x
   355
   356 					.ifdef @new
   357 					@FreeMem #@VarData #@VarDataSize
   358 					eif
   359
   360 				; ------------------------------------------------------------
   361
   362 = 2376			RESULT	= DATAORIGIN+$000C
   363
   364 = 2376			@VarData	= RESULT
   365 = 0001			@VarDataSize	= 1
   366
   367 221E 60				rts						; ret
   368 				.endl
   369
   370 				; ------------------------------------------------------------
   371
   372 = 2375			TEXTATTR	= DATAORIGIN+$000B
   373 = D01F			CONSOL	= $D01F
   374 = 0000			CN_START_SELECT_OPTION	= $0000
   375 = 0001			CN_SELECT_OPTION	= $0001
   376 = 0002			CN_START_OPTION	= $0002
   377 = 0003			CN_OPTION	= $0003
   378 = 0004			CN_START_SELECT	= $0004
   379 = 0005			CN_SELECT	= $0005
   380 = 0006			CN_START	= $0006
   381 = 0007			CN_NONE	= $0007
   382 = 0000			BW40	= $0000
   383 = 0001			CO40	= $0001
   384 = 0002			BW80	= $0002
   385 = 0003			CO80	= $0003
   386 = 0007			MONO	= $0007
   387 = 0001			C40	= $0001
   388 = 0003			C80	= $0003
   389 = 0000			BLACK	= $0000
   390 = 0001			BLUE	= $0001
   391 = 0002			GREEN	= $0002
   392 = 0003			CYAN	= $0003
   393 = 0004			RED	= $0004
   394 = 0005			MAGENTA	= $0005
   395 = 0006			BROWN	= $0006
   396 = 0007			LIGHTGRAY	= $0007
   397 = 0008			DARKGRAY	= $0008
   398 = 0009			LIGHTBLUE	= $0009
   399 = 000A			LIGHTGREEN	= $000A
   400 = 000B			LIGHTCYAN	= $000B
   401 = 000C			LIGHTRED	= $000C
   402 = 000D			LIGHTMAGENTA	= $000D
   403 = 000E			YELLOW	= $000E
   404 = 000F			WHITE	= $000F
   405 = 0080			BLINK	= $0080
   406
   407 				.endl							; UNIT CRT
   408
   409 221F			.local	MAINPROC					; PROCEDURE
   410
   411 				; optimize FAIL (100, examples\loop_exit.pas), line = 16
   412 					@print #$7D
   412 				 LDY# $7D\ JSR @PRINT
   412 221F A0 7D		 LDY# $7D
   412 2221 20 FB 20		 JSR @PRINT
   413
   414 				; optimize FAIL (100, examples\loop_exit.pas), line = 17
   415 					@printSTRING #CODEORIGIN+$000D
   415 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   415 2224 A0 20		 LDY> CODEORIGIN+$000D
   415 2226 A9 0D		 LDA< CODEORIGIN+$000D
   415 2228 20 04 21		 JSR @PRINTSTRING
   416 222B 20 F6 20			@printEOL
   417
   418 				; optimize FAIL (100, examples\loop_exit.pas), line = 18
   419 					@printSTRING #CODEORIGIN+$0020
   419 				 LDY> CODEORIGIN+$0020\ LDA< CODEORIGIN+$0020\ JSR @PRINTSTRING
   419 222E A0 20		 LDY> CODEORIGIN+$0020
   419 2230 A9 20		 LDA< CODEORIGIN+$0020
   419 2232 20 04 21		 JSR @PRINTSTRING
   420 2235 20 F6 20			@printEOL
   421
   422 				; optimize FAIL (100, examples\loop_exit.pas), line = 19
   423 					@printSTRING #CODEORIGIN+$005B
   423 				 LDY> CODEORIGIN+$005B\ LDA< CODEORIGIN+$005B\ JSR @PRINTSTRING
   423 2238 A0 20		 LDY> CODEORIGIN+$005B
   423 223A A9 5B		 LDA< CODEORIGIN+$005B
   423 223C 20 04 21		 JSR @PRINTSTRING
   424 223F 20 F6 20			@printEOL
   425
   426 				; optimize FAIL (100, examples\loop_exit.pas), line = 20
   427 					@printSTRING #CODEORIGIN+$005D
   427 				 LDY> CODEORIGIN+$005D\ LDA< CODEORIGIN+$005D\ JSR @PRINTSTRING
   427 2242 A0 20		 LDY> CODEORIGIN+$005D
   427 2244 A9 5D		 LDA< CODEORIGIN+$005D
   427 2246 20 04 21		 JSR @PRINTSTRING
   428 2249 20 F6 20			@printEOL
   429
   430 				; optimize FAIL (100, examples\loop_exit.pas), line = 21
   431 					@printSTRING #CODEORIGIN+$005A
   431 				 LDY> CODEORIGIN+$005A\ LDA< CODEORIGIN+$005A\ JSR @PRINTSTRING
   431 224C A0 20		 LDY> CODEORIGIN+$005A
   431 224E A9 5A		 LDA< CODEORIGIN+$005A
   431 2250 20 04 21		 JSR @PRINTSTRING
   432 2253 20 F6 20			@printEOL
   433 				; --- For
   434
   435 				; optimize OK (examples\loop_exit.pas), line = 22
   436
   437 2256 A9 01 8D 78 23		mva #$01 N
   438
   439 				; optimize OK (examples\loop_exit.pas), line = 22
   440
   441 				; --- To
   442 225B			l_0160
   443
   444 				; --- ForToDoCondition
   445
   446 				; optimize OK (examples\loop_exit.pas), line = 22
   447
   448 225B AD 78 23			lda N
   449 225E C9 0A			cmp #$0A
   450 2260 90 02			scc
   451 2262 D0 1E			jne l_016E
   452
   453 				; optimize FAIL (100, examples\loop_exit.pas), line = 23
   454 2264 E8				inx
   455 2265 AD 78 23 95 98		mva N :STACKORIGIN,x
   456 226A 20 44 21			jsr @printBYTE
   457 226D CA				dex
   458
   459 				; optimize FAIL (100, examples\loop_exit.pas), line = 24
   460 					@print #$2C
   460 				 LDY# $2C\ JSR @PRINT
   460 226E A0 2C		 LDY# $2C
   460 2270 20 FB 20		 JSR @PRINT
   461
   462 				; optimize OK (examples\loop_exit.pas), line = 25
   463
   464 2273 AD 78 23			lda N
   465 2276 C9 07			cmp #$07
   466 2278 D0 03			jne l_018E
   467
   468 227A 4C 82 22			jmp b_0160					; break
   469 227D			l_018E
   470
   471 				; --- ForToDoEpilog
   472 227D EE 78 23			inc N						; inc ptr byte [CounterAddress]
   473
   474 2280 D0 D9			jne l_0160
   475
   476 2282			l_016E
   477 2282			b_0160
   478
   479 				; optimize FAIL (100, examples\loop_exit.pas), line = 29
   480 					@printSTRING #CODEORIGIN+$005A
   480 				 LDY> CODEORIGIN+$005A\ LDA< CODEORIGIN+$005A\ JSR @PRINTSTRING
   480 2282 A0 20		 LDY> CODEORIGIN+$005A
   480 2284 A9 5A		 LDA< CODEORIGIN+$005A
   480 2286 20 04 21		 JSR @PRINTSTRING
   481 2289 20 F6 20			@printEOL
   482
   483 				; optimize FAIL (100, examples\loop_exit.pas), line = 30
   484 					@printSTRING #CODEORIGIN+$0077
   484 				 LDY> CODEORIGIN+$0077\ LDA< CODEORIGIN+$0077\ JSR @PRINTSTRING
   484 228C A0 20		 LDY> CODEORIGIN+$0077
   484 228E A9 77		 LDA< CODEORIGIN+$0077
   484 2290 20 04 21		 JSR @PRINTSTRING
   485 2293 20 F6 20			@printEOL
   486
   487 				; optimize FAIL (100, examples\loop_exit.pas), line = 31
   488 					@printSTRING #CODEORIGIN+$005A
   488 				 LDY> CODEORIGIN+$005A\ LDA< CODEORIGIN+$005A\ JSR @PRINTSTRING
   488 2296 A0 20		 LDY> CODEORIGIN+$005A
   488 2298 A9 5A		 LDA< CODEORIGIN+$005A
   488 229A 20 04 21		 JSR @PRINTSTRING
   489 229D 20 F6 20			@printEOL
   490
   491 				; optimize FAIL (100, examples\loop_exit.pas), line = 32
   492 					@printSTRING #CODEORIGIN+$008F
   492 				 LDY> CODEORIGIN+$008F\ LDA< CODEORIGIN+$008F\ JSR @PRINTSTRING
   492 22A0 A0 20		 LDY> CODEORIGIN+$008F
   492 22A2 A9 8F		 LDA< CODEORIGIN+$008F
   492 22A4 20 04 21		 JSR @PRINTSTRING
   493 22A7 20 F6 20			@printEOL
   494
   495 				; optimize FAIL (100, examples\loop_exit.pas), line = 33
   496 					@printSTRING #CODEORIGIN+$005A
   496 				 LDY> CODEORIGIN+$005A\ LDA< CODEORIGIN+$005A\ JSR @PRINTSTRING
   496 22AA A0 20		 LDY> CODEORIGIN+$005A
   496 22AC A9 5A		 LDA< CODEORIGIN+$005A
   496 22AE 20 04 21		 JSR @PRINTSTRING
   497 22B1 20 F6 20			@printEOL
   498
   499 				; optimize OK (examples\loop_exit.pas), line = 34
   500
   501 22B4 A9 01 8D 78 23		mva #$01 N
   502
   503 				; optimize OK (examples\loop_exit.pas), line = 35
   504
   505 22B9 EE 78 23			inc N
   506
   507 				; --- WhileProlog
   508 22BC			l_01B4
   509
   510 				; optimize OK (examples\loop_exit.pas), line = 36
   511
   512 22BC AD 78 23			lda N
   513 22BF C9 15			cmp #$15
   514 22C1 B0 1F			jcs l_01C3
   515
   516 				; optimize FAIL (100, examples\loop_exit.pas), line = 37
   517 22C3 E8				inx
   518 22C4 AD 78 23 95 98		mva N :STACKORIGIN,x
   519 22C9 20 44 21			jsr @printBYTE
   520 22CC CA				dex
   521
   522 				; optimize FAIL (100, examples\loop_exit.pas), line = 38
   523 					@print #$2C
   523 				 LDY# $2C\ JSR @PRINT
   523 22CD A0 2C		 LDY# $2C
   523 22CF 20 FB 20		 JSR @PRINT
   524
   525 				; optimize OK (examples\loop_exit.pas), line = 39
   526
   527 22D2 AD 78 23			lda N
   528 22D5 C9 0E			cmp #$0E
   529 22D7 D0 03			jne l_01E3
   530
   531 22D9 4C E2 22			jmp b_01B4					; break
   532 22DC			l_01E3
   533
   534 				; optimize OK (examples\loop_exit.pas), line = 42
   535
   536 22DC EE 78 23			inc N
   537 22DF 4C BC 22			jmp l_01B4
   538 22E2			l_01C3
   539 22E2			b_01B4
   540
   541 				; optimize FAIL (100, examples\loop_exit.pas), line = 44
   542 					@printSTRING #CODEORIGIN+$005A
   542 				 LDY> CODEORIGIN+$005A\ LDA< CODEORIGIN+$005A\ JSR @PRINTSTRING
   542 22E2 A0 20		 LDY> CODEORIGIN+$005A
   542 22E4 A9 5A		 LDA< CODEORIGIN+$005A
   542 22E6 20 04 21		 JSR @PRINTSTRING
   543 22E9 20 F6 20			@printEOL
   544
   545 				; optimize FAIL (100, examples\loop_exit.pas), line = 45
   546 					@printSTRING #CODEORIGIN+$00A9
   546 				 LDY> CODEORIGIN+$00A9\ LDA< CODEORIGIN+$00A9\ JSR @PRINTSTRING
   546 22EC A0 20		 LDY> CODEORIGIN+$00A9
   546 22EE A9 A9		 LDA< CODEORIGIN+$00A9
   546 22F0 20 04 21		 JSR @PRINTSTRING
   547 22F3 20 F6 20			@printEOL
   548
   549 				; optimize FAIL (100, examples\loop_exit.pas), line = 46
   550 					@printSTRING #CODEORIGIN+$005A
   550 				 LDY> CODEORIGIN+$005A\ LDA< CODEORIGIN+$005A\ JSR @PRINTSTRING
   550 22F6 A0 20		 LDY> CODEORIGIN+$005A
   550 22F8 A9 5A		 LDA< CODEORIGIN+$005A
   550 22FA 20 04 21		 JSR @PRINTSTRING
   551 22FD 20 F6 20			@printEOL
   552
   553 				; optimize FAIL (100, examples\loop_exit.pas), line = 47
   554 					@printSTRING #CODEORIGIN+$00C3
   554 				 LDY> CODEORIGIN+$00C3\ LDA< CODEORIGIN+$00C3\ JSR @PRINTSTRING
   554 2300 A0 20		 LDY> CODEORIGIN+$00C3
   554 2302 A9 C3		 LDA< CODEORIGIN+$00C3
   554 2304 20 04 21		 JSR @PRINTSTRING
   555 2307 20 F6 20			@printEOL
   556
   557 				; optimize FAIL (100, examples\loop_exit.pas), line = 48
   558 					@printSTRING #CODEORIGIN+$005A
   558 				 LDY> CODEORIGIN+$005A\ LDA< CODEORIGIN+$005A\ JSR @PRINTSTRING
   558 230A A0 20		 LDY> CODEORIGIN+$005A
   558 230C A9 5A		 LDA< CODEORIGIN+$005A
   558 230E 20 04 21		 JSR @PRINTSTRING
   559 2311 20 F6 20			@printEOL
   560
   561 				; optimize OK (examples\loop_exit.pas), line = 49
   562
   563 2314 A9 00 8D 78 23		mva #$00 N
   564
   565 				; --- RepeatUntilProlog
   566 2319			l_0205
   567
   568 				; optimize FAIL (0, examples\loop_exit.pas), line = 51
   569 2319 EE 78 23			inc N
   570
   571 				; optimize FAIL (100, examples\loop_exit.pas), line = 52
   572 231C E8				inx
   573 231D AD 78 23 95 98		mva N :STACKORIGIN,x
   574 2322 20 44 21			jsr @printBYTE
   575 2325 CA				dex
   576
   577 				; optimize FAIL (100, examples\loop_exit.pas), line = 53
   578 					@print #$2C
   578 				 LDY# $2C\ JSR @PRINT
   578 2326 A0 2C		 LDY# $2C
   578 2328 20 FB 20		 JSR @PRINT
   579
   580 232B 4C 35 23			jmp b_0205					; break
   581
   582 				; optimize OK (examples\loop_exit.pas), line = 55
   583
   584 232E AD 78 23			lda N
   585 2331 C9 06			cmp #$06
   586 2333 D0 E4			jne l_0205
   587 2335			b_0205
   588
   589 				; optimize FAIL (100, examples\loop_exit.pas), line = 56
   590 					@printSTRING #CODEORIGIN+$005A
   590 				 LDY> CODEORIGIN+$005A\ LDA< CODEORIGIN+$005A\ JSR @PRINTSTRING
   590 2335 A0 20		 LDY> CODEORIGIN+$005A
   590 2337 A9 5A		 LDA< CODEORIGIN+$005A
   590 2339 20 04 21		 JSR @PRINTSTRING
   591 233C 20 F6 20			@printEOL
   592
   593 				; optimize FAIL (100, examples\loop_exit.pas), line = 57
   594 					@printSTRING #CODEORIGIN+$00DC
   594 				 LDY> CODEORIGIN+$00DC\ LDA< CODEORIGIN+$00DC\ JSR @PRINTSTRING
   594 233F A0 20		 LDY> CODEORIGIN+$00DC
   594 2341 A9 DC		 LDA< CODEORIGIN+$00DC
   594 2343 20 04 21		 JSR @PRINTSTRING
   595 2346 20 F6 20			@printEOL
   596
   597 				; optimize FAIL ('CRT.READKEY', examples\loop_exit.pas), line = 58
   598 2349 20 0E 22			jsr CRT.READKEY
   599 234C B5 98 8D 77 23		mva :STACKORIGIN,x KEY
   600 2351 CA				dex
   601
   602 				; ------------------------------------------------------------
   603
   604 = 2377			KEY	= DATAORIGIN+$000D
   605 = 2378			N	= DATAORIGIN+$000E
   606 = 000A			@FORTMP_015D	= $000A
   607
   608 = 2377			@VarData	= KEY
   609 = 0002			@VarDataSize	= 2
   610
   611 2352			@exit
   612 					.ifdef @new
   613 					@FreeMem #@VarData #@VarDataSize
   614 					eif
   615 2352 60				rts						; ret
   616 				.endl
   617 2353			l_00FD
   618
   619 				; optimize FAIL ('MAINPROC', examples\loop_exit.pas), line = 62
   620 2353 20 1F 22			jsr MAINPROC
   621
   622 				; ------------------------------------------------------------
   623
   624 2356			@exit
   625
   626 2356 A2 00		@halt	ldx #0
   627 2358 9A				txs
   628
   629 2359 60				rts
   630
   631 				; ------------------------------------------------------------
   632
   633 235A 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   634
   635 				; ------------------------------------------------------------
   636
   637 236A			.local	@DEFINES
   638 236A			ATARI
   639 				.endl
   640
   641 				.endl							; MAIN
   642
   643 				; ------------------------------------------------------------
   644 				; ------------------------------------------------------------
   645
   646 				.macro	UNITINITIALIZATION
   647 				
   648 					.ifdef MAIN.SYSTEM.@UnitInit
   649 					jsr MAIN.SYSTEM.@UnitInit
   650 					eif
   651 				
   652 					.ifdef MAIN.DOS.@UnitInit
   653 					jsr MAIN.DOS.@UnitInit
   654 					eif
   655 				
   656 					.ifdef MAIN.STRUTILS.@UnitInit
   657 					jsr MAIN.STRUTILS.@UnitInit
   658 					eif
   659 				
   660 					.ifdef MAIN.SYSUTILS.@UnitInit
   661 					jsr MAIN.SYSUTILS.@UnitInit
   662 					eif
   663 				
   664 					.ifdef MAIN.ATARI.@UnitInit
   665 					jsr MAIN.ATARI.@UnitInit
   666 					eif
   667 				
   668 					.ifdef MAIN.CRT.@UnitInit
   669 					jsr MAIN.CRT.@UnitInit
   670 					eif
   671 				.endm
   672
   673 				; ------------------------------------------------------------
   674
   675 					ift .SIZEOF(MAIN.SYSTEM) > 0
   676 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   676 				SYSTEM: $220A..$220D
   677 					eif
   678
   679 					ift .SIZEOF(MAIN.DOS) > 0
   680 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   681 					eif
   682
   683 					ift .SIZEOF(MAIN.STRUTILS) > 0
   684 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   685 					eif
   686
   687 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   688 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   689 					eif
   690
   691 					ift .SIZEOF(MAIN.ATARI) > 0
   692 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   693 					eif
   694
   695 					ift .SIZEOF(MAIN.CRT) > 0
   696 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   696 				CRT: $220E..$221E
   697 					eif
   698
   699 					.print 'CODE: ',CODEORIGIN,'..',*-1
   699 				CODE: $2000..$2369
   700
   701 				; ------------------------------------------------------------
   702
   703 236A			DATAORIGIN
   704 236A 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   705
   706 = 0006			VARINITSIZE	= *-DATAORIGIN
   707 = 000F			VARDATASIZE	= 15
   708
   709 = 2379			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   710
   711 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   711 				DATA: $236A..$2379
   712
   713 02E0-02E1> EB 21			run START
   714
   715 				; ------------------------------------------------------------
   716
   717 				.macro	STATICDATA
   718 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $11 $45 $66  $66 $65 $63 $74 $75 $73 $20 $65
   719 				.by  $78 $61 $6D $70 $6C $65 $3A $00  $39 $55 $73 $69 $6E $67 $20 $45  $58 $49 $54 $20 $63 $6F $6D $6D
   720 				.by  $61 $6E $64 $20 $69 $6E $20 $6C  $6F $6F $70 $20 $73 $74 $61 $74  $65 $6D $65 $6E $74 $73 $20 $46
   721 				.by  $4F $52 $2C $57 $48 $49 $4C $45  $20 $61 $6E $64 $20 $55 $4E $54  $49 $4C $00 $00 $00 $18 $43 $6F
   722 				.by  $75 $6E $74 $69 $6E $67 $20 $66  $72 $6F $6D $20 $31 $20 $74 $6F  $20 $31 $30 $2E $2E $2E $00 $16
   723 				.by  $45 $73 $63 $61 $70 $65 $64 $20  $66 $72 $6F $6D $20 $46 $4F $52  $20 $6C $6F $6F $70 $21 $00 $18
   724 				.by  $43 $6F $75 $6E $74 $69 $6E $67  $20 $66 $72 $6F $6D $20 $31 $20  $74 $6F $20 $32 $30 $2E $2E $2E
   725 				.by  $00 $18 $45 $73 $63 $61 $70 $65  $64 $20 $66 $72 $6F $6D $20 $57  $48 $49 $4C $45 $20 $6C $6F $6F
   726 				.by  $70 $21 $00 $17 $43 $6F $75 $6E  $74 $69 $6E $67 $20 $66 $72 $6F  $6D $20 $31 $20 $74 $6F $20 $36
   727 				.by  $2E $2E $2E $00 $18 $45 $73 $63  $61 $70 $65 $64 $20 $66 $72 $6F  $6D $20 $55 $4E $54 $49 $4C $20
   728 				.by  $6C $6F $6F $70 $21 $00
   729 				.endm
   730
   731 					end
