mads 2.1.0 build 8 (23 Dec 19)
   388 					opt l+
   101
   102 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   102 				ZPAGE: $0080..$00D7
   103
   104 				.print 'RTLIB: ',RTLIB,'..',*-1
   104 				RTLIB: $20F6..$222A
   105
   106 				; ------------------------------------------------------------
   107
   108 222B			START
   109 222B BA				tsx
   110 222C 8E DF 23			stx MAIN.@halt+1
   111
   112 					.ifdef fmulinit
   113 					fmulinit
   114 					eif
   115
   116 = 010B			VLEN	= VARDATASIZE-VARINITSIZE
   117 = 23FA			VADR	= DATAORIGIN+VARINITSIZE
   118
   119 					ift VADR > $BFFF
   120 					ert 'Invalid memory address range ',VADR
   121 					eli (VLEN>0) && (VLEN<=256)
   122 					ldx #256-VLEN
   123 					lda #0
   124 					sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>0
   126 					@fill #VADR #VLEN #0
   126 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   126 222F A9 FA 85 88 A9 23 +  MWA #VADR @FILL.PTR1
   126 2237 A9 0B 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   126 223F A9 00 85 84		 MVA #0 @FILL.PTR2
   126 2243 20 19 21		 JSR @FILL
   127 					eif
   128
   129 					.ifdef MAIN.@DEFINES.ROMOFF
   130 					icl 'atari\romoff.asm'
   131 					.endif
   132
   133 2246 A9 05 85 82 A9 25 + 	mwa #PROGRAMSTACK psptr
   134
   135 224E A2 0F			ldx #$0f					; DOS II+/D ParamStr
   136 2250 BD 40 03 9D E2 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   137
   138 2259 E8				inx						; X = 0
   139 225A 86 90			stx bp						; BP = 0
   140
   141 225C 8E 08 D2			stx audctl					; reset POKEY
   142 225F A9 03			lda #3
   143 2261 8D 0F D2			sta skctl
   144
   145 2264 CA				dex						; X = 255
   146
   147 2265				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: loop_exit.a65]
Source: loop_exit.a65
   148
   149 2265			.local	MAIN						; PROCEDURE
   150
   151 2265 4C DB 23			jmp l_00FD
   152
   153 				; ------------------------------------------------------------
   154
   155 2268			.local	SYSTEM						; UNIT
   156
   157 				; ------------------------------------------------------------
   158
   159 = 0101			__PORTB_BANKS	= $0101
   160 = 0648			M_PI_2	= $0648
   161 = 0192			D_PI_2	= $0192
   162 = 0004			D_PI_180	= $04
   163 = 0000			MGTIA	= $00
   164 = 0080			MVBXE	= $80
   165 = 0000			VBXE_XDLADR	= $00
   166 = 0100			VBXE_BCBADR	= $0100
   167 = 1000			VBXE_MAPADR	= $1000
   168 = 5000			VBXE_OVRADR	= $5000
   169 = B000			VBXE_WINDOW	= $B000
   170 = 0000			IDLI	= $00
   171 = 0001			IVBL	= $01
   172 = 00FE			CH_DELCHR	= $FE
   173 = 009B			CH_ENTER	= $9B
   174 = 001B			CH_ESC	= $1B
   175 = 001C			CH_CURS_UP	= $1C
   176 = 001D			CH_CURS_DOWN	= $1D
   177 = 001E			CH_CURS_LEFT	= $1E
   178 = 001F			CH_CURS_RIGHT	= $1F
   179 = 007F			CH_TAB	= $7F
   180 = 009B			CH_EOL	= $9B
   181 = 007D			CH_CLR	= $7D
   182 = 00FD			CH_BELL	= $FD
   183 = 007E			CH_DEL	= $7E
   184 = 009C			CH_DELLINE	= $9C
   185 = 009D			CH_INSLINE	= $9D
   186 = 0000			COLOR_BLACK	= $00
   187 = 000E			COLOR_WHITE	= $0E
   188 = 0032			COLOR_RED	= $32
   189 = 0096			COLOR_CYAN	= $96
   190 = 0068			COLOR_VIOLET	= $68
   191 = 00C4			COLOR_GREEN	= $C4
   192 = 0074			COLOR_BLUE	= $74
   193 = 00EE			COLOR_YELLOW	= $EE
   194 = 0028			COLOR_ORANGE	= $28
   195 = 00E4			COLOR_BROWN	= $E4
   196 = 003C			COLOR_LIGHTRED	= $3C
   197 = 0004			COLOR_GRAY1	= $04
   198 = 0006			COLOR_GRAY2	= $06
   199 = 000A			COLOR_GRAY3	= $0A
   200 = 00CC			COLOR_LIGHTGREEN	= $CC
   201 = 007C			COLOR_LIGHTBLUE	= $7C
   202 = 0004			FMOPENREAD	= $04
   203 = 0008			FMOPENWRITE	= $08
   204 = 0009			FMOPENAPPEND	= $09
   205 = 000C			FMOPENREADWRITE	= $0C
   206 = 23F4			SCREENWIDTH	= DATAORIGIN+$0000
   207 = 23F6			SCREENHEIGHT	= DATAORIGIN+$0002
   208 = 23F8			DATESEPARATOR	= DATAORIGIN+$0004
   209 = D014			TVSYSTEM	= $D014
   210 = 02C0			adr.PALETTE	= $02C0
   211 2268			.var PALETTE	= adr.PALETTE .word
   212 = D012			adr.HPALETTE	= $D012
   213 2268			.var HPALETTE	= adr.HPALETTE .word
   214 = 23F9			FILEMODE	= DATAORIGIN+$0005
   215 = 23FA			GRAPHMODE	= DATAORIGIN+$0006
   216 = 23FB			IORESULT	= DATAORIGIN+$0007
   217 = 23FC			EOLN	= DATAORIGIN+$0008
   218 = 23FD			RNDSEED	= DATAORIGIN+$0009
   219
   220 = 2268 C0 02		PALETTE
   220 = 226A 12 D0		HPALETTE
   220 				.endl							; UNIT SYSTEM
   221
   222 				; ------------------------------------------------------------
   223
   224 226C			.local	ATARI						; UNIT
   225
   226 				; ------------------------------------------------------------
   227
   228 = 0012			RTCLOK	= $12
   229 = 004D			ATRACT	= $4D
   230 = 0052			LMARGIN	= $52
   231 = 0053			RMARGIN	= $53
   232 = 0054			ROWCRS	= $54
   233 = 0055			COLCRS	= $55
   234 = 0057			DINDEX	= $57
   235 = 0058			SAVMSC	= $58
   236 = 0062			PALNTS	= $62
   237 = 006A			RAMTOP	= $6A
   238 = 0200			VDSLST	= $0200
   239 = 0230			SDLSTL	= $0230
   240 = 0290			TXTROW	= $0290
   241 = 0291			TXTCOL	= $0291
   242 = 0293			TINDEX	= $0293
   243 = 0294			TXTMSC	= $0294
   244 = 022F			SDMCTL	= $022F
   245 = 026F			GPRIOR	= $026F
   246 = 02F0			CRSINH	= $02F0
   247 = 02F3			CHACT	= $02F3
   248 = 02F4			CHBAS	= $02F4
   249 = 02FC			CH	= $02FC
   250 = 02C0			PCOLR0	= $02C0
   251 = 02C1			PCOLR1	= $02C1
   252 = 02C2			PCOLR2	= $02C2
   253 = 02C3			PCOLR3	= $02C3
   254 = 02C4			COLOR0	= $02C4
   255 = 02C5			COLOR1	= $02C5
   256 = 02C6			COLOR2	= $02C6
   257 = 02C7			COLOR3	= $02C7
   258 = 02C8			COLOR4	= $02C8
   259 = 02C8			COLBAKS	= $02C8
   260 = D000			HPOSP0	= $D000
   261 = D001			HPOSP1	= $D001
   262 = D002			HPOSP2	= $D002
   263 = D003			HPOSP3	= $D003
   264 = D004			HPOSM0	= $D004
   265 = D005			HPOSM1	= $D005
   266 = D006			HPOSM2	= $D006
   267 = D007			HPOSM3	= $D007
   268 = D008			SIZEP0	= $D008
   269 = D009			SIZEP1	= $D009
   270 = D00A			SIZEP2	= $D00A
   271 = D00B			SIZEP3	= $D00B
   272 = D00C			SIZEM	= $D00C
   273 = D00D			GRAFP0	= $D00D
   274 = D00E			GRAFP1	= $D00E
   275 = D00F			GRAFP2	= $D00F
   276 = D010			GRAFP3	= $D010
   277 = D011			GRAFM	= $D011
   278 = D004			P0PF	= $D004
   279 = D014			PAL	= $D014
   280 = D012			COLPM0	= $D012
   281 = D013			COLPM1	= $D013
   282 = D014			COLPM2	= $D014
   283 = D015			COLPM3	= $D015
   284 = D016			COLPF0	= $D016
   285 = D017			COLPF1	= $D017
   286 = D018			COLPF2	= $D018
   287 = D019			COLPF3	= $D019
   288 = D01A			COLBK	= $D01A
   289 = D01B			PRIOR	= $D01B
   290 = D01D			GRACTL	= $D01D
   291 = D01E			HITCLR	= $D01E
   292 = D200			AUDF1	= $D200
   293 = D201			AUDC1	= $D201
   294 = D202			AUDF2	= $D202
   295 = D203			AUDC2	= $D203
   296 = D204			AUDF3	= $D204
   297 = D205			AUDC3	= $D205
   298 = D206			AUDF4	= $D206
   299 = D207			AUDC4	= $D207
   300 = D208			AUDCTL	= $D208
   301 = D20F			SKSTAT	= $D20F
   302 = D301			PORTB	= $D301
   303 = D400			DMACTL	= $D400
   304 = D401			CHACTL	= $D401
   305 = D402			DLISTL	= $D402
   306 = D404			HSCROL	= $D404
   307 = D405			VSCROL	= $D405
   308 = D407			PMBASE	= $D407
   309 = D409			CHBASE	= $D409
   310 = D40A			WSYNC	= $D40A
   311 = D40B			VCOUNT	= $D40B
   312 = D40C			PENH	= $D40C
   313 = D40D			PENV	= $D40D
   314 = D40E			NMIEN	= $D40E
   315
   316 				.endl							; UNIT ATARI
   317
   318 				; ------------------------------------------------------------
   319
   320 226C			.local	CRT						; UNIT
   321
   322 226C			.local	READKEY						; FUNCTION | ASSEMBLER
   323
   324 				; ---------------------  ASM Block 049  ---------------------
   325
   326 226C 8A 48			txa:pha
   327
   328 226E 20 F6 20			@GetKey
   329
   330 2271 8D 00 24			sta Result
   331
   332 2274 68 AA			pla:tax
   333
   334 2276			@exit
   335
   336 				; ------------------------------------------------------------
   337
   338 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   339 				; as Pointer
   340
   341 2276 E8				inx
   342 2277 AD 00 24 95 98		mva RESULT :STACKORIGIN,x
   343
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					eif
   351
   352 				; ------------------------------------------------------------
   353
   354 = 2400			RESULT	= DATAORIGIN+$000C
   355
   356 = 2400			@VarData	= RESULT
   357 = 0001			@VarDataSize	= 1
   358
   359 227C 60				rts						; ret
   360 				.endl
   361
   362 				; ------------------------------------------------------------
   363
   364 = 23FF			TEXTATTR	= DATAORIGIN+$000B
   365 = D01F			CONSOL	= $D01F
   366 = 0000			CN_START_SELECT_OPTION	= $00
   367 = 0001			CN_SELECT_OPTION	= $01
   368 = 0002			CN_START_OPTION	= $02
   369 = 0003			CN_OPTION	= $03
   370 = 0004			CN_START_SELECT	= $04
   371 = 0005			CN_SELECT	= $05
   372 = 0006			CN_START	= $06
   373 = 0007			CN_NONE	= $07
   374 = 0000			BW40	= $00
   375 = 0001			CO40	= $01
   376 = 0002			BW80	= $02
   377 = 0003			CO80	= $03
   378 = 0007			MONO	= $07
   379 = 0001			C40	= $01
   380 = 0003			C80	= $03
   381 = 0000			BLACK	= $00
   382 = 0001			BLUE	= $01
   383 = 0002			GREEN	= $02
   384 = 0003			CYAN	= $03
   385 = 0004			RED	= $04
   386 = 0005			MAGENTA	= $05
   387 = 0006			BROWN	= $06
   388 = 0007			LIGHTGRAY	= $07
   389 = 0008			DARKGRAY	= $08
   390 = 0009			LIGHTBLUE	= $09
   391 = 000A			LIGHTGREEN	= $0A
   392 = 000B			LIGHTCYAN	= $0B
   393 = 000C			LIGHTRED	= $0C
   394 = 000D			LIGHTMAGENTA	= $0D
   395 = 000E			YELLOW	= $0E
   396 = 000F			WHITE	= $0F
   397 = 0080			BLINK	= $80
   398
   399 				.endl							; UNIT CRT
   400
   401 				; ------------------------------------------------------------
   402
   403 227D			.local	DOS						; UNIT
   404
   405 				; ------------------------------------------------------------
   406
   407 = D014			PALNTSC	= $D014
   408
   409 				.endl							; UNIT DOS
   410
   411 				; ------------------------------------------------------------
   412
   413 227D			.local	STRUTILS					; UNIT
   414
   415 				; ------------------------------------------------------------
   416
   417 				.endl							; UNIT STRUTILS
   418
   419 				; ------------------------------------------------------------
   420
   421 227D			.local	SYSUTILS					; UNIT
   422
   423 				; ------------------------------------------------------------
   424
   425 = 0001			FAREADONLY	= $01
   426 = 0002			FAHIDDEN	= $02
   427 = 0004			FASYSFILE	= $04
   428 = 0008			FAVOLUMEID	= $08
   429 = 0010			FADIRECTORY	= $10
   430 = 0020			FAARCHIVE	= $20
   431 = 003F			FAANYFILE	= $3F
   432
   433 				.endl							; UNIT SYSUTILS
   434
   435 				; ------------------------------------------------------------
   436
   437 227D			.local	CIO						; UNIT
   438
   439 227D			.local	GET						; FUNCTION | ASSEMBLER
   440
   441 				; ------------------------------------------------------------
   442
   443 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   444 				; as Pointer
   445 227D B5 98 8D 01 24		mva :STACKORIGIN,x CHN
   446 2282 CA				dex
   447
   448 				; ---------------------  ASM Block 080  ---------------------
   449
   450 2283 8A 48			txa:pha
   451
   452 2285 AD 01 24			lda chn
   453 2288 0A 0A 0A 0A			:4 asl @
   454 228C AA				tax
   455
   456 228D A9 07			lda #7		;get char command
   457 228F 9D 42 03			sta iccmd,x
   458
   459 2292 A9 00			lda #$00	;zero out the unused
   460 2294 9D 48 03			sta icbufl,x	;store in accumulator
   461 2297 9D 49 03			sta icbufh,x	;...after CIOV jump
   462
   463 229A				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 229A 20 56 E4				jsr CIOV
Source: loop_exit.a65
   464
   465 229D 8C FB 23			sty MAIN.SYSTEM.IOResult
   466
   467 22A0 8D 02 24			sta Result
   468
   469 22A3 68 AA			pla:tax
   470
   471 22A5			@exit
   472
   473 				; ------------------------------------------------------------
   474
   475 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   476 				; as Pointer
   477
   478 22A5 E8				inx
   479 22A6 AD 02 24 95 98		mva RESULT :STACKORIGIN,x
   480
   481 					.ifdef @new
   482 					lda <@VarData
   483 					sta :ztmp
   484 					lda >@VarData
   485 					ldy #@VarDataSize-1
   486 					jmp @FreeMem
   487 					eif
   488
   489 				; ------------------------------------------------------------
   490
   491 = 2401			CHN	= DATAORIGIN+$000D
   492 = 2402			RESULT	= DATAORIGIN+$000E
   493
   494 = 2401			@VarData	= CHN
   495 = 0002			@VarDataSize	= 2
   496
   497 22AB 60				rts						; ret
   498 				.endl
   499
   500 				; ------------------------------------------------------------
   501
   502 				.endl							; UNIT CIO
   503
   504 22AC			.local	MAINPROC					; PROCEDURE
   505
   506 				; optimize FAIL (100, examples\loop_exit.pas), line = 18
   507 					@print #$7D
   507 				 LDY# $7D\ JSR @PRINT
   507 22AC A0 7D		 LDY# $7D
   507 22AE 20 66 21		 JSR @PRINT
   508
   509 				; optimize FAIL (100, examples\loop_exit.pas), line = 19
   510 					@printSTRING #CODEORIGIN+$000D
   510 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   510 22B1 A0 20		 LDY> CODEORIGIN+$000D
   510 22B3 A9 0D		 LDA< CODEORIGIN+$000D
   510 22B5 20 6F 21		 JSR @PRINTSTRING
   511 22B8 20 61 21			@printEOL
   512
   513 				; optimize FAIL (100, examples\loop_exit.pas), line = 20
   514 					@printSTRING #CODEORIGIN+$0020
   514 				 LDY> CODEORIGIN+$0020\ LDA< CODEORIGIN+$0020\ JSR @PRINTSTRING
   514 22BB A0 20		 LDY> CODEORIGIN+$0020
   514 22BD A9 20		 LDA< CODEORIGIN+$0020
   514 22BF 20 6F 21		 JSR @PRINTSTRING
   515 22C2 20 61 21			@printEOL
   516
   517 				; optimize FAIL (100, examples\loop_exit.pas), line = 21
   518 					@printSTRING #CODEORIGIN+$005B
   518 				 LDY> CODEORIGIN+$005B\ LDA< CODEORIGIN+$005B\ JSR @PRINTSTRING
   518 22C5 A0 20		 LDY> CODEORIGIN+$005B
   518 22C7 A9 5B		 LDA< CODEORIGIN+$005B
   518 22C9 20 6F 21		 JSR @PRINTSTRING
   519 22CC 20 61 21			@printEOL
   520
   521 				; optimize FAIL (100, examples\loop_exit.pas), line = 22
   522 					@printSTRING #CODEORIGIN+$005D
   522 				 LDY> CODEORIGIN+$005D\ LDA< CODEORIGIN+$005D\ JSR @PRINTSTRING
   522 22CF A0 20		 LDY> CODEORIGIN+$005D
   522 22D1 A9 5D		 LDA< CODEORIGIN+$005D
   522 22D3 20 6F 21		 JSR @PRINTSTRING
   523 22D6 20 61 21			@printEOL
   524
   525 				; optimize FAIL (100, examples\loop_exit.pas), line = 23
   526 					@printSTRING #CODEORIGIN+$005A
   526 				 LDY> CODEORIGIN+$005A\ LDA< CODEORIGIN+$005A\ JSR @PRINTSTRING
   526 22D9 A0 20		 LDY> CODEORIGIN+$005A
   526 22DB A9 5A		 LDA< CODEORIGIN+$005A
   526 22DD 20 6F 21		 JSR @PRINTSTRING
   527 22E0 20 61 21			@printEOL
   528 				; --- For
   529
   530 				; optimize OK (examples\loop_exit.pas), line = 24
   531
   532 22E3 A9 01 8D 04 25		mva #$01 N
   533
   534 				; optimize OK (examples\loop_exit.pas), line = 24
   535
   536 22E8			l_01A5
   537 				; --- ForToDoCondition
   538
   539 				; optimize OK (examples\loop_exit.pas), line = 24
   540
   541 22E8 AD 04 25			lda N
   542 22EB C9 0B			cmp #$0B
   543 22ED B0 1A			jcs l_01B3
   544
   545 				; optimize FAIL (100, examples\loop_exit.pas), line = 25
   546 22EF AD 04 25			lda N
   547 22F2 20 A0 21			jsr @printBYTE._a
   548
   549 				; optimize FAIL (100, examples\loop_exit.pas), line = 26
   550 					@print #$2C
   550 				 LDY# $2C\ JSR @PRINT
   550 22F5 A0 2C		 LDY# $2C
   550 22F7 20 66 21		 JSR @PRINT
   551
   552 				; optimize OK (examples\loop_exit.pas), line = 27
   553
   554 22FA AD 04 25			lda N
   555 22FD C9 07			cmp #$07
   556 22FF D0 03			jne l_01D3
   557
   558 2301 4C 09 23			jmp b_01A5					; break
   559 2304			l_01D3
   560
   561 				; --- ForToDoEpilog
   562 2304 EE 04 25			inc N						; inc ptr byte [CounterAddress]
   563 2307 D0 DF			jne l_01A5
   564 2309			l_01B3
   565 2309			b_01A5
   566
   567 				; optimize FAIL (100, examples\loop_exit.pas), line = 31
   568 					@printSTRING #CODEORIGIN+$005A
   568 				 LDY> CODEORIGIN+$005A\ LDA< CODEORIGIN+$005A\ JSR @PRINTSTRING
   568 2309 A0 20		 LDY> CODEORIGIN+$005A
   568 230B A9 5A		 LDA< CODEORIGIN+$005A
   568 230D 20 6F 21		 JSR @PRINTSTRING
   569 2310 20 61 21			@printEOL
   570
   571 				; optimize FAIL (100, examples\loop_exit.pas), line = 32
   572 					@printSTRING #CODEORIGIN+$0077
   572 				 LDY> CODEORIGIN+$0077\ LDA< CODEORIGIN+$0077\ JSR @PRINTSTRING
   572 2313 A0 20		 LDY> CODEORIGIN+$0077
   572 2315 A9 77		 LDA< CODEORIGIN+$0077
   572 2317 20 6F 21		 JSR @PRINTSTRING
   573 231A 20 61 21			@printEOL
   574
   575 				; optimize FAIL (100, examples\loop_exit.pas), line = 33
   576 					@printSTRING #CODEORIGIN+$005A
   576 				 LDY> CODEORIGIN+$005A\ LDA< CODEORIGIN+$005A\ JSR @PRINTSTRING
   576 231D A0 20		 LDY> CODEORIGIN+$005A
   576 231F A9 5A		 LDA< CODEORIGIN+$005A
   576 2321 20 6F 21		 JSR @PRINTSTRING
   577 2324 20 61 21			@printEOL
   578
   579 				; optimize FAIL (100, examples\loop_exit.pas), line = 34
   580 					@printSTRING #CODEORIGIN+$008F
   580 				 LDY> CODEORIGIN+$008F\ LDA< CODEORIGIN+$008F\ JSR @PRINTSTRING
   580 2327 A0 20		 LDY> CODEORIGIN+$008F
   580 2329 A9 8F		 LDA< CODEORIGIN+$008F
   580 232B 20 6F 21		 JSR @PRINTSTRING
   581 232E 20 61 21			@printEOL
   582
   583 				; optimize FAIL (100, examples\loop_exit.pas), line = 35
   584 					@printSTRING #CODEORIGIN+$005A
   584 				 LDY> CODEORIGIN+$005A\ LDA< CODEORIGIN+$005A\ JSR @PRINTSTRING
   584 2331 A0 20		 LDY> CODEORIGIN+$005A
   584 2333 A9 5A		 LDA< CODEORIGIN+$005A
   584 2335 20 6F 21		 JSR @PRINTSTRING
   585 2338 20 61 21			@printEOL
   586
   587 				; optimize OK (examples\loop_exit.pas), line = 36
   588
   589 233B A9 01 8D 04 25		mva #$01 N
   590
   591 				; optimize OK (examples\loop_exit.pas), line = 37
   592
   593 2340 EE 04 25			inc N
   594
   595 				; --- WhileProlog
   596 2343 4C 5E 23			jmp l_01FA
   597 2346			l_01FB
   598
   599 				; optimize FAIL (100, examples\loop_exit.pas), line = 39
   600 2346 AD 04 25			lda N
   601 2349 20 A0 21			jsr @printBYTE._a
   602
   603 				; optimize FAIL (100, examples\loop_exit.pas), line = 40
   604 					@print #$2C
   604 				 LDY# $2C\ JSR @PRINT
   604 234C A0 2C		 LDY# $2C
   604 234E 20 66 21		 JSR @PRINT
   605
   606 				; optimize OK (examples\loop_exit.pas), line = 41
   607
   608 2351 AD 04 25			lda N
   609 2354 C9 0E			cmp #$0E
   610 2356 D0 03			jne l_021B
   611
   612 2358 4C 65 23			jmp b_01FB					; break
   613 235B			l_021B
   614
   615 				; optimize OK (examples\loop_exit.pas), line = 44
   616
   617 235B EE 04 25			inc N
   618 235E			l_01FA
   619
   620 				; optimize OK (examples\loop_exit.pas), line = 38
   621
   622 235E AD 04 25			lda N
   623 2361 C9 15			cmp #$15
   624 2363 90 E1			jcc l_01FB
   625 2365			b_01FB
   626
   627 				; optimize FAIL (100, examples\loop_exit.pas), line = 46
   628 					@printSTRING #CODEORIGIN+$005A
   628 				 LDY> CODEORIGIN+$005A\ LDA< CODEORIGIN+$005A\ JSR @PRINTSTRING
   628 2365 A0 20		 LDY> CODEORIGIN+$005A
   628 2367 A9 5A		 LDA< CODEORIGIN+$005A
   628 2369 20 6F 21		 JSR @PRINTSTRING
   629 236C 20 61 21			@printEOL
   630
   631 				; optimize FAIL (100, examples\loop_exit.pas), line = 47
   632 					@printSTRING #CODEORIGIN+$00A9
   632 				 LDY> CODEORIGIN+$00A9\ LDA< CODEORIGIN+$00A9\ JSR @PRINTSTRING
   632 236F A0 20		 LDY> CODEORIGIN+$00A9
   632 2371 A9 A9		 LDA< CODEORIGIN+$00A9
   632 2373 20 6F 21		 JSR @PRINTSTRING
   633 2376 20 61 21			@printEOL
   634
   635 				; optimize FAIL (100, examples\loop_exit.pas), line = 48
   636 					@printSTRING #CODEORIGIN+$005A
   636 				 LDY> CODEORIGIN+$005A\ LDA< CODEORIGIN+$005A\ JSR @PRINTSTRING
   636 2379 A0 20		 LDY> CODEORIGIN+$005A
   636 237B A9 5A		 LDA< CODEORIGIN+$005A
   636 237D 20 6F 21		 JSR @PRINTSTRING
   637 2380 20 61 21			@printEOL
   638
   639 				; optimize FAIL (100, examples\loop_exit.pas), line = 49
   640 					@printSTRING #CODEORIGIN+$00C3
   640 				 LDY> CODEORIGIN+$00C3\ LDA< CODEORIGIN+$00C3\ JSR @PRINTSTRING
   640 2383 A0 20		 LDY> CODEORIGIN+$00C3
   640 2385 A9 C3		 LDA< CODEORIGIN+$00C3
   640 2387 20 6F 21		 JSR @PRINTSTRING
   641 238A 20 61 21			@printEOL
   642
   643 				; optimize FAIL (100, examples\loop_exit.pas), line = 50
   644 					@printSTRING #CODEORIGIN+$005A
   644 				 LDY> CODEORIGIN+$005A\ LDA< CODEORIGIN+$005A\ JSR @PRINTSTRING
   644 238D A0 20		 LDY> CODEORIGIN+$005A
   644 238F A9 5A		 LDA< CODEORIGIN+$005A
   644 2391 20 6F 21		 JSR @PRINTSTRING
   645 2394 20 61 21			@printEOL
   646
   647 				; optimize OK (examples\loop_exit.pas), line = 51
   648
   649 2397 A9 00 8D 04 25		mva #$00 N
   650
   651 				; --- RepeatUntilProlog
   652 239C			l_0248
   653
   654 				; optimize FAIL (0, examples\loop_exit.pas), line = 53
   655 239C EE 04 25			inc N
   656
   657 				; optimize FAIL (100, examples\loop_exit.pas), line = 54
   658 239F AD 04 25			lda N
   659 23A2 20 A0 21			jsr @printBYTE._a
   660
   661 				; optimize FAIL (100, examples\loop_exit.pas), line = 55
   662 					@print #$2C
   662 				 LDY# $2C\ JSR @PRINT
   662 23A5 A0 2C		 LDY# $2C
   662 23A7 20 66 21		 JSR @PRINT
   663
   664 23AA 4C B4 23			jmp b_0248					; break
   665
   666 				; optimize OK (examples\loop_exit.pas), line = 57
   667
   668 23AD AD 04 25			lda N
   669 23B0 C9 06			cmp #$06
   670 23B2 D0 E8			jne l_0248
   671 23B4			b_0248
   672
   673 				; optimize FAIL (100, examples\loop_exit.pas), line = 58
   674 					@printSTRING #CODEORIGIN+$005A
   674 				 LDY> CODEORIGIN+$005A\ LDA< CODEORIGIN+$005A\ JSR @PRINTSTRING
   674 23B4 A0 20		 LDY> CODEORIGIN+$005A
   674 23B6 A9 5A		 LDA< CODEORIGIN+$005A
   674 23B8 20 6F 21		 JSR @PRINTSTRING
   675 23BB 20 61 21			@printEOL
   676
   677 				; optimize FAIL (100, examples\loop_exit.pas), line = 59
   678 					@printSTRING #CODEORIGIN+$00DC
   678 				 LDY> CODEORIGIN+$00DC\ LDA< CODEORIGIN+$00DC\ JSR @PRINTSTRING
   678 23BE A0 20		 LDY> CODEORIGIN+$00DC
   678 23C0 A9 DC		 LDA< CODEORIGIN+$00DC
   678 23C2 20 6F 21		 JSR @PRINTSTRING
   679 23C5 20 61 21			@printEOL
   680
   681 				; optimize FAIL ('CIO.GET', examples\loop_exit.pas), line = 60
   682 23C8 E8				inx
   683 23C9 A9 07 95 98			mva #$07 :STACKORIGIN,x
   684 23CD 20 7D 22			jsr CIO.GET
   685 23D0 B5 98 8D 03 25		mva :STACKORIGIN,x KEY
   686 23D5 CA				dex
   687
   688 23D6 20 6C 22			jsr CRT.READKEY					; call Entry
   689
   690 23D9 CA				dex
   691
   692 				; ------------------------------------------------------------
   693
   694 = 2503			KEY	= DATAORIGIN+$010F
   695 = 2504			N	= DATAORIGIN+$0110
   696 = 000A			@FORTMP_01A2	= $0A
   697
   698 = 2503			@VarData	= KEY
   699 = 0002			@VarDataSize	= 2
   700
   701 23DA			@exit
   702 					.ifdef @new
   703 					lda <@VarData
   704 					sta :ztmp
   705 					lda >@VarData
   706 					ldy #@VarDataSize-1
   707 					jmp @FreeMem
   708 					eif
   709 23DA 60				rts						; ret
   710 				.endl
   711 23DB			l_00FD
   712
   713 				; optimize FAIL ('MAINPROC', examples\loop_exit.pas), line = 65
   714 23DB 20 AC 22			jsr MAINPROC
   715
   716 				; ------------------------------------------------------------
   717
   718 = 2403			adr.STRBUFFER	= DATAORIGIN+$000F
   719 23DE			.var STRBUFFER	= adr.STRBUFFER .word
   720 23DE			@exit
   721
   722 23DE A2 00		@halt	ldx #0
   723 23E0 9A				txs
   724 					.ifdef MAIN.@DEFINES.ROMOFF
   725 					inc portb
   726 					.endif
   727
   728 23E1 60				rts
   729
   730 				; ------------------------------------------------------------
   731
   732 23E2 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   733
   734 				; ------------------------------------------------------------
   735
   736 23F2			.local	@DEFINES
   737 23F2			ATARI
   738 				.endl
   739
   740 = 23F2 03 24		STRBUFFER
   740 				.endl							; MAIN
   741
   742 				; ------------------------------------------------------------
   743 				; ------------------------------------------------------------
   744
   745 				.macro	UNITINITIALIZATION
   746 				
   747 					.ifdef MAIN.SYSTEM.@UnitInit
   748 					jsr MAIN.SYSTEM.@UnitInit
   749 					eif
   750 				
   751 					.ifdef MAIN.ATARI.@UnitInit
   752 					jsr MAIN.ATARI.@UnitInit
   753 					eif
   754 				
   755 					.ifdef MAIN.CRT.@UnitInit
   756 					jsr MAIN.CRT.@UnitInit
   757 					eif
   758 				
   759 					.ifdef MAIN.DOS.@UnitInit
   760 					jsr MAIN.DOS.@UnitInit
   761 					eif
   762 				
   763 					.ifdef MAIN.STRUTILS.@UnitInit
   764 					jsr MAIN.STRUTILS.@UnitInit
   765 					eif
   766 				
   767 					.ifdef MAIN.SYSUTILS.@UnitInit
   768 					jsr MAIN.SYSUTILS.@UnitInit
   769 					eif
   770 				
   771 					.ifdef MAIN.CIO.@UnitInit
   772 					jsr MAIN.CIO.@UnitInit
   773 					eif
   774 				.endm
   775
   776 				; ------------------------------------------------------------
   777
   778 					ift .SIZEOF(MAIN.SYSTEM) > 0
   779 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   779 				SYSTEM: $2268..$226B
   780 					eif
   781
   782 					ift .SIZEOF(MAIN.ATARI) > 0
   783 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   784 					eif
   785
   786 					ift .SIZEOF(MAIN.CRT) > 0
   787 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   787 				CRT: $226C..$227C
   788 					eif
   789
   790 					ift .SIZEOF(MAIN.DOS) > 0
   791 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   792 					eif
   793
   794 					ift .SIZEOF(MAIN.STRUTILS) > 0
   795 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   796 					eif
   797
   798 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   799 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   800 					eif
   801
   802 					ift .SIZEOF(MAIN.CIO) > 0
   803 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
   803 				CIO: $227D..$22AB
   804 					eif
   805
   806 					.print 'CODE: ',CODEORIGIN,'..',*-1
   806 				CODE: $2000..$23F3
   807
   808 				; ------------------------------------------------------------
   809
   810 23F4			DATAORIGIN
   811 23F4 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   812
   813 = 0006			VARINITSIZE	= *-DATAORIGIN
   814 = 0111			VARDATASIZE	= 273
   815
   816 = 2505			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   817
   818 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   818 				DATA: $23F4..$2505
   819
   820 02E0-02E1> 2B 22			run START
   821
   822 				; ------------------------------------------------------------
   823
   824 				.macro	STATICDATA
   825 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $11 $45 $66  $66 $65 $63 $74 $75 $73 $20 $65
   826 				.by  $78 $61 $6D $70 $6C $65 $3A $00  $39 $55 $73 $69 $6E $67 $20 $45  $58 $49 $54 $20 $63 $6F $6D $6D
   827 				.by  $61 $6E $64 $20 $69 $6E $20 $6C  $6F $6F $70 $20 $73 $74 $61 $74  $65 $6D $65 $6E $74 $73 $20 $46
   828 				.by  $4F $52 $2C $57 $48 $49 $4C $45  $20 $61 $6E $64 $20 $55 $4E $54  $49 $4C $00 $00 $00 $18 $43 $6F
   829 				.by  $75 $6E $74 $69 $6E $67 $20 $66  $72 $6F $6D $20 $31 $20 $74 $6F  $20 $31 $30 $2E $2E $2E $00 $16
   830 				.by  $45 $73 $63 $61 $70 $65 $64 $20  $66 $72 $6F $6D $20 $46 $4F $52  $20 $6C $6F $6F $70 $21 $00 $18
   831 				.by  $43 $6F $75 $6E $74 $69 $6E $67  $20 $66 $72 $6F $6D $20 $31 $20  $74 $6F $20 $32 $30 $2E $2E $2E
   832 				.by  $00 $18 $45 $73 $63 $61 $70 $65  $64 $20 $66 $72 $6F $6D $20 $57  $48 $49 $4C $45 $20 $6C $6F $6F
   833 				.by  $70 $21 $00 $17 $43 $6F $75 $6E  $74 $69 $6E $67 $20 $66 $72 $6F  $6D $20 $31 $20 $74 $6F $20 $36
   834 				.by  $2E $2E $2E $00 $18 $45 $73 $63  $61 $70 $65 $64 $20 $66 $72 $6F  $6D $20 $55 $4E $54 $49 $4C $20
   835 				.by  $6C $6F $6F $70 $21 $00
   836 				.endm
   837
   838 					end
