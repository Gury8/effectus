mads 2.1.0 build 8 (23 Dec 19)
   388 					opt l+
   101
   102 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   102 				ZPAGE: $0080..$00D7
   103
   104 				.print 'RTLIB: ',RTLIB,'..',*-1
   104 				RTLIB: $20E3..$23F4
   105
   106 				; ------------------------------------------------------------
   107
   108 23F5			START
   109 23F5 BA				tsx
   110 23F6 8E 74 26			stx MAIN.@halt+1
   111
   112 					.ifdef fmulinit
   113 					fmulinit
   114 					eif
   115
   116 = 0151			VLEN	= VARDATASIZE-VARINITSIZE
   117 = 2695			VADR	= DATAORIGIN+VARINITSIZE
   118
   119 					ift VADR > $BFFF
   120 					ert 'Invalid memory address range ',VADR
   121 					eli (VLEN>0) && (VLEN<=256)
   122 					ldx #256-VLEN
   123 					lda #0
   124 					sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>0
   126 					@fill #VADR #VLEN #0
   126 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   126 23F9 A9 95 85 88 A9 26 +  MWA #VADR @FILL.PTR1
   126 2401 A9 51 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   126 2409 A9 00 85 84		 MVA #0 @FILL.PTR2
   126 240D 20 D7 21		 JSR @FILL
   127 					eif
   128
   129 					.ifdef MAIN.@DEFINES.ROMOFF
   130 					icl 'atari\romoff.asm'
   131 					.endif
   132
   133 2410 A9 E6 85 82 A9 27 + 	mwa #PROGRAMSTACK psptr
   134
   135 2418 A2 0F			ldx #$0f					; DOS II+/D ParamStr
   136 241A BD 40 03 9D 77 26 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   137
   138 2423 E8				inx						; X = 0
   139 2424 86 90			stx bp						; BP = 0
   140
   141 2426 8E 08 D2			stx audctl					; reset POKEY
   142 2429 A9 03			lda #3
   143 242B 8D 0F D2			sta skctl
   144
   145 242E CA				dex						; X = 255
   146
   147 242F				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: strval.a65]
Source: strval.a65
   148
   149 242F			.local	MAIN						; PROCEDURE
   150
   151 242F 4C 70 26			jmp l_00EA
   152
   153 				; ------------------------------------------------------------
   154
   155 2432			.local	SYSTEM						; UNIT
   156
   157 				; ------------------------------------------------------------
   158
   159 = 0101			__PORTB_BANKS	= $0101
   160 = 0648			M_PI_2	= $0648
   161 = 0192			D_PI_2	= $0192
   162 = 0004			D_PI_180	= $04
   163 = 0000			MGTIA	= $00
   164 = 0080			MVBXE	= $80
   165 = 0000			VBXE_XDLADR	= $00
   166 = 0100			VBXE_BCBADR	= $0100
   167 = 1000			VBXE_MAPADR	= $1000
   168 = 5000			VBXE_OVRADR	= $5000
   169 = B000			VBXE_WINDOW	= $B000
   170 = 0000			IDLI	= $00
   171 = 0001			IVBL	= $01
   172 = 00FE			CH_DELCHR	= $FE
   173 = 009B			CH_ENTER	= $9B
   174 = 001B			CH_ESC	= $1B
   175 = 001C			CH_CURS_UP	= $1C
   176 = 001D			CH_CURS_DOWN	= $1D
   177 = 001E			CH_CURS_LEFT	= $1E
   178 = 001F			CH_CURS_RIGHT	= $1F
   179 = 007F			CH_TAB	= $7F
   180 = 009B			CH_EOL	= $9B
   181 = 007D			CH_CLR	= $7D
   182 = 00FD			CH_BELL	= $FD
   183 = 007E			CH_DEL	= $7E
   184 = 009C			CH_DELLINE	= $9C
   185 = 009D			CH_INSLINE	= $9D
   186 = 0000			COLOR_BLACK	= $00
   187 = 000E			COLOR_WHITE	= $0E
   188 = 0032			COLOR_RED	= $32
   189 = 0096			COLOR_CYAN	= $96
   190 = 0068			COLOR_VIOLET	= $68
   191 = 00C4			COLOR_GREEN	= $C4
   192 = 0074			COLOR_BLUE	= $74
   193 = 00EE			COLOR_YELLOW	= $EE
   194 = 0028			COLOR_ORANGE	= $28
   195 = 00E4			COLOR_BROWN	= $E4
   196 = 003C			COLOR_LIGHTRED	= $3C
   197 = 0004			COLOR_GRAY1	= $04
   198 = 0006			COLOR_GRAY2	= $06
   199 = 000A			COLOR_GRAY3	= $0A
   200 = 00CC			COLOR_LIGHTGREEN	= $CC
   201 = 007C			COLOR_LIGHTBLUE	= $7C
   202 = 0004			FMOPENREAD	= $04
   203 = 0008			FMOPENWRITE	= $08
   204 = 0009			FMOPENAPPEND	= $09
   205 = 000C			FMOPENREADWRITE	= $0C
   206 = 268F			SCREENWIDTH	= DATAORIGIN+$0000
   207 = 2691			SCREENHEIGHT	= DATAORIGIN+$0002
   208 = 2693			DATESEPARATOR	= DATAORIGIN+$0004
   209 = D014			TVSYSTEM	= $D014
   210 = 02C0			adr.PALETTE	= $02C0
   211 2432			.var PALETTE	= adr.PALETTE .word
   212 = D012			adr.HPALETTE	= $D012
   213 2432			.var HPALETTE	= adr.HPALETTE .word
   214 = 2694			FILEMODE	= DATAORIGIN+$0005
   215 = 2695			GRAPHMODE	= DATAORIGIN+$0006
   216 = 2696			IORESULT	= DATAORIGIN+$0007
   217 = 2697			EOLN	= DATAORIGIN+$0008
   218 = 2698			RNDSEED	= DATAORIGIN+$0009
   219
   220 = 2432 C0 02		PALETTE
   220 = 2434 12 D0		HPALETTE
   220 				.endl							; UNIT SYSTEM
   221
   222 				; ------------------------------------------------------------
   223
   224 2436			.local	ATARI						; UNIT
   225
   226 				; ------------------------------------------------------------
   227
   228 = 0012			RTCLOK	= $12
   229 = 004D			ATRACT	= $4D
   230 = 0052			LMARGIN	= $52
   231 = 0053			RMARGIN	= $53
   232 = 0054			ROWCRS	= $54
   233 = 0055			COLCRS	= $55
   234 = 0057			DINDEX	= $57
   235 = 0058			SAVMSC	= $58
   236 = 0062			PALNTS	= $62
   237 = 006A			RAMTOP	= $6A
   238 = 0200			VDSLST	= $0200
   239 = 0230			SDLSTL	= $0230
   240 = 0290			TXTROW	= $0290
   241 = 0291			TXTCOL	= $0291
   242 = 0293			TINDEX	= $0293
   243 = 0294			TXTMSC	= $0294
   244 = 022F			SDMCTL	= $022F
   245 = 026F			GPRIOR	= $026F
   246 = 02F0			CRSINH	= $02F0
   247 = 02F3			CHACT	= $02F3
   248 = 02F4			CHBAS	= $02F4
   249 = 02FC			CH	= $02FC
   250 = 02C0			PCOLR0	= $02C0
   251 = 02C1			PCOLR1	= $02C1
   252 = 02C2			PCOLR2	= $02C2
   253 = 02C3			PCOLR3	= $02C3
   254 = 02C4			COLOR0	= $02C4
   255 = 02C5			COLOR1	= $02C5
   256 = 02C6			COLOR2	= $02C6
   257 = 02C7			COLOR3	= $02C7
   258 = 02C8			COLOR4	= $02C8
   259 = 02C8			COLBAKS	= $02C8
   260 = D000			HPOSP0	= $D000
   261 = D001			HPOSP1	= $D001
   262 = D002			HPOSP2	= $D002
   263 = D003			HPOSP3	= $D003
   264 = D004			HPOSM0	= $D004
   265 = D005			HPOSM1	= $D005
   266 = D006			HPOSM2	= $D006
   267 = D007			HPOSM3	= $D007
   268 = D008			SIZEP0	= $D008
   269 = D009			SIZEP1	= $D009
   270 = D00A			SIZEP2	= $D00A
   271 = D00B			SIZEP3	= $D00B
   272 = D00C			SIZEM	= $D00C
   273 = D00D			GRAFP0	= $D00D
   274 = D00E			GRAFP1	= $D00E
   275 = D00F			GRAFP2	= $D00F
   276 = D010			GRAFP3	= $D010
   277 = D011			GRAFM	= $D011
   278 = D004			P0PF	= $D004
   279 = D014			PAL	= $D014
   280 = D012			COLPM0	= $D012
   281 = D013			COLPM1	= $D013
   282 = D014			COLPM2	= $D014
   283 = D015			COLPM3	= $D015
   284 = D016			COLPF0	= $D016
   285 = D017			COLPF1	= $D017
   286 = D018			COLPF2	= $D018
   287 = D019			COLPF3	= $D019
   288 = D01A			COLBK	= $D01A
   289 = D01B			PRIOR	= $D01B
   290 = D01D			GRACTL	= $D01D
   291 = D01E			HITCLR	= $D01E
   292 = D200			AUDF1	= $D200
   293 = D201			AUDC1	= $D201
   294 = D202			AUDF2	= $D202
   295 = D203			AUDC2	= $D203
   296 = D204			AUDF3	= $D204
   297 = D205			AUDC3	= $D205
   298 = D206			AUDF4	= $D206
   299 = D207			AUDC4	= $D207
   300 = D208			AUDCTL	= $D208
   301 = D20F			SKSTAT	= $D20F
   302 = D301			PORTB	= $D301
   303 = D400			DMACTL	= $D400
   304 = D401			CHACTL	= $D401
   305 = D402			DLISTL	= $D402
   306 = D404			HSCROL	= $D404
   307 = D405			VSCROL	= $D405
   308 = D407			PMBASE	= $D407
   309 = D409			CHBASE	= $D409
   310 = D40A			WSYNC	= $D40A
   311 = D40B			VCOUNT	= $D40B
   312 = D40C			PENH	= $D40C
   313 = D40D			PENV	= $D40D
   314 = D40E			NMIEN	= $D40E
   315
   316 				.endl							; UNIT ATARI
   317
   318 				; ------------------------------------------------------------
   319
   320 2436			.local	CRT						; UNIT
   321
   322 2436			.local	READKEY						; FUNCTION | ASSEMBLER
   323
   324 				; ---------------------  ASM Block 049  ---------------------
   325
   326 2436 8A 48			txa:pha
   327
   328 2438 20 E3 20			@GetKey
   329
   330 243B 8D 9B 26			sta Result
   331
   332 243E 68 AA			pla:tax
   333
   334 2440			@exit
   335
   336 				; ------------------------------------------------------------
   337
   338 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   339 				; as Pointer
   340
   341 2440 E8				inx
   342 2441 AD 9B 26 95 98		mva RESULT :STACKORIGIN,x
   343
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					eif
   351
   352 				; ------------------------------------------------------------
   353
   354 = 269B			RESULT	= DATAORIGIN+$000C
   355
   356 = 269B			@VarData	= RESULT
   357 = 0001			@VarDataSize	= 1
   358
   359 2446 60				rts						; ret
   360 				.endl
   361
   362 				; ------------------------------------------------------------
   363
   364 = 269A			TEXTATTR	= DATAORIGIN+$000B
   365 = D01F			CONSOL	= $D01F
   366 = 0000			CN_START_SELECT_OPTION	= $00
   367 = 0001			CN_SELECT_OPTION	= $01
   368 = 0002			CN_START_OPTION	= $02
   369 = 0003			CN_OPTION	= $03
   370 = 0004			CN_START_SELECT	= $04
   371 = 0005			CN_SELECT	= $05
   372 = 0006			CN_START	= $06
   373 = 0007			CN_NONE	= $07
   374 = 0000			BW40	= $00
   375 = 0001			CO40	= $01
   376 = 0002			BW80	= $02
   377 = 0003			CO80	= $03
   378 = 0007			MONO	= $07
   379 = 0001			C40	= $01
   380 = 0003			C80	= $03
   381 = 0000			BLACK	= $00
   382 = 0001			BLUE	= $01
   383 = 0002			GREEN	= $02
   384 = 0003			CYAN	= $03
   385 = 0004			RED	= $04
   386 = 0005			MAGENTA	= $05
   387 = 0006			BROWN	= $06
   388 = 0007			LIGHTGRAY	= $07
   389 = 0008			DARKGRAY	= $08
   390 = 0009			LIGHTBLUE	= $09
   391 = 000A			LIGHTGREEN	= $0A
   392 = 000B			LIGHTCYAN	= $0B
   393 = 000C			LIGHTRED	= $0C
   394 = 000D			LIGHTMAGENTA	= $0D
   395 = 000E			YELLOW	= $0E
   396 = 000F			WHITE	= $0F
   397 = 0080			BLINK	= $80
   398
   399 				.endl							; UNIT CRT
   400
   401 				; ------------------------------------------------------------
   402
   403 2447			.local	DOS						; UNIT
   404
   405 				; ------------------------------------------------------------
   406
   407 = D014			PALNTSC	= $D014
   408
   409 				.endl							; UNIT DOS
   410
   411 				; ------------------------------------------------------------
   412
   413 2447			.local	STRUTILS					; UNIT
   414
   415 				; ------------------------------------------------------------
   416
   417 				.endl							; UNIT STRUTILS
   418
   419 				; ------------------------------------------------------------
   420
   421 2447			.local	SYSUTILS					; UNIT
   422
   423 2447			.local	INTTOSTR_014B					; FUNCTION | ASSEMBLER | OVERLOAD
   424
   425 				; ------------------------------------------------------------
   426
   427 				; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
   428 				; as Pointer
   429 2447 B5 98 8D 9C 26		mva :STACKORIGIN,x A
   430 244C B5 A8 8D 9D 26		mva :STACKORIGIN+STACKWIDTH,x A+1
   431 2451 B5 B8 8D 9E 26		mva :STACKORIGIN+STACKWIDTH*2,x A+2
   432 2456 B5 C8 8D 9F 26		mva :STACKORIGIN+STACKWIDTH*3,x A+3
   433 245B CA				dex
   434
   435 				; ---------------------  ASM Block 072  ---------------------
   436
   437 245C 8A 48			txa:pha
   438
   439 245E E8				inx
   440
   441 					@ValueToStr #@printCARD
   441 				 LDY> @PRINTCARD\ LDA< @PRINTCARD\ JSR @VALUETOSTR
   441 245F A0 23		 LDY> @PRINTCARD
   441 2461 A9 5C		 LDA< @PRINTCARD
   441 2463 20 3C 22		 JSR @VALUETOSTR
   442
   443 2466 A2 20			ldx #$20
   444 2468 BD 00 04 9D A0 26 + 	mva:rpl @buf,x adr.Result,x-
   445
   446 2471 68 AA			pla:tax
   447
   448 2473			@exit
   449
   450 				; ------------------------------------------------------------
   451
   452 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   453 				; as Pointer
   454
   455 2473 E8				inx
   456 2474 AD 7F 24 95 98		mva RESULT :STACKORIGIN,x
   457 2479 AD 80 24 95 A8		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   458
   459 					.ifdef @new
   460 					lda <@VarData
   461 					sta :ztmp
   462 					lda >@VarData
   463 					ldy #@VarDataSize-1
   464 					jmp @FreeMem
   465 					eif
   466
   467 				; ------------------------------------------------------------
   468
   469 = 269C			A	= DATAORIGIN+$000D
   470 = 26A0			adr.RESULT	= DATAORIGIN+$0011
   471 247E			.var RESULT	= adr.RESULT .word
   472
   473 = 269C			@VarData	= A
   474 = 0025			@VarDataSize	= 37
   475
   476 247E 60				rts						; ret
   477 = 247F A0 26		RESULT
   477 				.endl
   478
   479 2481			.local	STRTOINT_0151					; FUNCTION | ASSEMBLER | OVERLOAD
   480
   481 				; ------------------------------------------------------------
   482
   483 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   484 				; as Pointer
   485 2481 B5 98 8D C1 26		mva :STACKORIGIN,x S
   486 2486 B5 A8 8D C2 26		mva :STACKORIGIN+STACKWIDTH,x S+1
   487 248B CA				dex
   488
   489 				; ---------------------  ASM Block 074  ---------------------
   490
   491 					@StrToInt s
   491 				 LDY S+1\ LDA S\ JSR @STRTOINT
   491 248C AC C2 26		 LDY S+1
   491 248F AD C1 26		 LDA S
   491 2492 20 57 22		 JSR @STRTOINT
   492
   493 2495 A5 88 8D C3 26		mva edx Result
   494 249A A5 89 8D C4 26		mva edx+1 Result+1
   495 249F A5 8A 8D C5 26		mva edx+2 Result+2
   496 24A4 A5 8B 8D C6 26		mva edx+3 Result+3
   497
   498 24A9			@exit
   499
   500 				; ------------------------------------------------------------
   501
   502 				; Push CARDINAL / INTEGER / REAL / SINGLE
   503 				; as Pointer
   504
   505 24A9 E8				inx
   506 24AA AD C3 26 95 98		mva RESULT :STACKORIGIN,x
   507 24AF AD C4 26 95 A8		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   508 24B4 AD C5 26 95 B8		mva RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
   509 24B9 AD C6 26 95 C8		mva RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
   510
   511 					.ifdef @new
   512 					lda <@VarData
   513 					sta :ztmp
   514 					lda >@VarData
   515 					ldy #@VarDataSize-1
   516 					jmp @FreeMem
   517 					eif
   518
   519 				; ------------------------------------------------------------
   520
   521 = 26C1			S	= DATAORIGIN+$0032
   522 = 26C3			RESULT	= DATAORIGIN+$0034
   523
   524 = 26C1			@VarData	= S
   525 = 0006			@VarDataSize	= 6
   526
   527 24BE 60				rts						; ret
   528 				.endl
   529
   530 				; ------------------------------------------------------------
   531
   532 = 0001			FAREADONLY	= $01
   533 = 0002			FAHIDDEN	= $02
   534 = 0004			FASYSFILE	= $04
   535 = 0008			FAVOLUMEID	= $08
   536 = 0010			FADIRECTORY	= $10
   537 = 0020			FAARCHIVE	= $20
   538 = 003F			FAANYFILE	= $3F
   539
   540 				.endl							; UNIT SYSUTILS
   541
   542 				; ------------------------------------------------------------
   543
   544 24BF			.local	CIO						; UNIT
   545
   546 24BF			.local	GET						; FUNCTION | ASSEMBLER
   547
   548 				; ------------------------------------------------------------
   549
   550 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   551 				; as Pointer
   552 24BF B5 98 8D C7 26		mva :STACKORIGIN,x CHN
   553 24C4 CA				dex
   554
   555 				; ---------------------  ASM Block 080  ---------------------
   556
   557 24C5 8A 48			txa:pha
   558
   559 24C7 AD C7 26			lda chn
   560 24CA 0A 0A 0A 0A			:4 asl @
   561 24CE AA				tax
   562
   563 24CF A9 07			lda #7		;get char command
   564 24D1 9D 42 03			sta iccmd,x
   565
   566 24D4 A9 00			lda #$00	;zero out the unused
   567 24D6 9D 48 03			sta icbufl,x	;store in accumulator
   568 24D9 9D 49 03			sta icbufh,x	;...after CIOV jump
   569
   570 24DC				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 24DC 20 56 E4				jsr CIOV
Source: strval.a65
   571
   572 24DF 8C 96 26			sty MAIN.SYSTEM.IOResult
   573
   574 24E2 8D C8 26			sta Result
   575
   576 24E5 68 AA			pla:tax
   577
   578 24E7			@exit
   579
   580 				; ------------------------------------------------------------
   581
   582 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   583 				; as Pointer
   584
   585 24E7 E8				inx
   586 24E8 AD C8 26 95 98		mva RESULT :STACKORIGIN,x
   587
   588 					.ifdef @new
   589 					lda <@VarData
   590 					sta :ztmp
   591 					lda >@VarData
   592 					ldy #@VarDataSize-1
   593 					jmp @FreeMem
   594 					eif
   595
   596 				; ------------------------------------------------------------
   597
   598 = 26C7			CHN	= DATAORIGIN+$0038
   599 = 26C8			RESULT	= DATAORIGIN+$0039
   600
   601 = 26C7			@VarData	= CHN
   602 = 0002			@VarDataSize	= 2
   603
   604 24ED 60				rts						; ret
   605 				.endl
   606
   607 				; ------------------------------------------------------------
   608
   609 				.endl							; UNIT CIO
   610
   611 24EE			.local	MAINPROC					; PROCEDURE
   612
   613 				; optimize FAIL (100, examples\strval.pas), line = 27
   614 					@print #$7D
   614 				 LDY# $7D\ JSR @PRINT
   614 24EE A0 7D		 LDY# $7D
   614 24F0 20 FA 22		 JSR @PRINT
   615
   616 				; optimize FAIL (100, examples\strval.pas), line = 28
   617 					@printSTRING #CODEORIGIN+$000D
   617 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   617 24F3 A0 20		 LDY> CODEORIGIN+$000D
   617 24F5 A9 0D		 LDA< CODEORIGIN+$000D
   617 24F7 20 03 23		 JSR @PRINTSTRING
   618 24FA 20 F5 22			@printEOL
   619
   620 				; optimize FAIL (100, examples\strval.pas), line = 29
   621 					@printSTRING #CODEORIGIN+$0020
   621 				 LDY> CODEORIGIN+$0020\ LDA< CODEORIGIN+$0020\ JSR @PRINTSTRING
   621 24FD A0 20		 LDY> CODEORIGIN+$0020
   621 24FF A9 20		 LDA< CODEORIGIN+$0020
   621 2501 20 03 23		 JSR @PRINTSTRING
   622 2504 20 F5 22			@printEOL
   623
   624 				; optimize FAIL (100, examples\strval.pas), line = 30
   625 					@printSTRING #CODEORIGIN+$0022
   625 				 LDY> CODEORIGIN+$0022\ LDA< CODEORIGIN+$0022\ JSR @PRINTSTRING
   625 2507 A0 20		 LDY> CODEORIGIN+$0022
   625 2509 A9 22		 LDA< CODEORIGIN+$0022
   625 250B 20 03 23		 JSR @PRINTSTRING
   626 250E 20 F5 22			@printEOL
   627
   628 				; optimize FAIL (100, examples\strval.pas), line = 31
   629 					@printSTRING #CODEORIGIN+$0045
   629 				 LDY> CODEORIGIN+$0045\ LDA< CODEORIGIN+$0045\ JSR @PRINTSTRING
   629 2511 A0 20		 LDY> CODEORIGIN+$0045
   629 2513 A9 45		 LDA< CODEORIGIN+$0045
   629 2515 20 03 23		 JSR @PRINTSTRING
   630 2518 20 F5 22			@printEOL
   631
   632 				; optimize FAIL (100, examples\strval.pas), line = 32
   633 					@printSTRING #CODEORIGIN+$001F
   633 				 LDY> CODEORIGIN+$001F\ LDA< CODEORIGIN+$001F\ JSR @PRINTSTRING
   633 251B A0 20		 LDY> CODEORIGIN+$001F
   633 251D A9 1F		 LDA< CODEORIGIN+$001F
   633 251F 20 03 23		 JSR @PRINTSTRING
   634 2522 20 F5 22			@printEOL
   635
   636 				; optimize FAIL ('SYSUTILS.INTTOSTR_014B', examples\strval.pas), line = 33
   637 2525 E8				inx
   638 2526 A9 E8 95 98			mva #$E8 :STACKORIGIN,x
   639 252A A9 FD 95 A8			mva #$FD :STACKORIGIN+STACKWIDTH,x
   640 252E 20 42 21			jsr @expandToCARD.WORD
   641 2531 20 47 24			jsr SYSUTILS.INTTOSTR_014B
   642 					@moveSTRING STRNUM1
   642 				 LDY STRNUM1+1\ LDA STRNUM1\ JSR @MOVESTRING
   642 2534 AC 8A 26		 LDY STRNUM1+1
   642 2537 AD 89 26		 LDA STRNUM1
   642 253A 20 1F 22		 JSR @MOVESTRING
   643 253D CA				dex
   644
   645 				; optimize FAIL ('SYSUTILS.INTTOSTR_014B', examples\strval.pas), line = 34
   646 253E E8				inx
   647 253F A9 80 95 98			mva #$80 :STACKORIGIN,x
   648 2543 A9 0C 95 A8			mva #$0C :STACKORIGIN+STACKWIDTH,x
   649 2547 20 42 21			jsr @expandToCARD.WORD
   650 254A 20 47 24			jsr SYSUTILS.INTTOSTR_014B
   651 					@moveSTRING STRNUM2
   651 				 LDY STRNUM2+1\ LDA STRNUM2\ JSR @MOVESTRING
   651 254D AC 8C 26		 LDY STRNUM2+1
   651 2550 AD 8B 26		 LDA STRNUM2
   651 2553 20 1F 22		 JSR @MOVESTRING
   652 2556 CA				dex
   653
   654 				; optimize FAIL ('SYSUTILS.INTTOSTR_014B', examples\strval.pas), line = 35
   655 2557 E8				inx
   656 2558 A9 B2 95 98			mva #$B2 :STACKORIGIN,x
   657 255C 20 4E 21			jsr @expandToCARD.BYTE
   658 255F 20 47 24			jsr SYSUTILS.INTTOSTR_014B
   659 					@moveSTRING STRNUM3
   659 				 LDY STRNUM3+1\ LDA STRNUM3\ JSR @MOVESTRING
   659 2562 AC 8E 26		 LDY STRNUM3+1
   659 2565 AD 8D 26		 LDA STRNUM3
   659 2568 20 1F 22		 JSR @MOVESTRING
   660 256B CA				dex
   661
   662 				; optimize FAIL (100, examples\strval.pas), line = 36
   663 					@printSTRING #CODEORIGIN+$0064
   663 				 LDY> CODEORIGIN+$0064\ LDA< CODEORIGIN+$0064\ JSR @PRINTSTRING
   663 256C A0 20		 LDY> CODEORIGIN+$0064
   663 256E A9 64		 LDA< CODEORIGIN+$0064
   663 2570 20 03 23		 JSR @PRINTSTRING
   664
   665 				; optimize FAIL (100, examples\strval.pas), line = 37
   666 					@printSTRING STRNUM1
   666 				 LDY STRNUM1+1\ LDA STRNUM1\ JSR @PRINTSTRING
   666 2573 AC 8A 26		 LDY STRNUM1+1
   666 2576 AD 89 26		 LDA STRNUM1
   666 2579 20 03 23		 JSR @PRINTSTRING
   667 257C 20 F5 22			@printEOL
   668
   669 				; optimize FAIL (100, examples\strval.pas), line = 38
   670 					@printSTRING #CODEORIGIN+$006E
   670 				 LDY> CODEORIGIN+$006E\ LDA< CODEORIGIN+$006E\ JSR @PRINTSTRING
   670 257F A0 20		 LDY> CODEORIGIN+$006E
   670 2581 A9 6E		 LDA< CODEORIGIN+$006E
   670 2583 20 03 23		 JSR @PRINTSTRING
   671
   672 				; optimize FAIL (100, examples\strval.pas), line = 39
   673 					@printSTRING STRNUM2
   673 				 LDY STRNUM2+1\ LDA STRNUM2\ JSR @PRINTSTRING
   673 2586 AC 8C 26		 LDY STRNUM2+1
   673 2589 AD 8B 26		 LDA STRNUM2
   673 258C 20 03 23		 JSR @PRINTSTRING
   674 258F 20 F5 22			@printEOL
   675
   676 				; optimize FAIL (100, examples\strval.pas), line = 40
   677 					@printSTRING #CODEORIGIN+$0078
   677 				 LDY> CODEORIGIN+$0078\ LDA< CODEORIGIN+$0078\ JSR @PRINTSTRING
   677 2592 A0 20		 LDY> CODEORIGIN+$0078
   677 2594 A9 78		 LDA< CODEORIGIN+$0078
   677 2596 20 03 23		 JSR @PRINTSTRING
   678
   679 				; optimize FAIL (100, examples\strval.pas), line = 41
   680 					@printSTRING STRNUM3
   680 				 LDY STRNUM3+1\ LDA STRNUM3\ JSR @PRINTSTRING
   680 2599 AC 8E 26		 LDY STRNUM3+1
   680 259C AD 8D 26		 LDA STRNUM3
   680 259F 20 03 23		 JSR @PRINTSTRING
   681 25A2 20 F5 22			@printEOL
   682
   683 				; optimize FAIL (100, examples\strval.pas), line = 42
   684 					@printSTRING #CODEORIGIN+$001F
   684 				 LDY> CODEORIGIN+$001F\ LDA< CODEORIGIN+$001F\ JSR @PRINTSTRING
   684 25A5 A0 20		 LDY> CODEORIGIN+$001F
   684 25A7 A9 1F		 LDA< CODEORIGIN+$001F
   684 25A9 20 03 23		 JSR @PRINTSTRING
   685 25AC 20 F5 22			@printEOL
   686
   687 				; optimize FAIL (100, examples\strval.pas), line = 43
   688 					@printSTRING #CODEORIGIN+$0082
   688 				 LDY> CODEORIGIN+$0082\ LDA< CODEORIGIN+$0082\ JSR @PRINTSTRING
   688 25AF A0 20		 LDY> CODEORIGIN+$0082
   688 25B1 A9 82		 LDA< CODEORIGIN+$0082
   688 25B3 20 03 23		 JSR @PRINTSTRING
   689 25B6 20 F5 22			@printEOL
   690
   691 				; optimize FAIL (100, examples\strval.pas), line = 44
   692 					@printSTRING #CODEORIGIN+$00A8
   692 				 LDY> CODEORIGIN+$00A8\ LDA< CODEORIGIN+$00A8\ JSR @PRINTSTRING
   692 25B9 A0 20		 LDY> CODEORIGIN+$00A8
   692 25BB A9 A8		 LDA< CODEORIGIN+$00A8
   692 25BD 20 03 23		 JSR @PRINTSTRING
   693 25C0 20 F5 22			@printEOL
   694
   695 				; optimize FAIL (100, examples\strval.pas), line = 45
   696 					@printSTRING #CODEORIGIN+$001F
   696 				 LDY> CODEORIGIN+$001F\ LDA< CODEORIGIN+$001F\ JSR @PRINTSTRING
   696 25C3 A0 20		 LDY> CODEORIGIN+$001F
   696 25C5 A9 1F		 LDA< CODEORIGIN+$001F
   696 25C7 20 03 23		 JSR @PRINTSTRING
   697 25CA 20 F5 22			@printEOL
   698
   699 				; optimize FAIL ('SYSUTILS.STRTOINT_0151', examples\strval.pas), line = 46
   700 25CD E8				inx
   701 25CE A9 BC 95 98			mva #$BC :STACKORIGIN,x
   702 25D2 A9 20 95 A8			mva #$20 :STACKORIGIN+STACKWIDTH,x
   703 25D6 20 81 24			jsr SYSUTILS.STRTOINT_0151
   704 25D9 B5 98 8D CA 27		mva :STACKORIGIN,x NUM1
   705 25DE CA				dex
   706
   707 				; optimize FAIL (100, examples\strval.pas), line = 47
   708 					@printSTRING #CODEORIGIN+$00C1
   708 				 LDY> CODEORIGIN+$00C1\ LDA< CODEORIGIN+$00C1\ JSR @PRINTSTRING
   708 25DF A0 20		 LDY> CODEORIGIN+$00C1
   708 25E1 A9 C1		 LDA< CODEORIGIN+$00C1
   708 25E3 20 03 23		 JSR @PRINTSTRING
   709
   710 				; optimize FAIL (100, examples\strval.pas), line = 48
   711 25E6 AD CA 27			lda NUM1
   712 25E9 20 3E 23			jsr @printBYTE._a
   713 25EC 20 F5 22			@printEOL
   714
   715 				; optimize FAIL ('SYSUTILS.STRTOINT_0151', examples\strval.pas), line = 49
   716 25EF E8				inx
   717 25F0 A9 C8 95 98			mva #$C8 :STACKORIGIN,x
   718 25F4 A9 20 95 A8			mva #$20 :STACKORIGIN+STACKWIDTH,x
   719 25F8 20 81 24			jsr SYSUTILS.STRTOINT_0151
   720 25FB B5 98 8D CB 27		mva :STACKORIGIN,x NUM2
   721 2600 B5 A8 8D CC 27		mva :STACKORIGIN+STACKWIDTH,x NUM2+1
   722 2605 B5 B8 8D CD 27		mva :STACKORIGIN+STACKWIDTH*2,x NUM2+2
   723 260A B5 C8 8D CE 27		mva :STACKORIGIN+STACKWIDTH*3,x NUM2+3
   724 260F CA				dex
   725
   726 				; optimize FAIL (100, examples\strval.pas), line = 50
   727 					@printSTRING #CODEORIGIN+$00CE
   727 				 LDY> CODEORIGIN+$00CE\ LDA< CODEORIGIN+$00CE\ JSR @PRINTSTRING
   727 2610 A0 20		 LDY> CODEORIGIN+$00CE
   727 2612 A9 CE		 LDA< CODEORIGIN+$00CE
   727 2614 20 03 23		 JSR @PRINTSTRING
   728
   729 				; optimize FAIL (100, examples\strval.pas), line = 51
   730 2617 E8				inx
   731 2618 AD CB 27 95 98		mva NUM2 :STACKORIGIN,x
   732 261D AD CC 27 95 A8		mva NUM2+1 :STACKORIGIN+STACKWIDTH,x
   733 2622 AD CD 27 95 B8		mva NUM2+2 :STACKORIGIN+STACKWIDTH*2,x
   734 2627 AD CE 27 95 C8		mva NUM2+3 :STACKORIGIN+STACKWIDTH*3,x
   735 262C 20 32 23			jsr @printINT
   736 262F CA				dex
   737 2630 20 F5 22			@printEOL
   738
   739 				; optimize FAIL ('SYSUTILS.STRTOINT_0151', examples\strval.pas), line = 52
   740 2633 E8				inx
   741 2634 A9 D5 95 98			mva #$D5 :STACKORIGIN,x
   742 2638 A9 20 95 A8			mva #$20 :STACKORIGIN+STACKWIDTH,x
   743 263C 20 81 24			jsr SYSUTILS.STRTOINT_0151
   744 263F B5 98 8D CF 27		mva :STACKORIGIN,x NUM3
   745 2644 B5 A8 8D D0 27		mva :STACKORIGIN+STACKWIDTH,x NUM3+1
   746 2649 CA				dex
   747
   748 				; optimize FAIL (100, examples\strval.pas), line = 53
   749 					@printSTRING #CODEORIGIN+$00DC
   749 				 LDY> CODEORIGIN+$00DC\ LDA< CODEORIGIN+$00DC\ JSR @PRINTSTRING
   749 264A A0 20		 LDY> CODEORIGIN+$00DC
   749 264C A9 DC		 LDA< CODEORIGIN+$00DC
   749 264E 20 03 23		 JSR @PRINTSTRING
   750
   751 				; optimize FAIL (100, examples\strval.pas), line = 54
   752 2651 AD CF 27			lda NUM3
   753 2654 AC D0 27			ldy NUM3+1
   754 2657 20 4F 23			jsr @printWORD._ay
   755 265A 20 F5 22			@printEOL
   756
   757 				; optimize FAIL ('CIO.GET', examples\strval.pas), line = 55
   758 265D E8				inx
   759 265E A9 07 95 98			mva #$07 :STACKORIGIN,x
   760 2662 20 BF 24			jsr CIO.GET
   761 2665 B5 98 8D C9 27		mva :STACKORIGIN,x KEY
   762 266A CA				dex
   763
   764 266B 20 36 24			jsr CRT.READKEY					; call Entry
   765
   766 266E CA				dex
   767 266F			@exit
   768 					.ifdef @new
   769 					lda <@VarData
   770 					sta :ztmp
   771 					lda >@VarData
   772 					ldy #@VarDataSize-1
   773 					jmp @FreeMem
   774 					eif
   775 266F 60				rts						; ret
   776 				.endl
   777 2670			l_00EA
   778
   779 				; optimize FAIL ('MAINPROC', examples\strval.pas), line = 60
   780 2670 20 EE 24			jsr MAINPROC
   781
   782 				; ------------------------------------------------------------
   783
   784 = 26C9			adr.STRBUFFER	= DATAORIGIN+$003A
   785 2673			.var STRBUFFER	= adr.STRBUFFER .word
   786 = 27C9			KEY	= DATAORIGIN+$013A
   787 = 27CA			NUM1	= DATAORIGIN+$013B
   788 = 27CB			NUM2	= DATAORIGIN+$013C
   789 = 27CF			NUM3	= DATAORIGIN+$0140
   790 = 27D1			adr.STRNUM1	= DATAORIGIN+$0142
   791 2673			.var STRNUM1	= adr.STRNUM1 .word
   792 = 27D8			adr.STRNUM2	= DATAORIGIN+$0149
   793 2673			.var STRNUM2	= adr.STRNUM2 .word
   794 = 27DF			adr.STRNUM3	= DATAORIGIN+$0150
   795 2673			.var STRNUM3	= adr.STRNUM3 .word
   796 2673			@exit
   797
   798 2673 A2 00		@halt	ldx #0
   799 2675 9A				txs
   800 					.ifdef MAIN.@DEFINES.ROMOFF
   801 					inc portb
   802 					.endif
   803
   804 2676 60				rts
   805
   806 				; ------------------------------------------------------------
   807
   808 2677 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   809
   810 				; ------------------------------------------------------------
   811
   812 2687			.local	@DEFINES
   813 2687			ATARI
   814 				.endl
   815
   816 = 2687 C9 26		STRBUFFER
   816 = 2689 D1 27		STRNUM1
   816 = 268B D8 27		STRNUM2
   816 = 268D DF 27		STRNUM3
   816 				.endl							; MAIN
   817
   818 				; ------------------------------------------------------------
   819 				; ------------------------------------------------------------
   820
   821 				.macro	UNITINITIALIZATION
   822 				
   823 					.ifdef MAIN.SYSTEM.@UnitInit
   824 					jsr MAIN.SYSTEM.@UnitInit
   825 					eif
   826 				
   827 					.ifdef MAIN.ATARI.@UnitInit
   828 					jsr MAIN.ATARI.@UnitInit
   829 					eif
   830 				
   831 					.ifdef MAIN.CRT.@UnitInit
   832 					jsr MAIN.CRT.@UnitInit
   833 					eif
   834 				
   835 					.ifdef MAIN.DOS.@UnitInit
   836 					jsr MAIN.DOS.@UnitInit
   837 					eif
   838 				
   839 					.ifdef MAIN.STRUTILS.@UnitInit
   840 					jsr MAIN.STRUTILS.@UnitInit
   841 					eif
   842 				
   843 					.ifdef MAIN.SYSUTILS.@UnitInit
   844 					jsr MAIN.SYSUTILS.@UnitInit
   845 					eif
   846 				
   847 					.ifdef MAIN.CIO.@UnitInit
   848 					jsr MAIN.CIO.@UnitInit
   849 					eif
   850 				.endm
   851
   852 				; ------------------------------------------------------------
   853
   854 					ift .SIZEOF(MAIN.SYSTEM) > 0
   855 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   855 				SYSTEM: $2432..$2435
   856 					eif
   857
   858 					ift .SIZEOF(MAIN.ATARI) > 0
   859 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   860 					eif
   861
   862 					ift .SIZEOF(MAIN.CRT) > 0
   863 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   863 				CRT: $2436..$2446
   864 					eif
   865
   866 					ift .SIZEOF(MAIN.DOS) > 0
   867 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   868 					eif
   869
   870 					ift .SIZEOF(MAIN.STRUTILS) > 0
   871 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   872 					eif
   873
   874 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   875 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   875 				SYSUTILS: $2447..$24BE
   876 					eif
   877
   878 					ift .SIZEOF(MAIN.CIO) > 0
   879 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
   879 				CIO: $24BF..$24ED
   880 					eif
   881
   882 					.print 'CODE: ',CODEORIGIN,'..',*-1
   882 				CODE: $2000..$268E
   883
   884 				; ------------------------------------------------------------
   885
   886 268F			DATAORIGIN
   887 268F 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   888
   889 = 0006			VARINITSIZE	= *-DATAORIGIN
   890 = 0157			VARDATASIZE	= 343
   891
   892 = 27E6			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   893
   894 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   894 				DATA: $268F..$27E6
   895
   896 02E0-02E1> F5 23			run START
   897
   898 				; ------------------------------------------------------------
   899
   900 				.macro	STATICDATA
   901 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $11 $45 $66  $66 $65 $63 $74 $75 $73 $20 $65
   902 				.by  $78 $61 $6D $70 $6C $65 $3A $00  $00 $00 $21 $4E $75 $6D $62 $65  $72 $20 $74 $6F $20 $73 $74 $72
   903 				.by  $69 $6E $67 $20 $63 $6F $6E $76  $65 $72 $73 $69 $6F $6E $20 $75  $73 $69 $6E $67 $00 $1D $53 $74
   904 				.by  $72 $42 $2C $53 $74 $72 $49 $20  $61 $6E $64 $20 $53 $74 $72 $43  $20 $70 $72 $6F $63 $65 $64 $75
   905 				.by  $72 $65 $73 $00 $08 $73 $74 $72  $6E $75 $6D $31 $3D $00 $08 $73  $74 $72 $6E $75 $6D $32 $3D $00
   906 				.by  $08 $73 $74 $72 $6E $75 $6D $33  $3D $00 $24 $53 $74 $72 $69 $6E  $67 $20 $74 $6F $20 $6E $75 $6D
   907 				.by  $62 $65 $72 $20 $63 $6F $6E $76  $65 $72 $73 $69 $6F $6E $20 $62  $79 $20 $75 $73 $69 $6E $67 $00
   908 				.by  $12 $56 $61 $6C $42 $2C $56 $61  $6C $49 $20 $61 $6E $64 $20 $56  $61 $6C $43 $00 $03 $31 $30 $30
   909 				.by  $00 $05 $6E $75 $6D $31 $3D $00  $04 $31 $35 $30 $30 $00 $05 $6E  $75 $6D $32 $3D $00 $05 $34 $34
   910 				.by  $36 $31 $31 $00 $05 $6E $75 $6D  $33 $3D $00
   911 				.endm
   912
   913 					end
