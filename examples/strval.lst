mads 2.1.0 build 4 (27 Oct 19)
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $20E3..$23BD
    97
    98 				; ------------------------------------------------------------
    99
   100 23BD			START
   101 23BD BA				tsx
   102 23BE 8E 14 26			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 004F			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 2633			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 23C1 A2 B1			ldx #256-VLEN
   115 23C3 A9 00			lda #0
   116 23C5 9D 82 25 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   119 					eif
   120
   121 23CB A2 0F			ldx #$0f
   122 23CD BD 40 03 9D 17 26 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 23D6 E8				inx		; X = 0 !!!
   125 23D7 86 8E			stx bp		; lo BP = 0
   126
   127 23D9				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: strval.a65]
   128
   129 23D9			.local	MAIN						; PROCEDURE
   130
   131 23D9 4C 10 26			jmp l_00EA
   132
   133 				; ------------------------------------------------------------
   134
   135 23DC			.local	SYSTEM						; UNIT
   136
   137 				; ------------------------------------------------------------
   138
   139 = 0648			M_PI_2	= $0648
   140 = 0192			D_PI_2	= $0192
   141 = 0004			D_PI_180	= $0004
   142 = 0000			MGTIA	= $0000
   143 = 0080			MVBXE	= $0080
   144 = 0000			VBXE_XDLADR	= $0000
   145 = 0100			VBXE_BCBADR	= $0100
   146 = 1000			VBXE_MAPADR	= $1000
   147 = 5000			VBXE_OVRADR	= $5000
   148 = B000			VBXE_WINDOW	= $B000
   149 = 0000			IDLI	= $0000
   150 = 0001			IVBL	= $0001
   151 = 00FE			CH_DELCHR	= $00FE
   152 = 009B			CH_ENTER	= $009B
   153 = 001B			CH_ESC	= $001B
   154 = 001C			CH_CURS_UP	= $001C
   155 = 001D			CH_CURS_DOWN	= $001D
   156 = 001E			CH_CURS_LEFT	= $001E
   157 = 001F			CH_CURS_RIGHT	= $001F
   158 = 007F			CH_TAB	= $007F
   159 = 009B			CH_EOL	= $009B
   160 = 007D			CH_CLR	= $007D
   161 = 00FD			CH_BELL	= $00FD
   162 = 007E			CH_DEL	= $007E
   163 = 009C			CH_DELLINE	= $009C
   164 = 009D			CH_INSLINE	= $009D
   165 = 0000			COLOR_BLACK	= $0000
   166 = 000E			COLOR_WHITE	= $000E
   167 = 0032			COLOR_RED	= $0032
   168 = 0096			COLOR_CYAN	= $0096
   169 = 0068			COLOR_VIOLET	= $0068
   170 = 00C4			COLOR_GREEN	= $00C4
   171 = 0074			COLOR_BLUE	= $0074
   172 = 00EE			COLOR_YELLOW	= $00EE
   173 = 0028			COLOR_ORANGE	= $0028
   174 = 00E4			COLOR_BROWN	= $00E4
   175 = 003C			COLOR_LIGHTRED	= $003C
   176 = 0004			COLOR_GRAY1	= $0004
   177 = 0006			COLOR_GRAY2	= $0006
   178 = 000A			COLOR_GRAY3	= $000A
   179 = 00CC			COLOR_LIGHTGREEN	= $00CC
   180 = 007C			COLOR_LIGHTBLUE	= $007C
   181 = 0004			FMOPENREAD	= $0004
   182 = 0008			FMOPENWRITE	= $0008
   183 = 0009			FMOPENAPPEND	= $0009
   184 = 000C			FMOPENREADWRITE	= $000C
   185 = 262D			SCREENWIDTH	= DATAORIGIN+$0000
   186 = 262F			SCREENHEIGHT	= DATAORIGIN+$0002
   187 = 2631			DATESEPARATOR	= DATAORIGIN+$0004
   188 = D014			TVSYSTEM	= $D014
   189 = 02C0			adr.PALETTE	= $02C0
   190 23DC			.var PALETTE	= adr.PALETTE .word
   191 = D012			adr.HPALETTE	= $D012
   192 23DC			.var HPALETTE	= adr.HPALETTE .word
   193 = 2632			FILEMODE	= DATAORIGIN+$0005
   194 = 2633			SCREENMODE	= DATAORIGIN+$0006
   195 = 2634			IORESULT	= DATAORIGIN+$0007
   196 = 2635			EOLN	= DATAORIGIN+$0008
   197 = 2636			RNDSEED	= DATAORIGIN+$0009
   198
   199 = 23DC C0 02		PALETTE
   199 = 23DE 12 D0		HPALETTE
   199 				.endl							; UNIT SYSTEM
   200
   201 				; ------------------------------------------------------------
   202
   203 23E0			.local	DOS						; UNIT
   204
   205 				; ------------------------------------------------------------
   206
   207 = D014			PALNTSC	= $D014
   208
   209 				.endl							; UNIT DOS
   210
   211 				; ------------------------------------------------------------
   212
   213 23E0			.local	STRUTILS					; UNIT
   214
   215 				; ------------------------------------------------------------
   216
   217 				.endl							; UNIT STRUTILS
   218
   219 				; ------------------------------------------------------------
   220
   221 23E0			.local	SYSUTILS					; UNIT
   222
   223 23E0			.local	INTTOSTR					; FUNCTION | ASSEMBLER
   224
   225 				; ------------------------------------------------------------
   226
   227 				; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
   228 				; as Pointer
   229 23E0 B5 98 8D 38 26		mva :STACKORIGIN,x A
   230 23E5 B5 A8 8D 39 26		mva :STACKORIGIN+STACKWIDTH,x A+1
   231 23EA B5 B8 8D 3A 26		mva :STACKORIGIN+STACKWIDTH*2,x A+2
   232 23EF B5 C8 8D 3B 26		mva :STACKORIGIN+STACKWIDTH*3,x A+3
   233 23F4 CA				dex						; sub bx, 1
   234
   235 				; ---------------------  ASM Block 057  ---------------------
   236
   237 23F5 8A 48			txa:pha
   238
   239 23F7 E8				inx
   240
   241 					@ValueToStr #@printINT
   241 				 LDY> @PRINTINT\ LDA< @PRINTINT\ JSR @VALUETOSTR
   241 23F8 A0 21		 LDY> @PRINTINT
   241 23FA A9 90		 LDA< @PRINTINT
   241 23FC 20 2A 22		 JSR @VALUETOSTR
   242
   243 23FF A9 00 8D 3C 26 A9 + 	mwa #@buf Result
   244
   245 2409 68 AA			pla:tax
   246
   247 240B			@exit
   248
   249 				; ------------------------------------------------------------
   250
   251 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   252 				; as Pointer
   253
   254 240B E8				inx						; add bx, 1
   255 240C AD 3C 26 95 98		mva RESULT :STACKORIGIN,x
   256 2411 AD 3D 26 95 A8		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   257
   258 					.ifdef @new
   259 					@FreeMem #@VarData #@VarDataSize
   260 					eif
   261
   262 				; ------------------------------------------------------------
   263
   264 = 2638			A	= DATAORIGIN+$000B
   265 = 263C			RESULT	= DATAORIGIN+$000F
   266
   267 = 2638			@VarData	= A
   268 = 0006			@VarDataSize	= 6
   269
   270 2416 60				rts						; ret
   271 				.endl
   272
   273 2417			.local	STRTOINT_011C					; FUNCTION | ASSEMBLER | OVERLOAD
   274
   275 				; ------------------------------------------------------------
   276
   277 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   278 				; as Pointer
   279 2417 B5 98 8D 7A 24		mva :STACKORIGIN,x S
   280 241C B5 A8 8D 7B 24		mva :STACKORIGIN+STACKWIDTH,x S+1
   281 2421 CA				dex						; sub bx, 1
   282 					@move S #adr.S #33
   282 				 MWA S @MOVE.PTR1\ MWA #ADR.S @MOVE.PTR2\ MWA #33 @MOVE.PTR3\ JSR @MOVE
   282 2422 AD 7A 24 85 86 AD +  MWA S @MOVE.PTR1
   282 242C A9 3E 85 8A A9 26 +  MWA #ADR.S @MOVE.PTR2
   282 2434 A9 21 85 82 A9 00 +  MWA #33 @MOVE.PTR3
   282 243C 20 68 23		 JSR @MOVE
   283 243F A9 3E 8D 7A 24 A9 + 	mwa #adr.S S
   284
   285 				; ---------------------  ASM Block 059  ---------------------
   286
   287 					@StrToInt #adr.s
   287 				 LDY> ADR.S\ LDA< ADR.S\ JSR @STRTOINT
   287 2449 A0 26		 LDY> ADR.S
   287 244B A9 3E		 LDA< ADR.S
   287 244D 20 45 22		 JSR @STRTOINT
   288
   289 2450 A5 86 8D 5F 26		mva edx Result
   290 2455 A5 87 8D 60 26		mva edx+1 Result+1
   291 245A A5 88 8D 61 26		mva edx+2 Result+2
   292 245F A5 89 8D 62 26		mva edx+3 Result+3
   293
   294 2464			@exit
   295
   296 				; ------------------------------------------------------------
   297
   298 				; Push CARDINAL / INTEGER / REAL / SINGLE
   299 				; as Pointer
   300
   301 2464 E8				inx						; add bx, 1
   302 2465 AD 5F 26 95 98		mva RESULT :STACKORIGIN,x
   303 246A AD 60 26 95 A8		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   304 246F AD 61 26 95 B8		mva RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
   305 2474 AD 62 26 95 C8		mva RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
   306
   307 					.ifdef @new
   308 					@FreeMem #@VarData #@VarDataSize
   309 					eif
   310
   311 				; ------------------------------------------------------------
   312
   313 = 263E			adr.S	= DATAORIGIN+$0011
   314 2479			.var S	= adr.S .word
   315 = 265F			RESULT	= DATAORIGIN+$0032
   316
   317 = 247A			@VarData	= S
   318 = 0025			@VarDataSize	= 37
   319
   320 2479 60				rts						; ret
   321 = 247A 3E 26		S
   321 				.endl
   322
   323 				; ------------------------------------------------------------
   324
   325 = 0001			FAREADONLY	= $0001
   326 = 0002			FAHIDDEN	= $0002
   327 = 0004			FASYSFILE	= $0004
   328 = 0008			FAVOLUMEID	= $0008
   329 = 0010			FADIRECTORY	= $0010
   330 = 0020			FAARCHIVE	= $0020
   331 = 003F			FAANYFILE	= $003F
   332
   333 				.endl							; UNIT SYSUTILS
   334
   335 				; ------------------------------------------------------------
   336
   337 247C			.local	ATARI						; UNIT
   338
   339 				; ------------------------------------------------------------
   340
   341 = 0012			RTCLOK	= $0012
   342 = 004D			ATRACT	= $004D
   343 = 0052			LMARGIN	= $0052
   344 = 0053			RMARGIN	= $0053
   345 = 0054			ROWCRS	= $0054
   346 = 0055			COLCRS	= $0055
   347 = 0057			DINDEX	= $0057
   348 = 0058			SAVMSC	= $0058
   349 = 006A			RAMTOP	= $006A
   350 = 0200			VDSLST	= $0200
   351 = 0230			SDLSTL	= $0230
   352 = 0290			TXTROW	= $0290
   353 = 0291			TXTCOL	= $0291
   354 = 0293			TINDEX	= $0293
   355 = 0294			TXTMSC	= $0294
   356 = 022F			SDMCTL	= $022F
   357 = 026F			GPRIOR	= $026F
   358 = 02F0			CRSINH	= $02F0
   359 = 02F3			CHACT	= $02F3
   360 = 02F4			CHBAS	= $02F4
   361 = 02FC			CH	= $02FC
   362 = 02C0			PCOLR0	= $02C0
   363 = 02C1			PCOLR1	= $02C1
   364 = 02C2			PCOLR2	= $02C2
   365 = 02C3			PCOLR3	= $02C3
   366 = 02C4			COLOR0	= $02C4
   367 = 02C5			COLOR1	= $02C5
   368 = 02C6			COLOR2	= $02C6
   369 = 02C7			COLOR3	= $02C7
   370 = 02C8			COLOR4	= $02C8
   371 = 02C8			COLBAKS	= $02C8
   372 = D000			HPOSP0	= $D000
   373 = D001			HPOSP1	= $D001
   374 = D002			HPOSP2	= $D002
   375 = D003			HPOSP3	= $D003
   376 = D004			HPOSM0	= $D004
   377 = D005			HPOSM1	= $D005
   378 = D006			HPOSM2	= $D006
   379 = D007			HPOSM3	= $D007
   380 = D008			SIZEP0	= $D008
   381 = D009			SIZEP1	= $D009
   382 = D00A			SIZEP2	= $D00A
   383 = D00B			SIZEP3	= $D00B
   384 = D00C			SIZEM	= $D00C
   385 = D00D			GRAFP0	= $D00D
   386 = D00E			GRAFP1	= $D00E
   387 = D00F			GRAFP2	= $D00F
   388 = D010			GRAFP3	= $D010
   389 = D011			GRAFM	= $D011
   390 = D004			P0PF	= $D004
   391 = D014			PAL	= $D014
   392 = D012			COLPM0	= $D012
   393 = D013			COLPM1	= $D013
   394 = D014			COLPM2	= $D014
   395 = D015			COLPM3	= $D015
   396 = D016			COLPF0	= $D016
   397 = D017			COLPF1	= $D017
   398 = D018			COLPF2	= $D018
   399 = D019			COLPF3	= $D019
   400 = D01A			COLBK	= $D01A
   401 = D01B			PRIOR	= $D01B
   402 = D01D			GRACTL	= $D01D
   403 = D01E			HITCLR	= $D01E
   404 = D200			AUDF1	= $D200
   405 = D201			AUDC1	= $D201
   406 = D202			AUDF2	= $D202
   407 = D203			AUDC2	= $D203
   408 = D204			AUDF3	= $D204
   409 = D205			AUDC3	= $D205
   410 = D206			AUDF4	= $D206
   411 = D207			AUDC4	= $D207
   412 = D208			AUDCTL	= $D208
   413 = D20F			SKSTAT	= $D20F
   414 = D301			PORTB	= $D301
   415 = D400			DMACTL	= $D400
   416 = D401			CHACTL	= $D401
   417 = D402			DLISTL	= $D402
   418 = D404			HSCROL	= $D404
   419 = D405			VSCROL	= $D405
   420 = D407			PMBASE	= $D407
   421 = D409			CHBASE	= $D409
   422 = D40A			WSYNC	= $D40A
   423 = D40B			VCOUNT	= $D40B
   424 = D40C			PENH	= $D40C
   425 = D40D			PENV	= $D40D
   426 = D40E			NMIEN	= $D40E
   427
   428 				.endl							; UNIT ATARI
   429
   430 				; ------------------------------------------------------------
   431
   432 247C			.local	CRT						; UNIT
   433
   434 247C			.local	READKEY						; FUNCTION | ASSEMBLER
   435
   436 				; ---------------------  ASM Block 063  ---------------------
   437
   438 247C 8A 48			txa:pha
   439
   440 247E 20 10 23			@GetKey
   441
   442 2481 8D 64 26			sta Result
   443
   444 2484 68 AA			pla:tax
   445
   446 2486			@exit
   447
   448 				; ------------------------------------------------------------
   449
   450 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   451 				; as Pointer
   452
   453 2486 E8				inx						; add bx, 1
   454 2487 AD 64 26 95 98		mva RESULT :STACKORIGIN,x
   455
   456 					.ifdef @new
   457 					@FreeMem #@VarData #@VarDataSize
   458 					eif
   459
   460 				; ------------------------------------------------------------
   461
   462 = 2664			RESULT	= DATAORIGIN+$0037
   463
   464 = 2664			@VarData	= RESULT
   465 = 0001			@VarDataSize	= 1
   466
   467 248C 60				rts						; ret
   468 				.endl
   469
   470 				; ------------------------------------------------------------
   471
   472 = 2663			TEXTATTR	= DATAORIGIN+$0036
   473 = D01F			CONSOL	= $D01F
   474 = 0000			CN_START_SELECT_OPTION	= $0000
   475 = 0001			CN_SELECT_OPTION	= $0001
   476 = 0002			CN_START_OPTION	= $0002
   477 = 0003			CN_OPTION	= $0003
   478 = 0004			CN_START_SELECT	= $0004
   479 = 0005			CN_SELECT	= $0005
   480 = 0006			CN_START	= $0006
   481 = 0007			CN_NONE	= $0007
   482 = 0000			BW40	= $0000
   483 = 0001			CO40	= $0001
   484 = 0002			BW80	= $0002
   485 = 0003			CO80	= $0003
   486 = 0007			MONO	= $0007
   487 = 0001			C40	= $0001
   488 = 0003			C80	= $0003
   489 = 0000			BLACK	= $0000
   490 = 0001			BLUE	= $0001
   491 = 0002			GREEN	= $0002
   492 = 0003			CYAN	= $0003
   493 = 0004			RED	= $0004
   494 = 0005			MAGENTA	= $0005
   495 = 0006			BROWN	= $0006
   496 = 0007			LIGHTGRAY	= $0007
   497 = 0008			DARKGRAY	= $0008
   498 = 0009			LIGHTBLUE	= $0009
   499 = 000A			LIGHTGREEN	= $000A
   500 = 000B			LIGHTCYAN	= $000B
   501 = 000C			LIGHTRED	= $000C
   502 = 000D			LIGHTMAGENTA	= $000D
   503 = 000E			YELLOW	= $000E
   504 = 000F			WHITE	= $000F
   505 = 0080			BLINK	= $0080
   506
   507 				.endl							; UNIT CRT
   508
   509 248D			.local	MAINPROC					; PROCEDURE
   510
   511 				; optimize FAIL (100, examples\strval.pas), line = 25
   512 					@print #$7D
   512 				 LDY# $7D\ JSR @PRINT
   512 248D A0 7D		 LDY# $7D
   512 248F 20 1F 21		 JSR @PRINT
   513
   514 				; optimize FAIL (100, examples\strval.pas), line = 26
   515 					@printSTRING #CODEORIGIN+$000D
   515 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   515 2492 A0 20		 LDY> CODEORIGIN+$000D
   515 2494 A9 0D		 LDA< CODEORIGIN+$000D
   515 2496 20 28 21		 JSR @PRINTSTRING
   516 2499 20 1A 21			@printEOL
   517
   518 				; optimize FAIL (100, examples\strval.pas), line = 27
   519 					@printSTRING #CODEORIGIN+$0020
   519 				 LDY> CODEORIGIN+$0020\ LDA< CODEORIGIN+$0020\ JSR @PRINTSTRING
   519 249C A0 20		 LDY> CODEORIGIN+$0020
   519 249E A9 20		 LDA< CODEORIGIN+$0020
   519 24A0 20 28 21		 JSR @PRINTSTRING
   520 24A3 20 1A 21			@printEOL
   521
   522 				; optimize FAIL (100, examples\strval.pas), line = 28
   523 					@printSTRING #CODEORIGIN+$0022
   523 				 LDY> CODEORIGIN+$0022\ LDA< CODEORIGIN+$0022\ JSR @PRINTSTRING
   523 24A6 A0 20		 LDY> CODEORIGIN+$0022
   523 24A8 A9 22		 LDA< CODEORIGIN+$0022
   523 24AA 20 28 21		 JSR @PRINTSTRING
   524 24AD 20 1A 21			@printEOL
   525
   526 				; optimize FAIL (100, examples\strval.pas), line = 29
   527 					@printSTRING #CODEORIGIN+$0045
   527 				 LDY> CODEORIGIN+$0045\ LDA< CODEORIGIN+$0045\ JSR @PRINTSTRING
   527 24B0 A0 20		 LDY> CODEORIGIN+$0045
   527 24B2 A9 45		 LDA< CODEORIGIN+$0045
   527 24B4 20 28 21		 JSR @PRINTSTRING
   528 24B7 20 1A 21			@printEOL
   529
   530 				; optimize FAIL (100, examples\strval.pas), line = 30
   531 					@printSTRING #CODEORIGIN+$001F
   531 				 LDY> CODEORIGIN+$001F\ LDA< CODEORIGIN+$001F\ JSR @PRINTSTRING
   531 24BA A0 20		 LDY> CODEORIGIN+$001F
   531 24BC A9 1F		 LDA< CODEORIGIN+$001F
   531 24BE 20 28 21		 JSR @PRINTSTRING
   532 24C1 20 1A 21			@printEOL
   533
   534 				; optimize FAIL ('SYSUTILS.INTTOSTR', examples\strval.pas), line = 31
   535 24C4 E8				inx
   536 24C5 A9 E8 95 98			mva #$E8 :STACKORIGIN,x
   537 24C9 A9 FD 95 A8			mva #$FD :STACKORIGIN+STACKWIDTH,x
   538 24CD 20 EB 20			jsr @expandToCARD.WORD
   539 24D0 20 E0 23			jsr SYSUTILS.INTTOSTR
   540 					@moveSTRING STRNUM1
   540 				 LDY STRNUM1+1\ LDA STRNUM1\ JSR @MOVESTRING
   540 24D3 AC 28 26		 LDY STRNUM1+1
   540 24D6 AD 27 26		 LDA STRNUM1
   540 24D9 20 20 23		 JSR @MOVESTRING
   541 24DC CA				dex						; sub bx, 1
   542
   543 				; optimize FAIL ('SYSUTILS.INTTOSTR', examples\strval.pas), line = 32
   544 24DD E8				inx
   545 24DE A9 80 95 98			mva #$80 :STACKORIGIN,x
   546 24E2 A9 0C 95 A8			mva #$0C :STACKORIGIN+STACKWIDTH,x
   547 24E6 20 EB 20			jsr @expandToCARD.WORD
   548 24E9 20 E0 23			jsr SYSUTILS.INTTOSTR
   549 					@moveSTRING STRNUM2
   549 				 LDY STRNUM2+1\ LDA STRNUM2\ JSR @MOVESTRING
   549 24EC AC 2A 26		 LDY STRNUM2+1
   549 24EF AD 29 26		 LDA STRNUM2
   549 24F2 20 20 23		 JSR @MOVESTRING
   550 24F5 CA				dex						; sub bx, 1
   551
   552 				; optimize FAIL ('SYSUTILS.INTTOSTR', examples\strval.pas), line = 33
   553 24F6 E8				inx
   554 24F7 A9 B2 95 98			mva #$B2 :STACKORIGIN,x
   555 24FB 20 F7 20			jsr @expandToCARD.BYTE
   556 24FE 20 E0 23			jsr SYSUTILS.INTTOSTR
   557 					@moveSTRING STRNUM3
   557 				 LDY STRNUM3+1\ LDA STRNUM3\ JSR @MOVESTRING
   557 2501 AC 2C 26		 LDY STRNUM3+1
   557 2504 AD 2B 26		 LDA STRNUM3
   557 2507 20 20 23		 JSR @MOVESTRING
   558 250A CA				dex						; sub bx, 1
   559
   560 				; optimize FAIL (100, examples\strval.pas), line = 34
   561 					@printSTRING #CODEORIGIN+$0064
   561 				 LDY> CODEORIGIN+$0064\ LDA< CODEORIGIN+$0064\ JSR @PRINTSTRING
   561 250B A0 20		 LDY> CODEORIGIN+$0064
   561 250D A9 64		 LDA< CODEORIGIN+$0064
   561 250F 20 28 21		 JSR @PRINTSTRING
   562
   563 				; optimize FAIL (100, examples\strval.pas), line = 35
   564 					@printSTRING STRNUM1
   564 				 LDY STRNUM1+1\ LDA STRNUM1\ JSR @PRINTSTRING
   564 2512 AC 28 26		 LDY STRNUM1+1
   564 2515 AD 27 26		 LDA STRNUM1
   564 2518 20 28 21		 JSR @PRINTSTRING
   565 251B 20 1A 21			@printEOL
   566
   567 				; optimize FAIL (100, examples\strval.pas), line = 36
   568 					@printSTRING #CODEORIGIN+$006E
   568 				 LDY> CODEORIGIN+$006E\ LDA< CODEORIGIN+$006E\ JSR @PRINTSTRING
   568 251E A0 20		 LDY> CODEORIGIN+$006E
   568 2520 A9 6E		 LDA< CODEORIGIN+$006E
   568 2522 20 28 21		 JSR @PRINTSTRING
   569
   570 				; optimize FAIL (100, examples\strval.pas), line = 37
   571 					@printSTRING STRNUM2
   571 				 LDY STRNUM2+1\ LDA STRNUM2\ JSR @PRINTSTRING
   571 2525 AC 2A 26		 LDY STRNUM2+1
   571 2528 AD 29 26		 LDA STRNUM2
   571 252B 20 28 21		 JSR @PRINTSTRING
   572 252E 20 1A 21			@printEOL
   573
   574 				; optimize FAIL (100, examples\strval.pas), line = 38
   575 					@printSTRING #CODEORIGIN+$0078
   575 				 LDY> CODEORIGIN+$0078\ LDA< CODEORIGIN+$0078\ JSR @PRINTSTRING
   575 2531 A0 20		 LDY> CODEORIGIN+$0078
   575 2533 A9 78		 LDA< CODEORIGIN+$0078
   575 2535 20 28 21		 JSR @PRINTSTRING
   576
   577 				; optimize FAIL (100, examples\strval.pas), line = 39
   578 					@printSTRING STRNUM3
   578 				 LDY STRNUM3+1\ LDA STRNUM3\ JSR @PRINTSTRING
   578 2538 AC 2C 26		 LDY STRNUM3+1
   578 253B AD 2B 26		 LDA STRNUM3
   578 253E 20 28 21		 JSR @PRINTSTRING
   579 2541 20 1A 21			@printEOL
   580
   581 				; optimize FAIL (100, examples\strval.pas), line = 40
   582 					@printSTRING #CODEORIGIN+$001F
   582 				 LDY> CODEORIGIN+$001F\ LDA< CODEORIGIN+$001F\ JSR @PRINTSTRING
   582 2544 A0 20		 LDY> CODEORIGIN+$001F
   582 2546 A9 1F		 LDA< CODEORIGIN+$001F
   582 2548 20 28 21		 JSR @PRINTSTRING
   583 254B 20 1A 21			@printEOL
   584
   585 				; optimize FAIL (100, examples\strval.pas), line = 41
   586 					@printSTRING #CODEORIGIN+$0082
   586 				 LDY> CODEORIGIN+$0082\ LDA< CODEORIGIN+$0082\ JSR @PRINTSTRING
   586 254E A0 20		 LDY> CODEORIGIN+$0082
   586 2550 A9 82		 LDA< CODEORIGIN+$0082
   586 2552 20 28 21		 JSR @PRINTSTRING
   587 2555 20 1A 21			@printEOL
   588
   589 				; optimize FAIL (100, examples\strval.pas), line = 42
   590 					@printSTRING #CODEORIGIN+$00A8
   590 				 LDY> CODEORIGIN+$00A8\ LDA< CODEORIGIN+$00A8\ JSR @PRINTSTRING
   590 2558 A0 20		 LDY> CODEORIGIN+$00A8
   590 255A A9 A8		 LDA< CODEORIGIN+$00A8
   590 255C 20 28 21		 JSR @PRINTSTRING
   591 255F 20 1A 21			@printEOL
   592
   593 				; optimize FAIL (100, examples\strval.pas), line = 43
   594 					@printSTRING #CODEORIGIN+$001F
   594 				 LDY> CODEORIGIN+$001F\ LDA< CODEORIGIN+$001F\ JSR @PRINTSTRING
   594 2562 A0 20		 LDY> CODEORIGIN+$001F
   594 2564 A9 1F		 LDA< CODEORIGIN+$001F
   594 2566 20 28 21		 JSR @PRINTSTRING
   595 2569 20 1A 21			@printEOL
   596
   597 				; optimize FAIL ('SYSUTILS.STRTOINT_011C', examples\strval.pas), line = 44
   598 256C E8				inx
   599 256D A9 BC 95 98			mva #$BC :STACKORIGIN,x
   600 2571 A9 20 95 A8			mva #$20 :STACKORIGIN+STACKWIDTH,x
   601 2575 20 17 24			jsr SYSUTILS.STRTOINT_011C
   602 2578 B5 98 8D 66 26		mva :STACKORIGIN,x NUM1
   603 257D CA				dex
   604
   605 				; optimize FAIL (100, examples\strval.pas), line = 45
   606 					@printSTRING #CODEORIGIN+$00C1
   606 				 LDY> CODEORIGIN+$00C1\ LDA< CODEORIGIN+$00C1\ JSR @PRINTSTRING
   606 257E A0 20		 LDY> CODEORIGIN+$00C1
   606 2580 A9 C1		 LDA< CODEORIGIN+$00C1
   606 2582 20 28 21		 JSR @PRINTSTRING
   607
   608 				; optimize FAIL (100, examples\strval.pas), line = 46
   609 2585 E8				inx
   610 2586 AD 66 26 95 98		mva NUM1 :STACKORIGIN,x
   611 258B 20 A6 21			jsr @printBYTE
   612 258E CA				dex
   613 258F 20 1A 21			@printEOL
   614
   615 				; optimize FAIL ('SYSUTILS.STRTOINT_011C', examples\strval.pas), line = 47
   616 2592 E8				inx
   617 2593 A9 C8 95 98			mva #$C8 :STACKORIGIN,x
   618 2597 A9 20 95 A8			mva #$20 :STACKORIGIN+STACKWIDTH,x
   619 259B 20 17 24			jsr SYSUTILS.STRTOINT_011C
   620 259E B5 98 8D 67 26		mva :STACKORIGIN,x NUM2
   621 25A3 B5 A8 8D 68 26		mva :STACKORIGIN+STACKWIDTH,x NUM2+1
   622 25A8 B5 B8 8D 69 26		mva :STACKORIGIN+STACKWIDTH*2,x NUM2+2
   623 25AD B5 C8 8D 6A 26		mva :STACKORIGIN+STACKWIDTH*3,x NUM2+3
   624 25B2 CA				dex
   625
   626 				; optimize FAIL (100, examples\strval.pas), line = 48
   627 					@printSTRING #CODEORIGIN+$00CE
   627 				 LDY> CODEORIGIN+$00CE\ LDA< CODEORIGIN+$00CE\ JSR @PRINTSTRING
   627 25B3 A0 20		 LDY> CODEORIGIN+$00CE
   627 25B5 A9 CE		 LDA< CODEORIGIN+$00CE
   627 25B7 20 28 21		 JSR @PRINTSTRING
   628
   629 				; optimize FAIL (100, examples\strval.pas), line = 49
   630 25BA E8				inx
   631 25BB AD 67 26 95 98		mva NUM2 :STACKORIGIN,x
   632 25C0 AD 68 26 95 A8		mva NUM2+1 :STACKORIGIN+STACKWIDTH,x
   633 25C5 AD 69 26 95 B8		mva NUM2+2 :STACKORIGIN+STACKWIDTH*2,x
   634 25CA AD 6A 26 95 C8		mva NUM2+3 :STACKORIGIN+STACKWIDTH*3,x
   635 25CF 20 90 21			jsr @printINT
   636 25D2 CA				dex
   637 25D3 20 1A 21			@printEOL
   638
   639 				; optimize FAIL ('SYSUTILS.STRTOINT_011C', examples\strval.pas), line = 50
   640 25D6 E8				inx
   641 25D7 A9 D5 95 98			mva #$D5 :STACKORIGIN,x
   642 25DB A9 20 95 A8			mva #$20 :STACKORIGIN+STACKWIDTH,x
   643 25DF 20 17 24			jsr SYSUTILS.STRTOINT_011C
   644 25E2 B5 98 8D 6B 26		mva :STACKORIGIN,x NUM3
   645 25E7 B5 A8 8D 6C 26		mva :STACKORIGIN+STACKWIDTH,x NUM3+1
   646 25EC CA				dex
   647
   648 				; optimize FAIL (100, examples\strval.pas), line = 51
   649 					@printSTRING #CODEORIGIN+$00DC
   649 				 LDY> CODEORIGIN+$00DC\ LDA< CODEORIGIN+$00DC\ JSR @PRINTSTRING
   649 25ED A0 20		 LDY> CODEORIGIN+$00DC
   649 25EF A9 DC		 LDA< CODEORIGIN+$00DC
   649 25F1 20 28 21		 JSR @PRINTSTRING
   650
   651 				; optimize FAIL (100, examples\strval.pas), line = 52
   652 25F4 E8				inx
   653 25F5 AD 6B 26 95 98		mva NUM3 :STACKORIGIN,x
   654 25FA AD 6C 26 95 A8		mva NUM3+1 :STACKORIGIN+STACKWIDTH,x
   655 25FF 20 A0 21			jsr @printWORD
   656 2602 CA				dex
   657 2603 20 1A 21			@printEOL
   658
   659 				; optimize FAIL ('CRT.READKEY', examples\strval.pas), line = 53
   660 2606 20 7C 24			jsr CRT.READKEY
   661 2609 B5 98 8D 65 26		mva :STACKORIGIN,x KEY
   662 260E CA				dex
   663 260F			@exit
   664 					.ifdef @new
   665 					@FreeMem #@VarData #@VarDataSize
   666 					eif
   667 260F 60				rts						; ret
   668 				.endl
   669 2610			l_00EA
   670
   671 				; optimize FAIL ('MAINPROC', examples\strval.pas), line = 57
   672 2610 20 8D 24			jsr MAINPROC
   673
   674 				; ------------------------------------------------------------
   675
   676 = 2665			KEY	= DATAORIGIN+$0038
   677 = 2666			NUM1	= DATAORIGIN+$0039
   678 = 2667			NUM2	= DATAORIGIN+$003A
   679 = 266B			NUM3	= DATAORIGIN+$003E
   680 = 266D			adr.STRNUM1	= DATAORIGIN+$0040
   681 2613			.var STRNUM1	= adr.STRNUM1 .word
   682 = 2674			adr.STRNUM2	= DATAORIGIN+$0047
   683 2613			.var STRNUM2	= adr.STRNUM2 .word
   684 = 267B			adr.STRNUM3	= DATAORIGIN+$004E
   685 2613			.var STRNUM3	= adr.STRNUM3 .word
   686 2613			@exit
   687
   688 2613 A2 00		@halt	ldx #0
   689 2615 9A				txs
   690
   691 2616 60				rts
   692
   693 				; ------------------------------------------------------------
   694
   695 2617 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   696
   697 				; ------------------------------------------------------------
   698
   699 2627			.local	@DEFINES
   700 2627			ATARI
   701 				.endl
   702
   703 = 2627 6D 26		STRNUM1
   703 = 2629 74 26		STRNUM2
   703 = 262B 7B 26		STRNUM3
   703 				.endl							; MAIN
   704
   705 				; ------------------------------------------------------------
   706 				; ------------------------------------------------------------
   707
   708 				.macro	UNITINITIALIZATION
   709 				
   710 					.ifdef MAIN.SYSTEM.@UnitInit
   711 					jsr MAIN.SYSTEM.@UnitInit
   712 					eif
   713 				
   714 					.ifdef MAIN.DOS.@UnitInit
   715 					jsr MAIN.DOS.@UnitInit
   716 					eif
   717 				
   718 					.ifdef MAIN.STRUTILS.@UnitInit
   719 					jsr MAIN.STRUTILS.@UnitInit
   720 					eif
   721 				
   722 					.ifdef MAIN.SYSUTILS.@UnitInit
   723 					jsr MAIN.SYSUTILS.@UnitInit
   724 					eif
   725 				
   726 					.ifdef MAIN.ATARI.@UnitInit
   727 					jsr MAIN.ATARI.@UnitInit
   728 					eif
   729 				
   730 					.ifdef MAIN.CRT.@UnitInit
   731 					jsr MAIN.CRT.@UnitInit
   732 					eif
   733 				.endm
   734
   735 				; ------------------------------------------------------------
   736
   737 					ift .SIZEOF(MAIN.SYSTEM) > 0
   738 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   738 				SYSTEM: $23DC..$23DF
   739 					eif
   740
   741 					ift .SIZEOF(MAIN.DOS) > 0
   742 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   743 					eif
   744
   745 					ift .SIZEOF(MAIN.STRUTILS) > 0
   746 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   747 					eif
   748
   749 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   750 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   750 				SYSUTILS: $23E0..$247B
   751 					eif
   752
   753 					ift .SIZEOF(MAIN.ATARI) > 0
   754 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   755 					eif
   756
   757 					ift .SIZEOF(MAIN.CRT) > 0
   758 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   758 				CRT: $247C..$248C
   759 					eif
   760
   761 					.print 'CODE: ',CODEORIGIN,'..',*-1
   761 				CODE: $2000..$262C
   762
   763 				; ------------------------------------------------------------
   764
   765 262D			DATAORIGIN
   766 262D 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   767
   768 = 0006			VARINITSIZE	= *-DATAORIGIN
   769 = 0055			VARDATASIZE	= 85
   770
   771 = 2682			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   772
   773 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   773 				DATA: $262D..$2682
   774
   775 02E0-02E1> BD 23			run START
   776
   777 				; ------------------------------------------------------------
   778
   779 				.macro	STATICDATA
   780 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $11 $45 $66  $66 $65 $63 $74 $75 $73 $20 $65
   781 				.by  $78 $61 $6D $70 $6C $65 $3A $00  $00 $00 $21 $4E $75 $6D $62 $65  $72 $20 $74 $6F $20 $73 $74 $72
   782 				.by  $69 $6E $67 $20 $63 $6F $6E $76  $65 $72 $73 $69 $6F $6E $20 $75  $73 $69 $6E $67 $00 $1D $53 $74
   783 				.by  $72 $42 $2C $53 $74 $72 $49 $20  $61 $6E $64 $20 $53 $74 $72 $43  $20 $70 $72 $6F $63 $65 $64 $75
   784 				.by  $72 $65 $73 $00 $08 $73 $74 $72  $6E $75 $6D $31 $3D $00 $08 $73  $74 $72 $6E $75 $6D $32 $3D $00
   785 				.by  $08 $73 $74 $72 $6E $75 $6D $33  $3D $00 $24 $53 $74 $72 $69 $6E  $67 $20 $74 $6F $20 $6E $75 $6D
   786 				.by  $62 $65 $72 $20 $63 $6F $6E $76  $65 $72 $73 $69 $6F $6E $20 $62  $79 $20 $75 $73 $69 $6E $67 $00
   787 				.by  $12 $56 $61 $6C $42 $2C $56 $61  $6C $49 $20 $61 $6E $64 $20 $56  $61 $6C $43 $00 $03 $31 $30 $30
   788 				.by  $00 $05 $6E $75 $6D $31 $3D $00  $04 $31 $35 $30 $30 $00 $05 $6E  $75 $6D $32 $3D $00 $05 $34 $34
   789 				.by  $36 $31 $31 $00 $05 $6E $75 $6D  $33 $3D $00
   790 				.endm
   791
   792 					end
