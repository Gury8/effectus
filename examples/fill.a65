; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.4 [2020/06/20] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

fxptr	.ds 2						; VBXE pointer
psptr	.ds 2						; PROGRAMSTACK Pointer

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4
bp	.ds 2
bp2	.ds 2

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1

FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.endif

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502.asm'

.print 'ZPAGE: ',fxptr,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	eif

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #0
	sta:rne VADR+VLEN-256,x+
	eli VLEN>0
	@fill #VADR #VLEN #0
	eif

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.endif

	mwa #PROGRAMSTACK psptr

	ldx #$0f					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0012

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x VALUE
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x A
	mva :STACKORIGIN+STACKWIDTH,x A+1
	dex

; ---------------------  ASM Block 021  ---------------------

	ldy #0
	mva value (edx),y


; ------------------------------------------------------------

A	= edx
VALUE	= ecx
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	MOVE_0054					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x COUNT
	mva :STACKORIGIN+STACKWIDTH,x COUNT+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x DEST
	mva :STACKORIGIN+STACKWIDTH,x DEST+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x SOURCE
	mva :STACKORIGIN+STACKWIDTH,x SOURCE+1
	dex

; ---------------------  ASM Block 032  ---------------------

	jsr @move


; ------------------------------------------------------------

SOURCE	= edx
DEST	= ecx
COUNT	= eax
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
TVSYSTEM	= $D014
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

RTCLOK	= $12
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
SKSTAT	= $D20F
PORTB	= $D301
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$000B
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
BLUE	= $01
GREEN	= $02
CYAN	= $03
RED	= $04
MAGENTA	= $05
BROWN	= $06
LIGHTGRAY	= $07
DARKGRAY	= $08
LIGHTBLUE	= $09
LIGHTGREEN	= $0A
LIGHTCYAN	= $0B
LIGHTRED	= $0C
LIGHTMAGENTA	= $0D
YELLOW	= $0E
WHITE	= $0F
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	TYPES						; UNIT

; ------------------------------------------------------------

.endl							; UNIT TYPES

; ------------------------------------------------------------

.local	GRAPH						; UNIT

.local	INITGRAPH_0084					; PROCEDURE | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x MODE
	dex

; ---------------------  ASM Block 060  ---------------------


	txa:pha

	lda mode
	sta MAIN.SYSTEM.GraphMode
	and #$0f
	tay

	ldx #$60		; 6*16
	lda mode		; %00010000 with text window
	and #$10
	eor #$10
	ora #2			; read

	.nowarn @GRAPHICS

	sty GraphResult


	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.endif

tlshc	equ $ee6d

	ldx dindex
	ldy tlshc,x
	lda #5
shift	asl @
	dey
	bne shift

	sta SCANLINE_WIDTH

; Fox/TQA

dindex	equ $57
tmccn	equ $ee7d
tmrcn	equ $ee8d

	ldx dindex
	lda tmccn,x
	ldy tmrcn,x
	ldx #0
	cmp #<320
	sne:inx

; X:A = horizontal resolution
; Y = vertical resolution

	@SCREENSIZE

	.ifdef MAIN.@DEFINES.ROMOFF
	dec portb
	.endif

	pla:tax


; optimize OK (GRAPH), line = 132

	mva ATARI.SAVMSC VIDEORAM
	mva ATARI.SAVMSC+1 VIDEORAM+1

; ------------------------------------------------------------

MODE	= DATAORIGIN+$0029

@VarData	= MODE
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	SETCOLOR					; PROCEDURE | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x COLOR
	dex

; ---------------------  ASM Block 062  ---------------------

	mva color @COMMAND.colscr
	sta GetColor


; ------------------------------------------------------------

COLOR	= DATAORIGIN+$002A

@VarData	= COLOR
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	PUTPIXEL_0094					; PROCEDURE | ASSEMBLER | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x Y
	mva :STACKORIGIN+STACKWIDTH,x Y+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x X
	mva :STACKORIGIN+STACKWIDTH,x X+1
	dex

; ---------------------  ASM Block 063  ---------------------

	txa:pha
{
	lda y+1
	bmi stop
	cmp MAIN.SYSTEM.ScreenHeight+1
	bne sk0
	lda y
	cmp MAIN.SYSTEM.ScreenHeight
sk0
	bcs stop

	lda x+1
	bmi stop
	cmp MAIN.SYSTEM.ScreenWidth+1
	bne sk1
	lda x
	cmp MAIN.SYSTEM.ScreenWidth
sk1
	bcs stop

	mwa x colcrs
	mva y rowcrs

;	lda #@IDput		; slower
;	jsr @COMMAND

	ldx @COMMAND.scrchn	; faster
	lda @COMMAND.colscr

	m@call	@putchar.main

stop	pla:tax


; ------------------------------------------------------------

X	= DATAORIGIN+$002B
Y	= DATAORIGIN+$002D

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	GETPIXEL					; FUNCTION | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x Y
	mva :STACKORIGIN+STACKWIDTH,x Y+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x X
	mva :STACKORIGIN+STACKWIDTH,x X+1
	dex

; ---------------------  ASM Block 065  ---------------------

	txa:pha

	ldy #0

	lda y+1
	bmi stop
	cmp MAIN.SYSTEM.ScreenHeight+1
	bne sk0
	lda y
	cmp MAIN.SYSTEM.ScreenHeight
sk0
	bcs stop

	lda x+1
	bmi stop
	cmp MAIN.SYSTEM.ScreenWidth+1
	bne sk1
	lda x
	cmp MAIN.SYSTEM.ScreenWidth
sk1
	bcs stop

	mwa x colcrs
	mva y rowcrs

	lda #@IDget

	jsr @COMMAND
	tay

stop	sty Result

	pla:tax

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

X	= DATAORIGIN+$002F
Y	= DATAORIGIN+$0031
RESULT	= DATAORIGIN+$0033

@VarData	= X
@VarDataSize	= 5

	rts						; ret
.endl

.local	MOVETO						; PROCEDURE | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x Y
	mva :STACKORIGIN+STACKWIDTH,x Y+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x X
	mva :STACKORIGIN+STACKWIDTH,x X+1
	dex

; ---------------------  ASM Block 066  ---------------------

	lda y+1
	bpl _0

	lda #0
	sta y
	sta y+1
_0
	lda x+1
	bpl _1

	lda #0
	sta x
	sta x+1
_1
	cpw y main.system.ScreenHeight
	bcc _2

	sbw main.system.ScreenHeight #1 y
_2
	cpw x main.system.ScreenWidth
	bcc _3

	sbw main.system.ScreenWidth #1 x
_3
	mwa x CurrentX
	mwa y CurrentY


; ------------------------------------------------------------

X	= DATAORIGIN+$0034
Y	= DATAORIGIN+$0036

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	LINETO						; PROCEDURE | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x Y
	mva :STACKORIGIN+STACKWIDTH,x Y+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x X
	mva :STACKORIGIN+STACKWIDTH,x X+1
	dex

; ---------------------  ASM Block 067  ---------------------

	lda y+1
	bpl _0

	lda #0
	sta y
	sta y+1
_0
	lda x+1
	bpl _1

	lda #0
	sta x
	sta x+1
_1
	cpw y main.system.ScreenHeight
	bcc _2

	sbw main.system.ScreenHeight #1 y
_2
	cpw x main.system.ScreenWidth
	bcc _3

	sbw main.system.ScreenWidth #1 x
_3
	txa:pha

	mwa CurrentX colcrs
	mva CurrentY rowcrs

;	lda #@IDput		; slower
;	jsr @COMMAND

	ldx @COMMAND.scrchn	; faster
	lda @COMMAND.colscr

	m@call	@putchar.main

	lda x
	sta colcrs
	sta CurrentX
	lda x+1
	sta colcrs+1
	sta CurrentX+1

	mva y rowcrs
	sta CurrentY
	lda y+1
	sta CurrentY+1

	lda #@IDdraw

	jsr @COMMAND

	pla:tax


; ------------------------------------------------------------

X	= DATAORIGIN+$0038
Y	= DATAORIGIN+$003A

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	FLOODFILL					; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x NEWCOLOR
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x B
	mva :STACKORIGIN+STACKWIDTH,x B+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x A
	mva :STACKORIGIN+STACKWIDTH,x A+1
	dex

	jmp l_00EC

.local	FLOODFILLEXEC					; PROCEDURE

; --- For

; optimize OK (graph.inc), line = 718

	mva #$00 I

; optimize OK (graph.inc), line = 718

l_00F8
; --- ForToDoCondition

; optimize OK (graph.inc), line = 718

	lda I
	cmp #$04
	jcs l_0106

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva I :STACKORIGIN,x

; GenerateCaseProlog
	dex

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	jne l_0112
@

; optimize OK (graph.inc), line = 723

	lda A
	add #$01
	sta XR
	lda A+1
	adc #$00
	sta XR+1

; optimize OK (graph.inc), line = 724

	mva B YR
	mva B+1 YR+1

; optimize OK (graph.inc), line = 726

	ldy #1
	.LOCAL
	lda XR+1
	sub SYSTEM.SCREENWIDTH+1
	bne L4
	lda XR
	cmp SYSTEM.SCREENWIDTH
	beq L5
	lda #$00
	adc #$FF
	ora #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	bmi @+
	dey
@
	sty YES

; GenerateCaseStatementEpilog
	jmp a_0002
l_0112

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #1
	jne l_0135
@

; optimize OK (graph.inc), line = 730

	lda A
	sub #$01
	sta XR
	lda A+1
	sbc #$00
	sta XR+1

; optimize OK (graph.inc), line = 733

	ldy #1
	lda XR+1
	bpl @+
	dey
@
	sty YES

; GenerateCaseStatementEpilog
	jmp a_0002
l_0135

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #2
	jne l_0152
@

; optimize OK (graph.inc), line = 737

	mva A XR
	mva A+1 XR+1

; optimize OK (graph.inc), line = 738

	lda B
	add #$01
	sta YR
	lda B+1
	adc #$00
	sta YR+1

; optimize OK (graph.inc), line = 740

	ldy #1
	.LOCAL
	lda YR+1
	sub SYSTEM.SCREENHEIGHT+1
	bne L4
	lda YR
	cmp SYSTEM.SCREENHEIGHT
	beq L5
	lda #$00
	adc #$FF
	ora #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	bmi @+
	dey
@
	sty YES

; GenerateCaseStatementEpilog
	jmp a_0002
l_0152

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #3
	jne l_0175
@

; optimize OK (graph.inc), line = 745

	lda B
	sub #$01
	sta YR
	lda B+1
	sbc #$00
	sta YR+1

; optimize OK (graph.inc), line = 747

	ldy #1
	lda YR+1
	bpl @+
	dey
@
	sty YES

; GenerateCaseStatementEpilog
	jmp a_0002
l_0175

; GenerateCaseEpilog
a_0002

; optimize OK (graph.inc), line = 753

	lda YES
	jeq l_019D

; optimize FAIL ('GETPIXEL', graph.inc), line = 754
	inx
	mva XR :STACKORIGIN,x
	mva XR+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva YR :STACKORIGIN,x
	mva YR+1 :STACKORIGIN+STACKWIDTH,x
	jsr GETPIXEL
	dex
	lda :STACKORIGIN+1,x
	cmp OLDCOLOR
	jne l_01B4
@

; optimize FAIL ('PUTPIXEL_0094', graph.inc), line = 756
	inx
	mva XR :STACKORIGIN,x
	mva XR+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva YR :STACKORIGIN,x
	mva YR+1 :STACKORIGIN+STACKWIDTH,x
	jsr PUTPIXEL_0094

; optimize FAIL (0, graph.inc), line = 758
	inc STACKENTRY
	sne
	inc STACKENTRY+1

; optimize OK (graph.inc), line = 760

	lda STACKENTRY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda STACKENTRY
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	add FLOODFILLSTACK
	sta :bp2
	lda FLOODFILLSTACK+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda YR
	sta (:bp2),y
	iny
	lda YR+1
	sta (:bp2),y
	iny
	lda XR
	sta (:bp2),y
	iny
	lda XR+1
	sta (:bp2),y
l_01B4
l_019D

; --- ForToDoEpilog
	inc I						; inc ptr byte [CounterAddress]
	jne l_00F8
l_0106

; ------------------------------------------------------------

I	= DATAORIGIN+$084A
XR	= DATAORIGIN+$084B
YR	= DATAORIGIN+$084D
YES	= DATAORIGIN+$084F
@FORTMP_00F5	= $03

@VarData	= I
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl
l_00EC

; optimize FAIL ('SETCOLOR', graph.inc), line = 771
	inx
	mva NEWCOLOR :STACKORIGIN,x
	jsr SETCOLOR

; optimize FAIL ('GETPIXEL', graph.inc), line = 773
	inx
	mva A :STACKORIGIN,x
	mva A+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva B :STACKORIGIN,x
	mva B+1 :STACKORIGIN+STACKWIDTH,x
	jsr GETPIXEL
	mva :STACKORIGIN,x OLDCOLOR
	dex

; optimize OK (graph.inc), line = 775

	mva #$01 STACKENTRY
	mva #$00 STACKENTRY+1

; optimize OK (graph.inc), line = 776

	mva #$01 STACKPOINTER
	mva #$00 STACKPOINTER+1

; optimize OK (graph.inc), line = 778

	lda STACKENTRY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda STACKENTRY
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	add FLOODFILLSTACK
	sta :bp2
	lda FLOODFILLSTACK+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda B
	sta (:bp2),y
	iny
	lda B+1
	sta (:bp2),y
	iny
	lda A
	sta (:bp2),y
	iny
	lda A+1
	sta (:bp2),y

; optimize FAIL ('FLOODFILLEXEC', graph.inc), line = 780
	jsr FLOODFILLEXEC

; --- WhileProlog
	jmp l_01FF
l_0200

; optimize FAIL (0, graph.inc), line = 784
	inc STACKPOINTER
	sne
	inc STACKPOINTER+1

; optimize OK (graph.inc), line = 786

	lda STACKPOINTER+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda STACKPOINTER
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	add FLOODFILLSTACK
	sta :bp2
	lda FLOODFILLSTACK+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta C
	iny
	lda (:bp2),y
	sta C+1
	iny
	lda (:bp2),y
	sta C+2
	iny
	lda (:bp2),y
	sta C+3

; optimize OK (graph.inc), line = 788

	sta A+1
	lda C+2
	sta A

; optimize OK (graph.inc), line = 789

	mva C B
	mva C+1 B+1

; optimize FAIL ('FLOODFILLEXEC', graph.inc), line = 791
	jsr FLOODFILLEXEC

; optimize OK (graph.inc), line = 793

	lda STACKENTRY+1
	cmp #$01
	bne @+
	lda STACKENTRY
	cmp #$01
@
	jcc l_0224

; optimize OK (graph.inc), line = 795

	lda STACKENTRY
	sub STACKPOINTER
	sta STACKENTRY
	lda STACKENTRY+1
	sbc STACKPOINTER+1
	sta STACKENTRY+1

; optimize OK (graph.inc), line = 797

	cmp #$01
	bne @+
	lda STACKENTRY
	cmp #$01
@
	jcc l_0240

	jmp @exit					; exit
l_0240

; optimize OK (graph.inc), line = 799

	lda STACKPOINTER
	add #$01
	sta :STACKORIGIN+9
	lda STACKPOINTER+1
	adc #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda FLOODFILLSTACK
	add :STACKORIGIN+9
	sta :edx
	lda FLOODFILLSTACK+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta :edx+1
	lda FLOODFILLSTACK
	add #$04
	sta :ecx
	lda FLOODFILLSTACK+1
	adc #$00
	sta :ecx+1
	lda STACKENTRY+1
	sta :eax+1
	lda STACKENTRY
	asl @
	rol :eax+1
	asl @
	rol :eax+1
	sta :eax
	jsr @move

; optimize OK (graph.inc), line = 801

	mva #$00 STACKPOINTER
	sta STACKPOINTER+1
l_0224
l_01FF

; optimize OK (graph.inc), line = 782

	lda STACKENTRY+1
	cmp STACKPOINTER+1
	bne @+
	lda STACKENTRY
	cmp STACKPOINTER
@
	beq @+
	jcs l_0200
@

; ------------------------------------------------------------

A	= DATAORIGIN+$003C
B	= DATAORIGIN+$003E
NEWCOLOR	= DATAORIGIN+$0040
FILLSTACKSIZE	= $0200
STACKPOINTER	= DATAORIGIN+$0041
STACKENTRY	= DATAORIGIN+$0043
C	= DATAORIGIN+$0045
OLDCOLOR	= DATAORIGIN+$0049
adr.FLOODFILLSTACK	= DATAORIGIN+$004A
.var FLOODFILLSTACK	= adr.FLOODFILLSTACK .word

@VarData	= A
@VarDataSize	= 2062

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------

CURRENTDRIVER	= $80
DETECT	= $00
CGA	= $01
MCGA	= $02
EGA	= $03
EGA64	= $04
EGAMONO	= $05
LOWRES	= $06
HERCMONO	= $07
VGA	= $09
VESA	= $0A
D1BIT	= $0B
D2BIT	= $0C
D4BIT	= $0D
D6BIT	= $0E
D8BIT	= $0F
D12BIT	= $10
M640X400	= $18
M640X480	= $18
GROK	= $01
GRNOINITGRAPH	= $FF
GRNOTDETECTED	= $FE
GRFILENOTFOUND	= $FD
GRINVALIDDRIVER	= $FC
GRNOLOADMEM	= $FB
GRNOSCANMEM	= $FA
GRNOFLOODMEM	= $F9
GRFONTNOTFOUND	= $F8
GRNOFONTMEM	= $F7
GRINVALIDMODE	= $F6
GRERROR	= $F5
GRIOERROR	= $F4
GRINVALIDFONT	= $F3
GRINVALIDFONTNUM	= $F2
GRINVALIDVERSION	= $EE
CGAC0	= $00
CGAC1	= $01
CGAC2	= $02
CGAC3	= $03
CGAHI	= $04
MCGAC0	= $00
MCGAC1	= $01
MCGAC2	= $02
MCGAC3	= $03
MCGAMED	= $04
MCGAHI	= $05
EGALO	= $00
EGAHI	= $01
EGA64LO	= $00
EGA64HI	= $01
EGAMONOHI	= $03
VGALO	= $0A
VGAMED	= $1F
VGAHI	= $18
WIN_LEFT	= DATAORIGIN+$000C
WIN_RIGHT	= DATAORIGIN+$000E
WIN_TOP	= DATAORIGIN+$0010
WIN_BOTTOM	= DATAORIGIN+$0012
GRAPHRESULT	= DATAORIGIN+$0014
GETCOLOR	= DATAORIGIN+$0015
adr.LASTARCCOORDS	= DATAORIGIN+$0016
.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
LASTARCCOORDS.X	= DATAORIGIN+$0016
LASTARCCOORDS.Y	= DATAORIGIN+$0018
LASTARCCOORDS.XSTART	= DATAORIGIN+$001A
LASTARCCOORDS.YSTART	= DATAORIGIN+$001C
LASTARCCOORDS.XEND	= DATAORIGIN+$001E
LASTARCCOORDS.YEND	= DATAORIGIN+$0020
CURRENTX	= DATAORIGIN+$0022
CURRENTY	= DATAORIGIN+$0024
VIDEORAM	= DATAORIGIN+$0026
SCANLINE_WIDTH	= DATAORIGIN+$0028

.endl							; UNIT GRAPH

.local	MAINPROC					; PROCEDURE

; optimize FAIL ('GRAPH.INITGRAPH_0084', examples\fill.pas), line = 14
	inx
	mva #$07 :STACKORIGIN,x
	jsr GRAPH.INITGRAPH_0084

; optimize FAIL (100, examples\fill.pas), line = 15
	@printSTRING #CODEORIGIN+$0000
	@printEOL

; optimize OK (examples\fill.pas), line = 16

	lda #$0F
	sta $02C8

; optimize FAIL ('GRAPH.SETCOLOR', examples\fill.pas), line = 17
	inx
	mva #$02 :STACKORIGIN,x
	jsr GRAPH.SETCOLOR

; optimize FAIL ('GRAPH.PUTPIXEL_0094', examples\fill.pas), line = 18
	inx
	mva #$14 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$03 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_0094

; optimize FAIL ('GRAPH.MOVETO', examples\fill.pas), line = 19
	inx
	mva #$14 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$03 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.MOVETO

; optimize FAIL ('GRAPH.LINETO', examples\fill.pas), line = 20
	inx
	mva #$78 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$03 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINETO

; optimize FAIL ('GRAPH.LINETO', examples\fill.pas), line = 21
	inx
	mva #$78 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$14 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINETO

; optimize FAIL ('GRAPH.LINETO', examples\fill.pas), line = 22
	inx
	mva #$14 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$14 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINETO

; optimize FAIL ('GRAPH.LINETO', examples\fill.pas), line = 23
	inx
	mva #$14 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$03 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINETO

; optimize OK (examples\fill.pas), line = 24

	lda #$03
	sta $02FD

; optimize FAIL ('GRAPH.FLOODFILL', examples\fill.pas), line = 25
	inx
	mva #$32 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$1E :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$02 :STACKORIGIN,x
	jsr GRAPH.FLOODFILL

; optimize FAIL ('GRAPH.SETCOLOR', examples\fill.pas), line = 26
	inx
	mva #$03 :STACKORIGIN,x
	jsr GRAPH.SETCOLOR

; optimize FAIL ('GRAPH.PUTPIXEL_0094', examples\fill.pas), line = 27
	inx
	mva #$32 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$23 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.PUTPIXEL_0094

; optimize FAIL ('GRAPH.MOVETO', examples\fill.pas), line = 28
	inx
	mva #$32 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$23 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.MOVETO

; optimize FAIL ('GRAPH.LINETO', examples\fill.pas), line = 29
	inx
	mva #$92 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$23 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINETO

; optimize FAIL ('GRAPH.LINETO', examples\fill.pas), line = 30
	inx
	mva #$92 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$46 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINETO

; optimize FAIL ('GRAPH.LINETO', examples\fill.pas), line = 31
	inx
	mva #$32 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$46 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINETO

; optimize FAIL ('GRAPH.LINETO', examples\fill.pas), line = 32
	inx
	mva #$32 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$23 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr GRAPH.LINETO

; optimize OK (examples\fill.pas), line = 33

	lda #$01
	sta $02FD

; optimize FAIL ('GRAPH.FLOODFILL', examples\fill.pas), line = 34
	inx
	mva #$41 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$32 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$03 :STACKORIGIN,x
	jsr GRAPH.FLOODFILL

; optimize FAIL (100, examples\fill.pas), line = 35
	@print #$7D

; optimize FAIL (100, examples\fill.pas), line = 36
	@printSTRING #CODEORIGIN+$0000
	@printEOL

; --- RepeatUntilProlog
l_02C2

; optimize OK (examples\fill.pas), line = 38

	jmp l_02C2
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl
l_0012

; optimize FAIL ('MAINPROC', examples\fill.pas), line = 42
	jsr MAINPROC

; ------------------------------------------------------------

@exit

@halt	ldx #0
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.endif

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	eif

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	eif

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	eif

	.ifdef MAIN.TYPES.@UnitInit
	jsr MAIN.TYPES.@UnitInit
	eif

	.ifdef MAIN.GRAPH.@UnitInit
	jsr MAIN.GRAPH.@UnitInit
	eif
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.TYPES) > 0
	.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
	eif

	ift .SIZEOF(MAIN.GRAPH) > 0
	.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',*-1

; ------------------------------------------------------------

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $27 $00  $00 $00 $17

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 2128

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $09 $46 $49 $4C $4C $20 $54 $45  $53 $54 $00
.endm

	end
