mads 2.1.0 build 8 (23 Dec 19)
   388 					opt l+
   101
   102 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   102 				ZPAGE: $0080..$00D7
   103
   104 				.print 'RTLIB: ',RTLIB,'..',*-1
   104 				RTLIB: $2044..$21B5
   105
   106 				; ------------------------------------------------------------
   107
   108 21B6			START
   109 21B6 BA				tsx
   110 21B7 8E 45 24			stx MAIN.@halt+1
   111
   112 					.ifdef fmulinit
   113 					fmulinit
   114 					eif
   115
   116 = 0544			VLEN	= VARDATASIZE-VARINITSIZE
   117 = 2460			VADR	= DATAORIGIN+VARINITSIZE
   118
   119 					ift VADR > $BFFF
   120 					ert 'Invalid memory address range ',VADR
   121 					eli (VLEN>0) && (VLEN<=256)
   122 					ldx #256-VLEN
   123 					lda #0
   124 					sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>0
   126 					@fill #VADR #VLEN #0
   126 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   126 21BA A9 60 85 88 A9 24 +  MWA #VADR @FILL.PTR1
   126 21C2 A9 44 85 8C A9 05 +  MWA #VLEN @FILL.PTR3
   126 21CA A9 00 85 84		 MVA #0 @FILL.PTR2
   126 21CE 20 E7 20		 JSR @FILL
   127 					eif
   128
   129 					.ifdef MAIN.@DEFINES.ROMOFF
   130 					icl 'atari\romoff.asm'
   131 					.endif
   132
   133 21D1 A9 A4 85 82 A9 29 + 	mwa #PROGRAMSTACK psptr
   134
   135 21D9 A2 0F			ldx #$0f					; DOS II+/D ParamStr
   136 21DB BD 40 03 9D 48 24 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   137
   138 21E4 E8				inx						; X = 0
   139 21E5 86 90			stx bp						; BP = 0
   140
   141 21E7 8E 08 D2			stx audctl					; reset POKEY
   142 21EA A9 03			lda #3
   143 21EC 8D 0F D2			sta skctl
   144
   145 21EF CA				dex						; X = 255
   146
   147 21F0				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: strman.a65]
Source: strman.a65
   148
   149 21F0			.local	MAIN						; PROCEDURE
   150
   151 21F0 4C 41 24			jmp l_004B
   152
   153 				; ------------------------------------------------------------
   154
   155 21F3			.local	SYSTEM						; UNIT
   156
   157 21F3			.local	CONCAT_009A					; FUNCTION | ASSEMBLER | OVERLOAD
   158
   159 				; ------------------------------------------------------------
   160
   161 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   162 				; as Pointer
   163 21F3 B5 98 85 92			mva :STACKORIGIN,x :bp2
   164 21F7 B5 A8 85 93			mva :STACKORIGIN+STACKWIDTH,x :bp2+1
   165 21FB A0 00			ldy #$00
   166 21FD B1 92 99 65 25 C8 + 	mva:rne (:bp2),y adr.B,y+
   167 2205 A9 65 8D 6B 22 A9 + 	mwa #adr.B B
   168 220F CA				dex
   169
   170 				; ------------------------------------------------------------
   171
   172 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   173 				; as Pointer
   174 2210 B5 98 85 92			mva :STACKORIGIN,x :bp2
   175 2214 B5 A8 85 93			mva :STACKORIGIN+STACKWIDTH,x :bp2+1
   176 2218 A0 00			ldy #$00
   177 221A B1 92 99 65 24 C8 + 	mva:rne (:bp2),y adr.A,y+
   178 2222 A9 65 8D 69 22 A9 + 	mwa #adr.A A
   179 222C CA				dex
   180
   181 				; ---------------------  ASM Block 043  ---------------------
   182
   183 222D AD 6A 22 C9 04 D0 + 	cpw a #@buf
   184 2239 F0 0E			beq skp
   185
   186 223B A9 00 8D 00 04		mva #0 @buf
   187 					@addString a
   187 				 LDY A+1\ LDA A\ JSR @ADDSTRING
   187 2240 AC 6A 22		 LDY A+1
   187 2243 AD 69 22		 LDA A
   187 2246 20 4C 21		 JSR @ADDSTRING
   188 2249			skp
   189 					@addString b
   189 				 LDY B+1\ LDA B\ JSR @ADDSTRING
   189 2249 AC 6C 22		 LDY B+1
   189 224C AD 6B 22		 LDA B
   189 224F 20 4C 21		 JSR @ADDSTRING
   190
   191 2252 A0 00			ldy #0
   192 2254 B9 00 04 99 65 26 + 	mva:rne @buf,y adr.Result,y+
   193
   194 225D			@exit
   195
   196 				; ------------------------------------------------------------
   197
   198 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   199 				; as Pointer
   200
   201 225D E8				inx
   202 225E AD 6D 22 95 98		mva RESULT :STACKORIGIN,x
   203 2263 AD 6E 22 95 A8		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   204
   205 					.ifdef @new
   206 					lda <@VarData
   207 					sta :ztmp
   208 					lda >@VarData
   209 					ldy #@VarDataSize-1
   210 					jmp @FreeMem
   211 					eif
   212
   213 				; ------------------------------------------------------------
   214
   215 = 2465			adr.A	= DATAORIGIN+$000B
   216 2268			.var A	= adr.A .word
   217 = 2565			adr.B	= DATAORIGIN+$010B
   218 2268			.var B	= adr.B .word
   219 = 2665			adr.RESULT	= DATAORIGIN+$020B
   220 2268			.var RESULT	= adr.RESULT .word
   221
   222 = 2269			@VarData	= A
   223 = 0300			@VarDataSize	= 768
   224
   225 2268 60				rts						; ret
   226 = 2269 65 24		A
   226 = 226B 65 25		B
   226 = 226D 65 26		RESULT
   226 				.endl
   227
   228 226F			.local	COPY						; FUNCTION | ASSEMBLER
   229
   230 				; ------------------------------------------------------------
   231
   232 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   233 				; as Pointer
   234 226F B5 98 8D 68 27		mva :STACKORIGIN,x COUNT
   235 2274 CA				dex
   236
   237 				; ------------------------------------------------------------
   238
   239 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   240 				; as Pointer
   241 2275 B5 98 8D 67 27		mva :STACKORIGIN,x INDEX
   242 227A CA				dex
   243
   244 				; ------------------------------------------------------------
   245
   246 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   247 				; as Pointer
   248 227B B5 98 8D 65 27		mva :STACKORIGIN,x S
   249 2280 B5 A8 8D 66 27		mva :STACKORIGIN+STACKWIDTH,x S+1
   250 2285 CA				dex
   251
   252 				; ---------------------  ASM Block 046  ---------------------
   253
   254 2286 8A 48			txa:pha
   255
   256 2288 AD 65 27 85 92 AD + 	mwa S :bp2
   257 2292 A0 00			ldy #0
   258
   259 2294 AD 67 27			lda Index
   260 2297 D0 02			sne
   261 2299 A9 01			lda #1
   262 229B D1 92			cmp (:bp2),y
   263 229D F0 02			seq
   264 229F B0 3F			bcs stop
   265
   266 22A1 8D 67 27			sta Index
   267 22A4 18 6D 68 27			add Count
   268 22A8 8D B4 22			sta ln
   269 22AB A9 00			lda #$00
   270 22AD 69 00			adc #$00
   271
   272 22AF C9 00			cmp #$00
   273 22B1 D0 04			bne @+
   274 22B3 A9 00			lda #0
   275 = 22B4			ln	equ *-1
   276 22B5 D1 92			cmp (:bp2),y
   277 22B7 F0 0E		@	beq ok
   278 22B9 90 0C			bcc ok
   279
   280 22BB B1 92			lda (:bp2),y
   281 22BD 38 ED 67 27			sub Index
   282 22C1 18 69 01			add #1
   283 22C4 8D 68 27			sta Count
   284
   285 22C7 AD 68 27		ok	lda Count
   286 22CA 8D 69 27			sta adr.Result
   287 22CD F0 11			beq stop
   288
   289 22CF A2 00			ldx #0
   290 22D1 AC 67 27			ldy Index
   291 22D4 B1 92		lp	lda (:bp2),y
   292 22D6 9D 6A 27			sta adr.Result+1,x
   293 22D9 C8				iny
   294 22DA E8				inx
   295 22DB EC 68 27			cpx Count
   296 22DE D0 F4			bne lp
   297 					
   298 22E0 68 AA		stop	pla:tax
   299
   300 22E2			@exit
   301
   302 				; ------------------------------------------------------------
   303
   304 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   305 				; as Pointer
   306
   307 22E2 E8				inx
   308 22E3 AD EE 22 95 98		mva RESULT :STACKORIGIN,x
   309 22E8 AD EF 22 95 A8		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   310
   311 					.ifdef @new
   312 					lda <@VarData
   313 					sta :ztmp
   314 					lda >@VarData
   315 					ldy #@VarDataSize-1
   316 					jmp @FreeMem
   317 					eif
   318
   319 				; ------------------------------------------------------------
   320
   321 = 2765			S	= DATAORIGIN+$030B
   322 = 2767			INDEX	= DATAORIGIN+$030D
   323 = 2768			COUNT	= DATAORIGIN+$030E
   324 = 2769			adr.RESULT	= DATAORIGIN+$030F
   325 22ED			.var RESULT	= adr.RESULT .word
   326
   327 = 2765			@VarData	= S
   328 = 0104			@VarDataSize	= 260
   329
   330 22ED 60				rts						; ret
   331 = 22EE 69 27		RESULT
   331 				.endl
   332
   333 				; ------------------------------------------------------------
   334
   335 = 0101			__PORTB_BANKS	= $0101
   336 = 0648			M_PI_2	= $0648
   337 = 0192			D_PI_2	= $0192
   338 = 0004			D_PI_180	= $04
   339 = 0000			MGTIA	= $00
   340 = 0080			MVBXE	= $80
   341 = 0000			VBXE_XDLADR	= $00
   342 = 0100			VBXE_BCBADR	= $0100
   343 = 1000			VBXE_MAPADR	= $1000
   344 = 5000			VBXE_OVRADR	= $5000
   345 = B000			VBXE_WINDOW	= $B000
   346 = 0000			IDLI	= $00
   347 = 0001			IVBL	= $01
   348 = 00FE			CH_DELCHR	= $FE
   349 = 009B			CH_ENTER	= $9B
   350 = 001B			CH_ESC	= $1B
   351 = 001C			CH_CURS_UP	= $1C
   352 = 001D			CH_CURS_DOWN	= $1D
   353 = 001E			CH_CURS_LEFT	= $1E
   354 = 001F			CH_CURS_RIGHT	= $1F
   355 = 007F			CH_TAB	= $7F
   356 = 009B			CH_EOL	= $9B
   357 = 007D			CH_CLR	= $7D
   358 = 00FD			CH_BELL	= $FD
   359 = 007E			CH_DEL	= $7E
   360 = 009C			CH_DELLINE	= $9C
   361 = 009D			CH_INSLINE	= $9D
   362 = 0000			COLOR_BLACK	= $00
   363 = 000E			COLOR_WHITE	= $0E
   364 = 0032			COLOR_RED	= $32
   365 = 0096			COLOR_CYAN	= $96
   366 = 0068			COLOR_VIOLET	= $68
   367 = 00C4			COLOR_GREEN	= $C4
   368 = 0074			COLOR_BLUE	= $74
   369 = 00EE			COLOR_YELLOW	= $EE
   370 = 0028			COLOR_ORANGE	= $28
   371 = 00E4			COLOR_BROWN	= $E4
   372 = 003C			COLOR_LIGHTRED	= $3C
   373 = 0004			COLOR_GRAY1	= $04
   374 = 0006			COLOR_GRAY2	= $06
   375 = 000A			COLOR_GRAY3	= $0A
   376 = 00CC			COLOR_LIGHTGREEN	= $CC
   377 = 007C			COLOR_LIGHTBLUE	= $7C
   378 = 0004			FMOPENREAD	= $04
   379 = 0008			FMOPENWRITE	= $08
   380 = 0009			FMOPENAPPEND	= $09
   381 = 000C			FMOPENREADWRITE	= $0C
   382 = 245A			SCREENWIDTH	= DATAORIGIN+$0000
   383 = 245C			SCREENHEIGHT	= DATAORIGIN+$0002
   384 = 245E			DATESEPARATOR	= DATAORIGIN+$0004
   385 = D014			TVSYSTEM	= $D014
   386 = 02C0			adr.PALETTE	= $02C0
   387 22F0			.var PALETTE	= adr.PALETTE .word
   388 = D012			adr.HPALETTE	= $D012
   389 22F0			.var HPALETTE	= adr.HPALETTE .word
   390 = 245F			FILEMODE	= DATAORIGIN+$0005
   391 = 2460			GRAPHMODE	= DATAORIGIN+$0006
   392 = 2461			IORESULT	= DATAORIGIN+$0007
   393 = 2462			EOLN	= DATAORIGIN+$0008
   394 = 2463			RNDSEED	= DATAORIGIN+$0009
   395
   396 = 22F0 C0 02		PALETTE
   396 = 22F2 12 D0		HPALETTE
   396 				.endl							; UNIT SYSTEM
   397
   398 				; ------------------------------------------------------------
   399
   400 22F4			.local	ATARI						; UNIT
   401
   402 				; ------------------------------------------------------------
   403
   404 = 0012			RTCLOK	= $12
   405 = 004D			ATRACT	= $4D
   406 = 0052			LMARGIN	= $52
   407 = 0053			RMARGIN	= $53
   408 = 0054			ROWCRS	= $54
   409 = 0055			COLCRS	= $55
   410 = 0057			DINDEX	= $57
   411 = 0058			SAVMSC	= $58
   412 = 0062			PALNTS	= $62
   413 = 006A			RAMTOP	= $6A
   414 = 0200			VDSLST	= $0200
   415 = 0230			SDLSTL	= $0230
   416 = 0290			TXTROW	= $0290
   417 = 0291			TXTCOL	= $0291
   418 = 0293			TINDEX	= $0293
   419 = 0294			TXTMSC	= $0294
   420 = 022F			SDMCTL	= $022F
   421 = 026F			GPRIOR	= $026F
   422 = 02F0			CRSINH	= $02F0
   423 = 02F3			CHACT	= $02F3
   424 = 02F4			CHBAS	= $02F4
   425 = 02FC			CH	= $02FC
   426 = 02C0			PCOLR0	= $02C0
   427 = 02C1			PCOLR1	= $02C1
   428 = 02C2			PCOLR2	= $02C2
   429 = 02C3			PCOLR3	= $02C3
   430 = 02C4			COLOR0	= $02C4
   431 = 02C5			COLOR1	= $02C5
   432 = 02C6			COLOR2	= $02C6
   433 = 02C7			COLOR3	= $02C7
   434 = 02C8			COLOR4	= $02C8
   435 = 02C8			COLBAKS	= $02C8
   436 = D000			HPOSP0	= $D000
   437 = D001			HPOSP1	= $D001
   438 = D002			HPOSP2	= $D002
   439 = D003			HPOSP3	= $D003
   440 = D004			HPOSM0	= $D004
   441 = D005			HPOSM1	= $D005
   442 = D006			HPOSM2	= $D006
   443 = D007			HPOSM3	= $D007
   444 = D008			SIZEP0	= $D008
   445 = D009			SIZEP1	= $D009
   446 = D00A			SIZEP2	= $D00A
   447 = D00B			SIZEP3	= $D00B
   448 = D00C			SIZEM	= $D00C
   449 = D00D			GRAFP0	= $D00D
   450 = D00E			GRAFP1	= $D00E
   451 = D00F			GRAFP2	= $D00F
   452 = D010			GRAFP3	= $D010
   453 = D011			GRAFM	= $D011
   454 = D004			P0PF	= $D004
   455 = D014			PAL	= $D014
   456 = D012			COLPM0	= $D012
   457 = D013			COLPM1	= $D013
   458 = D014			COLPM2	= $D014
   459 = D015			COLPM3	= $D015
   460 = D016			COLPF0	= $D016
   461 = D017			COLPF1	= $D017
   462 = D018			COLPF2	= $D018
   463 = D019			COLPF3	= $D019
   464 = D01A			COLBK	= $D01A
   465 = D01B			PRIOR	= $D01B
   466 = D01D			GRACTL	= $D01D
   467 = D01E			HITCLR	= $D01E
   468 = D200			AUDF1	= $D200
   469 = D201			AUDC1	= $D201
   470 = D202			AUDF2	= $D202
   471 = D203			AUDC2	= $D203
   472 = D204			AUDF3	= $D204
   473 = D205			AUDC3	= $D205
   474 = D206			AUDF4	= $D206
   475 = D207			AUDC4	= $D207
   476 = D208			AUDCTL	= $D208
   477 = D20F			SKSTAT	= $D20F
   478 = D301			PORTB	= $D301
   479 = D400			DMACTL	= $D400
   480 = D401			CHACTL	= $D401
   481 = D402			DLISTL	= $D402
   482 = D404			HSCROL	= $D404
   483 = D405			VSCROL	= $D405
   484 = D407			PMBASE	= $D407
   485 = D409			CHBASE	= $D409
   486 = D40A			WSYNC	= $D40A
   487 = D40B			VCOUNT	= $D40B
   488 = D40C			PENH	= $D40C
   489 = D40D			PENV	= $D40D
   490 = D40E			NMIEN	= $D40E
   491
   492 				.endl							; UNIT ATARI
   493
   494 				; ------------------------------------------------------------
   495
   496 22F4			.local	CRT						; UNIT
   497
   498 22F4			.local	READKEY						; FUNCTION | ASSEMBLER
   499
   500 				; ---------------------  ASM Block 049  ---------------------
   501
   502 22F4 8A 48			txa:pha
   503
   504 22F6 20 44 20			@GetKey
   505
   506 22F9 8D 6A 28			sta Result
   507
   508 22FC 68 AA			pla:tax
   509
   510 22FE			@exit
   511
   512 				; ------------------------------------------------------------
   513
   514 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   515 				; as Pointer
   516
   517 22FE E8				inx
   518 22FF AD 6A 28 95 98		mva RESULT :STACKORIGIN,x
   519
   520 					.ifdef @new
   521 					lda <@VarData
   522 					sta :ztmp
   523 					lda >@VarData
   524 					ldy #@VarDataSize-1
   525 					jmp @FreeMem
   526 					eif
   527
   528 				; ------------------------------------------------------------
   529
   530 = 286A			RESULT	= DATAORIGIN+$0410
   531
   532 = 286A			@VarData	= RESULT
   533 = 0001			@VarDataSize	= 1
   534
   535 2304 60				rts						; ret
   536 				.endl
   537
   538 				; ------------------------------------------------------------
   539
   540 = 2869			TEXTATTR	= DATAORIGIN+$040F
   541 = D01F			CONSOL	= $D01F
   542 = 0000			CN_START_SELECT_OPTION	= $00
   543 = 0001			CN_SELECT_OPTION	= $01
   544 = 0002			CN_START_OPTION	= $02
   545 = 0003			CN_OPTION	= $03
   546 = 0004			CN_START_SELECT	= $04
   547 = 0005			CN_SELECT	= $05
   548 = 0006			CN_START	= $06
   549 = 0007			CN_NONE	= $07
   550 = 0000			BW40	= $00
   551 = 0001			CO40	= $01
   552 = 0002			BW80	= $02
   553 = 0003			CO80	= $03
   554 = 0007			MONO	= $07
   555 = 0001			C40	= $01
   556 = 0003			C80	= $03
   557 = 0000			BLACK	= $00
   558 = 0001			BLUE	= $01
   559 = 0002			GREEN	= $02
   560 = 0003			CYAN	= $03
   561 = 0004			RED	= $04
   562 = 0005			MAGENTA	= $05
   563 = 0006			BROWN	= $06
   564 = 0007			LIGHTGRAY	= $07
   565 = 0008			DARKGRAY	= $08
   566 = 0009			LIGHTBLUE	= $09
   567 = 000A			LIGHTGREEN	= $0A
   568 = 000B			LIGHTCYAN	= $0B
   569 = 000C			LIGHTRED	= $0C
   570 = 000D			LIGHTMAGENTA	= $0D
   571 = 000E			YELLOW	= $0E
   572 = 000F			WHITE	= $0F
   573 = 0080			BLINK	= $80
   574
   575 				.endl							; UNIT CRT
   576
   577 				; ------------------------------------------------------------
   578
   579 2305			.local	DOS						; UNIT
   580
   581 				; ------------------------------------------------------------
   582
   583 = D014			PALNTSC	= $D014
   584
   585 				.endl							; UNIT DOS
   586
   587 				; ------------------------------------------------------------
   588
   589 2305			.local	STRUTILS					; UNIT
   590
   591 				; ------------------------------------------------------------
   592
   593 				.endl							; UNIT STRUTILS
   594
   595 				; ------------------------------------------------------------
   596
   597 2305			.local	SYSUTILS					; UNIT
   598
   599 				; ------------------------------------------------------------
   600
   601 = 0001			FAREADONLY	= $01
   602 = 0002			FAHIDDEN	= $02
   603 = 0004			FASYSFILE	= $04
   604 = 0008			FAVOLUMEID	= $08
   605 = 0010			FADIRECTORY	= $10
   606 = 0020			FAARCHIVE	= $20
   607 = 003F			FAANYFILE	= $3F
   608
   609 				.endl							; UNIT SYSUTILS
   610
   611 				; ------------------------------------------------------------
   612
   613 2305			.local	CIO						; UNIT
   614
   615 2305			.local	GET						; FUNCTION | ASSEMBLER
   616
   617 				; ------------------------------------------------------------
   618
   619 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   620 				; as Pointer
   621 2305 B5 98 8D 6B 28		mva :STACKORIGIN,x CHN
   622 230A CA				dex
   623
   624 				; ---------------------  ASM Block 080  ---------------------
   625
   626 230B 8A 48			txa:pha
   627
   628 230D AD 6B 28			lda chn
   629 2310 0A 0A 0A 0A			:4 asl @
   630 2314 AA				tax
   631
   632 2315 A9 07			lda #7		;get char command
   633 2317 9D 42 03			sta iccmd,x
   634
   635 231A A9 00			lda #$00	;zero out the unused
   636 231C 9D 48 03			sta icbufl,x	;store in accumulator
   637 231F 9D 49 03			sta icbufh,x	;...after CIOV jump
   638
   639 2322				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 2322 20 56 E4				jsr CIOV
Source: strman.a65
   640
   641 2325 8C 61 24			sty MAIN.SYSTEM.IOResult
   642
   643 2328 8D 6C 28			sta Result
   644
   645 232B 68 AA			pla:tax
   646
   647 232D			@exit
   648
   649 				; ------------------------------------------------------------
   650
   651 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   652 				; as Pointer
   653
   654 232D E8				inx
   655 232E AD 6C 28 95 98		mva RESULT :STACKORIGIN,x
   656
   657 					.ifdef @new
   658 					lda <@VarData
   659 					sta :ztmp
   660 					lda >@VarData
   661 					ldy #@VarDataSize-1
   662 					jmp @FreeMem
   663 					eif
   664
   665 				; ------------------------------------------------------------
   666
   667 = 286B			CHN	= DATAORIGIN+$0411
   668 = 286C			RESULT	= DATAORIGIN+$0412
   669
   670 = 286B			@VarData	= CHN
   671 = 0002			@VarDataSize	= 2
   672
   673 2333 60				rts						; ret
   674 				.endl
   675
   676 				; ------------------------------------------------------------
   677
   678 				.endl							; UNIT CIO
   679
   680 2334			.local	MAINPROC					; PROCEDURE
   681
   682 				; optimize FAIL (100, examples\strman.pas), line = 25
   683 					@print #$7D
   683 				 LDY# $7D\ JSR @PRINT
   683 2334 A0 7D		 LDY# $7D
   683 2336 20 7E 21		 JSR @PRINT
   684
   685 				; optimize FAIL (100, examples\strman.pas), line = 26
   686 					@printSTRING #CODEORIGIN+$000D
   686 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   686 2339 A0 20		 LDY> CODEORIGIN+$000D
   686 233B A9 0D		 LDA< CODEORIGIN+$000D
   686 233D 20 87 21		 JSR @PRINTSTRING
   687 2340 20 79 21			@printEOL
   688 2343 A0 EB			ldy #256-21
   689 2345 B9 24 1F 99 83 28 + 	mva:rne CODEORIGIN+$000F+21-256,y adr.STR01+21-256,y+
   690
   691 				; optimize FAIL ('SYSTEM.COPY', examples\strman.pas), line = 28
   692 234E E8				inx
   693 234F AD 3B 24 95 98		mva STR01 :STACKORIGIN,x
   694 2354 AD 3C 24 95 A8		mva STR01+1 :STACKORIGIN+STACKWIDTH,x
   695 2359 E8				inx
   696 235A A9 01 95 98			mva #$01 :STACKORIGIN,x
   697 235E E8				inx
   698 235F A9 05 95 98			mva #$05 :STACKORIGIN,x
   699 2363 20 6F 22			jsr SYSTEM.COPY
   700 					@moveSTRING STR02
   700 				 LDY STR02+1\ LDA STR02\ JSR @MOVESTRING
   700 2366 AC 3E 24		 LDY STR02+1
   700 2369 AD 3D 24		 LDA STR02
   700 236C 20 2F 21		 JSR @MOVESTRING
   701 236F CA				dex
   702
   703 				; optimize FAIL (100, examples\strman.pas), line = 29
   704 					@printSTRING #CODEORIGIN+$0025
   704 				 LDY> CODEORIGIN+$0025\ LDA< CODEORIGIN+$0025\ JSR @PRINTSTRING
   704 2370 A0 20		 LDY> CODEORIGIN+$0025
   704 2372 A9 25		 LDA< CODEORIGIN+$0025
   704 2374 20 87 21		 JSR @PRINTSTRING
   705
   706 				; optimize FAIL (100, examples\strman.pas), line = 30
   707 					@printSTRING STR01
   707 				 LDY STR01+1\ LDA STR01\ JSR @PRINTSTRING
   707 2377 AC 3C 24		 LDY STR01+1
   707 237A AD 3B 24		 LDA STR01
   707 237D 20 87 21		 JSR @PRINTSTRING
   708 2380 20 79 21			@printEOL
   709
   710 				; optimize FAIL (100, examples\strman.pas), line = 31
   711 					@printSTRING #CODEORIGIN+$002D
   711 				 LDY> CODEORIGIN+$002D\ LDA< CODEORIGIN+$002D\ JSR @PRINTSTRING
   711 2383 A0 20		 LDY> CODEORIGIN+$002D
   711 2385 A9 2D		 LDA< CODEORIGIN+$002D
   711 2387 20 87 21		 JSR @PRINTSTRING
   712
   713 				; optimize FAIL (100, examples\strman.pas), line = 32
   714 					@printSTRING STR02
   714 				 LDY STR02+1\ LDA STR02\ JSR @PRINTSTRING
   714 238A AC 3E 24		 LDY STR02+1
   714 238D AD 3D 24		 LDA STR02
   714 2390 20 87 21		 JSR @PRINTSTRING
   715 2393 20 79 21			@printEOL
   716
   717 				; optimize FAIL ('SYSTEM.COPY', examples\strman.pas), line = 33
   718 2396 E8				inx
   719 2397 AD 3B 24 95 98		mva STR01 :STACKORIGIN,x
   720 239C AD 3C 24 95 A8		mva STR01+1 :STACKORIGIN+STACKWIDTH,x
   721 23A1 E8				inx
   722 23A2 A9 07 95 98			mva #$07 :STACKORIGIN,x
   723 23A6 E8				inx
   724 23A7 A9 05 95 98			mva #$05 :STACKORIGIN,x
   725 23AB 20 6F 22			jsr SYSTEM.COPY
   726 					@moveSTRING STR03
   726 				 LDY STR03+1\ LDA STR03\ JSR @MOVESTRING
   726 23AE AC 40 24		 LDY STR03+1
   726 23B1 AD 3F 24		 LDA STR03
   726 23B4 20 2F 21		 JSR @MOVESTRING
   727 23B7 CA				dex
   728
   729 				; optimize FAIL (100, examples\strman.pas), line = 34
   730 					@printSTRING #CODEORIGIN+$0035
   730 				 LDY> CODEORIGIN+$0035\ LDA< CODEORIGIN+$0035\ JSR @PRINTSTRING
   730 23B8 A0 20		 LDY> CODEORIGIN+$0035
   730 23BA A9 35		 LDA< CODEORIGIN+$0035
   730 23BC 20 87 21		 JSR @PRINTSTRING
   731
   732 				; optimize FAIL (100, examples\strman.pas), line = 35
   733 					@printSTRING STR03
   733 				 LDY STR03+1\ LDA STR03\ JSR @PRINTSTRING
   733 23BF AC 40 24		 LDY STR03+1
   733 23C2 AD 3F 24		 LDA STR03
   733 23C5 20 87 21		 JSR @PRINTSTRING
   734 23C8 20 79 21			@printEOL
   735
   736 				; optimize FAIL ('SYSTEM.COPY', examples\strman.pas), line = 36
   737 23CB E8				inx
   738 23CC AD 3B 24 95 98		mva STR01 :STACKORIGIN,x
   739 23D1 AD 3C 24 95 A8		mva STR01+1 :STACKORIGIN+STACKWIDTH,x
   740 23D6 E8				inx
   741 23D7 A9 01 95 98			mva #$01 :STACKORIGIN,x
   742 23DB E8				inx
   743 23DC A9 06 95 98			mva #$06 :STACKORIGIN,x
   744 23E0 20 6F 22			jsr SYSTEM.COPY
   745 23E3 E8				inx
   746 23E4 A9 3D 95 98			mva #$3D :STACKORIGIN,x
   747 23E8 A9 20 95 A8			mva #$20 :STACKORIGIN+STACKWIDTH,x
   748 23EC 20 F3 21			jsr SYSTEM.CONCAT_009A
   749 23EF E8				inx
   750 23F0 AD 3B 24 95 98		mva STR01 :STACKORIGIN,x
   751 23F5 AD 3C 24 95 A8		mva STR01+1 :STACKORIGIN+STACKWIDTH,x
   752 23FA E8				inx
   753 23FB A9 0C 95 98			mva #$0C :STACKORIGIN,x
   754 23FF E8				inx
   755 2400 AD 6E 29			lda adr.STR01
   756 2403 95 98			sta :STACKORIGIN,x
   757 2405 20 6F 22			jsr SYSTEM.COPY
   758 2408 20 F3 21			jsr SYSTEM.CONCAT_009A
   759 					@moveSTRING STR01
   759 				 LDY STR01+1\ LDA STR01\ JSR @MOVESTRING
   759 240B AC 3C 24		 LDY STR01+1
   759 240E AD 3B 24		 LDA STR01
   759 2411 20 2F 21		 JSR @MOVESTRING
   760 2414 CA				dex
   761
   762 				; optimize FAIL (100, examples\strman.pas), line = 37
   763 					@printSTRING #CODEORIGIN+$0025
   763 				 LDY> CODEORIGIN+$0025\ LDA< CODEORIGIN+$0025\ JSR @PRINTSTRING
   763 2415 A0 20		 LDY> CODEORIGIN+$0025
   763 2417 A9 25		 LDA< CODEORIGIN+$0025
   763 2419 20 87 21		 JSR @PRINTSTRING
   764
   765 				; optimize FAIL (100, examples\strman.pas), line = 38
   766 					@printSTRING STR01
   766 				 LDY STR01+1\ LDA STR01\ JSR @PRINTSTRING
   766 241C AC 3C 24		 LDY STR01+1
   766 241F AD 3B 24		 LDA STR01
   766 2422 20 87 21		 JSR @PRINTSTRING
   767 2425 20 79 21			@printEOL
   768
   769 				; optimize FAIL ('CIO.GET', examples\strman.pas), line = 39
   770 2428 E8				inx
   771 2429 A9 07 95 98			mva #$07 :STACKORIGIN,x
   772 242D 20 05 23			jsr CIO.GET
   773 2430 B5 98 8D 6D 29		mva :STACKORIGIN,x KEY
   774 2435 CA				dex
   775
   776 2436 20 F4 22			jsr CRT.READKEY					; call Entry
   777
   778 2439 CA				dex
   779
   780 				; ------------------------------------------------------------
   781
   782 = 296D			KEY	= DATAORIGIN+$0513
   783 = 296E			adr.STR01	= DATAORIGIN+$0514
   784 243A			.var STR01	= adr.STR01 .word
   785 = 2984			adr.STR02	= DATAORIGIN+$052A
   786 243A			.var STR02	= adr.STR02 .word
   787 = 2994			adr.STR03	= DATAORIGIN+$053A
   788 243A			.var STR03	= adr.STR03 .word
   789
   790 = 296D			@VarData	= KEY
   791 = 0037			@VarDataSize	= 55
   792
   793 243A			@exit
   794 					.ifdef @new
   795 					lda <@VarData
   796 					sta :ztmp
   797 					lda >@VarData
   798 					ldy #@VarDataSize-1
   799 					jmp @FreeMem
   800 					eif
   801 243A 60				rts						; ret
   802 = 243B 6E 29		STR01
   802 = 243D 84 29		STR02
   802 = 243F 94 29		STR03
   802 				.endl
   803 2441			l_004B
   804
   805 				; optimize FAIL ('MAINPROC', examples\strman.pas), line = 44
   806 2441 20 34 23			jsr MAINPROC
   807
   808 				; ------------------------------------------------------------
   809
   810 = 286D			adr.STRBUFFER	= DATAORIGIN+$0413
   811 2444			.var STRBUFFER	= adr.STRBUFFER .word
   812 2444			@exit
   813
   814 2444 A2 00		@halt	ldx #0
   815 2446 9A				txs
   816 					.ifdef MAIN.@DEFINES.ROMOFF
   817 					inc portb
   818 					.endif
   819
   820 2447 60				rts
   821
   822 				; ------------------------------------------------------------
   823
   824 2448 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   825
   826 				; ------------------------------------------------------------
   827
   828 2458			.local	@DEFINES
   829 2458			ATARI
   830 				.endl
   831
   832 = 2458 6D 28		STRBUFFER
   832 				.endl							; MAIN
   833
   834 				; ------------------------------------------------------------
   835 				; ------------------------------------------------------------
   836
   837 				.macro	UNITINITIALIZATION
   838 				
   839 					.ifdef MAIN.SYSTEM.@UnitInit
   840 					jsr MAIN.SYSTEM.@UnitInit
   841 					eif
   842 				
   843 					.ifdef MAIN.ATARI.@UnitInit
   844 					jsr MAIN.ATARI.@UnitInit
   845 					eif
   846 				
   847 					.ifdef MAIN.CRT.@UnitInit
   848 					jsr MAIN.CRT.@UnitInit
   849 					eif
   850 				
   851 					.ifdef MAIN.DOS.@UnitInit
   852 					jsr MAIN.DOS.@UnitInit
   853 					eif
   854 				
   855 					.ifdef MAIN.STRUTILS.@UnitInit
   856 					jsr MAIN.STRUTILS.@UnitInit
   857 					eif
   858 				
   859 					.ifdef MAIN.SYSUTILS.@UnitInit
   860 					jsr MAIN.SYSUTILS.@UnitInit
   861 					eif
   862 				
   863 					.ifdef MAIN.CIO.@UnitInit
   864 					jsr MAIN.CIO.@UnitInit
   865 					eif
   866 				.endm
   867
   868 				; ------------------------------------------------------------
   869
   870 					ift .SIZEOF(MAIN.SYSTEM) > 0
   871 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   871 				SYSTEM: $21F3..$22F3
   872 					eif
   873
   874 					ift .SIZEOF(MAIN.ATARI) > 0
   875 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   876 					eif
   877
   878 					ift .SIZEOF(MAIN.CRT) > 0
   879 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   879 				CRT: $22F4..$2304
   880 					eif
   881
   882 					ift .SIZEOF(MAIN.DOS) > 0
   883 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   884 					eif
   885
   886 					ift .SIZEOF(MAIN.STRUTILS) > 0
   887 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   888 					eif
   889
   890 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   891 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   892 					eif
   893
   894 					ift .SIZEOF(MAIN.CIO) > 0
   895 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
   895 				CIO: $2305..$2333
   896 					eif
   897
   898 					.print 'CODE: ',CODEORIGIN,'..',*-1
   898 				CODE: $2000..$2459
   899
   900 				; ------------------------------------------------------------
   901
   902 245A			DATAORIGIN
   903 245A 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   904
   905 = 0006			VARINITSIZE	= *-DATAORIGIN
   906 = 054A			VARDATASIZE	= 1354
   907
   908 = 29A4			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   909
   910 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   910 				DATA: $245A..$29A4
   911
   912 02E0-02E1> B6 21			run START
   913
   914 				; ------------------------------------------------------------
   915
   916 				.macro	STATICDATA
   917 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $00 $00 $14  $48 $45 $4C $4C $4F $20 $54 $48
   918 				.by  $45 $52 $45 $3A $20 $41 $54 $41  $52 $49 $41 $4E $00 $06 $53 $54  $52 $30 $31 $3D $00 $06 $53 $54
   919 				.by  $52 $30 $32 $3D $00 $06 $53 $54  $52 $30 $33 $3D $00 $05 $41 $54  $41 $52 $49 $00
   920 				.endm
   921
   922 					end
