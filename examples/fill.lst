mads 2.1.0
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $2018..$2170
    97
    98 				; ------------------------------------------------------------
    99
   100 2170			START
   101 2170 BA				tsx
   102 2171 8E 09 29			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 083D			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 292F			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 					ldx #256-VLEN
   115 					lda #0
   116 					sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   118 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   118 2174 A9 2F 85 86 A9 29 +  MWA #VADR @FILL.PTR1
   118 217C A9 3D 85 8A A9 08 +  MWA #VLEN @FILL.PTR3
   118 2184 A9 00 85 82		 MVA #0 @FILL.PTR2
   118 2188 20 28 21		 JSR @FILL
   119 					eif
   120
   121 218B A2 0F			ldx #$0f
   122 218D BD 40 03 9D 0C 29 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 2196 E8				inx		; X = 0 !!!
   125 2197 86 8E			stx bp		; lo BP = 0
   126
   127 2199				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: fill.a65]
Source: fill.a65
   128
   129 2199			.local	MAIN						; PROCEDURE
   130
   131 2199 4C 05 29			jmp l_001F
   132
   133 				; ------------------------------------------------------------
   134
   135 219C			.local	SYSTEM						; UNIT
   136
   137 219C			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   138
   139 				; ------------------------------------------------------------
   140
   141 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   142 				; as Pointer
   143 219C B5 98 85 8A			mva :STACKORIGIN,x VALUE
   144 21A0 CA				dex						; sub bx, 1
   145
   146 				; ------------------------------------------------------------
   147
   148 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   149 				; as Pointer
   150 21A1 B5 98 85 86			mva :STACKORIGIN,x A
   151 21A5 B5 A8 85 87			mva :STACKORIGIN+STACKWIDTH,x A+1
   152 21A9 CA				dex						; sub bx, 1
   153
   154 				; ---------------------  ASM Block 021  ---------------------
   155
   156 21AA A0 00			ldy #0
   157 21AC A5 8A 91 86			mva value (edx),y
   158
   159
   160 				; ------------------------------------------------------------
   161
   162 = 0086			A	= edx
   163 = 008A			VALUE	= ecx
   164 21B0			@exit
   165 					.ifdef @new
   166 					@FreeMem #@VarData #@VarDataSize
   167 					eif
   168 21B0 60				rts						; ret
   169 				.endl
   170
   171 21B1			.local	MOVE_0040					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   172
   173 				; ------------------------------------------------------------
   174
   175 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   176 				; as Pointer
   177 21B1 B5 98 85 82			mva :STACKORIGIN,x COUNT
   178 21B5 B5 A8 85 83			mva :STACKORIGIN+STACKWIDTH,x COUNT+1
   179 21B9 CA				dex						; sub bx, 1
   180
   181 				; ------------------------------------------------------------
   182
   183 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   184 				; as Pointer
   185 21BA B5 98 85 8A			mva :STACKORIGIN,x DEST
   186 21BE B5 A8 85 8B			mva :STACKORIGIN+STACKWIDTH,x DEST+1
   187 21C2 CA				dex						; sub bx, 1
   188
   189 				; ------------------------------------------------------------
   190
   191 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   192 				; as Pointer
   193 21C3 B5 98 85 86			mva :STACKORIGIN,x SOURCE
   194 21C7 B5 A8 85 87			mva :STACKORIGIN+STACKWIDTH,x SOURCE+1
   195 21CB CA				dex						; sub bx, 1
   196
   197 				; ---------------------  ASM Block 032  ---------------------
   198
   199 21CC 20 D3 20			jsr @move
   200
   201
   202 				; ------------------------------------------------------------
   203
   204 = 0086			SOURCE	= edx
   205 = 008A			DEST	= ecx
   206 = 0082			COUNT	= eax
   207 21CF			@exit
   208 					.ifdef @new
   209 					@FreeMem #@VarData #@VarDataSize
   210 					eif
   211 21CF 60				rts						; ret
   212 				.endl
   213
   214 				; ------------------------------------------------------------
   215
   216 = 0648			M_PI_2	= $0648
   217 = 0192			D_PI_2	= $0192
   218 = 0004			D_PI_180	= $0004
   219 = 0000			MGTIA	= $0000
   220 = 0080			MVBXE	= $0080
   221 = 0000			VBXE_XDLADR	= $0000
   222 = 0100			VBXE_BCBADR	= $0100
   223 = 1000			VBXE_MAPADR	= $1000
   224 = 5000			VBXE_OVRADR	= $5000
   225 = B000			VBXE_WINDOW	= $B000
   226 = 0000			IDLI	= $0000
   227 = 0001			IVBL	= $0001
   228 = 00FE			CH_DELCHR	= $00FE
   229 = 009B			CH_ENTER	= $009B
   230 = 001B			CH_ESC	= $001B
   231 = 001C			CH_CURS_UP	= $001C
   232 = 001D			CH_CURS_DOWN	= $001D
   233 = 001E			CH_CURS_LEFT	= $001E
   234 = 001F			CH_CURS_RIGHT	= $001F
   235 = 007F			CH_TAB	= $007F
   236 = 009B			CH_EOL	= $009B
   237 = 007D			CH_CLR	= $007D
   238 = 00FD			CH_BELL	= $00FD
   239 = 007E			CH_DEL	= $007E
   240 = 009C			CH_DELLINE	= $009C
   241 = 009D			CH_INSLINE	= $009D
   242 = 0000			COLOR_BLACK	= $0000
   243 = 000E			COLOR_WHITE	= $000E
   244 = 0032			COLOR_RED	= $0032
   245 = 0096			COLOR_CYAN	= $0096
   246 = 0068			COLOR_VIOLET	= $0068
   247 = 00C4			COLOR_GREEN	= $00C4
   248 = 0074			COLOR_BLUE	= $0074
   249 = 00EE			COLOR_YELLOW	= $00EE
   250 = 0028			COLOR_ORANGE	= $0028
   251 = 00E4			COLOR_BROWN	= $00E4
   252 = 003C			COLOR_LIGHTRED	= $003C
   253 = 0004			COLOR_GRAY1	= $0004
   254 = 0006			COLOR_GRAY2	= $0006
   255 = 000A			COLOR_GRAY3	= $000A
   256 = 00CC			COLOR_LIGHTGREEN	= $00CC
   257 = 007C			COLOR_LIGHTBLUE	= $007C
   258 = 0004			FMOPENREAD	= $0004
   259 = 0008			FMOPENWRITE	= $0008
   260 = 0009			FMOPENAPPEND	= $0009
   261 = 000C			FMOPENREADWRITE	= $000C
   262 = 291C			SCREENWIDTH	= DATAORIGIN+$0000
   263 = 291E			SCREENHEIGHT	= DATAORIGIN+$0002
   264 = 2920			DATESEPARATOR	= DATAORIGIN+$0004
   265 = D014			TVSYSTEM	= $D014
   266 = 02C0			adr.PALETTE	= $02C0
   267 21D0			.var PALETTE	= adr.PALETTE .word
   268 = D012			adr.HPALETTE	= $D012
   269 21D0			.var HPALETTE	= adr.HPALETTE .word
   270 = 2921			FILEMODE	= DATAORIGIN+$0005
   271 = 2922			SCREENMODE	= DATAORIGIN+$0006
   272 = 2923			IORESULT	= DATAORIGIN+$0007
   273 = 2924			EOLN	= DATAORIGIN+$0008
   274 = 2925			RNDSEED	= DATAORIGIN+$0009
   275
   276 = 21D0 C0 02		PALETTE
   276 = 21D2 12 D0		HPALETTE
   276 				.endl							; UNIT SYSTEM
   277
   278 				; ------------------------------------------------------------
   279
   280 21D4			.local	DOS						; UNIT
   281
   282 				; ------------------------------------------------------------
   283
   284 = D014			PALNTSC	= $D014
   285
   286 				.endl							; UNIT DOS
   287
   288 				; ------------------------------------------------------------
   289
   290 21D4			.local	STRUTILS					; UNIT
   291
   292 				; ------------------------------------------------------------
   293
   294 				.endl							; UNIT STRUTILS
   295
   296 				; ------------------------------------------------------------
   297
   298 21D4			.local	SYSUTILS					; UNIT
   299
   300 				; ------------------------------------------------------------
   301
   302 = 0001			FAREADONLY	= $0001
   303 = 0002			FAHIDDEN	= $0002
   304 = 0004			FASYSFILE	= $0004
   305 = 0008			FAVOLUMEID	= $0008
   306 = 0010			FADIRECTORY	= $0010
   307 = 0020			FAARCHIVE	= $0020
   308 = 003F			FAANYFILE	= $003F
   309
   310 				.endl							; UNIT SYSUTILS
   311
   312 				; ------------------------------------------------------------
   313
   314 21D4			.local	ATARI						; UNIT
   315
   316 				; ------------------------------------------------------------
   317
   318 = 0012			RTCLOK	= $0012
   319 = 004D			ATRACT	= $004D
   320 = 0052			LMARGIN	= $0052
   321 = 0053			RMARGIN	= $0053
   322 = 0054			ROWCRS	= $0054
   323 = 0055			COLCRS	= $0055
   324 = 0057			DINDEX	= $0057
   325 = 0058			SAVMSC	= $0058
   326 = 006A			RAMTOP	= $006A
   327 = 0200			VDSLST	= $0200
   328 = 0230			SDLSTL	= $0230
   329 = 0290			TXTROW	= $0290
   330 = 0291			TXTCOL	= $0291
   331 = 0293			TINDEX	= $0293
   332 = 0294			TXTMSC	= $0294
   333 = 022F			SDMCTL	= $022F
   334 = 026F			GPRIOR	= $026F
   335 = 02F0			CRSINH	= $02F0
   336 = 02F3			CHACT	= $02F3
   337 = 02F4			CHBAS	= $02F4
   338 = 02FC			CH	= $02FC
   339 = 02C0			PCOLR0	= $02C0
   340 = 02C1			PCOLR1	= $02C1
   341 = 02C2			PCOLR2	= $02C2
   342 = 02C3			PCOLR3	= $02C3
   343 = 02C4			COLOR0	= $02C4
   344 = 02C5			COLOR1	= $02C5
   345 = 02C6			COLOR2	= $02C6
   346 = 02C7			COLOR3	= $02C7
   347 = 02C8			COLOR4	= $02C8
   348 = 02C8			COLBAKS	= $02C8
   349 = D000			HPOSP0	= $D000
   350 = D001			HPOSP1	= $D001
   351 = D002			HPOSP2	= $D002
   352 = D003			HPOSP3	= $D003
   353 = D004			HPOSM0	= $D004
   354 = D005			HPOSM1	= $D005
   355 = D006			HPOSM2	= $D006
   356 = D007			HPOSM3	= $D007
   357 = D008			SIZEP0	= $D008
   358 = D009			SIZEP1	= $D009
   359 = D00A			SIZEP2	= $D00A
   360 = D00B			SIZEP3	= $D00B
   361 = D00C			SIZEM	= $D00C
   362 = D00D			GRAFP0	= $D00D
   363 = D00E			GRAFP1	= $D00E
   364 = D00F			GRAFP2	= $D00F
   365 = D010			GRAFP3	= $D010
   366 = D011			GRAFM	= $D011
   367 = D004			P0PF	= $D004
   368 = D014			PAL	= $D014
   369 = D012			COLPM0	= $D012
   370 = D013			COLPM1	= $D013
   371 = D014			COLPM2	= $D014
   372 = D015			COLPM3	= $D015
   373 = D016			COLPF0	= $D016
   374 = D017			COLPF1	= $D017
   375 = D018			COLPF2	= $D018
   376 = D019			COLPF3	= $D019
   377 = D01A			COLBK	= $D01A
   378 = D01B			PRIOR	= $D01B
   379 = D01D			GRACTL	= $D01D
   380 = D01E			HITCLR	= $D01E
   381 = D200			AUDF1	= $D200
   382 = D201			AUDC1	= $D201
   383 = D202			AUDF2	= $D202
   384 = D203			AUDC2	= $D203
   385 = D204			AUDF3	= $D204
   386 = D205			AUDC3	= $D205
   387 = D206			AUDF4	= $D206
   388 = D207			AUDC4	= $D207
   389 = D208			AUDCTL	= $D208
   390 = D20F			SKSTAT	= $D20F
   391 = D301			PORTB	= $D301
   392 = D400			DMACTL	= $D400
   393 = D401			CHACTL	= $D401
   394 = D402			DLISTL	= $D402
   395 = D404			HSCROL	= $D404
   396 = D405			VSCROL	= $D405
   397 = D407			PMBASE	= $D407
   398 = D409			CHBASE	= $D409
   399 = D40A			WSYNC	= $D40A
   400 = D40B			VCOUNT	= $D40B
   401 = D40C			PENH	= $D40C
   402 = D40D			PENV	= $D40D
   403 = D40E			NMIEN	= $D40E
   404
   405 				.endl							; UNIT ATARI
   406
   407 				; ------------------------------------------------------------
   408
   409 21D4			.local	CRT						; UNIT
   410
   411 				; ------------------------------------------------------------
   412
   413 = 2927			TEXTATTR	= DATAORIGIN+$000B
   414 = D01F			CONSOL	= $D01F
   415 = 0000			CN_START_SELECT_OPTION	= $0000
   416 = 0001			CN_SELECT_OPTION	= $0001
   417 = 0002			CN_START_OPTION	= $0002
   418 = 0003			CN_OPTION	= $0003
   419 = 0004			CN_START_SELECT	= $0004
   420 = 0005			CN_SELECT	= $0005
   421 = 0006			CN_START	= $0006
   422 = 0007			CN_NONE	= $0007
   423 = 0000			BW40	= $0000
   424 = 0001			CO40	= $0001
   425 = 0002			BW80	= $0002
   426 = 0003			CO80	= $0003
   427 = 0007			MONO	= $0007
   428 = 0001			C40	= $0001
   429 = 0003			C80	= $0003
   430 = 0000			BLACK	= $0000
   431 = 0001			BLUE	= $0001
   432 = 0002			GREEN	= $0002
   433 = 0003			CYAN	= $0003
   434 = 0004			RED	= $0004
   435 = 0005			MAGENTA	= $0005
   436 = 0006			BROWN	= $0006
   437 = 0007			LIGHTGRAY	= $0007
   438 = 0008			DARKGRAY	= $0008
   439 = 0009			LIGHTBLUE	= $0009
   440 = 000A			LIGHTGREEN	= $000A
   441 = 000B			LIGHTCYAN	= $000B
   442 = 000C			LIGHTRED	= $000C
   443 = 000D			LIGHTMAGENTA	= $000D
   444 = 000E			YELLOW	= $000E
   445 = 000F			WHITE	= $000F
   446 = 0080			BLINK	= $0080
   447
   448 				.endl							; UNIT CRT
   449
   450 				; ------------------------------------------------------------
   451
   452 21D4			.local	TYPES						; UNIT
   453
   454 				; ------------------------------------------------------------
   455
   456 				.endl							; UNIT TYPES
   457
   458 				; ------------------------------------------------------------
   459
   460 21D4			.local	GRAPH						; UNIT
   461
   462 21D4			.local	INITGRAPH_0080					; PROCEDURE | OVERLOAD
   463
   464 				; ------------------------------------------------------------
   465
   466 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   467 				; as Pointer
   468 21D4 B5 98 8D 45 29		mva :STACKORIGIN,x MODE
   469 21D9 CA				dex						; sub bx, 1
   470
   471 				; optimize OK (GRAPH), line = 73
   472
   473 21DA A9 00 8D 30 29		mva #$00 GRAPHRESULT
   474
   475 				; optimize OK (GRAPH), line = 75
   476
   477 21DF AD 45 29 8D 22 29		mva MODE SYSTEM.SCREENMODE
   478
   479 				; ---------------------  ASM Block 074  ---------------------
   480
   481
   482 21E5 8A 48			txa:pha
   483
   484 21E7 A9 2C 8D 95 20		mva #$2c @putchar.vbxe
   485
   486 21EC AD 45 29			lda mode
   487 21EF 29 0F			and #$0f
   488 21F1 A8				tay
   489
   490 21F2 A2 60			ldx #$60	; 6*16
   491 21F4 AD 45 29			lda mode	; %00010000 with text window
   492 21F7 29 10			and #$10
   493 21F9 49 10			eor #$10
   494 21FB 09 02			ora #2		; read
   495
   496 					.nowarn @graphics
   496 21FD 20 66 20		 JSR @GRAPHICS
   497 					
   498 					
   499 = EE6D			tlshc	equ $ee6d
   500
   501 2200 A6 57			ldx dindex
   502 2202 BC 6D EE			ldy tlshc,x
   503 2205 A9 05			lda #5
   504 2207 0A			shift	asl @
   505 2208 88				dey
   506 2209 D0 FC			bne shift
   507
   508 220B 8D 44 29			sta SCANLINE_WIDTH
   509 					
   510
   511 				; Fox/TQA
   512
   513 = 0057			dindex	equ $57
   514 = EE7D			tmccn	equ $ee7d
   515 = EE8D			tmrcn	equ $ee8d
   516
   517 220E A6 57			ldx dindex
   518 2210 BD 7D EE			lda tmccn,x
   519 2213 BC 8D EE			ldy tmrcn,x
   520 2216 A2 00			ldx #0
   521 2218 C9 40			cmp #<320
   522 221A D0 01 E8			sne:inx
   523 				    
   524 				; X:A = horizontal resolution
   525 				; Y = vertical resolution
   526
   527 221D 8D 1C 29			sta MAIN.SYSTEM.ScreenWidth
   528 2220 8E 1D 29			stx MAIN.SYSTEM.ScreenWidth+1
   529 					
   530 2223 38 E9 01			sub #1
   531 2226 8D 2A 29			sta WIN_RIGHT
   532 2229 8A				txa
   533 222A E9 00			sbc #0
   534 222C 8D 2B 29			sta WIN_RIGHT+1
   535 					
   536 222F 8C 1E 29			sty MAIN.SYSTEM.ScreenHeight
   537 2232 A9 00			lda #0
   538 2234 8D 1F 29			sta MAIN.SYSTEM.ScreenHeight+1
   539 					
   540 2237 8D 28 29			sta WIN_LEFT
   541 223A 8D 29 29			sta WIN_LEFT+1
   542 223D 8D 2C 29			sta WIN_TOP
   543 2240 8D 2D 29			sta WIN_TOP+1
   544
   545 2243 8D 2F 29			sta WIN_BOTTOM+1	
   546 2246 88				dey
   547 2247 8C 2E 29			sty WIN_BOTTOM
   548
   549 224A 68 AA			pla:tax
   550
   551
   552 				; ------------------------------------------------------------
   553
   554 = 2945			MODE	= DATAORIGIN+$0029
   555
   556 = 2945			@VarData	= MODE
   557 = 0001			@VarDataSize	= 1
   558
   559 224C			@exit
   560 					.ifdef @new
   561 					@FreeMem #@VarData #@VarDataSize
   562 					eif
   563 224C 60				rts						; ret
   564 				.endl
   565
   566 224D			.local	SETCOLOR					; PROCEDURE | ASSEMBLER
   567
   568 				; ------------------------------------------------------------
   569
   570 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   571 				; as Pointer
   572 224D B5 98 8D 46 29		mva :STACKORIGIN,x COLOR
   573 2252 CA				dex						; sub bx, 1
   574
   575 				; ---------------------  ASM Block 076  ---------------------
   576
   577 2253 AD 46 29 8D 5F 20		mva color @COMMAND.colscr
   578 2259 8D 31 29			sta GetColor
   579
   580
   581 				; ------------------------------------------------------------
   582
   583 = 2946			COLOR	= DATAORIGIN+$002A
   584
   585 = 2946			@VarData	= COLOR
   586 = 0001			@VarDataSize	= 1
   587
   588 225C			@exit
   589 					.ifdef @new
   590 					@FreeMem #@VarData #@VarDataSize
   591 					eif
   592 225C 60				rts						; ret
   593 				.endl
   594
   595 225D			.local	PUTPIXEL_0095					; PROCEDURE | ASSEMBLER | OVERLOAD
   596
   597 				; ------------------------------------------------------------
   598
   599 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   600 				; as Pointer
   601 225D B5 98 8D 49 29		mva :STACKORIGIN,x Y
   602 2262 B5 A8 8D 4A 29		mva :STACKORIGIN+STACKWIDTH,x Y+1
   603 2267 CA				dex						; sub bx, 1
   604
   605 				; ------------------------------------------------------------
   606
   607 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   608 				; as Pointer
   609 2268 B5 98 8D 47 29		mva :STACKORIGIN,x X
   610 226D B5 A8 8D 48 29		mva :STACKORIGIN+STACKWIDTH,x X+1
   611 2272 CA				dex						; sub bx, 1
   612
   613 				; ---------------------  ASM Block 077  ---------------------
   614
   615 2273 8A 48			txa:pha
   616 				{
   617 2275 AD 4A 29			lda y+1
   618 2278 30 33			bmi stop
   619 227A CD 1F 29			cmp MAIN.SYSTEM.ScreenHeight+1
   620 227D D0 06			bne sk0
   621 227F AD 49 29			lda y
   622 2282 CD 1E 29			cmp MAIN.SYSTEM.ScreenHeight
   623 2285			sk0
   624 2285 B0 26			bcs stop
   625
   626 2287 AD 48 29			lda x+1
   627 228A 30 21			bmi stop
   628 228C CD 1D 29			cmp MAIN.SYSTEM.ScreenWidth+1
   629 228F D0 06			bne sk1
   630 2291 AD 47 29			lda x
   631 2294 CD 1C 29			cmp MAIN.SYSTEM.ScreenWidth
   632 2297			sk1
   633 2297 B0 14			bcs stop
   634
   635 2299 AD 47 29 85 55 AD + 	mwa x colcrs
   636 22A3 AD 49 29 85 54		mva y rowcrs
   637
   638 22A8 A9 09			lda #@IDput
   639
   640 22AA 20 59 20			jsr @COMMAND
   641
   642 22AD 68 AA		stop	pla:tax
   643
   644
   645 				; ------------------------------------------------------------
   646
   647 = 2947			X	= DATAORIGIN+$002B
   648 = 2949			Y	= DATAORIGIN+$002D
   649
   650 = 2947			@VarData	= X
   651 = 0004			@VarDataSize	= 4
   652
   653 22AF			@exit
   654 					.ifdef @new
   655 					@FreeMem #@VarData #@VarDataSize
   656 					eif
   657 22AF 60				rts						; ret
   658 				.endl
   659
   660 22B0			.local	GETPIXEL					; FUNCTION | ASSEMBLER
   661
   662 				; ------------------------------------------------------------
   663
   664 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   665 				; as Pointer
   666 22B0 B5 98 8D 4D 29		mva :STACKORIGIN,x Y
   667 22B5 B5 A8 8D 4E 29		mva :STACKORIGIN+STACKWIDTH,x Y+1
   668 22BA CA				dex						; sub bx, 1
   669
   670 				; ------------------------------------------------------------
   671
   672 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   673 				; as Pointer
   674 22BB B5 98 8D 4B 29		mva :STACKORIGIN,x X
   675 22C0 B5 A8 8D 4C 29		mva :STACKORIGIN+STACKWIDTH,x X+1
   676 22C5 CA				dex						; sub bx, 1
   677
   678 				; ---------------------  ASM Block 079  ---------------------
   679
   680 22C6 8A 48			txa:pha
   681
   682 22C8 A0 00			ldy #0
   683
   684 22CA AD 4E 29			lda y+1
   685 22CD 30 34			bmi stop
   686 22CF CD 1F 29			cmp MAIN.SYSTEM.ScreenHeight+1
   687 22D2 D0 06			bne sk0
   688 22D4 AD 4D 29			lda y
   689 22D7 CD 1E 29			cmp MAIN.SYSTEM.ScreenHeight
   690 22DA			sk0
   691 22DA B0 27			bcs stop
   692
   693 22DC AD 4C 29			lda x+1
   694 22DF 30 22			bmi stop
   695 22E1 CD 1D 29			cmp MAIN.SYSTEM.ScreenWidth+1
   696 22E4 D0 06			bne sk1
   697 22E6 AD 4B 29			lda x
   698 22E9 CD 1C 29			cmp MAIN.SYSTEM.ScreenWidth
   699 22EC			sk1
   700 22EC B0 15			bcs stop
   701
   702 22EE AD 4B 29 85 55 AD + 	mwa x colcrs
   703 22F8 AD 4D 29 85 54		mva y rowcrs
   704
   705 22FD A9 07			lda #@IDget
   706
   707 22FF 20 59 20			jsr @COMMAND
   708 2302 A8				tay
   709
   710 2303 8C 4F 29		stop	sty Result
   711
   712 2306 68 AA			pla:tax
   713
   714 2308			@exit
   715
   716 				; ------------------------------------------------------------
   717
   718 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   719 				; as Pointer
   720
   721 2308 E8				inx						; add bx, 1
   722 2309 AD 4F 29 95 98		mva RESULT :STACKORIGIN,x
   723
   724 					.ifdef @new
   725 					@FreeMem #@VarData #@VarDataSize
   726 					eif
   727
   728 				; ------------------------------------------------------------
   729
   730 = 294B			X	= DATAORIGIN+$002F
   731 = 294D			Y	= DATAORIGIN+$0031
   732 = 294F			RESULT	= DATAORIGIN+$0033
   733
   734 = 294B			@VarData	= X
   735 = 0005			@VarDataSize	= 5
   736
   737 230E 60				rts						; ret
   738 				.endl
   739
   740 230F			.local	MOVETO						; PROCEDURE | ASSEMBLER
   741
   742 				; ------------------------------------------------------------
   743
   744 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   745 				; as Pointer
   746 230F B5 98 8D 52 29		mva :STACKORIGIN,x Y
   747 2314 B5 A8 8D 53 29		mva :STACKORIGIN+STACKWIDTH,x Y+1
   748 2319 CA				dex						; sub bx, 1
   749
   750 				; ------------------------------------------------------------
   751
   752 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   753 				; as Pointer
   754 231A B5 98 8D 50 29		mva :STACKORIGIN,x X
   755 231F B5 A8 8D 51 29		mva :STACKORIGIN+STACKWIDTH,x X+1
   756 2324 CA				dex						; sub bx, 1
   757
   758 				; ---------------------  ASM Block 080  ---------------------
   759
   760 2325 AD 53 29			lda y+1
   761 2328 10 08			bpl _0
   762
   763 232A A9 00			lda #0
   764 232C 8D 52 29			sta y
   765 232F 8D 53 29			sta y+1
   766 2332			_0
   767 2332 AD 51 29			lda x+1
   768 2335 10 08			bpl _1
   769
   770 2337 A9 00			lda #0
   771 2339 8D 50 29			sta x
   772 233C 8D 51 29			sta x+1
   773 233F			_1
   774 233F AD 53 29 CD 1F 29 + 	cpw y main.system.ScreenHeight
   775 234D 90 11			bcc _2
   776
   777 234F 38 AD 1E 29 E9 01 + 	sbw main.system.ScreenHeight #1 y
   778 2360			_2
   779 2360 AD 51 29 CD 1D 29 + 	cpw x main.system.ScreenWidth
   780 236E 90 11			bcc _3
   781
   782 2370 38 AD 1C 29 E9 01 + 	sbw main.system.ScreenWidth #1 x
   783 2381			_3
   784 2381 AD 50 29 8D 3E 29 + 	mwa x CurrentX
   785 238D AD 52 29 8D 40 29 + 	mwa y CurrentY
   786
   787
   788 				; ------------------------------------------------------------
   789
   790 = 2950			X	= DATAORIGIN+$0034
   791 = 2952			Y	= DATAORIGIN+$0036
   792
   793 = 2950			@VarData	= X
   794 = 0004			@VarDataSize	= 4
   795
   796 2399			@exit
   797 					.ifdef @new
   798 					@FreeMem #@VarData #@VarDataSize
   799 					eif
   800 2399 60				rts						; ret
   801 				.endl
   802
   803 239A			.local	LINETO						; PROCEDURE | ASSEMBLER
   804
   805 				; ------------------------------------------------------------
   806
   807 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   808 				; as Pointer
   809 239A B5 98 8D 56 29		mva :STACKORIGIN,x Y
   810 239F B5 A8 8D 57 29		mva :STACKORIGIN+STACKWIDTH,x Y+1
   811 23A4 CA				dex						; sub bx, 1
   812
   813 				; ------------------------------------------------------------
   814
   815 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   816 				; as Pointer
   817 23A5 B5 98 8D 54 29		mva :STACKORIGIN,x X
   818 23AA B5 A8 8D 55 29		mva :STACKORIGIN+STACKWIDTH,x X+1
   819 23AF CA				dex						; sub bx, 1
   820
   821 				; ---------------------  ASM Block 081  ---------------------
   822
   823 23B0 AD 57 29			lda y+1
   824 23B3 10 08			bpl _0
   825
   826 23B5 A9 00			lda #0
   827 23B7 8D 56 29			sta y
   828 23BA 8D 57 29			sta y+1
   829 23BD			_0
   830 23BD AD 55 29			lda x+1
   831 23C0 10 08			bpl _1
   832
   833 23C2 A9 00			lda #0
   834 23C4 8D 54 29			sta x
   835 23C7 8D 55 29			sta x+1
   836 23CA			_1
   837 23CA AD 57 29 CD 1F 29 + 	cpw y main.system.ScreenHeight
   838 23D8 90 11			bcc _2
   839
   840 23DA 38 AD 1E 29 E9 01 + 	sbw main.system.ScreenHeight #1 y
   841 23EB			_2
   842 23EB AD 55 29 CD 1D 29 + 	cpw x main.system.ScreenWidth
   843 23F9 90 11			bcc _3
   844
   845 23FB 38 AD 1C 29 E9 01 + 	sbw main.system.ScreenWidth #1 x
   846 240C			_3
   847 240C 8A 48			txa:pha
   848
   849 240E AD 3E 29 85 55 AD + 	mwa CurrentX colcrs
   850 2418 AD 40 29 85 54		mva CurrentY rowcrs
   851
   852 241D A9 09			lda #@IDput
   853
   854 241F 20 59 20			jsr @COMMAND
   855
   856 2422 AD 54 29			lda x
   857 2425 85 55			sta colcrs
   858 2427 8D 3E 29			sta CurrentX
   859 242A AD 55 29			lda x+1
   860 242D 85 56			sta colcrs+1
   861 242F 8D 3F 29			sta CurrentX+1
   862
   863 2432 AD 56 29 85 54		mva y rowcrs
   864 2437 8D 40 29			sta CurrentY
   865 243A AD 57 29			lda y+1
   866 243D 8D 41 29			sta CurrentY+1
   867
   868 2440 A9 11			lda #@IDdraw
   869
   870 2442 20 59 20			jsr @COMMAND
   871
   872 2445 68 AA			pla:tax
   873
   874
   875 				; ------------------------------------------------------------
   876
   877 = 2954			X	= DATAORIGIN+$0038
   878 = 2956			Y	= DATAORIGIN+$003A
   879
   880 = 2954			@VarData	= X
   881 = 0004			@VarDataSize	= 4
   882
   883 2447			@exit
   884 					.ifdef @new
   885 					@FreeMem #@VarData #@VarDataSize
   886 					eif
   887 2447 60				rts						; ret
   888 				.endl
   889
   890 2448			.local	FLOODFILL					; PROCEDURE
   891
   892 				; ------------------------------------------------------------
   893
   894 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   895 				; as Pointer
   896 2448 B5 98 8D 5C 29		mva :STACKORIGIN,x NEWCOLOR
   897 244D CA				dex						; sub bx, 1
   898
   899 				; ------------------------------------------------------------
   900
   901 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   902 				; as Pointer
   903 244E B5 98 8D 5A 29		mva :STACKORIGIN,x B
   904 2453 B5 A8 8D 5B 29		mva :STACKORIGIN+STACKWIDTH,x B+1
   905 2458 CA				dex						; sub bx, 1
   906
   907 				; ------------------------------------------------------------
   908
   909 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   910 				; as Pointer
   911 2459 B5 98 8D 58 29		mva :STACKORIGIN,x A
   912 245E B5 A8 8D 59 29		mva :STACKORIGIN+STACKWIDTH,x A+1
   913 2463 CA				dex						; sub bx, 1
   914
   915 2464 4C 23 26			jmp l_00DD
   916
   917 2467			.local	FLOODFILLEXEC					; PROCEDURE
   918
   919 				; --- For
   920
   921 				; optimize OK (graph.inc), line = 659
   922
   923 2467 A9 00 8D 66 31		mva #$00 I
   924
   925 				; optimize OK (graph.inc), line = 659
   926
   927 				; --- To
   928 246C			l_00E9
   929
   930 				; --- ForToDoCondition
   931
   932 				; optimize OK (graph.inc), line = 659
   933
   934 246C AD 66 31			lda I
   935 246F C9 03			cmp #$03
   936 2471 90 05			scc
   937 2473 F0 03 4C 22 26		jne l_00F7
   938
   939 				; ------------------------------------------------------------
   940
   941 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   942 				; as Pointer
   943
   944 2478 E8				inx						; add bx, 1
   945 2479 AD 66 31 95 98		mva I :STACKORIGIN,x
   946
   947 				; GenerateCaseProlog
   948 247E CA				dex						; sub bx, 1
   949
   950 				; GenerateCaseEqualityCheck
   951 247F B5 99			lda :STACKORIGIN+1,x
   952 2481 D0 4B			jne l_0103
   953
   954 2483			@
   955
   956 				; optimize OK (graph.inc), line = 664
   957
   958 2483 AD 58 29			lda A
   959 2486 18 69 01			add #$01
   960 2489 8D 67 31			sta XR
   961 248C AD 59 29			lda A+1
   962 248F 69 00			adc #$00
   963 2491 8D 68 31			sta XR+1
   964
   965 				; optimize OK (graph.inc), line = 665
   966
   967 2494 AD 5A 29 8D 69 31		mva B YR
   968 249A AD 5B 29 8D 6A 31		mva B+1 YR+1
   969
   970 				; optimize OK (graph.inc), line = 667
   971
   972 24A0 A0 01			ldy #1
   973 24A2				.LOCAL
   974 24A2 AD 68 31			lda XR+1
   975 24A5 38 ED 1D 29			sub SYSTEM.SCREENWIDTH+1
   976 24A9 D0 14			bne L4
   977 24AB AD 67 31			lda XR
   978 24AE CD 1C 29			cmp SYSTEM.SCREENWIDTH
   979 24B1 F0 12		L1	beq L5
   980 24B3 B0 05			bcs L3
   981 24B5 A9 FF			lda #$FF
   982 24B7 4C C5 24			jmp L5
   983 24BA A9 01		L3	lda #$01
   984 24BC 4C C5 24			jmp L5
   985 24BF 50 04		L4	bvc L5
   986 24C1 49 FF			eor #$FF
   987 24C3 09 01			ora #$01
   988 24C5			L5
   989 					.ENDL
   990 24C5 30 01			bmi @+
   991 24C7 88				dey
   992 24C8			@
   993 24C8 8C 6B 31			sty YES
   994
   995 				; GenerateCaseStatementEpilog
   996 24CB 4C 9F 25			jmp a_0004
   997 24CE			l_0103
   998
   999 				; GenerateCaseEqualityCheck
  1000 24CE B5 99			lda :STACKORIGIN+1,x
  1001 24D0 C9 01			cmp #1
  1002 24D2 D0 3A			jne l_0126
  1003
  1004 24D4			@
  1005
  1006 				; optimize OK (graph.inc), line = 671
  1007
  1008 24D4 AD 58 29			lda A
  1009 24D7 38 E9 01			sub #$01
  1010 24DA 8D 67 31			sta XR
  1011 24DD AD 59 29			lda A+1
  1012 24E0 E9 00			sbc #$00
  1013 24E2 8D 68 31			sta XR+1
  1014
  1015 				; optimize OK (graph.inc), line = 674
  1016
  1017 24E5 A0 01			ldy #1
  1018 24E7				.LOCAL
  1019 24E7 AD 68 31			lda XR+1
  1020 24EA B8 38			clv:sec
  1021 24EC D0 11			bne L4
  1022 24EE AD 67 31			lda XR
  1023 24F1 F0 12		L1	beq L5
  1024 24F3 B0 05			bcs L3
  1025 24F5 A9 FF			lda #$FF
  1026 24F7 4C 05 25			jmp L5
  1027 24FA A9 01		L3	lda #$01
  1028 24FC 4C 05 25			jmp L5
  1029 24FF 50 04		L4	bvc L5
  1030 2501 49 FF			eor #$FF
  1031 2503 09 01			ora #$01
  1032 2505			L5
  1033 					.ENDL
  1034 2505 10 01			bpl @+
  1035 2507 88				dey
  1036 2508			@
  1037 2508 8C 6B 31			sty YES
  1038
  1039 				; GenerateCaseStatementEpilog
  1040 250B 4C 9F 25			jmp a_0004
  1041 250E			l_0126
  1042
  1043 				; GenerateCaseEqualityCheck
  1044 250E B5 99			lda :STACKORIGIN+1,x
  1045 2510 C9 02			cmp #2
  1046 2512 D0 4B			jne l_0143
  1047
  1048 2514			@
  1049
  1050 				; optimize OK (graph.inc), line = 678
  1051
  1052 2514 AD 58 29 8D 67 31		mva A XR
  1053 251A AD 59 29 8D 68 31		mva A+1 XR+1
  1054
  1055 				; optimize OK (graph.inc), line = 679
  1056
  1057 2520 AD 5A 29			lda B
  1058 2523 18 69 01			add #$01
  1059 2526 8D 69 31			sta YR
  1060 2529 AD 5B 29			lda B+1
  1061 252C 69 00			adc #$00
  1062 252E 8D 6A 31			sta YR+1
  1063
  1064 				; optimize OK (graph.inc), line = 681
  1065
  1066 2531 A0 01			ldy #1
  1067 2533				.LOCAL
  1068 2533 AD 6A 31			lda YR+1
  1069 2536 38 ED 1F 29			sub SYSTEM.SCREENHEIGHT+1
  1070 253A D0 14			bne L4
  1071 253C AD 69 31			lda YR
  1072 253F CD 1E 29			cmp SYSTEM.SCREENHEIGHT
  1073 2542 F0 12		L1	beq L5
  1074 2544 B0 05			bcs L3
  1075 2546 A9 FF			lda #$FF
  1076 2548 4C 56 25			jmp L5
  1077 254B A9 01		L3	lda #$01
  1078 254D 4C 56 25			jmp L5
  1079 2550 50 04		L4	bvc L5
  1080 2552 49 FF			eor #$FF
  1081 2554 09 01			ora #$01
  1082 2556			L5
  1083 					.ENDL
  1084 2556 30 01			bmi @+
  1085 2558 88				dey
  1086 2559			@
  1087 2559 8C 6B 31			sty YES
  1088
  1089 				; GenerateCaseStatementEpilog
  1090 255C 4C 9F 25			jmp a_0004
  1091 255F			l_0143
  1092
  1093 				; GenerateCaseEqualityCheck
  1094 255F B5 99			lda :STACKORIGIN+1,x
  1095 2561 C9 03			cmp #3
  1096 2563 D0 3A			jne l_0166
  1097
  1098 2565			@
  1099
  1100 				; optimize OK (graph.inc), line = 686
  1101
  1102 2565 AD 5A 29			lda B
  1103 2568 38 E9 01			sub #$01
  1104 256B 8D 69 31			sta YR
  1105 256E AD 5B 29			lda B+1
  1106 2571 E9 00			sbc #$00
  1107 2573 8D 6A 31			sta YR+1
  1108
  1109 				; optimize OK (graph.inc), line = 688
  1110
  1111 2576 A0 01			ldy #1
  1112 2578				.LOCAL
  1113 2578 AD 6A 31			lda YR+1
  1114 257B B8 38			clv:sec
  1115 257D D0 11			bne L4
  1116 257F AD 69 31			lda YR
  1117 2582 F0 12		L1	beq L5
  1118 2584 B0 05			bcs L3
  1119 2586 A9 FF			lda #$FF
  1120 2588 4C 96 25			jmp L5
  1121 258B A9 01		L3	lda #$01
  1122 258D 4C 96 25			jmp L5
  1123 2590 50 04		L4	bvc L5
  1124 2592 49 FF			eor #$FF
  1125 2594 09 01			ora #$01
  1126 2596			L5
  1127 					.ENDL
  1128 2596 10 01			bpl @+
  1129 2598 88				dey
  1130 2599			@
  1131 2599 8C 6B 31			sty YES
  1132
  1133 				; GenerateCaseStatementEpilog
  1134 259C 4C 9F 25			jmp a_0004
  1135 259F			l_0166
  1136
  1137 				; GenerateCaseEpilog
  1138 259F			a_0004
  1139
  1140 				; optimize OK (graph.inc), line = 694
  1141
  1142 259F AD 6B 31			lda YES
  1143 25A2 F0 76			jeq l_018E
  1144
  1145 				; optimize FAIL ('GETPIXEL', graph.inc), line = 695
  1146 25A4 E8				inx
  1147 25A5 AD 67 31 95 98		mva XR :STACKORIGIN,x
  1148 25AA AD 68 31 95 A8		mva XR+1 :STACKORIGIN+STACKWIDTH,x
  1149 25AF E8				inx
  1150 25B0 AD 69 31 95 98		mva YR :STACKORIGIN,x
  1151 25B5 AD 6A 31 95 A8		mva YR+1 :STACKORIGIN+STACKWIDTH,x
  1152 25BA 20 B0 22			jsr GETPIXEL
  1153 25BD CA				dex
  1154 25BE B5 99			lda :STACKORIGIN+1,x
  1155 25C0 CD 65 29			cmp OLDCOLOR
  1156 25C3 D0 55			jne l_01A5
  1157
  1158 				; optimize FAIL ('PUTPIXEL_0095', graph.inc), line = 697
  1159 25C5 E8				inx
  1160 25C6 AD 67 31 95 98		mva XR :STACKORIGIN,x
  1161 25CB AD 68 31 95 A8		mva XR+1 :STACKORIGIN+STACKWIDTH,x
  1162 25D0 E8				inx
  1163 25D1 AD 69 31 95 98		mva YR :STACKORIGIN,x
  1164 25D6 AD 6A 31 95 A8		mva YR+1 :STACKORIGIN+STACKWIDTH,x
  1165 25DB 20 5D 22			jsr PUTPIXEL_0095
  1166
  1167 				; optimize FAIL (0, graph.inc), line = 699
  1168 25DE EE 5F 29 D0 03 EE + 	inw STACKENTRY
  1169
  1170 				; optimize OK (graph.inc), line = 701
  1171
  1172 25E6 AD 60 29			lda STACKENTRY+1
  1173 25E9 85 B1			sta :STACKORIGIN+STACKWIDTH+9
  1174 25EB AD 5F 29			lda STACKENTRY
  1175 25EE 0A				asl @
  1176 25EF 26 B1			rol :STACKORIGIN+STACKWIDTH+9
  1177 25F1 0A				asl @
  1178 25F2 26 B1			rol :STACKORIGIN+STACKWIDTH+9
  1179 25F4 18 6D 8C 27			add FLOODFILLSTACK
  1180 25F8 85 90			sta :bp2
  1181 25FA AD 8D 27			lda FLOODFILLSTACK+1
  1182 25FD 65 B1			adc :STACKORIGIN+STACKWIDTH+9
  1183 25FF 85 91			sta :bp2+1
  1184 2601 A0 00			ldy #$00
  1185 2603 AD 69 31			lda YR
  1186 2606 91 90			sta (:bp2),y
  1187 2608 C8				iny
  1188 2609 AD 6A 31			lda YR+1
  1189 260C 91 90			sta (:bp2),y
  1190 260E C8				iny
  1191 260F AD 67 31			lda XR
  1192 2612 91 90			sta (:bp2),y
  1193 2614 C8				iny
  1194 2615 AD 68 31			lda XR+1
  1195 2618 91 90			sta (:bp2),y
  1196 261A			l_01A5
  1197 261A			l_018E
  1198
  1199 				; --- ForToDoEpilog
  1200 261A EE 66 31			inc I						; inc ptr byte [CounterAddress]
  1201
  1202 261D F0 03 4C 6C 24		jne l_00E9
  1203
  1204 2622			l_00F7
  1205
  1206 				; ------------------------------------------------------------
  1207
  1208 = 3166			I	= DATAORIGIN+$084A
  1209 = 3167			XR	= DATAORIGIN+$084B
  1210 = 3169			YR	= DATAORIGIN+$084D
  1211 = 316B			YES	= DATAORIGIN+$084F
  1212 = 0003			@FORTMP_00E6	= $0003
  1213
  1214 = 3166			@VarData	= I
  1215 = 0006			@VarDataSize	= 6
  1216
  1217 2622			@exit
  1218 					.ifdef @new
  1219 					@FreeMem #@VarData #@VarDataSize
  1220 					eif
  1221 2622 60				rts						; ret
  1222 				.endl
  1223 2623			l_00DD
  1224
  1225 				; optimize FAIL ('SETCOLOR', graph.inc), line = 712
  1226 2623 E8				inx
  1227 2624 AD 5C 29 95 98		mva NEWCOLOR :STACKORIGIN,x
  1228 2629 20 4D 22			jsr SETCOLOR
  1229
  1230 				; optimize FAIL ('GETPIXEL', graph.inc), line = 714
  1231 262C E8				inx
  1232 262D AD 58 29 95 98		mva A :STACKORIGIN,x
  1233 2632 AD 59 29 95 A8		mva A+1 :STACKORIGIN+STACKWIDTH,x
  1234 2637 E8				inx
  1235 2638 AD 5A 29 95 98		mva B :STACKORIGIN,x
  1236 263D AD 5B 29 95 A8		mva B+1 :STACKORIGIN+STACKWIDTH,x
  1237 2642 20 B0 22			jsr GETPIXEL
  1238 2645 B5 98 8D 65 29		mva :STACKORIGIN,x OLDCOLOR
  1239 264A CA				dex
  1240
  1241 				; optimize OK (graph.inc), line = 716
  1242
  1243 264B A9 01 8D 5F 29		mva #$01 STACKENTRY
  1244 2650 A9 00 8D 60 29		mva #$00 STACKENTRY+1
  1245
  1246 				; optimize OK (graph.inc), line = 717
  1247
  1248 2655 A9 01 8D 5D 29		mva #$01 STACKPOINTER
  1249 265A A9 00 8D 5E 29		mva #$00 STACKPOINTER+1
  1250
  1251 				; optimize OK (graph.inc), line = 719
  1252
  1253 265F AD 60 29			lda STACKENTRY+1
  1254 2662 85 B1			sta :STACKORIGIN+STACKWIDTH+9
  1255 2664 AD 5F 29			lda STACKENTRY
  1256 2667 0A				asl @
  1257 2668 26 B1			rol :STACKORIGIN+STACKWIDTH+9
  1258 266A 0A				asl @
  1259 266B 26 B1			rol :STACKORIGIN+STACKWIDTH+9
  1260 266D 18 6D 8C 27			add FLOODFILLSTACK
  1261 2671 85 90			sta :bp2
  1262 2673 AD 8D 27			lda FLOODFILLSTACK+1
  1263 2676 65 B1			adc :STACKORIGIN+STACKWIDTH+9
  1264 2678 85 91			sta :bp2+1
  1265 267A A0 00			ldy #$00
  1266 267C AD 5A 29			lda B
  1267 267F 91 90			sta (:bp2),y
  1268 2681 C8				iny
  1269 2682 AD 5B 29			lda B+1
  1270 2685 91 90			sta (:bp2),y
  1271 2687 C8				iny
  1272 2688 AD 58 29			lda A
  1273 268B 91 90			sta (:bp2),y
  1274 268D C8				iny
  1275 268E AD 59 29			lda A+1
  1276 2691 91 90			sta (:bp2),y
  1277
  1278 				; optimize FAIL ('FLOODFILLEXEC', graph.inc), line = 721
  1279 2693 20 67 24			jsr FLOODFILLEXEC
  1280
  1281 				; --- WhileProlog
  1282 2696			l_01EF
  1283
  1284 				; optimize OK (graph.inc), line = 723
  1285
  1286 2696 AD 60 29			lda STACKENTRY+1
  1287 2699 CD 5E 29			cmp STACKPOINTER+1
  1288 269C D0 06			bne @+
  1289 269E AD 5F 29			lda STACKENTRY
  1290 26A1 CD 5D 29			cmp STACKPOINTER
  1291 26A4			@
  1292 26A4 F0 02			seq
  1293 26A6 B0 03			bcs @+
  1294 26A8 4C 8B 27			jmp l_01FE
  1295 26AB			@
  1296
  1297 				; optimize FAIL (0, graph.inc), line = 725
  1298 26AB EE 5D 29 D0 03 EE + 	inw STACKPOINTER
  1299
  1300 				; optimize OK (graph.inc), line = 727
  1301
  1302 26B3 AD 5E 29			lda STACKPOINTER+1
  1303 26B6 85 B1			sta :STACKORIGIN+STACKWIDTH+9
  1304 26B8 AD 5D 29			lda STACKPOINTER
  1305 26BB 0A				asl @
  1306 26BC 26 B1			rol :STACKORIGIN+STACKWIDTH+9
  1307 26BE 0A				asl @
  1308 26BF 26 B1			rol :STACKORIGIN+STACKWIDTH+9
  1309 26C1 18 6D 8C 27			add FLOODFILLSTACK
  1310 26C5 85 90			sta :bp2
  1311 26C7 AD 8D 27			lda FLOODFILLSTACK+1
  1312 26CA 65 B1			adc :STACKORIGIN+STACKWIDTH+9
  1313 26CC 85 91			sta :bp2+1
  1314 26CE A0 00			ldy #$00
  1315 26D0 B1 90			lda (:bp2),y
  1316 26D2 8D 61 29			sta C
  1317 26D5 C8				iny
  1318 26D6 B1 90			lda (:bp2),y
  1319 26D8 8D 62 29			sta C+1
  1320 26DB C8				iny
  1321 26DC B1 90			lda (:bp2),y
  1322 26DE 8D 63 29			sta C+2
  1323 26E1 C8				iny
  1324 26E2 B1 90			lda (:bp2),y
  1325 26E4 8D 64 29			sta C+3
  1326
  1327 				; optimize OK (graph.inc), line = 729
  1328
  1329 26E7 AD 64 29			lda C+3
  1330 26EA 8D 59 29			sta A+1
  1331 26ED AD 63 29			lda C+2
  1332 26F0 8D 58 29			sta A
  1333
  1334 				; optimize OK (graph.inc), line = 730
  1335
  1336 26F3 AD 61 29 8D 5A 29		mva C B
  1337 26F9 AD 62 29 8D 5B 29		mva C+1 B+1
  1338
  1339 				; optimize FAIL ('FLOODFILLEXEC', graph.inc), line = 732
  1340 26FF 20 67 24			jsr FLOODFILLEXEC
  1341
  1342 				; optimize OK (graph.inc), line = 734
  1343
  1344 2702 AD 60 29			lda STACKENTRY+1
  1345 2705 C9 01			cmp #$01
  1346 2707 D0 03			bne @+
  1347 2709 AD 5F 29			lda STACKENTRY
  1348 270C			@
  1349 270C F0 02			seq
  1350 270E B0 03			bcs @+
  1351 2710 4C 88 27			jmp l_0222
  1352 2713			@
  1353
  1354 				; optimize OK (graph.inc), line = 736
  1355
  1356 2713 AD 5F 29			lda STACKENTRY
  1357 2716 38 ED 5D 29			sub STACKPOINTER
  1358 271A 8D 5F 29			sta STACKENTRY
  1359 271D AD 60 29			lda STACKENTRY+1
  1360 2720 ED 5E 29			sbc STACKPOINTER+1
  1361 2723 8D 60 29			sta STACKENTRY+1
  1362
  1363 				; optimize OK (graph.inc), line = 738
  1364
  1365 2726 AD 60 29			lda STACKENTRY+1
  1366 2729 C9 01			cmp #$01
  1367 272B D0 03			bne @+
  1368 272D AD 5F 29			lda STACKENTRY
  1369 2730			@
  1370 2730 F0 02			seq
  1371 2732 B0 03			bcs @+
  1372 2734 4C 3A 27			jmp l_023E
  1373 2737			@
  1374
  1375 2737 4C 8B 27			jmp @exit					; exit
  1376 273A			l_023E
  1377
  1378 				; optimize OK (graph.inc), line = 740
  1379
  1380 273A AD 5D 29			lda STACKPOINTER
  1381 273D 18 69 01			add #$01
  1382 2740 85 A1			sta :STACKORIGIN+9
  1383 2742 AD 5E 29			lda STACKPOINTER+1
  1384 2745 69 00			adc #$00
  1385 2747 06 A1			asl :STACKORIGIN+9
  1386 2749 2A				rol @
  1387 274A 06 A1			asl :STACKORIGIN+9
  1388 274C 2A				rol @
  1389 274D 85 B1			sta :STACKORIGIN+STACKWIDTH+9
  1390 274F AD 8C 27			lda FLOODFILLSTACK
  1391 2752 18 65 A1			add :STACKORIGIN+9
  1392 2755 85 86			sta :edx
  1393 2757 AD 8D 27			lda FLOODFILLSTACK+1
  1394 275A 65 B1			adc :STACKORIGIN+STACKWIDTH+9
  1395 275C 85 87			sta :edx+1
  1396 275E AD 8C 27			lda FLOODFILLSTACK
  1397 2761 18 69 04			add #$04
  1398 2764 85 8A			sta :ecx
  1399 2766 AD 8D 27			lda FLOODFILLSTACK+1
  1400 2769 69 00			adc #$00
  1401 276B 85 8B			sta :ecx+1
  1402 276D AD 60 29			lda STACKENTRY+1
  1403 2770 85 83			sta :eax+1
  1404 2772 AD 5F 29			lda STACKENTRY
  1405 2775 0A				asl @
  1406 2776 26 83			rol :eax+1
  1407 2778 0A				asl @
  1408 2779 26 83			rol :eax+1
  1409 277B 85 82			sta :eax
  1410 277D 20 D3 20			jsr @move
  1411
  1412 				; optimize OK (graph.inc), line = 742
  1413
  1414 2780 A9 00 8D 5D 29		mva #$00 STACKPOINTER
  1415 2785 8D 5E 29			sta STACKPOINTER+1
  1416 2788			l_0222
  1417 2788 4C 96 26			jmp l_01EF
  1418 278B			l_01FE
  1419
  1420 				; ------------------------------------------------------------
  1421
  1422 = 2958			A	= DATAORIGIN+$003C
  1423 = 295A			B	= DATAORIGIN+$003E
  1424 = 295C			NEWCOLOR	= DATAORIGIN+$0040
  1425 = 0200			FILLSTACKSIZE	= $0200
  1426 = 295D			STACKPOINTER	= DATAORIGIN+$0041
  1427 = 295F			STACKENTRY	= DATAORIGIN+$0043
  1428 = 2961			C	= DATAORIGIN+$0045
  1429 = 2965			OLDCOLOR	= DATAORIGIN+$0049
  1430 = 2966			adr.FLOODFILLSTACK	= DATAORIGIN+$004A
  1431 278B			.var FLOODFILLSTACK	= adr.FLOODFILLSTACK .word
  1432
  1433 = 2958			@VarData	= A
  1434 = 080E			@VarDataSize	= 2062
  1435
  1436 278B			@exit
  1437 					.ifdef @new
  1438 					@FreeMem #@VarData #@VarDataSize
  1439 					eif
  1440 278B 60				rts						; ret
  1441 = 278C 66 29		FLOODFILLSTACK
  1441 				.endl
  1442
  1443 				; ------------------------------------------------------------
  1444
  1445 = FFFFFF80		CURRENTDRIVER	= $FFFFFF80
  1446 = 0000			DETECT	= $0000
  1447 = 0001			CGA	= $0001
  1448 = 0002			MCGA	= $0002
  1449 = 0003			EGA	= $0003
  1450 = 0004			EGA64	= $0004
  1451 = 0005			EGAMONO	= $0005
  1452 = 0006			LOWRES	= $0006
  1453 = 0007			HERCMONO	= $0007
  1454 = 0009			VGA	= $0009
  1455 = 000A			VESA	= $000A
  1456 = 000B			D1BIT	= $000B
  1457 = 000C			D2BIT	= $000C
  1458 = 000D			D4BIT	= $000D
  1459 = 000E			D6BIT	= $000E
  1460 = 000F			D8BIT	= $000F
  1461 = 0010			D12BIT	= $0010
  1462 = 0018			M640X400	= $0018
  1463 = 0018			M640X480	= $0018
  1464 = 0000			GROK	= $0000
  1465 = FFFFFFFF		GRNOINITGRAPH	= $FFFFFFFF
  1466 = FFFFFFFE		GRNOTDETECTED	= $FFFFFFFE
  1467 = FFFFFFFD		GRFILENOTFOUND	= $FFFFFFFD
  1468 = FFFFFFFC		GRINVALIDDRIVER	= $FFFFFFFC
  1469 = FFFFFFFB		GRNOLOADMEM	= $FFFFFFFB
  1470 = FFFFFFFA		GRNOSCANMEM	= $FFFFFFFA
  1471 = FFFFFFF9		GRNOFLOODMEM	= $FFFFFFF9
  1472 = FFFFFFF8		GRFONTNOTFOUND	= $FFFFFFF8
  1473 = FFFFFFF7		GRNOFONTMEM	= $FFFFFFF7
  1474 = FFFFFFF6		GRINVALIDMODE	= $FFFFFFF6
  1475 = FFFFFFF5		GRERROR	= $FFFFFFF5
  1476 = FFFFFFF4		GRIOERROR	= $FFFFFFF4
  1477 = FFFFFFF3		GRINVALIDFONT	= $FFFFFFF3
  1478 = FFFFFFF2		GRINVALIDFONTNUM	= $FFFFFFF2
  1479 = FFFFFFEE		GRINVALIDVERSION	= $FFFFFFEE
  1480 = 0000			CGAC0	= $0000
  1481 = 0001			CGAC1	= $0001
  1482 = 0002			CGAC2	= $0002
  1483 = 0003			CGAC3	= $0003
  1484 = 0004			CGAHI	= $0004
  1485 = 0000			MCGAC0	= $0000
  1486 = 0001			MCGAC1	= $0001
  1487 = 0002			MCGAC2	= $0002
  1488 = 0003			MCGAC3	= $0003
  1489 = 0004			MCGAMED	= $0004
  1490 = 0005			MCGAHI	= $0005
  1491 = 0000			EGALO	= $0000
  1492 = 0001			EGAHI	= $0001
  1493 = 0000			EGA64LO	= $0000
  1494 = 0001			EGA64HI	= $0001
  1495 = 0003			EGAMONOHI	= $0003
  1496 = 000A			VGALO	= $000A
  1497 = 001F			VGAMED	= $001F
  1498 = 0018			VGAHI	= $0018
  1499 = 2928			WIN_LEFT	= DATAORIGIN+$000C
  1500 = 292A			WIN_RIGHT	= DATAORIGIN+$000E
  1501 = 292C			WIN_TOP	= DATAORIGIN+$0010
  1502 = 292E			WIN_BOTTOM	= DATAORIGIN+$0012
  1503 = 2930			GRAPHRESULT	= DATAORIGIN+$0014
  1504 = 2931			GETCOLOR	= DATAORIGIN+$0015
  1505 = 2932			adr.LASTARCCOORDS	= DATAORIGIN+$0016
  1506 278E			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
  1507 = 2932			LASTARCCOORDS.X	= DATAORIGIN+$0016
  1508 = 2934			LASTARCCOORDS.Y	= DATAORIGIN+$0018
  1509 = 2936			LASTARCCOORDS.XSTART	= DATAORIGIN+$001A
  1510 = 2938			LASTARCCOORDS.YSTART	= DATAORIGIN+$001C
  1511 = 293A			LASTARCCOORDS.XEND	= DATAORIGIN+$001E
  1512 = 293C			LASTARCCOORDS.YEND	= DATAORIGIN+$0020
  1513 = 293E			CURRENTX	= DATAORIGIN+$0022
  1514 = 2940			CURRENTY	= DATAORIGIN+$0024
  1515 = 2942			VIDEORAM	= DATAORIGIN+$0026
  1516 = 2944			SCANLINE_WIDTH	= DATAORIGIN+$0028
  1517
  1518 = 278E 32 29		LASTARCCOORDS
  1518 				.endl							; UNIT GRAPH
  1519
  1520 2790			.local	MAINPROC					; PROCEDURE
  1521
  1522 				; optimize FAIL ('GRAPH.INITGRAPH_0080', examples\fill.pas), line = 14
  1523 2790 E8				inx
  1524 2791 A9 07 95 98			mva #$07 :STACKORIGIN,x
  1525 2795 20 D4 21			jsr GRAPH.INITGRAPH_0080
  1526
  1527 				; optimize FAIL (100, examples\fill.pas), line = 15
  1528 					@printSTRING #CODEORIGIN+$000D
  1528 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
  1528 2798 A0 20		 LDY> CODEORIGIN+$000D
  1528 279A A9 0D		 LDA< CODEORIGIN+$000D
  1528 279C 20 26 20		 JSR @PRINTSTRING
  1529 279F 20 18 20			@printEOL
  1530
  1531 				; optimize OK (examples\fill.pas), line = 16
  1532
  1533 27A2 A9 0F			lda #$0F
  1534 27A4 8D C8 02			sta $02C8
  1535
  1536 				; optimize FAIL ('GRAPH.SETCOLOR', examples\fill.pas), line = 17
  1537 27A7 E8				inx
  1538 27A8 A9 02 95 98			mva #$02 :STACKORIGIN,x
  1539 27AC 20 4D 22			jsr GRAPH.SETCOLOR
  1540
  1541 				; optimize FAIL ('GRAPH.PUTPIXEL_0095', examples\fill.pas), line = 18
  1542 27AF E8				inx
  1543 27B0 A9 14 95 98			mva #$14 :STACKORIGIN,x
  1544 27B4 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1545 27B8 E8				inx
  1546 27B9 A9 03 95 98			mva #$03 :STACKORIGIN,x
  1547 27BD A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1548 27C1 20 5D 22			jsr GRAPH.PUTPIXEL_0095
  1549
  1550 				; optimize FAIL ('GRAPH.MOVETO', examples\fill.pas), line = 19
  1551 27C4 E8				inx
  1552 27C5 A9 14 95 98			mva #$14 :STACKORIGIN,x
  1553 27C9 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1554 27CD E8				inx
  1555 27CE A9 03 95 98			mva #$03 :STACKORIGIN,x
  1556 27D2 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1557 27D6 20 0F 23			jsr GRAPH.MOVETO
  1558
  1559 				; optimize FAIL ('GRAPH.LINETO', examples\fill.pas), line = 20
  1560 27D9 E8				inx
  1561 27DA A9 78 95 98			mva #$78 :STACKORIGIN,x
  1562 27DE A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1563 27E2 E8				inx
  1564 27E3 A9 03 95 98			mva #$03 :STACKORIGIN,x
  1565 27E7 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1566 27EB 20 9A 23			jsr GRAPH.LINETO
  1567
  1568 				; optimize FAIL ('GRAPH.LINETO', examples\fill.pas), line = 21
  1569 27EE E8				inx
  1570 27EF A9 78 95 98			mva #$78 :STACKORIGIN,x
  1571 27F3 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1572 27F7 E8				inx
  1573 27F8 A9 14 95 98			mva #$14 :STACKORIGIN,x
  1574 27FC A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1575 2800 20 9A 23			jsr GRAPH.LINETO
  1576
  1577 				; optimize FAIL ('GRAPH.LINETO', examples\fill.pas), line = 22
  1578 2803 E8				inx
  1579 2804 A9 14 95 98			mva #$14 :STACKORIGIN,x
  1580 2808 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1581 280C E8				inx
  1582 280D A9 14 95 98			mva #$14 :STACKORIGIN,x
  1583 2811 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1584 2815 20 9A 23			jsr GRAPH.LINETO
  1585
  1586 				; optimize FAIL ('GRAPH.LINETO', examples\fill.pas), line = 23
  1587 2818 E8				inx
  1588 2819 A9 14 95 98			mva #$14 :STACKORIGIN,x
  1589 281D A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1590 2821 E8				inx
  1591 2822 A9 03 95 98			mva #$03 :STACKORIGIN,x
  1592 2826 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1593 282A 20 9A 23			jsr GRAPH.LINETO
  1594
  1595 				; optimize OK (examples\fill.pas), line = 24
  1596
  1597 282D A9 03			lda #$03
  1598 282F 8D FD 02			sta $02FD
  1599
  1600 				; optimize FAIL ('GRAPH.FLOODFILL', examples\fill.pas), line = 25
  1601 2832 E8				inx
  1602 2833 A9 32 95 98			mva #$32 :STACKORIGIN,x
  1603 2837 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1604 283B E8				inx
  1605 283C A9 1E 95 98			mva #$1E :STACKORIGIN,x
  1606 2840 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1607 2844 E8				inx
  1608 2845 A9 02 95 98			mva #$02 :STACKORIGIN,x
  1609 2849 20 48 24			jsr GRAPH.FLOODFILL
  1610
  1611 				; optimize FAIL ('GRAPH.SETCOLOR', examples\fill.pas), line = 26
  1612 284C E8				inx
  1613 284D A9 03 95 98			mva #$03 :STACKORIGIN,x
  1614 2851 20 4D 22			jsr GRAPH.SETCOLOR
  1615
  1616 				; optimize FAIL ('GRAPH.PUTPIXEL_0095', examples\fill.pas), line = 27
  1617 2854 E8				inx
  1618 2855 A9 32 95 98			mva #$32 :STACKORIGIN,x
  1619 2859 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1620 285D E8				inx
  1621 285E A9 23 95 98			mva #$23 :STACKORIGIN,x
  1622 2862 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1623 2866 20 5D 22			jsr GRAPH.PUTPIXEL_0095
  1624
  1625 				; optimize FAIL ('GRAPH.MOVETO', examples\fill.pas), line = 28
  1626 2869 E8				inx
  1627 286A A9 32 95 98			mva #$32 :STACKORIGIN,x
  1628 286E A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1629 2872 E8				inx
  1630 2873 A9 23 95 98			mva #$23 :STACKORIGIN,x
  1631 2877 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1632 287B 20 0F 23			jsr GRAPH.MOVETO
  1633
  1634 				; optimize FAIL ('GRAPH.LINETO', examples\fill.pas), line = 29
  1635 287E E8				inx
  1636 287F A9 92 95 98			mva #$92 :STACKORIGIN,x
  1637 2883 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1638 2887 E8				inx
  1639 2888 A9 23 95 98			mva #$23 :STACKORIGIN,x
  1640 288C A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1641 2890 20 9A 23			jsr GRAPH.LINETO
  1642
  1643 				; optimize FAIL ('GRAPH.LINETO', examples\fill.pas), line = 30
  1644 2893 E8				inx
  1645 2894 A9 92 95 98			mva #$92 :STACKORIGIN,x
  1646 2898 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1647 289C E8				inx
  1648 289D A9 46 95 98			mva #$46 :STACKORIGIN,x
  1649 28A1 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1650 28A5 20 9A 23			jsr GRAPH.LINETO
  1651
  1652 				; optimize FAIL ('GRAPH.LINETO', examples\fill.pas), line = 31
  1653 28A8 E8				inx
  1654 28A9 A9 32 95 98			mva #$32 :STACKORIGIN,x
  1655 28AD A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1656 28B1 E8				inx
  1657 28B2 A9 46 95 98			mva #$46 :STACKORIGIN,x
  1658 28B6 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1659 28BA 20 9A 23			jsr GRAPH.LINETO
  1660
  1661 				; optimize FAIL ('GRAPH.LINETO', examples\fill.pas), line = 32
  1662 28BD E8				inx
  1663 28BE A9 32 95 98			mva #$32 :STACKORIGIN,x
  1664 28C2 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1665 28C6 E8				inx
  1666 28C7 A9 23 95 98			mva #$23 :STACKORIGIN,x
  1667 28CB A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1668 28CF 20 9A 23			jsr GRAPH.LINETO
  1669
  1670 				; optimize OK (examples\fill.pas), line = 33
  1671
  1672 28D2 A9 01			lda #$01
  1673 28D4 8D FD 02			sta $02FD
  1674
  1675 				; optimize FAIL ('GRAPH.FLOODFILL', examples\fill.pas), line = 34
  1676 28D7 E8				inx
  1677 28D8 A9 41 95 98			mva #$41 :STACKORIGIN,x
  1678 28DC A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1679 28E0 E8				inx
  1680 28E1 A9 32 95 98			mva #$32 :STACKORIGIN,x
  1681 28E5 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1682 28E9 E8				inx
  1683 28EA A9 03 95 98			mva #$03 :STACKORIGIN,x
  1684 28EE 20 48 24			jsr GRAPH.FLOODFILL
  1685
  1686 				; optimize FAIL (100, examples\fill.pas), line = 35
  1687 					@print #$7D
  1687 				 LDY# $7D\ JSR @PRINT
  1687 28F1 A0 7D		 LDY# $7D
  1687 28F3 20 1D 20		 JSR @PRINT
  1688
  1689 				; optimize FAIL (100, examples\fill.pas), line = 36
  1690 					@printSTRING #CODEORIGIN+$000D
  1690 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
  1690 28F6 A0 20		 LDY> CODEORIGIN+$000D
  1690 28F8 A9 0D		 LDA< CODEORIGIN+$000D
  1690 28FA 20 26 20		 JSR @PRINTSTRING
  1691 28FD 20 18 20			@printEOL
  1692
  1693 				; --- RepeatUntilProlog
  1694 2900			l_02B5
  1695
  1696 				; optimize OK (examples\fill.pas), line = 38
  1697
  1698 2900 A9 00			lda #$00
  1699 2902 F0 FC			jeq l_02B5
  1700 2904			@exit
  1701 					.ifdef @new
  1702 					@FreeMem #@VarData #@VarDataSize
  1703 					eif
  1704 2904 60				rts						; ret
  1705 				.endl
  1706 2905			l_001F
  1707
  1708 				; optimize FAIL ('MAINPROC', examples\fill.pas), line = 42
  1709 2905 20 90 27			jsr MAINPROC
  1710
  1711 				; ------------------------------------------------------------
  1712
  1713 2908			@exit
  1714
  1715 2908 A2 00		@halt	ldx #0
  1716 290A 9A				txs
  1717
  1718 290B 60				rts
  1719
  1720 				; ------------------------------------------------------------
  1721
  1722 290C 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1723
  1724 				; ------------------------------------------------------------
  1725
  1726 291C			.local	@DEFINES
  1727 291C			ATARI
  1728 				.endl
  1729
  1730 				.endl							; MAIN
  1731
  1732 				; ------------------------------------------------------------
  1733 				; ------------------------------------------------------------
  1734
  1735 				.macro	UNITINITIALIZATION
  1736 				
  1737 					.ifdef MAIN.SYSTEM.@UnitInit
  1738 					jsr MAIN.SYSTEM.@UnitInit
  1739 					eif
  1740 				
  1741 					.ifdef MAIN.DOS.@UnitInit
  1742 					jsr MAIN.DOS.@UnitInit
  1743 					eif
  1744 				
  1745 					.ifdef MAIN.STRUTILS.@UnitInit
  1746 					jsr MAIN.STRUTILS.@UnitInit
  1747 					eif
  1748 				
  1749 					.ifdef MAIN.SYSUTILS.@UnitInit
  1750 					jsr MAIN.SYSUTILS.@UnitInit
  1751 					eif
  1752 				
  1753 					.ifdef MAIN.ATARI.@UnitInit
  1754 					jsr MAIN.ATARI.@UnitInit
  1755 					eif
  1756 				
  1757 					.ifdef MAIN.CRT.@UnitInit
  1758 					jsr MAIN.CRT.@UnitInit
  1759 					eif
  1760 				
  1761 					.ifdef MAIN.TYPES.@UnitInit
  1762 					jsr MAIN.TYPES.@UnitInit
  1763 					eif
  1764 				
  1765 					.ifdef MAIN.GRAPH.@UnitInit
  1766 					jsr MAIN.GRAPH.@UnitInit
  1767 					eif
  1768 				.endm
  1769
  1770 				; ------------------------------------------------------------
  1771
  1772 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1773 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1773 				SYSTEM: $219C..$21D3
  1774 					eif
  1775
  1776 					ift .SIZEOF(MAIN.DOS) > 0
  1777 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
  1778 					eif
  1779
  1780 					ift .SIZEOF(MAIN.STRUTILS) > 0
  1781 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
  1782 					eif
  1783
  1784 					ift .SIZEOF(MAIN.SYSUTILS) > 0
  1785 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
  1786 					eif
  1787
  1788 					ift .SIZEOF(MAIN.ATARI) > 0
  1789 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1790 					eif
  1791
  1792 					ift .SIZEOF(MAIN.CRT) > 0
  1793 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1794 					eif
  1795
  1796 					ift .SIZEOF(MAIN.TYPES) > 0
  1797 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
  1798 					eif
  1799
  1800 					ift .SIZEOF(MAIN.GRAPH) > 0
  1801 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
  1801 				GRAPH: $21D4..$278F
  1802 					eif
  1803
  1804 					.print 'CODE: ',CODEORIGIN,'..',*-1
  1804 				CODE: $2000..$291B
  1805
  1806 				; ------------------------------------------------------------
  1807
  1808 291C			DATAORIGIN
  1809 291C 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $27 $00  $00 $00 $17
  1810
  1811 = 0013			VARINITSIZE	= *-DATAORIGIN
  1812 = 0850			VARDATASIZE	= 2128
  1813
  1814 = 316C			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1815
  1816 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1816 				DATA: $291C..$316C
  1817
  1818 02E0-02E1> 70 21			run START
  1819
  1820 				; ------------------------------------------------------------
  1821
  1822 				.macro	STATICDATA
  1823 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $09 $46 $49  $4C $4C $20 $54 $45 $53 $54 $00
  1824 				.endm
  1825
  1826 					end
