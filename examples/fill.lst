mads 2.1.0 build 8 (23 Dec 19)
   388 					opt l+
   101
   102 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   102 				ZPAGE: $0080..$00D7
   103
   104 				.print 'RTLIB: ',RTLIB,'..',*-1
   104 				RTLIB: $200B..$21A8
   105
   106 				; ------------------------------------------------------------
   107
   108 21A9			START
   109 21A9 BA				tsx
   110 21AA 8E E4 28			stx MAIN.@halt+1
   111
   112 					.ifdef fmulinit
   113 					fmulinit
   114 					eif
   115
   116 = 083D			VLEN	= VARDATASIZE-VARINITSIZE
   117 = 290A			VADR	= DATAORIGIN+VARINITSIZE
   118
   119 					ift VADR > $BFFF
   120 					ert 'Invalid memory address range ',VADR
   121 					eli (VLEN>0) && (VLEN<=256)
   122 					ldx #256-VLEN
   123 					lda #0
   124 					sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>0
   126 					@fill #VADR #VLEN #0
   126 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   126 21AD A9 0A 85 88 A9 29 +  MWA #VADR @FILL.PTR1
   126 21B5 A9 3D 85 8C A9 08 +  MWA #VLEN @FILL.PTR3
   126 21BD A9 00 85 84		 MVA #0 @FILL.PTR2
   126 21C1 20 24 21		 JSR @FILL
   127 					eif
   128
   129 					.ifdef MAIN.@DEFINES.ROMOFF
   130 					icl 'atari\romoff.asm'
   131 					.endif
   132
   133 21C4 A9 47 85 82 A9 31 + 	mwa #PROGRAMSTACK psptr
   134
   135 21CC A2 0F			ldx #$0f					; DOS II+/D ParamStr
   136 21CE BD 40 03 9D E7 28 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   137
   138 21D7 E8				inx						; X = 0
   139 21D8 86 90			stx bp						; BP = 0
   140
   141 21DA 8E 08 D2			stx audctl					; reset POKEY
   142 21DD A9 03			lda #3
   143 21DF 8D 0F D2			sta skctl
   144
   145 21E2 CA				dex						; X = 255
   146
   147 21E3				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: fill.a65]
Source: fill.a65
   148
   149 21E3			.local	MAIN						; PROCEDURE
   150
   151 21E3 4C E0 28			jmp l_0012
   152
   153 				; ------------------------------------------------------------
   154
   155 21E6			.local	SYSTEM						; UNIT
   156
   157 21E6			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   158
   159 				; ------------------------------------------------------------
   160
   161 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   162 				; as Pointer
   163 21E6 B5 98 85 8C			mva :STACKORIGIN,x VALUE
   164 21EA CA				dex
   165
   166 				; ------------------------------------------------------------
   167
   168 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   169 				; as Pointer
   170 21EB B5 98 85 88			mva :STACKORIGIN,x A
   171 21EF B5 A8 85 89			mva :STACKORIGIN+STACKWIDTH,x A+1
   172 21F3 CA				dex
   173
   174 				; ---------------------  ASM Block 021  ---------------------
   175
   176 21F4 A0 00			ldy #0
   177 21F6 A5 8C 91 88			mva value (edx),y
   178
   179
   180 				; ------------------------------------------------------------
   181
   182 = 0088			A	= edx
   183 = 008C			VALUE	= ecx
   184 21FA			@exit
   185 					.ifdef @new
   186 					lda <@VarData
   187 					sta :ztmp
   188 					lda >@VarData
   189 					ldy #@VarDataSize-1
   190 					jmp @FreeMem
   191 					eif
   192 21FA 60				rts						; ret
   193 				.endl
   194
   195 21FB			.local	MOVE_0054					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   196
   197 				; ------------------------------------------------------------
   198
   199 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   200 				; as Pointer
   201 21FB B5 98 85 84			mva :STACKORIGIN,x COUNT
   202 21FF B5 A8 85 85			mva :STACKORIGIN+STACKWIDTH,x COUNT+1
   203 2203 CA				dex
   204
   205 				; ------------------------------------------------------------
   206
   207 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   208 				; as Pointer
   209 2204 B5 98 85 8C			mva :STACKORIGIN,x DEST
   210 2208 B5 A8 85 8D			mva :STACKORIGIN+STACKWIDTH,x DEST+1
   211 220C CA				dex
   212
   213 				; ------------------------------------------------------------
   214
   215 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   216 				; as Pointer
   217 220D B5 98 85 88			mva :STACKORIGIN,x SOURCE
   218 2211 B5 A8 85 89			mva :STACKORIGIN+STACKWIDTH,x SOURCE+1
   219 2215 CA				dex
   220
   221 				; ---------------------  ASM Block 032  ---------------------
   222
   223 2216 20 CF 20			jsr @move
   224
   225
   226 				; ------------------------------------------------------------
   227
   228 = 0088			SOURCE	= edx
   229 = 008C			DEST	= ecx
   230 = 0084			COUNT	= eax
   231 2219			@exit
   232 					.ifdef @new
   233 					lda <@VarData
   234 					sta :ztmp
   235 					lda >@VarData
   236 					ldy #@VarDataSize-1
   237 					jmp @FreeMem
   238 					eif
   239 2219 60				rts						; ret
   240 				.endl
   241
   242 				; ------------------------------------------------------------
   243
   244 = 0101			__PORTB_BANKS	= $0101
   245 = 0648			M_PI_2	= $0648
   246 = 0192			D_PI_2	= $0192
   247 = 0004			D_PI_180	= $04
   248 = 0000			MGTIA	= $00
   249 = 0080			MVBXE	= $80
   250 = 0000			VBXE_XDLADR	= $00
   251 = 0100			VBXE_BCBADR	= $0100
   252 = 1000			VBXE_MAPADR	= $1000
   253 = 5000			VBXE_OVRADR	= $5000
   254 = B000			VBXE_WINDOW	= $B000
   255 = 0000			IDLI	= $00
   256 = 0001			IVBL	= $01
   257 = 00FE			CH_DELCHR	= $FE
   258 = 009B			CH_ENTER	= $9B
   259 = 001B			CH_ESC	= $1B
   260 = 001C			CH_CURS_UP	= $1C
   261 = 001D			CH_CURS_DOWN	= $1D
   262 = 001E			CH_CURS_LEFT	= $1E
   263 = 001F			CH_CURS_RIGHT	= $1F
   264 = 007F			CH_TAB	= $7F
   265 = 009B			CH_EOL	= $9B
   266 = 007D			CH_CLR	= $7D
   267 = 00FD			CH_BELL	= $FD
   268 = 007E			CH_DEL	= $7E
   269 = 009C			CH_DELLINE	= $9C
   270 = 009D			CH_INSLINE	= $9D
   271 = 0000			COLOR_BLACK	= $00
   272 = 000E			COLOR_WHITE	= $0E
   273 = 0032			COLOR_RED	= $32
   274 = 0096			COLOR_CYAN	= $96
   275 = 0068			COLOR_VIOLET	= $68
   276 = 00C4			COLOR_GREEN	= $C4
   277 = 0074			COLOR_BLUE	= $74
   278 = 00EE			COLOR_YELLOW	= $EE
   279 = 0028			COLOR_ORANGE	= $28
   280 = 00E4			COLOR_BROWN	= $E4
   281 = 003C			COLOR_LIGHTRED	= $3C
   282 = 0004			COLOR_GRAY1	= $04
   283 = 0006			COLOR_GRAY2	= $06
   284 = 000A			COLOR_GRAY3	= $0A
   285 = 00CC			COLOR_LIGHTGREEN	= $CC
   286 = 007C			COLOR_LIGHTBLUE	= $7C
   287 = 0004			FMOPENREAD	= $04
   288 = 0008			FMOPENWRITE	= $08
   289 = 0009			FMOPENAPPEND	= $09
   290 = 000C			FMOPENREADWRITE	= $0C
   291 = 28F7			SCREENWIDTH	= DATAORIGIN+$0000
   292 = 28F9			SCREENHEIGHT	= DATAORIGIN+$0002
   293 = 28FB			DATESEPARATOR	= DATAORIGIN+$0004
   294 = D014			TVSYSTEM	= $D014
   295 = 02C0			adr.PALETTE	= $02C0
   296 221A			.var PALETTE	= adr.PALETTE .word
   297 = D012			adr.HPALETTE	= $D012
   298 221A			.var HPALETTE	= adr.HPALETTE .word
   299 = 28FC			FILEMODE	= DATAORIGIN+$0005
   300 = 28FD			GRAPHMODE	= DATAORIGIN+$0006
   301 = 28FE			IORESULT	= DATAORIGIN+$0007
   302 = 28FF			EOLN	= DATAORIGIN+$0008
   303 = 2900			RNDSEED	= DATAORIGIN+$0009
   304
   305 = 221A C0 02		PALETTE
   305 = 221C 12 D0		HPALETTE
   305 				.endl							; UNIT SYSTEM
   306
   307 				; ------------------------------------------------------------
   308
   309 221E			.local	ATARI						; UNIT
   310
   311 				; ------------------------------------------------------------
   312
   313 = 0012			RTCLOK	= $12
   314 = 004D			ATRACT	= $4D
   315 = 0052			LMARGIN	= $52
   316 = 0053			RMARGIN	= $53
   317 = 0054			ROWCRS	= $54
   318 = 0055			COLCRS	= $55
   319 = 0057			DINDEX	= $57
   320 = 0058			SAVMSC	= $58
   321 = 0062			PALNTS	= $62
   322 = 006A			RAMTOP	= $6A
   323 = 0200			VDSLST	= $0200
   324 = 0230			SDLSTL	= $0230
   325 = 0290			TXTROW	= $0290
   326 = 0291			TXTCOL	= $0291
   327 = 0293			TINDEX	= $0293
   328 = 0294			TXTMSC	= $0294
   329 = 022F			SDMCTL	= $022F
   330 = 026F			GPRIOR	= $026F
   331 = 02F0			CRSINH	= $02F0
   332 = 02F3			CHACT	= $02F3
   333 = 02F4			CHBAS	= $02F4
   334 = 02FC			CH	= $02FC
   335 = 02C0			PCOLR0	= $02C0
   336 = 02C1			PCOLR1	= $02C1
   337 = 02C2			PCOLR2	= $02C2
   338 = 02C3			PCOLR3	= $02C3
   339 = 02C4			COLOR0	= $02C4
   340 = 02C5			COLOR1	= $02C5
   341 = 02C6			COLOR2	= $02C6
   342 = 02C7			COLOR3	= $02C7
   343 = 02C8			COLOR4	= $02C8
   344 = 02C8			COLBAKS	= $02C8
   345 = D000			HPOSP0	= $D000
   346 = D001			HPOSP1	= $D001
   347 = D002			HPOSP2	= $D002
   348 = D003			HPOSP3	= $D003
   349 = D004			HPOSM0	= $D004
   350 = D005			HPOSM1	= $D005
   351 = D006			HPOSM2	= $D006
   352 = D007			HPOSM3	= $D007
   353 = D008			SIZEP0	= $D008
   354 = D009			SIZEP1	= $D009
   355 = D00A			SIZEP2	= $D00A
   356 = D00B			SIZEP3	= $D00B
   357 = D00C			SIZEM	= $D00C
   358 = D00D			GRAFP0	= $D00D
   359 = D00E			GRAFP1	= $D00E
   360 = D00F			GRAFP2	= $D00F
   361 = D010			GRAFP3	= $D010
   362 = D011			GRAFM	= $D011
   363 = D004			P0PF	= $D004
   364 = D014			PAL	= $D014
   365 = D012			COLPM0	= $D012
   366 = D013			COLPM1	= $D013
   367 = D014			COLPM2	= $D014
   368 = D015			COLPM3	= $D015
   369 = D016			COLPF0	= $D016
   370 = D017			COLPF1	= $D017
   371 = D018			COLPF2	= $D018
   372 = D019			COLPF3	= $D019
   373 = D01A			COLBK	= $D01A
   374 = D01B			PRIOR	= $D01B
   375 = D01D			GRACTL	= $D01D
   376 = D01E			HITCLR	= $D01E
   377 = D200			AUDF1	= $D200
   378 = D201			AUDC1	= $D201
   379 = D202			AUDF2	= $D202
   380 = D203			AUDC2	= $D203
   381 = D204			AUDF3	= $D204
   382 = D205			AUDC3	= $D205
   383 = D206			AUDF4	= $D206
   384 = D207			AUDC4	= $D207
   385 = D208			AUDCTL	= $D208
   386 = D20F			SKSTAT	= $D20F
   387 = D301			PORTB	= $D301
   388 = D400			DMACTL	= $D400
   389 = D401			CHACTL	= $D401
   390 = D402			DLISTL	= $D402
   391 = D404			HSCROL	= $D404
   392 = D405			VSCROL	= $D405
   393 = D407			PMBASE	= $D407
   394 = D409			CHBASE	= $D409
   395 = D40A			WSYNC	= $D40A
   396 = D40B			VCOUNT	= $D40B
   397 = D40C			PENH	= $D40C
   398 = D40D			PENV	= $D40D
   399 = D40E			NMIEN	= $D40E
   400
   401 				.endl							; UNIT ATARI
   402
   403 				; ------------------------------------------------------------
   404
   405 221E			.local	CRT						; UNIT
   406
   407 				; ------------------------------------------------------------
   408
   409 = 2902			TEXTATTR	= DATAORIGIN+$000B
   410 = D01F			CONSOL	= $D01F
   411 = 0000			CN_START_SELECT_OPTION	= $00
   412 = 0001			CN_SELECT_OPTION	= $01
   413 = 0002			CN_START_OPTION	= $02
   414 = 0003			CN_OPTION	= $03
   415 = 0004			CN_START_SELECT	= $04
   416 = 0005			CN_SELECT	= $05
   417 = 0006			CN_START	= $06
   418 = 0007			CN_NONE	= $07
   419 = 0000			BW40	= $00
   420 = 0001			CO40	= $01
   421 = 0002			BW80	= $02
   422 = 0003			CO80	= $03
   423 = 0007			MONO	= $07
   424 = 0001			C40	= $01
   425 = 0003			C80	= $03
   426 = 0000			BLACK	= $00
   427 = 0001			BLUE	= $01
   428 = 0002			GREEN	= $02
   429 = 0003			CYAN	= $03
   430 = 0004			RED	= $04
   431 = 0005			MAGENTA	= $05
   432 = 0006			BROWN	= $06
   433 = 0007			LIGHTGRAY	= $07
   434 = 0008			DARKGRAY	= $08
   435 = 0009			LIGHTBLUE	= $09
   436 = 000A			LIGHTGREEN	= $0A
   437 = 000B			LIGHTCYAN	= $0B
   438 = 000C			LIGHTRED	= $0C
   439 = 000D			LIGHTMAGENTA	= $0D
   440 = 000E			YELLOW	= $0E
   441 = 000F			WHITE	= $0F
   442 = 0080			BLINK	= $80
   443
   444 				.endl							; UNIT CRT
   445
   446 				; ------------------------------------------------------------
   447
   448 221E			.local	TYPES						; UNIT
   449
   450 				; ------------------------------------------------------------
   451
   452 				.endl							; UNIT TYPES
   453
   454 				; ------------------------------------------------------------
   455
   456 221E			.local	GRAPH						; UNIT
   457
   458 221E			.local	INITGRAPH_0084					; PROCEDURE | OVERLOAD
   459
   460 				; ------------------------------------------------------------
   461
   462 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   463 				; as Pointer
   464 221E B5 98 8D 20 29		mva :STACKORIGIN,x MODE
   465 2223 CA				dex
   466
   467 				; ---------------------  ASM Block 060  ---------------------
   468
   469
   470 2224 8A 48			txa:pha
   471
   472 2226 AD 20 29			lda mode
   473 2229 8D FD 28			sta MAIN.SYSTEM.GraphMode
   474 222C 29 0F			and #$0f
   475 222E A8				tay
   476
   477 222F A2 60			ldx #$60		; 6*16
   478 2231 AD 20 29			lda mode		; %00010000 with text window
   479 2234 29 10			and #$10
   480 2236 49 10			eor #$10
   481 2238 09 02			ora #2			; read
   482
   483 					.nowarn @GRAPHICS
   483 223A 20 3C 20		 JSR @GRAPHICS
   484
   485 223D 8C 0B 29			sty GraphResult
   486
   487
   488 					.ifdef MAIN.@DEFINES.ROMOFF
   489 					inc portb
   490 					.endif
   491
   492 = EE6D			tlshc	equ $ee6d
   493
   494 2240 A6 57			ldx dindex
   495 2242 BC 6D EE			ldy tlshc,x
   496 2245 A9 05			lda #5
   497 2247 0A			shift	asl @
   498 2248 88				dey
   499 2249 D0 FC			bne shift
   500
   501 224B 8D 1F 29			sta SCANLINE_WIDTH
   502
   503 				; Fox/TQA
   504
   505 = 0057			dindex	equ $57
   506 = EE7D			tmccn	equ $ee7d
   507 = EE8D			tmrcn	equ $ee8d
   508
   509 224E A6 57			ldx dindex
   510 2250 BD 7D EE			lda tmccn,x
   511 2253 BC 8D EE			ldy tmrcn,x
   512 2256 A2 00			ldx #0
   513 2258 C9 40			cmp #<320
   514 225A D0 01 E8			sne:inx
   515
   516 				; X:A = horizontal resolution
   517 				; Y = vertical resolution
   518
   519 225D 20 76 20			@SCREENSIZE
   520
   521 					.ifdef MAIN.@DEFINES.ROMOFF
   522 					dec portb
   523 					.endif
   524
   525 2260 68 AA			pla:tax
   526
   527
   528 				; optimize OK (GRAPH), line = 132
   529
   530 2262 A5 58 8D 1D 29		mva ATARI.SAVMSC VIDEORAM
   531 2267 A5 59 8D 1E 29		mva ATARI.SAVMSC+1 VIDEORAM+1
   532
   533 				; ------------------------------------------------------------
   534
   535 = 2920			MODE	= DATAORIGIN+$0029
   536
   537 = 2920			@VarData	= MODE
   538 = 0001			@VarDataSize	= 1
   539
   540 226C			@exit
   541 					.ifdef @new
   542 					lda <@VarData
   543 					sta :ztmp
   544 					lda >@VarData
   545 					ldy #@VarDataSize-1
   546 					jmp @FreeMem
   547 					eif
   548 226C 60				rts						; ret
   549 				.endl
   550
   551 226D			.local	SETCOLOR					; PROCEDURE | ASSEMBLER
   552
   553 				; ------------------------------------------------------------
   554
   555 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   556 				; as Pointer
   557 226D B5 98 8D 21 29		mva :STACKORIGIN,x COLOR
   558 2272 CA				dex
   559
   560 				; ---------------------  ASM Block 062  ---------------------
   561
   562 2273 AD 21 29 8D 34 20		mva color @COMMAND.colscr
   563 2279 8D 0C 29			sta GetColor
   564
   565
   566 				; ------------------------------------------------------------
   567
   568 = 2921			COLOR	= DATAORIGIN+$002A
   569
   570 = 2921			@VarData	= COLOR
   571 = 0001			@VarDataSize	= 1
   572
   573 227C			@exit
   574 					.ifdef @new
   575 					lda <@VarData
   576 					sta :ztmp
   577 					lda >@VarData
   578 					ldy #@VarDataSize-1
   579 					jmp @FreeMem
   580 					eif
   581 227C 60				rts						; ret
   582 				.endl
   583
   584 227D			.local	PUTPIXEL_0094					; PROCEDURE | ASSEMBLER | OVERLOAD
   585
   586 				; ------------------------------------------------------------
   587
   588 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   589 				; as Pointer
   590 227D B5 98 8D 24 29		mva :STACKORIGIN,x Y
   591 2282 B5 A8 8D 25 29		mva :STACKORIGIN+STACKWIDTH,x Y+1
   592 2287 CA				dex
   593
   594 				; ------------------------------------------------------------
   595
   596 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   597 				; as Pointer
   598 2288 B5 98 8D 22 29		mva :STACKORIGIN,x X
   599 228D B5 A8 8D 23 29		mva :STACKORIGIN+STACKWIDTH,x X+1
   600 2292 CA				dex
   601
   602 				; ---------------------  ASM Block 063  ---------------------
   603
   604 2293 8A 48			txa:pha
   605 				{
   606 2295 AD 25 29			lda y+1
   607 2298 30 37			bmi stop
   608 229A CD FA 28			cmp MAIN.SYSTEM.ScreenHeight+1
   609 229D D0 06			bne sk0
   610 229F AD 24 29			lda y
   611 22A2 CD F9 28			cmp MAIN.SYSTEM.ScreenHeight
   612 22A5			sk0
   613 22A5 B0 2A			bcs stop
   614
   615 22A7 AD 23 29			lda x+1
   616 22AA 30 25			bmi stop
   617 22AC CD F8 28			cmp MAIN.SYSTEM.ScreenWidth+1
   618 22AF D0 06			bne sk1
   619 22B1 AD 22 29			lda x
   620 22B4 CD F7 28			cmp MAIN.SYSTEM.ScreenWidth
   621 22B7			sk1
   622 22B7 B0 18			bcs stop
   623
   624 22B9 AD 22 29 85 55 AD + 	mwa x colcrs
   625 22C3 AD 24 29 85 54		mva y rowcrs
   626
   627 				;	lda #@IDput		; slower
   628 				;	jsr @COMMAND
   629
   630 22C8 AE 1F 20			ldx @COMMAND.scrchn	; faster
   631 22CB AD 34 20			lda @COMMAND.colscr
   632
   633 22CE				m@call	@putchar.main
Macro: M@CALL [Source: rtl6502.asm]
    12 22CE 20 13 20				jsr @PUTCHAR.MAIN
Source: fill.a65
   634
   635 22D1 68 AA		stop	pla:tax
   636
   637
   638 				; ------------------------------------------------------------
   639
   640 = 2922			X	= DATAORIGIN+$002B
   641 = 2924			Y	= DATAORIGIN+$002D
   642
   643 = 2922			@VarData	= X
   644 = 0004			@VarDataSize	= 4
   645
   646 22D3			@exit
   647 					.ifdef @new
   648 					lda <@VarData
   649 					sta :ztmp
   650 					lda >@VarData
   651 					ldy #@VarDataSize-1
   652 					jmp @FreeMem
   653 					eif
   654 22D3 60				rts						; ret
   655 				.endl
   656
   657 22D4			.local	GETPIXEL					; FUNCTION | ASSEMBLER
   658
   659 				; ------------------------------------------------------------
   660
   661 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   662 				; as Pointer
   663 22D4 B5 98 8D 28 29		mva :STACKORIGIN,x Y
   664 22D9 B5 A8 8D 29 29		mva :STACKORIGIN+STACKWIDTH,x Y+1
   665 22DE CA				dex
   666
   667 				; ------------------------------------------------------------
   668
   669 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   670 				; as Pointer
   671 22DF B5 98 8D 26 29		mva :STACKORIGIN,x X
   672 22E4 B5 A8 8D 27 29		mva :STACKORIGIN+STACKWIDTH,x X+1
   673 22E9 CA				dex
   674
   675 				; ---------------------  ASM Block 065  ---------------------
   676
   677 22EA 8A 48			txa:pha
   678
   679 22EC A0 00			ldy #0
   680
   681 22EE AD 29 29			lda y+1
   682 22F1 30 34			bmi stop
   683 22F3 CD FA 28			cmp MAIN.SYSTEM.ScreenHeight+1
   684 22F6 D0 06			bne sk0
   685 22F8 AD 28 29			lda y
   686 22FB CD F9 28			cmp MAIN.SYSTEM.ScreenHeight
   687 22FE			sk0
   688 22FE B0 27			bcs stop
   689
   690 2300 AD 27 29			lda x+1
   691 2303 30 22			bmi stop
   692 2305 CD F8 28			cmp MAIN.SYSTEM.ScreenWidth+1
   693 2308 D0 06			bne sk1
   694 230A AD 26 29			lda x
   695 230D CD F7 28			cmp MAIN.SYSTEM.ScreenWidth
   696 2310			sk1
   697 2310 B0 15			bcs stop
   698
   699 2312 AD 26 29 85 55 AD + 	mwa x colcrs
   700 231C AD 28 29 85 54		mva y rowcrs
   701
   702 2321 A9 07			lda #@IDget
   703
   704 2323 20 1E 20			jsr @COMMAND
   705 2326 A8				tay
   706
   707 2327 8C 2A 29		stop	sty Result
   708
   709 232A 68 AA			pla:tax
   710
   711 232C			@exit
   712
   713 				; ------------------------------------------------------------
   714
   715 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   716 				; as Pointer
   717
   718 232C E8				inx
   719 232D AD 2A 29 95 98		mva RESULT :STACKORIGIN,x
   720
   721 					.ifdef @new
   722 					lda <@VarData
   723 					sta :ztmp
   724 					lda >@VarData
   725 					ldy #@VarDataSize-1
   726 					jmp @FreeMem
   727 					eif
   728
   729 				; ------------------------------------------------------------
   730
   731 = 2926			X	= DATAORIGIN+$002F
   732 = 2928			Y	= DATAORIGIN+$0031
   733 = 292A			RESULT	= DATAORIGIN+$0033
   734
   735 = 2926			@VarData	= X
   736 = 0005			@VarDataSize	= 5
   737
   738 2332 60				rts						; ret
   739 				.endl
   740
   741 2333			.local	MOVETO						; PROCEDURE | ASSEMBLER
   742
   743 				; ------------------------------------------------------------
   744
   745 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   746 				; as Pointer
   747 2333 B5 98 8D 2D 29		mva :STACKORIGIN,x Y
   748 2338 B5 A8 8D 2E 29		mva :STACKORIGIN+STACKWIDTH,x Y+1
   749 233D CA				dex
   750
   751 				; ------------------------------------------------------------
   752
   753 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   754 				; as Pointer
   755 233E B5 98 8D 2B 29		mva :STACKORIGIN,x X
   756 2343 B5 A8 8D 2C 29		mva :STACKORIGIN+STACKWIDTH,x X+1
   757 2348 CA				dex
   758
   759 				; ---------------------  ASM Block 066  ---------------------
   760
   761 2349 AD 2E 29			lda y+1
   762 234C 10 08			bpl _0
   763
   764 234E A9 00			lda #0
   765 2350 8D 2D 29			sta y
   766 2353 8D 2E 29			sta y+1
   767 2356			_0
   768 2356 AD 2C 29			lda x+1
   769 2359 10 08			bpl _1
   770
   771 235B A9 00			lda #0
   772 235D 8D 2B 29			sta x
   773 2360 8D 2C 29			sta x+1
   774 2363			_1
   775 2363 AD 2E 29 CD FA 28 + 	cpw y main.system.ScreenHeight
   776 2371 90 11			bcc _2
   777
   778 2373 38 AD F9 28 E9 01 + 	sbw main.system.ScreenHeight #1 y
   779 2384			_2
   780 2384 AD 2C 29 CD F8 28 + 	cpw x main.system.ScreenWidth
   781 2392 90 11			bcc _3
   782
   783 2394 38 AD F7 28 E9 01 + 	sbw main.system.ScreenWidth #1 x
   784 23A5			_3
   785 23A5 AD 2B 29 8D 19 29 + 	mwa x CurrentX
   786 23B1 AD 2D 29 8D 1B 29 + 	mwa y CurrentY
   787
   788
   789 				; ------------------------------------------------------------
   790
   791 = 292B			X	= DATAORIGIN+$0034
   792 = 292D			Y	= DATAORIGIN+$0036
   793
   794 = 292B			@VarData	= X
   795 = 0004			@VarDataSize	= 4
   796
   797 23BD			@exit
   798 					.ifdef @new
   799 					lda <@VarData
   800 					sta :ztmp
   801 					lda >@VarData
   802 					ldy #@VarDataSize-1
   803 					jmp @FreeMem
   804 					eif
   805 23BD 60				rts						; ret
   806 				.endl
   807
   808 23BE			.local	LINETO						; PROCEDURE | ASSEMBLER
   809
   810 				; ------------------------------------------------------------
   811
   812 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   813 				; as Pointer
   814 23BE B5 98 8D 31 29		mva :STACKORIGIN,x Y
   815 23C3 B5 A8 8D 32 29		mva :STACKORIGIN+STACKWIDTH,x Y+1
   816 23C8 CA				dex
   817
   818 				; ------------------------------------------------------------
   819
   820 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   821 				; as Pointer
   822 23C9 B5 98 8D 2F 29		mva :STACKORIGIN,x X
   823 23CE B5 A8 8D 30 29		mva :STACKORIGIN+STACKWIDTH,x X+1
   824 23D3 CA				dex
   825
   826 				; ---------------------  ASM Block 067  ---------------------
   827
   828 23D4 AD 32 29			lda y+1
   829 23D7 10 08			bpl _0
   830
   831 23D9 A9 00			lda #0
   832 23DB 8D 31 29			sta y
   833 23DE 8D 32 29			sta y+1
   834 23E1			_0
   835 23E1 AD 30 29			lda x+1
   836 23E4 10 08			bpl _1
   837
   838 23E6 A9 00			lda #0
   839 23E8 8D 2F 29			sta x
   840 23EB 8D 30 29			sta x+1
   841 23EE			_1
   842 23EE AD 32 29 CD FA 28 + 	cpw y main.system.ScreenHeight
   843 23FC 90 11			bcc _2
   844
   845 23FE 38 AD F9 28 E9 01 + 	sbw main.system.ScreenHeight #1 y
   846 240F			_2
   847 240F AD 30 29 CD F8 28 + 	cpw x main.system.ScreenWidth
   848 241D 90 11			bcc _3
   849
   850 241F 38 AD F7 28 E9 01 + 	sbw main.system.ScreenWidth #1 x
   851 2430			_3
   852 2430 8A 48			txa:pha
   853
   854 2432 AD 19 29 85 55 AD + 	mwa CurrentX colcrs
   855 243C AD 1B 29 85 54		mva CurrentY rowcrs
   856
   857 				;	lda #@IDput		; slower
   858 				;	jsr @COMMAND
   859
   860 2441 AE 1F 20			ldx @COMMAND.scrchn	; faster
   861 2444 AD 34 20			lda @COMMAND.colscr
   862
   863 2447				m@call	@putchar.main
Macro: M@CALL [Source: rtl6502.asm]
    12 2447 20 13 20				jsr @PUTCHAR.MAIN
Source: fill.a65
   864
   865 244A AD 2F 29			lda x
   866 244D 85 55			sta colcrs
   867 244F 8D 19 29			sta CurrentX
   868 2452 AD 30 29			lda x+1
   869 2455 85 56			sta colcrs+1
   870 2457 8D 1A 29			sta CurrentX+1
   871
   872 245A AD 31 29 85 54		mva y rowcrs
   873 245F 8D 1B 29			sta CurrentY
   874 2462 AD 32 29			lda y+1
   875 2465 8D 1C 29			sta CurrentY+1
   876
   877 2468 A9 11			lda #@IDdraw
   878
   879 246A 20 1E 20			jsr @COMMAND
   880
   881 246D 68 AA			pla:tax
   882
   883
   884 				; ------------------------------------------------------------
   885
   886 = 292F			X	= DATAORIGIN+$0038
   887 = 2931			Y	= DATAORIGIN+$003A
   888
   889 = 292F			@VarData	= X
   890 = 0004			@VarDataSize	= 4
   891
   892 246F			@exit
   893 					.ifdef @new
   894 					lda <@VarData
   895 					sta :ztmp
   896 					lda >@VarData
   897 					ldy #@VarDataSize-1
   898 					jmp @FreeMem
   899 					eif
   900 246F 60				rts						; ret
   901 				.endl
   902
   903 2470			.local	FLOODFILL					; PROCEDURE
   904
   905 				; ------------------------------------------------------------
   906
   907 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   908 				; as Pointer
   909 2470 B5 98 8D 37 29		mva :STACKORIGIN,x NEWCOLOR
   910 2475 CA				dex
   911
   912 				; ------------------------------------------------------------
   913
   914 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   915 				; as Pointer
   916 2476 B5 98 8D 35 29		mva :STACKORIGIN,x B
   917 247B B5 A8 8D 36 29		mva :STACKORIGIN+STACKWIDTH,x B+1
   918 2480 CA				dex
   919
   920 				; ------------------------------------------------------------
   921
   922 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   923 				; as Pointer
   924 2481 B5 98 8D 33 29		mva :STACKORIGIN,x A
   925 2486 B5 A8 8D 34 29		mva :STACKORIGIN+STACKWIDTH,x A+1
   926 248B CA				dex
   927
   928 248C 4C 0B 26			jmp l_00EC
   929
   930 248F			.local	FLOODFILLEXEC					; PROCEDURE
   931
   932 				; --- For
   933
   934 				; optimize OK (graph.inc), line = 718
   935
   936 248F A9 00 8D 41 31		mva #$00 I
   937
   938 				; optimize OK (graph.inc), line = 718
   939
   940 2494			l_00F8
   941 				; --- ForToDoCondition
   942
   943 				; optimize OK (graph.inc), line = 718
   944
   945 2494 AD 41 31			lda I
   946 2497 C9 04			cmp #$04
   947 2499 90 03 4C 0A 26		jcs l_0106
   948
   949 				; ------------------------------------------------------------
   950
   951 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   952 				; as Pointer
   953
   954 249E E8				inx
   955 249F AD 41 31 95 98		mva I :STACKORIGIN,x
   956
   957 				; GenerateCaseProlog
   958 24A4 CA				dex
   959
   960 				; GenerateCaseEqualityCheck
   961 24A5 B5 99			lda :STACKORIGIN+1,x
   962 24A7 D0 47			jne l_0112
   963 24A9			@
   964
   965 				; optimize OK (graph.inc), line = 723
   966
   967 24A9 AD 33 29			lda A
   968 24AC 18 69 01			add #$01
   969 24AF 8D 42 31			sta XR
   970 24B2 AD 34 29			lda A+1
   971 24B5 69 00			adc #$00
   972 24B7 8D 43 31			sta XR+1
   973
   974 				; optimize OK (graph.inc), line = 724
   975
   976 24BA AD 35 29 8D 44 31		mva B YR
   977 24C0 AD 36 29 8D 45 31		mva B+1 YR+1
   978
   979 				; optimize OK (graph.inc), line = 726
   980
   981 24C6 A0 01			ldy #1
   982 24C8				.LOCAL
   983 24C8 AD 43 31			lda XR+1
   984 24CB 38 ED F8 28			sub SYSTEM.SCREENWIDTH+1
   985 24CF D0 10			bne L4
   986 24D1 AD 42 31			lda XR
   987 24D4 CD F7 28			cmp SYSTEM.SCREENWIDTH
   988 24D7 F0 0E			beq L5
   989 24D9 A9 00			lda #$00
   990 24DB 69 FF			adc #$FF
   991 24DD 09 01			ora #$01
   992 24DF D0 06			bne L5
   993 24E1 50 04		L4	bvc L5
   994 24E3 49 FF			eor #$FF
   995 24E5 09 01			ora #$01
   996 24E7			L5
   997 					.ENDL
   998 24E7 30 01			bmi @+
   999 24E9 88				dey
  1000 24EA			@
  1001 24EA 8C 46 31			sty YES
  1002
  1003 				; GenerateCaseStatementEpilog
  1004 24ED 4C 87 25			jmp a_0002
  1005 24F0			l_0112
  1006
  1007 				; GenerateCaseEqualityCheck
  1008 24F0 B5 99			lda :STACKORIGIN+1,x
  1009 24F2 C9 01			cmp #1
  1010 24F4 D0 1F			jne l_0135
  1011 24F6			@
  1012
  1013 				; optimize OK (graph.inc), line = 730
  1014
  1015 24F6 AD 33 29			lda A
  1016 24F9 38 E9 01			sub #$01
  1017 24FC 8D 42 31			sta XR
  1018 24FF AD 34 29			lda A+1
  1019 2502 E9 00			sbc #$00
  1020 2504 8D 43 31			sta XR+1
  1021
  1022 				; optimize OK (graph.inc), line = 733
  1023
  1024 2507 A0 01			ldy #1
  1025 2509 AD 43 31			lda XR+1
  1026 250C 10 01			bpl @+
  1027 250E 88				dey
  1028 250F			@
  1029 250F 8C 46 31			sty YES
  1030
  1031 				; GenerateCaseStatementEpilog
  1032 2512 4C 87 25			jmp a_0002
  1033 2515			l_0135
  1034
  1035 				; GenerateCaseEqualityCheck
  1036 2515 B5 99			lda :STACKORIGIN+1,x
  1037 2517 C9 02			cmp #2
  1038 2519 D0 47			jne l_0152
  1039 251B			@
  1040
  1041 				; optimize OK (graph.inc), line = 737
  1042
  1043 251B AD 33 29 8D 42 31		mva A XR
  1044 2521 AD 34 29 8D 43 31		mva A+1 XR+1
  1045
  1046 				; optimize OK (graph.inc), line = 738
  1047
  1048 2527 AD 35 29			lda B
  1049 252A 18 69 01			add #$01
  1050 252D 8D 44 31			sta YR
  1051 2530 AD 36 29			lda B+1
  1052 2533 69 00			adc #$00
  1053 2535 8D 45 31			sta YR+1
  1054
  1055 				; optimize OK (graph.inc), line = 740
  1056
  1057 2538 A0 01			ldy #1
  1058 253A				.LOCAL
  1059 253A AD 45 31			lda YR+1
  1060 253D 38 ED FA 28			sub SYSTEM.SCREENHEIGHT+1
  1061 2541 D0 10			bne L4
  1062 2543 AD 44 31			lda YR
  1063 2546 CD F9 28			cmp SYSTEM.SCREENHEIGHT
  1064 2549 F0 0E			beq L5
  1065 254B A9 00			lda #$00
  1066 254D 69 FF			adc #$FF
  1067 254F 09 01			ora #$01
  1068 2551 D0 06			bne L5
  1069 2553 50 04		L4	bvc L5
  1070 2555 49 FF			eor #$FF
  1071 2557 09 01			ora #$01
  1072 2559			L5
  1073 					.ENDL
  1074 2559 30 01			bmi @+
  1075 255B 88				dey
  1076 255C			@
  1077 255C 8C 46 31			sty YES
  1078
  1079 				; GenerateCaseStatementEpilog
  1080 255F 4C 87 25			jmp a_0002
  1081 2562			l_0152
  1082
  1083 				; GenerateCaseEqualityCheck
  1084 2562 B5 99			lda :STACKORIGIN+1,x
  1085 2564 C9 03			cmp #3
  1086 2566 D0 1F			jne l_0175
  1087 2568			@
  1088
  1089 				; optimize OK (graph.inc), line = 745
  1090
  1091 2568 AD 35 29			lda B
  1092 256B 38 E9 01			sub #$01
  1093 256E 8D 44 31			sta YR
  1094 2571 AD 36 29			lda B+1
  1095 2574 E9 00			sbc #$00
  1096 2576 8D 45 31			sta YR+1
  1097
  1098 				; optimize OK (graph.inc), line = 747
  1099
  1100 2579 A0 01			ldy #1
  1101 257B AD 45 31			lda YR+1
  1102 257E 10 01			bpl @+
  1103 2580 88				dey
  1104 2581			@
  1105 2581 8C 46 31			sty YES
  1106
  1107 				; GenerateCaseStatementEpilog
  1108 2584 4C 87 25			jmp a_0002
  1109 2587			l_0175
  1110
  1111 				; GenerateCaseEpilog
  1112 2587			a_0002
  1113
  1114 				; optimize OK (graph.inc), line = 753
  1115
  1116 2587 AD 46 31			lda YES
  1117 258A F0 76			jeq l_019D
  1118
  1119 				; optimize FAIL ('GETPIXEL', graph.inc), line = 754
  1120 258C E8				inx
  1121 258D AD 42 31 95 98		mva XR :STACKORIGIN,x
  1122 2592 AD 43 31 95 A8		mva XR+1 :STACKORIGIN+STACKWIDTH,x
  1123 2597 E8				inx
  1124 2598 AD 44 31 95 98		mva YR :STACKORIGIN,x
  1125 259D AD 45 31 95 A8		mva YR+1 :STACKORIGIN+STACKWIDTH,x
  1126 25A2 20 D4 22			jsr GETPIXEL
  1127 25A5 CA				dex
  1128 25A6 B5 99			lda :STACKORIGIN+1,x
  1129 25A8 CD 40 29			cmp OLDCOLOR
  1130 25AB D0 55			jne l_01B4
  1131 25AD			@
  1132
  1133 				; optimize FAIL ('PUTPIXEL_0094', graph.inc), line = 756
  1134 25AD E8				inx
  1135 25AE AD 42 31 95 98		mva XR :STACKORIGIN,x
  1136 25B3 AD 43 31 95 A8		mva XR+1 :STACKORIGIN+STACKWIDTH,x
  1137 25B8 E8				inx
  1138 25B9 AD 44 31 95 98		mva YR :STACKORIGIN,x
  1139 25BE AD 45 31 95 A8		mva YR+1 :STACKORIGIN+STACKWIDTH,x
  1140 25C3 20 7D 22			jsr PUTPIXEL_0094
  1141
  1142 				; optimize FAIL (0, graph.inc), line = 758
  1143 25C6 EE 3A 29			inc STACKENTRY
  1144 25C9 D0 03			sne
  1145 25CB EE 3B 29			inc STACKENTRY+1
  1146
  1147 				; optimize OK (graph.inc), line = 760
  1148
  1149 25CE AD 3B 29			lda STACKENTRY+1
  1150 25D1 85 B1			sta :STACKORIGIN+STACKWIDTH+9
  1151 25D3 AD 3A 29			lda STACKENTRY
  1152 25D6 0A				asl @
  1153 25D7 26 B1			rol :STACKORIGIN+STACKWIDTH+9
  1154 25D9 0A				asl @
  1155 25DA 26 B1			rol :STACKORIGIN+STACKWIDTH+9
  1156 25DC 18 6D 68 27			add FLOODFILLSTACK
  1157 25E0 85 92			sta :bp2
  1158 25E2 AD 69 27			lda FLOODFILLSTACK+1
  1159 25E5 65 B1			adc :STACKORIGIN+STACKWIDTH+9
  1160 25E7 85 93			sta :bp2+1
  1161 25E9 A0 00			ldy #$00
  1162 25EB AD 44 31			lda YR
  1163 25EE 91 92			sta (:bp2),y
  1164 25F0 C8				iny
  1165 25F1 AD 45 31			lda YR+1
  1166 25F4 91 92			sta (:bp2),y
  1167 25F6 C8				iny
  1168 25F7 AD 42 31			lda XR
  1169 25FA 91 92			sta (:bp2),y
  1170 25FC C8				iny
  1171 25FD AD 43 31			lda XR+1
  1172 2600 91 92			sta (:bp2),y
  1173 2602			l_01B4
  1174 2602			l_019D
  1175
  1176 				; --- ForToDoEpilog
  1177 2602 EE 41 31			inc I						; inc ptr byte [CounterAddress]
  1178 2605 F0 03 4C 94 24		jne l_00F8
  1179 260A			l_0106
  1180
  1181 				; ------------------------------------------------------------
  1182
  1183 = 3141			I	= DATAORIGIN+$084A
  1184 = 3142			XR	= DATAORIGIN+$084B
  1185 = 3144			YR	= DATAORIGIN+$084D
  1186 = 3146			YES	= DATAORIGIN+$084F
  1187 = 0003			@FORTMP_00F5	= $03
  1188
  1189 = 3141			@VarData	= I
  1190 = 0006			@VarDataSize	= 6
  1191
  1192 260A			@exit
  1193 					.ifdef @new
  1194 					lda <@VarData
  1195 					sta :ztmp
  1196 					lda >@VarData
  1197 					ldy #@VarDataSize-1
  1198 					jmp @FreeMem
  1199 					eif
  1200 260A 60				rts						; ret
  1201 				.endl
  1202 260B			l_00EC
  1203
  1204 				; optimize FAIL ('SETCOLOR', graph.inc), line = 771
  1205 260B E8				inx
  1206 260C AD 37 29 95 98		mva NEWCOLOR :STACKORIGIN,x
  1207 2611 20 6D 22			jsr SETCOLOR
  1208
  1209 				; optimize FAIL ('GETPIXEL', graph.inc), line = 773
  1210 2614 E8				inx
  1211 2615 AD 33 29 95 98		mva A :STACKORIGIN,x
  1212 261A AD 34 29 95 A8		mva A+1 :STACKORIGIN+STACKWIDTH,x
  1213 261F E8				inx
  1214 2620 AD 35 29 95 98		mva B :STACKORIGIN,x
  1215 2625 AD 36 29 95 A8		mva B+1 :STACKORIGIN+STACKWIDTH,x
  1216 262A 20 D4 22			jsr GETPIXEL
  1217 262D B5 98 8D 40 29		mva :STACKORIGIN,x OLDCOLOR
  1218 2632 CA				dex
  1219
  1220 				; optimize OK (graph.inc), line = 775
  1221
  1222 2633 A9 01 8D 3A 29		mva #$01 STACKENTRY
  1223 2638 A9 00 8D 3B 29		mva #$00 STACKENTRY+1
  1224
  1225 				; optimize OK (graph.inc), line = 776
  1226
  1227 263D A9 01 8D 38 29		mva #$01 STACKPOINTER
  1228 2642 A9 00 8D 39 29		mva #$00 STACKPOINTER+1
  1229
  1230 				; optimize OK (graph.inc), line = 778
  1231
  1232 2647 AD 3B 29			lda STACKENTRY+1
  1233 264A 85 B1			sta :STACKORIGIN+STACKWIDTH+9
  1234 264C AD 3A 29			lda STACKENTRY
  1235 264F 0A				asl @
  1236 2650 26 B1			rol :STACKORIGIN+STACKWIDTH+9
  1237 2652 0A				asl @
  1238 2653 26 B1			rol :STACKORIGIN+STACKWIDTH+9
  1239 2655 18 6D 68 27			add FLOODFILLSTACK
  1240 2659 85 92			sta :bp2
  1241 265B AD 69 27			lda FLOODFILLSTACK+1
  1242 265E 65 B1			adc :STACKORIGIN+STACKWIDTH+9
  1243 2660 85 93			sta :bp2+1
  1244 2662 A0 00			ldy #$00
  1245 2664 AD 35 29			lda B
  1246 2667 91 92			sta (:bp2),y
  1247 2669 C8				iny
  1248 266A AD 36 29			lda B+1
  1249 266D 91 92			sta (:bp2),y
  1250 266F C8				iny
  1251 2670 AD 33 29			lda A
  1252 2673 91 92			sta (:bp2),y
  1253 2675 C8				iny
  1254 2676 AD 34 29			lda A+1
  1255 2679 91 92			sta (:bp2),y
  1256
  1257 				; optimize FAIL ('FLOODFILLEXEC', graph.inc), line = 780
  1258 267B 20 8F 24			jsr FLOODFILLEXEC
  1259
  1260 				; --- WhileProlog
  1261 267E 4C 52 27			jmp l_01FF
  1262 2681			l_0200
  1263
  1264 				; optimize FAIL (0, graph.inc), line = 784
  1265 2681 EE 38 29			inc STACKPOINTER
  1266 2684 D0 03			sne
  1267 2686 EE 39 29			inc STACKPOINTER+1
  1268
  1269 				; optimize OK (graph.inc), line = 786
  1270
  1271 2689 AD 39 29			lda STACKPOINTER+1
  1272 268C 85 B1			sta :STACKORIGIN+STACKWIDTH+9
  1273 268E AD 38 29			lda STACKPOINTER
  1274 2691 0A				asl @
  1275 2692 26 B1			rol :STACKORIGIN+STACKWIDTH+9
  1276 2694 0A				asl @
  1277 2695 26 B1			rol :STACKORIGIN+STACKWIDTH+9
  1278 2697 18 6D 68 27			add FLOODFILLSTACK
  1279 269B 85 92			sta :bp2
  1280 269D AD 69 27			lda FLOODFILLSTACK+1
  1281 26A0 65 B1			adc :STACKORIGIN+STACKWIDTH+9
  1282 26A2 85 93			sta :bp2+1
  1283 26A4 A0 00			ldy #$00
  1284 26A6 B1 92			lda (:bp2),y
  1285 26A8 8D 3C 29			sta C
  1286 26AB C8				iny
  1287 26AC B1 92			lda (:bp2),y
  1288 26AE 8D 3D 29			sta C+1
  1289 26B1 C8				iny
  1290 26B2 B1 92			lda (:bp2),y
  1291 26B4 8D 3E 29			sta C+2
  1292 26B7 C8				iny
  1293 26B8 B1 92			lda (:bp2),y
  1294 26BA 8D 3F 29			sta C+3
  1295
  1296 				; optimize OK (graph.inc), line = 788
  1297
  1298 26BD 8D 34 29			sta A+1
  1299 26C0 AD 3E 29			lda C+2
  1300 26C3 8D 33 29			sta A
  1301
  1302 				; optimize OK (graph.inc), line = 789
  1303
  1304 26C6 AD 3C 29 8D 35 29		mva C B
  1305 26CC AD 3D 29 8D 36 29		mva C+1 B+1
  1306
  1307 				; optimize FAIL ('FLOODFILLEXEC', graph.inc), line = 791
  1308 26D2 20 8F 24			jsr FLOODFILLEXEC
  1309
  1310 				; optimize OK (graph.inc), line = 793
  1311
  1312 26D5 AD 3B 29			lda STACKENTRY+1
  1313 26D8 C9 01			cmp #$01
  1314 26DA D0 05			bne @+
  1315 26DC AD 3A 29			lda STACKENTRY
  1316 26DF C9 01			cmp #$01
  1317 26E1			@
  1318 26E1 90 6F			jcc l_0224
  1319
  1320 				; optimize OK (graph.inc), line = 795
  1321
  1322 26E3 AD 3A 29			lda STACKENTRY
  1323 26E6 38 ED 38 29			sub STACKPOINTER
  1324 26EA 8D 3A 29			sta STACKENTRY
  1325 26ED AD 3B 29			lda STACKENTRY+1
  1326 26F0 ED 39 29			sbc STACKPOINTER+1
  1327 26F3 8D 3B 29			sta STACKENTRY+1
  1328
  1329 				; optimize OK (graph.inc), line = 797
  1330
  1331 26F6 C9 01			cmp #$01
  1332 26F8 D0 05			bne @+
  1333 26FA AD 3A 29			lda STACKENTRY
  1334 26FD C9 01			cmp #$01
  1335 26FF			@
  1336 26FF 90 03			jcc l_0240
  1337
  1338 2701 4C 67 27			jmp @exit					; exit
  1339 2704			l_0240
  1340
  1341 				; optimize OK (graph.inc), line = 799
  1342
  1343 2704 AD 38 29			lda STACKPOINTER
  1344 2707 18 69 01			add #$01
  1345 270A 85 A1			sta :STACKORIGIN+9
  1346 270C AD 39 29			lda STACKPOINTER+1
  1347 270F 69 00			adc #$00
  1348 2711 06 A1			asl :STACKORIGIN+9
  1349 2713 2A				rol @
  1350 2714 06 A1			asl :STACKORIGIN+9
  1351 2716 2A				rol @
  1352 2717 85 B1			sta :STACKORIGIN+STACKWIDTH+9
  1353 2719 AD 68 27			lda FLOODFILLSTACK
  1354 271C 18 65 A1			add :STACKORIGIN+9
  1355 271F 85 88			sta :edx
  1356 2721 AD 69 27			lda FLOODFILLSTACK+1
  1357 2724 65 B1			adc :STACKORIGIN+STACKWIDTH+9
  1358 2726 85 89			sta :edx+1
  1359 2728 AD 68 27			lda FLOODFILLSTACK
  1360 272B 18 69 04			add #$04
  1361 272E 85 8C			sta :ecx
  1362 2730 AD 69 27			lda FLOODFILLSTACK+1
  1363 2733 69 00			adc #$00
  1364 2735 85 8D			sta :ecx+1
  1365 2737 AD 3B 29			lda STACKENTRY+1
  1366 273A 85 85			sta :eax+1
  1367 273C AD 3A 29			lda STACKENTRY
  1368 273F 0A				asl @
  1369 2740 26 85			rol :eax+1
  1370 2742 0A				asl @
  1371 2743 26 85			rol :eax+1
  1372 2745 85 84			sta :eax
  1373 2747 20 CF 20			jsr @move
  1374
  1375 				; optimize OK (graph.inc), line = 801
  1376
  1377 274A A9 00 8D 38 29		mva #$00 STACKPOINTER
  1378 274F 8D 39 29			sta STACKPOINTER+1
  1379 2752			l_0224
  1380 2752			l_01FF
  1381
  1382 				; optimize OK (graph.inc), line = 782
  1383
  1384 2752 AD 3B 29			lda STACKENTRY+1
  1385 2755 CD 39 29			cmp STACKPOINTER+1
  1386 2758 D0 06			bne @+
  1387 275A AD 3A 29			lda STACKENTRY
  1388 275D CD 38 29			cmp STACKPOINTER
  1389 2760			@
  1390 2760 F0 05			beq @+
  1391 2762 90 03 4C 81 26		jcs l_0200
  1392 2767			@
  1393
  1394 				; ------------------------------------------------------------
  1395
  1396 = 2933			A	= DATAORIGIN+$003C
  1397 = 2935			B	= DATAORIGIN+$003E
  1398 = 2937			NEWCOLOR	= DATAORIGIN+$0040
  1399 = 0200			FILLSTACKSIZE	= $0200
  1400 = 2938			STACKPOINTER	= DATAORIGIN+$0041
  1401 = 293A			STACKENTRY	= DATAORIGIN+$0043
  1402 = 293C			C	= DATAORIGIN+$0045
  1403 = 2940			OLDCOLOR	= DATAORIGIN+$0049
  1404 = 2941			adr.FLOODFILLSTACK	= DATAORIGIN+$004A
  1405 2767			.var FLOODFILLSTACK	= adr.FLOODFILLSTACK .word
  1406
  1407 = 2933			@VarData	= A
  1408 = 080E			@VarDataSize	= 2062
  1409
  1410 2767			@exit
  1411 					.ifdef @new
  1412 					lda <@VarData
  1413 					sta :ztmp
  1414 					lda >@VarData
  1415 					ldy #@VarDataSize-1
  1416 					jmp @FreeMem
  1417 					eif
  1418 2767 60				rts						; ret
  1419 = 2768 41 29		FLOODFILLSTACK
  1419 				.endl
  1420
  1421 				; ------------------------------------------------------------
  1422
  1423 = 0080			CURRENTDRIVER	= $80
  1424 = 0000			DETECT	= $00
  1425 = 0001			CGA	= $01
  1426 = 0002			MCGA	= $02
  1427 = 0003			EGA	= $03
  1428 = 0004			EGA64	= $04
  1429 = 0005			EGAMONO	= $05
  1430 = 0006			LOWRES	= $06
  1431 = 0007			HERCMONO	= $07
  1432 = 0009			VGA	= $09
  1433 = 000A			VESA	= $0A
  1434 = 000B			D1BIT	= $0B
  1435 = 000C			D2BIT	= $0C
  1436 = 000D			D4BIT	= $0D
  1437 = 000E			D6BIT	= $0E
  1438 = 000F			D8BIT	= $0F
  1439 = 0010			D12BIT	= $10
  1440 = 0018			M640X400	= $18
  1441 = 0018			M640X480	= $18
  1442 = 0001			GROK	= $01
  1443 = 00FF			GRNOINITGRAPH	= $FF
  1444 = 00FE			GRNOTDETECTED	= $FE
  1445 = 00FD			GRFILENOTFOUND	= $FD
  1446 = 00FC			GRINVALIDDRIVER	= $FC
  1447 = 00FB			GRNOLOADMEM	= $FB
  1448 = 00FA			GRNOSCANMEM	= $FA
  1449 = 00F9			GRNOFLOODMEM	= $F9
  1450 = 00F8			GRFONTNOTFOUND	= $F8
  1451 = 00F7			GRNOFONTMEM	= $F7
  1452 = 00F6			GRINVALIDMODE	= $F6
  1453 = 00F5			GRERROR	= $F5
  1454 = 00F4			GRIOERROR	= $F4
  1455 = 00F3			GRINVALIDFONT	= $F3
  1456 = 00F2			GRINVALIDFONTNUM	= $F2
  1457 = 00EE			GRINVALIDVERSION	= $EE
  1458 = 0000			CGAC0	= $00
  1459 = 0001			CGAC1	= $01
  1460 = 0002			CGAC2	= $02
  1461 = 0003			CGAC3	= $03
  1462 = 0004			CGAHI	= $04
  1463 = 0000			MCGAC0	= $00
  1464 = 0001			MCGAC1	= $01
  1465 = 0002			MCGAC2	= $02
  1466 = 0003			MCGAC3	= $03
  1467 = 0004			MCGAMED	= $04
  1468 = 0005			MCGAHI	= $05
  1469 = 0000			EGALO	= $00
  1470 = 0001			EGAHI	= $01
  1471 = 0000			EGA64LO	= $00
  1472 = 0001			EGA64HI	= $01
  1473 = 0003			EGAMONOHI	= $03
  1474 = 000A			VGALO	= $0A
  1475 = 001F			VGAMED	= $1F
  1476 = 0018			VGAHI	= $18
  1477 = 2903			WIN_LEFT	= DATAORIGIN+$000C
  1478 = 2905			WIN_RIGHT	= DATAORIGIN+$000E
  1479 = 2907			WIN_TOP	= DATAORIGIN+$0010
  1480 = 2909			WIN_BOTTOM	= DATAORIGIN+$0012
  1481 = 290B			GRAPHRESULT	= DATAORIGIN+$0014
  1482 = 290C			GETCOLOR	= DATAORIGIN+$0015
  1483 = 290D			adr.LASTARCCOORDS	= DATAORIGIN+$0016
  1484 276A			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
  1485 = 290D			LASTARCCOORDS.X	= DATAORIGIN+$0016
  1486 = 290F			LASTARCCOORDS.Y	= DATAORIGIN+$0018
  1487 = 2911			LASTARCCOORDS.XSTART	= DATAORIGIN+$001A
  1488 = 2913			LASTARCCOORDS.YSTART	= DATAORIGIN+$001C
  1489 = 2915			LASTARCCOORDS.XEND	= DATAORIGIN+$001E
  1490 = 2917			LASTARCCOORDS.YEND	= DATAORIGIN+$0020
  1491 = 2919			CURRENTX	= DATAORIGIN+$0022
  1492 = 291B			CURRENTY	= DATAORIGIN+$0024
  1493 = 291D			VIDEORAM	= DATAORIGIN+$0026
  1494 = 291F			SCANLINE_WIDTH	= DATAORIGIN+$0028
  1495
  1496 = 276A 0D 29		LASTARCCOORDS
  1496 				.endl							; UNIT GRAPH
  1497
  1498 276C			.local	MAINPROC					; PROCEDURE
  1499
  1500 				; optimize FAIL ('GRAPH.INITGRAPH_0084', examples\fill.pas), line = 14
  1501 276C E8				inx
  1502 276D A9 07 95 98			mva #$07 :STACKORIGIN,x
  1503 2771 20 1E 22			jsr GRAPH.INITGRAPH_0084
  1504
  1505 				; optimize FAIL (100, examples\fill.pas), line = 15
  1506 					@printSTRING #CODEORIGIN+$0000
  1506 				 LDY> CODEORIGIN+$0000\ LDA< CODEORIGIN+$0000\ JSR @PRINTSTRING
  1506 2774 A0 20		 LDY> CODEORIGIN+$0000
  1506 2776 A9 00		 LDA< CODEORIGIN+$0000
  1506 2778 20 7A 21		 JSR @PRINTSTRING
  1507 277B 20 6C 21			@printEOL
  1508
  1509 				; optimize OK (examples\fill.pas), line = 16
  1510
  1511 277E A9 0F			lda #$0F
  1512 2780 8D C8 02			sta $02C8
  1513
  1514 				; optimize FAIL ('GRAPH.SETCOLOR', examples\fill.pas), line = 17
  1515 2783 E8				inx
  1516 2784 A9 02 95 98			mva #$02 :STACKORIGIN,x
  1517 2788 20 6D 22			jsr GRAPH.SETCOLOR
  1518
  1519 				; optimize FAIL ('GRAPH.PUTPIXEL_0094', examples\fill.pas), line = 18
  1520 278B E8				inx
  1521 278C A9 14 95 98			mva #$14 :STACKORIGIN,x
  1522 2790 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1523 2794 E8				inx
  1524 2795 A9 03 95 98			mva #$03 :STACKORIGIN,x
  1525 2799 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1526 279D 20 7D 22			jsr GRAPH.PUTPIXEL_0094
  1527
  1528 				; optimize FAIL ('GRAPH.MOVETO', examples\fill.pas), line = 19
  1529 27A0 E8				inx
  1530 27A1 A9 14 95 98			mva #$14 :STACKORIGIN,x
  1531 27A5 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1532 27A9 E8				inx
  1533 27AA A9 03 95 98			mva #$03 :STACKORIGIN,x
  1534 27AE A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1535 27B2 20 33 23			jsr GRAPH.MOVETO
  1536
  1537 				; optimize FAIL ('GRAPH.LINETO', examples\fill.pas), line = 20
  1538 27B5 E8				inx
  1539 27B6 A9 78 95 98			mva #$78 :STACKORIGIN,x
  1540 27BA A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1541 27BE E8				inx
  1542 27BF A9 03 95 98			mva #$03 :STACKORIGIN,x
  1543 27C3 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1544 27C7 20 BE 23			jsr GRAPH.LINETO
  1545
  1546 				; optimize FAIL ('GRAPH.LINETO', examples\fill.pas), line = 21
  1547 27CA E8				inx
  1548 27CB A9 78 95 98			mva #$78 :STACKORIGIN,x
  1549 27CF A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1550 27D3 E8				inx
  1551 27D4 A9 14 95 98			mva #$14 :STACKORIGIN,x
  1552 27D8 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1553 27DC 20 BE 23			jsr GRAPH.LINETO
  1554
  1555 				; optimize FAIL ('GRAPH.LINETO', examples\fill.pas), line = 22
  1556 27DF E8				inx
  1557 27E0 A9 14 95 98			mva #$14 :STACKORIGIN,x
  1558 27E4 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1559 27E8 E8				inx
  1560 27E9 A9 14 95 98			mva #$14 :STACKORIGIN,x
  1561 27ED A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1562 27F1 20 BE 23			jsr GRAPH.LINETO
  1563
  1564 				; optimize FAIL ('GRAPH.LINETO', examples\fill.pas), line = 23
  1565 27F4 E8				inx
  1566 27F5 A9 14 95 98			mva #$14 :STACKORIGIN,x
  1567 27F9 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1568 27FD E8				inx
  1569 27FE A9 03 95 98			mva #$03 :STACKORIGIN,x
  1570 2802 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1571 2806 20 BE 23			jsr GRAPH.LINETO
  1572
  1573 				; optimize OK (examples\fill.pas), line = 24
  1574
  1575 2809 A9 03			lda #$03
  1576 280B 8D FD 02			sta $02FD
  1577
  1578 				; optimize FAIL ('GRAPH.FLOODFILL', examples\fill.pas), line = 25
  1579 280E E8				inx
  1580 280F A9 32 95 98			mva #$32 :STACKORIGIN,x
  1581 2813 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1582 2817 E8				inx
  1583 2818 A9 1E 95 98			mva #$1E :STACKORIGIN,x
  1584 281C A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1585 2820 E8				inx
  1586 2821 A9 02 95 98			mva #$02 :STACKORIGIN,x
  1587 2825 20 70 24			jsr GRAPH.FLOODFILL
  1588
  1589 				; optimize FAIL ('GRAPH.SETCOLOR', examples\fill.pas), line = 26
  1590 2828 E8				inx
  1591 2829 A9 03 95 98			mva #$03 :STACKORIGIN,x
  1592 282D 20 6D 22			jsr GRAPH.SETCOLOR
  1593
  1594 				; optimize FAIL ('GRAPH.PUTPIXEL_0094', examples\fill.pas), line = 27
  1595 2830 E8				inx
  1596 2831 A9 32 95 98			mva #$32 :STACKORIGIN,x
  1597 2835 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1598 2839 E8				inx
  1599 283A A9 23 95 98			mva #$23 :STACKORIGIN,x
  1600 283E A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1601 2842 20 7D 22			jsr GRAPH.PUTPIXEL_0094
  1602
  1603 				; optimize FAIL ('GRAPH.MOVETO', examples\fill.pas), line = 28
  1604 2845 E8				inx
  1605 2846 A9 32 95 98			mva #$32 :STACKORIGIN,x
  1606 284A A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1607 284E E8				inx
  1608 284F A9 23 95 98			mva #$23 :STACKORIGIN,x
  1609 2853 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1610 2857 20 33 23			jsr GRAPH.MOVETO
  1611
  1612 				; optimize FAIL ('GRAPH.LINETO', examples\fill.pas), line = 29
  1613 285A E8				inx
  1614 285B A9 92 95 98			mva #$92 :STACKORIGIN,x
  1615 285F A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1616 2863 E8				inx
  1617 2864 A9 23 95 98			mva #$23 :STACKORIGIN,x
  1618 2868 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1619 286C 20 BE 23			jsr GRAPH.LINETO
  1620
  1621 				; optimize FAIL ('GRAPH.LINETO', examples\fill.pas), line = 30
  1622 286F E8				inx
  1623 2870 A9 92 95 98			mva #$92 :STACKORIGIN,x
  1624 2874 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1625 2878 E8				inx
  1626 2879 A9 46 95 98			mva #$46 :STACKORIGIN,x
  1627 287D A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1628 2881 20 BE 23			jsr GRAPH.LINETO
  1629
  1630 				; optimize FAIL ('GRAPH.LINETO', examples\fill.pas), line = 31
  1631 2884 E8				inx
  1632 2885 A9 32 95 98			mva #$32 :STACKORIGIN,x
  1633 2889 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1634 288D E8				inx
  1635 288E A9 46 95 98			mva #$46 :STACKORIGIN,x
  1636 2892 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1637 2896 20 BE 23			jsr GRAPH.LINETO
  1638
  1639 				; optimize FAIL ('GRAPH.LINETO', examples\fill.pas), line = 32
  1640 2899 E8				inx
  1641 289A A9 32 95 98			mva #$32 :STACKORIGIN,x
  1642 289E A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1643 28A2 E8				inx
  1644 28A3 A9 23 95 98			mva #$23 :STACKORIGIN,x
  1645 28A7 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1646 28AB 20 BE 23			jsr GRAPH.LINETO
  1647
  1648 				; optimize OK (examples\fill.pas), line = 33
  1649
  1650 28AE A9 01			lda #$01
  1651 28B0 8D FD 02			sta $02FD
  1652
  1653 				; optimize FAIL ('GRAPH.FLOODFILL', examples\fill.pas), line = 34
  1654 28B3 E8				inx
  1655 28B4 A9 41 95 98			mva #$41 :STACKORIGIN,x
  1656 28B8 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1657 28BC E8				inx
  1658 28BD A9 32 95 98			mva #$32 :STACKORIGIN,x
  1659 28C1 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1660 28C5 E8				inx
  1661 28C6 A9 03 95 98			mva #$03 :STACKORIGIN,x
  1662 28CA 20 70 24			jsr GRAPH.FLOODFILL
  1663
  1664 				; optimize FAIL (100, examples\fill.pas), line = 35
  1665 					@print #$7D
  1665 				 LDY# $7D\ JSR @PRINT
  1665 28CD A0 7D		 LDY# $7D
  1665 28CF 20 71 21		 JSR @PRINT
  1666
  1667 				; optimize FAIL (100, examples\fill.pas), line = 36
  1668 					@printSTRING #CODEORIGIN+$0000
  1668 				 LDY> CODEORIGIN+$0000\ LDA< CODEORIGIN+$0000\ JSR @PRINTSTRING
  1668 28D2 A0 20		 LDY> CODEORIGIN+$0000
  1668 28D4 A9 00		 LDA< CODEORIGIN+$0000
  1668 28D6 20 7A 21		 JSR @PRINTSTRING
  1669 28D9 20 6C 21			@printEOL
  1670
  1671 				; --- RepeatUntilProlog
  1672 28DC			l_02C2
  1673
  1674 				; optimize OK (examples\fill.pas), line = 38
  1675
  1676 28DC 4C DC 28			jmp l_02C2
  1677 28DF			@exit
  1678 					.ifdef @new
  1679 					lda <@VarData
  1680 					sta :ztmp
  1681 					lda >@VarData
  1682 					ldy #@VarDataSize-1
  1683 					jmp @FreeMem
  1684 					eif
  1685 28DF 60				rts						; ret
  1686 				.endl
  1687 28E0			l_0012
  1688
  1689 				; optimize FAIL ('MAINPROC', examples\fill.pas), line = 42
  1690 28E0 20 6C 27			jsr MAINPROC
  1691
  1692 				; ------------------------------------------------------------
  1693
  1694 28E3			@exit
  1695
  1696 28E3 A2 00		@halt	ldx #0
  1697 28E5 9A				txs
  1698 					.ifdef MAIN.@DEFINES.ROMOFF
  1699 					inc portb
  1700 					.endif
  1701
  1702 28E6 60				rts
  1703
  1704 				; ------------------------------------------------------------
  1705
  1706 28E7 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1707
  1708 				; ------------------------------------------------------------
  1709
  1710 28F7			.local	@DEFINES
  1711 28F7			ATARI
  1712 				.endl
  1713
  1714 				.endl							; MAIN
  1715
  1716 				; ------------------------------------------------------------
  1717 				; ------------------------------------------------------------
  1718
  1719 				.macro	UNITINITIALIZATION
  1720 				
  1721 					.ifdef MAIN.SYSTEM.@UnitInit
  1722 					jsr MAIN.SYSTEM.@UnitInit
  1723 					eif
  1724 				
  1725 					.ifdef MAIN.ATARI.@UnitInit
  1726 					jsr MAIN.ATARI.@UnitInit
  1727 					eif
  1728 				
  1729 					.ifdef MAIN.CRT.@UnitInit
  1730 					jsr MAIN.CRT.@UnitInit
  1731 					eif
  1732 				
  1733 					.ifdef MAIN.TYPES.@UnitInit
  1734 					jsr MAIN.TYPES.@UnitInit
  1735 					eif
  1736 				
  1737 					.ifdef MAIN.GRAPH.@UnitInit
  1738 					jsr MAIN.GRAPH.@UnitInit
  1739 					eif
  1740 				.endm
  1741
  1742 				; ------------------------------------------------------------
  1743
  1744 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1745 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1745 				SYSTEM: $21E6..$221D
  1746 					eif
  1747
  1748 					ift .SIZEOF(MAIN.ATARI) > 0
  1749 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1750 					eif
  1751
  1752 					ift .SIZEOF(MAIN.CRT) > 0
  1753 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1754 					eif
  1755
  1756 					ift .SIZEOF(MAIN.TYPES) > 0
  1757 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
  1758 					eif
  1759
  1760 					ift .SIZEOF(MAIN.GRAPH) > 0
  1761 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
  1761 				GRAPH: $221E..$276B
  1762 					eif
  1763
  1764 					.print 'CODE: ',CODEORIGIN,'..',*-1
  1764 				CODE: $2000..$28F6
  1765
  1766 				; ------------------------------------------------------------
  1767
  1768 28F7			DATAORIGIN
  1769 28F7 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $27 $00  $00 $00 $17
  1770
  1771 = 0013			VARINITSIZE	= *-DATAORIGIN
  1772 = 0850			VARDATASIZE	= 2128
  1773
  1774 = 3147			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1775
  1776 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1776 				DATA: $28F7..$3147
  1777
  1778 02E0-02E1> A9 21			run START
  1779
  1780 				; ------------------------------------------------------------
  1781
  1782 				.macro	STATICDATA
  1783 				.by  $09 $46 $49 $4C $4C $20 $54 $45  $53 $54 $00
  1784 				.endm
  1785
  1786 					end
