mads 2.1.0 build 8 (23 Dec 19)
   388 					opt l+
   101
   102 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   102 				ZPAGE: $0080..$00D7
   103
   104 				.print 'RTLIB: ',RTLIB,'..',*-1
   104 				RTLIB: $20B6..$21EA
   105
   106 				; ------------------------------------------------------------
   107
   108 21EB			START
   109 21EB BA				tsx
   110 21EC 8E CF 23			stx MAIN.@halt+1
   111
   112 					.ifdef fmulinit
   113 					fmulinit
   114 					eif
   115
   116 = 010D			VLEN	= VARDATASIZE-VARINITSIZE
   117 = 23EA			VADR	= DATAORIGIN+VARINITSIZE
   118
   119 					ift VADR > $BFFF
   120 					ert 'Invalid memory address range ',VADR
   121 					eli (VLEN>0) && (VLEN<=256)
   122 					ldx #256-VLEN
   123 					lda #0
   124 					sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>0
   126 					@fill #VADR #VLEN #0
   126 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   126 21EF A9 EA 85 88 A9 23 +  MWA #VADR @FILL.PTR1
   126 21F7 A9 0D 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   126 21FF A9 00 85 84		 MVA #0 @FILL.PTR2
   126 2203 20 D9 20		 JSR @FILL
   127 					eif
   128
   129 					.ifdef MAIN.@DEFINES.ROMOFF
   130 					icl 'atari\romoff.asm'
   131 					.endif
   132
   133 2206 A9 F7 85 82 A9 24 + 	mwa #PROGRAMSTACK psptr
   134
   135 220E A2 0F			ldx #$0f					; DOS II+/D ParamStr
   136 2210 BD 40 03 9D D2 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   137
   138 2219 E8				inx						; X = 0
   139 221A 86 90			stx bp						; BP = 0
   140
   141 221C 8E 08 D2			stx audctl					; reset POKEY
   142 221F A9 03			lda #3
   143 2221 8D 0F D2			sta skctl
   144
   145 2224 CA				dex						; X = 255
   146
   147 2225				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: bitwise.a65]
Source: bitwise.a65
   148
   149 2225			.local	MAIN						; PROCEDURE
   150
   151 2225 4C CB 23			jmp l_00BD
   152
   153 				; ------------------------------------------------------------
   154
   155 2228			.local	SYSTEM						; UNIT
   156
   157 				; ------------------------------------------------------------
   158
   159 = 0101			__PORTB_BANKS	= $0101
   160 = 0648			M_PI_2	= $0648
   161 = 0192			D_PI_2	= $0192
   162 = 0004			D_PI_180	= $04
   163 = 0000			MGTIA	= $00
   164 = 0080			MVBXE	= $80
   165 = 0000			VBXE_XDLADR	= $00
   166 = 0100			VBXE_BCBADR	= $0100
   167 = 1000			VBXE_MAPADR	= $1000
   168 = 5000			VBXE_OVRADR	= $5000
   169 = B000			VBXE_WINDOW	= $B000
   170 = 0000			IDLI	= $00
   171 = 0001			IVBL	= $01
   172 = 00FE			CH_DELCHR	= $FE
   173 = 009B			CH_ENTER	= $9B
   174 = 001B			CH_ESC	= $1B
   175 = 001C			CH_CURS_UP	= $1C
   176 = 001D			CH_CURS_DOWN	= $1D
   177 = 001E			CH_CURS_LEFT	= $1E
   178 = 001F			CH_CURS_RIGHT	= $1F
   179 = 007F			CH_TAB	= $7F
   180 = 009B			CH_EOL	= $9B
   181 = 007D			CH_CLR	= $7D
   182 = 00FD			CH_BELL	= $FD
   183 = 007E			CH_DEL	= $7E
   184 = 009C			CH_DELLINE	= $9C
   185 = 009D			CH_INSLINE	= $9D
   186 = 0000			COLOR_BLACK	= $00
   187 = 000E			COLOR_WHITE	= $0E
   188 = 0032			COLOR_RED	= $32
   189 = 0096			COLOR_CYAN	= $96
   190 = 0068			COLOR_VIOLET	= $68
   191 = 00C4			COLOR_GREEN	= $C4
   192 = 0074			COLOR_BLUE	= $74
   193 = 00EE			COLOR_YELLOW	= $EE
   194 = 0028			COLOR_ORANGE	= $28
   195 = 00E4			COLOR_BROWN	= $E4
   196 = 003C			COLOR_LIGHTRED	= $3C
   197 = 0004			COLOR_GRAY1	= $04
   198 = 0006			COLOR_GRAY2	= $06
   199 = 000A			COLOR_GRAY3	= $0A
   200 = 00CC			COLOR_LIGHTGREEN	= $CC
   201 = 007C			COLOR_LIGHTBLUE	= $7C
   202 = 0004			FMOPENREAD	= $04
   203 = 0008			FMOPENWRITE	= $08
   204 = 0009			FMOPENAPPEND	= $09
   205 = 000C			FMOPENREADWRITE	= $0C
   206 = 23E4			SCREENWIDTH	= DATAORIGIN+$0000
   207 = 23E6			SCREENHEIGHT	= DATAORIGIN+$0002
   208 = 23E8			DATESEPARATOR	= DATAORIGIN+$0004
   209 = D014			TVSYSTEM	= $D014
   210 = 02C0			adr.PALETTE	= $02C0
   211 2228			.var PALETTE	= adr.PALETTE .word
   212 = D012			adr.HPALETTE	= $D012
   213 2228			.var HPALETTE	= adr.HPALETTE .word
   214 = 23E9			FILEMODE	= DATAORIGIN+$0005
   215 = 23EA			GRAPHMODE	= DATAORIGIN+$0006
   216 = 23EB			IORESULT	= DATAORIGIN+$0007
   217 = 23EC			EOLN	= DATAORIGIN+$0008
   218 = 23ED			RNDSEED	= DATAORIGIN+$0009
   219
   220 = 2228 C0 02		PALETTE
   220 = 222A 12 D0		HPALETTE
   220 				.endl							; UNIT SYSTEM
   221
   222 				; ------------------------------------------------------------
   223
   224 222C			.local	ATARI						; UNIT
   225
   226 				; ------------------------------------------------------------
   227
   228 = 0012			RTCLOK	= $12
   229 = 004D			ATRACT	= $4D
   230 = 0052			LMARGIN	= $52
   231 = 0053			RMARGIN	= $53
   232 = 0054			ROWCRS	= $54
   233 = 0055			COLCRS	= $55
   234 = 0057			DINDEX	= $57
   235 = 0058			SAVMSC	= $58
   236 = 0062			PALNTS	= $62
   237 = 006A			RAMTOP	= $6A
   238 = 0200			VDSLST	= $0200
   239 = 0230			SDLSTL	= $0230
   240 = 0290			TXTROW	= $0290
   241 = 0291			TXTCOL	= $0291
   242 = 0293			TINDEX	= $0293
   243 = 0294			TXTMSC	= $0294
   244 = 022F			SDMCTL	= $022F
   245 = 026F			GPRIOR	= $026F
   246 = 02F0			CRSINH	= $02F0
   247 = 02F3			CHACT	= $02F3
   248 = 02F4			CHBAS	= $02F4
   249 = 02FC			CH	= $02FC
   250 = 02C0			PCOLR0	= $02C0
   251 = 02C1			PCOLR1	= $02C1
   252 = 02C2			PCOLR2	= $02C2
   253 = 02C3			PCOLR3	= $02C3
   254 = 02C4			COLOR0	= $02C4
   255 = 02C5			COLOR1	= $02C5
   256 = 02C6			COLOR2	= $02C6
   257 = 02C7			COLOR3	= $02C7
   258 = 02C8			COLOR4	= $02C8
   259 = 02C8			COLBAKS	= $02C8
   260 = D000			HPOSP0	= $D000
   261 = D001			HPOSP1	= $D001
   262 = D002			HPOSP2	= $D002
   263 = D003			HPOSP3	= $D003
   264 = D004			HPOSM0	= $D004
   265 = D005			HPOSM1	= $D005
   266 = D006			HPOSM2	= $D006
   267 = D007			HPOSM3	= $D007
   268 = D008			SIZEP0	= $D008
   269 = D009			SIZEP1	= $D009
   270 = D00A			SIZEP2	= $D00A
   271 = D00B			SIZEP3	= $D00B
   272 = D00C			SIZEM	= $D00C
   273 = D00D			GRAFP0	= $D00D
   274 = D00E			GRAFP1	= $D00E
   275 = D00F			GRAFP2	= $D00F
   276 = D010			GRAFP3	= $D010
   277 = D011			GRAFM	= $D011
   278 = D004			P0PF	= $D004
   279 = D014			PAL	= $D014
   280 = D012			COLPM0	= $D012
   281 = D013			COLPM1	= $D013
   282 = D014			COLPM2	= $D014
   283 = D015			COLPM3	= $D015
   284 = D016			COLPF0	= $D016
   285 = D017			COLPF1	= $D017
   286 = D018			COLPF2	= $D018
   287 = D019			COLPF3	= $D019
   288 = D01A			COLBK	= $D01A
   289 = D01B			PRIOR	= $D01B
   290 = D01D			GRACTL	= $D01D
   291 = D01E			HITCLR	= $D01E
   292 = D200			AUDF1	= $D200
   293 = D201			AUDC1	= $D201
   294 = D202			AUDF2	= $D202
   295 = D203			AUDC2	= $D203
   296 = D204			AUDF3	= $D204
   297 = D205			AUDC3	= $D205
   298 = D206			AUDF4	= $D206
   299 = D207			AUDC4	= $D207
   300 = D208			AUDCTL	= $D208
   301 = D20F			SKSTAT	= $D20F
   302 = D301			PORTB	= $D301
   303 = D400			DMACTL	= $D400
   304 = D401			CHACTL	= $D401
   305 = D402			DLISTL	= $D402
   306 = D404			HSCROL	= $D404
   307 = D405			VSCROL	= $D405
   308 = D407			PMBASE	= $D407
   309 = D409			CHBASE	= $D409
   310 = D40A			WSYNC	= $D40A
   311 = D40B			VCOUNT	= $D40B
   312 = D40C			PENH	= $D40C
   313 = D40D			PENV	= $D40D
   314 = D40E			NMIEN	= $D40E
   315
   316 				.endl							; UNIT ATARI
   317
   318 				; ------------------------------------------------------------
   319
   320 222C			.local	CRT						; UNIT
   321
   322 222C			.local	READKEY						; FUNCTION | ASSEMBLER
   323
   324 				; ---------------------  ASM Block 049  ---------------------
   325
   326 222C 8A 48			txa:pha
   327
   328 222E 20 B6 20			@GetKey
   329
   330 2231 8D F0 23			sta Result
   331
   332 2234 68 AA			pla:tax
   333
   334 2236			@exit
   335
   336 				; ------------------------------------------------------------
   337
   338 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   339 				; as Pointer
   340
   341 2236 E8				inx
   342 2237 AD F0 23 95 98		mva RESULT :STACKORIGIN,x
   343
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					eif
   351
   352 				; ------------------------------------------------------------
   353
   354 = 23F0			RESULT	= DATAORIGIN+$000C
   355
   356 = 23F0			@VarData	= RESULT
   357 = 0001			@VarDataSize	= 1
   358
   359 223C 60				rts						; ret
   360 				.endl
   361
   362 				; ------------------------------------------------------------
   363
   364 = 23EF			TEXTATTR	= DATAORIGIN+$000B
   365 = D01F			CONSOL	= $D01F
   366 = 0000			CN_START_SELECT_OPTION	= $00
   367 = 0001			CN_SELECT_OPTION	= $01
   368 = 0002			CN_START_OPTION	= $02
   369 = 0003			CN_OPTION	= $03
   370 = 0004			CN_START_SELECT	= $04
   371 = 0005			CN_SELECT	= $05
   372 = 0006			CN_START	= $06
   373 = 0007			CN_NONE	= $07
   374 = 0000			BW40	= $00
   375 = 0001			CO40	= $01
   376 = 0002			BW80	= $02
   377 = 0003			CO80	= $03
   378 = 0007			MONO	= $07
   379 = 0001			C40	= $01
   380 = 0003			C80	= $03
   381 = 0000			BLACK	= $00
   382 = 0001			BLUE	= $01
   383 = 0002			GREEN	= $02
   384 = 0003			CYAN	= $03
   385 = 0004			RED	= $04
   386 = 0005			MAGENTA	= $05
   387 = 0006			BROWN	= $06
   388 = 0007			LIGHTGRAY	= $07
   389 = 0008			DARKGRAY	= $08
   390 = 0009			LIGHTBLUE	= $09
   391 = 000A			LIGHTGREEN	= $0A
   392 = 000B			LIGHTCYAN	= $0B
   393 = 000C			LIGHTRED	= $0C
   394 = 000D			LIGHTMAGENTA	= $0D
   395 = 000E			YELLOW	= $0E
   396 = 000F			WHITE	= $0F
   397 = 0080			BLINK	= $80
   398
   399 				.endl							; UNIT CRT
   400
   401 				; ------------------------------------------------------------
   402
   403 223D			.local	DOS						; UNIT
   404
   405 				; ------------------------------------------------------------
   406
   407 = D014			PALNTSC	= $D014
   408
   409 				.endl							; UNIT DOS
   410
   411 				; ------------------------------------------------------------
   412
   413 223D			.local	STRUTILS					; UNIT
   414
   415 				; ------------------------------------------------------------
   416
   417 				.endl							; UNIT STRUTILS
   418
   419 				; ------------------------------------------------------------
   420
   421 223D			.local	SYSUTILS					; UNIT
   422
   423 				; ------------------------------------------------------------
   424
   425 = 0001			FAREADONLY	= $01
   426 = 0002			FAHIDDEN	= $02
   427 = 0004			FASYSFILE	= $04
   428 = 0008			FAVOLUMEID	= $08
   429 = 0010			FADIRECTORY	= $10
   430 = 0020			FAARCHIVE	= $20
   431 = 003F			FAANYFILE	= $3F
   432
   433 				.endl							; UNIT SYSUTILS
   434
   435 				; ------------------------------------------------------------
   436
   437 223D			.local	CIO						; UNIT
   438
   439 223D			.local	GET						; FUNCTION | ASSEMBLER
   440
   441 				; ------------------------------------------------------------
   442
   443 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   444 				; as Pointer
   445 223D B5 98 8D F1 23		mva :STACKORIGIN,x CHN
   446 2242 CA				dex
   447
   448 				; ---------------------  ASM Block 080  ---------------------
   449
   450 2243 8A 48			txa:pha
   451
   452 2245 AD F1 23			lda chn
   453 2248 0A 0A 0A 0A			:4 asl @
   454 224C AA				tax
   455
   456 224D A9 07			lda #7		;get char command
   457 224F 9D 42 03			sta iccmd,x
   458
   459 2252 A9 00			lda #$00	;zero out the unused
   460 2254 9D 48 03			sta icbufl,x	;store in accumulator
   461 2257 9D 49 03			sta icbufh,x	;...after CIOV jump
   462
   463 225A				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 225A 20 56 E4				jsr CIOV
Source: bitwise.a65
   464
   465 225D 8C EB 23			sty MAIN.SYSTEM.IOResult
   466
   467 2260 8D F2 23			sta Result
   468
   469 2263 68 AA			pla:tax
   470
   471 2265			@exit
   472
   473 				; ------------------------------------------------------------
   474
   475 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   476 				; as Pointer
   477
   478 2265 E8				inx
   479 2266 AD F2 23 95 98		mva RESULT :STACKORIGIN,x
   480
   481 					.ifdef @new
   482 					lda <@VarData
   483 					sta :ztmp
   484 					lda >@VarData
   485 					ldy #@VarDataSize-1
   486 					jmp @FreeMem
   487 					eif
   488
   489 				; ------------------------------------------------------------
   490
   491 = 23F1			CHN	= DATAORIGIN+$000D
   492 = 23F2			RESULT	= DATAORIGIN+$000E
   493
   494 = 23F1			@VarData	= CHN
   495 = 0002			@VarDataSize	= 2
   496
   497 226B 60				rts						; ret
   498 				.endl
   499
   500 				; ------------------------------------------------------------
   501
   502 				.endl							; UNIT CIO
   503
   504 226C			.local	MAINPROC					; PROCEDURE
   505
   506 				; optimize FAIL (100, examples\bitwise.pas), line = 20
   507 					@print #$7D
   507 				 LDY# $7D\ JSR @PRINT
   507 226C A0 7D		 LDY# $7D
   507 226E 20 26 21		 JSR @PRINT
   508
   509 				; optimize FAIL (100, examples\bitwise.pas), line = 21
   510 					@printSTRING #CODEORIGIN+$000D
   510 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   510 2271 A0 20		 LDY> CODEORIGIN+$000D
   510 2273 A9 0D		 LDA< CODEORIGIN+$000D
   510 2275 20 2F 21		 JSR @PRINTSTRING
   511 2278 20 21 21			@printEOL
   512
   513 				; optimize FAIL (100, examples\bitwise.pas), line = 22
   514 					@printSTRING #CODEORIGIN+$002E
   514 				 LDY> CODEORIGIN+$002E\ LDA< CODEORIGIN+$002E\ JSR @PRINTSTRING
   514 227B A0 20		 LDY> CODEORIGIN+$002E
   514 227D A9 2E		 LDA< CODEORIGIN+$002E
   514 227F 20 2F 21		 JSR @PRINTSTRING
   515 2282 20 21 21			@printEOL
   516
   517 				; optimize FAIL (100, examples\bitwise.pas), line = 23
   518 					@printSTRING #CODEORIGIN+$0030
   518 				 LDY> CODEORIGIN+$0030\ LDA< CODEORIGIN+$0030\ JSR @PRINTSTRING
   518 2285 A0 20		 LDY> CODEORIGIN+$0030
   518 2287 A9 30		 LDA< CODEORIGIN+$0030
   518 2289 20 2F 21		 JSR @PRINTSTRING
   519
   520 				; optimize OK (examples\bitwise.pas), line = 24
   521
   522 228C A9 02 8D F4 24		mva #$02 N
   523
   524 				; optimize OK (examples\bitwise.pas), line = 25
   525
   526 2291 18 69 02			add #$02
   527 2294 8D F4 24			sta N
   528
   529 				; optimize FAIL (100, examples\bitwise.pas), line = 26
   530 2297 AD F4 24			lda N
   531 229A 20 60 21			jsr @printBYTE._a
   532 229D 20 21 21			@printEOL
   533
   534 				; optimize FAIL (100, examples\bitwise.pas), line = 27
   535 					@printSTRING #CODEORIGIN+$002D
   535 				 LDY> CODEORIGIN+$002D\ LDA< CODEORIGIN+$002D\ JSR @PRINTSTRING
   535 22A0 A0 20		 LDY> CODEORIGIN+$002D
   535 22A2 A9 2D		 LDA< CODEORIGIN+$002D
   535 22A4 20 2F 21		 JSR @PRINTSTRING
   536 22A7 20 21 21			@printEOL
   537
   538 				; optimize FAIL (100, examples\bitwise.pas), line = 28
   539 					@printSTRING #CODEORIGIN+$0034
   539 				 LDY> CODEORIGIN+$0034\ LDA< CODEORIGIN+$0034\ JSR @PRINTSTRING
   539 22AA A0 20		 LDY> CODEORIGIN+$0034
   539 22AC A9 34		 LDA< CODEORIGIN+$0034
   539 22AE 20 2F 21		 JSR @PRINTSTRING
   540
   541 				; optimize OK (examples\bitwise.pas), line = 29
   542
   543 22B1 AD F4 24			lda N
   544 22B4 29 02			and #$02
   545 22B6 8D F4 24			sta N
   546
   547 				; optimize FAIL (100, examples\bitwise.pas), line = 30
   548 22B9 AD F4 24			lda N
   549 22BC 20 60 21			jsr @printBYTE._a
   550 22BF 20 21 21			@printEOL
   551
   552 				; optimize FAIL (100, examples\bitwise.pas), line = 31
   553 					@printSTRING #CODEORIGIN+$002D
   553 				 LDY> CODEORIGIN+$002D\ LDA< CODEORIGIN+$002D\ JSR @PRINTSTRING
   553 22C2 A0 20		 LDY> CODEORIGIN+$002D
   553 22C4 A9 2D		 LDA< CODEORIGIN+$002D
   553 22C6 20 2F 21		 JSR @PRINTSTRING
   554 22C9 20 21 21			@printEOL
   555
   556 				; optimize FAIL (100, examples\bitwise.pas), line = 32
   557 					@printSTRING #CODEORIGIN+$0044
   557 				 LDY> CODEORIGIN+$0044\ LDA< CODEORIGIN+$0044\ JSR @PRINTSTRING
   557 22CC A0 20		 LDY> CODEORIGIN+$0044
   557 22CE A9 44		 LDA< CODEORIGIN+$0044
   557 22D0 20 2F 21		 JSR @PRINTSTRING
   558
   559 				; optimize OK (examples\bitwise.pas), line = 33
   560
   561 22D3 AD F4 24			lda N
   562 22D6 29 28			and #$28
   563 22D8 8D F4 24			sta N
   564
   565 				; optimize FAIL (100, examples\bitwise.pas), line = 34
   566 22DB AD F4 24			lda N
   567 22DE 20 60 21			jsr @printBYTE._a
   568 22E1 20 21 21			@printEOL
   569
   570 				; optimize FAIL (100, examples\bitwise.pas), line = 35
   571 					@printSTRING #CODEORIGIN+$002D
   571 				 LDY> CODEORIGIN+$002D\ LDA< CODEORIGIN+$002D\ JSR @PRINTSTRING
   571 22E4 A0 20		 LDY> CODEORIGIN+$002D
   571 22E6 A9 2D		 LDA< CODEORIGIN+$002D
   571 22E8 20 2F 21		 JSR @PRINTSTRING
   572 22EB 20 21 21			@printEOL
   573
   574 				; optimize FAIL (100, examples\bitwise.pas), line = 36
   575 					@printSTRING #CODEORIGIN+$0030
   575 				 LDY> CODEORIGIN+$0030\ LDA< CODEORIGIN+$0030\ JSR @PRINTSTRING
   575 22EE A0 20		 LDY> CODEORIGIN+$0030
   575 22F0 A9 30		 LDA< CODEORIGIN+$0030
   575 22F2 20 2F 21		 JSR @PRINTSTRING
   576
   577 				; optimize OK (examples\bitwise.pas), line = 37
   578
   579 22F5 A9 02 8D F4 24		mva #$02 N
   580
   581 				; optimize FAIL (100, examples\bitwise.pas), line = 38
   582 22FA AD F4 24			lda N
   583 22FD 20 60 21			jsr @printBYTE._a
   584 2300 20 21 21			@printEOL
   585
   586 				; optimize FAIL (100, examples\bitwise.pas), line = 39
   587 					@printSTRING #CODEORIGIN+$002D
   587 				 LDY> CODEORIGIN+$002D\ LDA< CODEORIGIN+$002D\ JSR @PRINTSTRING
   587 2303 A0 20		 LDY> CODEORIGIN+$002D
   587 2305 A9 2D		 LDA< CODEORIGIN+$002D
   587 2307 20 2F 21		 JSR @PRINTSTRING
   588 230A 20 21 21			@printEOL
   589
   590 				; optimize FAIL (100, examples\bitwise.pas), line = 40
   591 					@printSTRING #CODEORIGIN+$0055
   591 				 LDY> CODEORIGIN+$0055\ LDA< CODEORIGIN+$0055\ JSR @PRINTSTRING
   591 230D A0 20		 LDY> CODEORIGIN+$0055
   591 230F A9 55		 LDA< CODEORIGIN+$0055
   591 2311 20 2F 21		 JSR @PRINTSTRING
   592
   593 				; optimize OK (examples\bitwise.pas), line = 41
   594
   595 2314 AD F4 24			lda N
   596 2317 49 02			eor #$02
   597 2319 8D F4 24			sta N
   598
   599 				; optimize FAIL (100, examples\bitwise.pas), line = 42
   600 231C AD F4 24			lda N
   601 231F 20 60 21			jsr @printBYTE._a
   602 2322 20 21 21			@printEOL
   603
   604 				; optimize FAIL (100, examples\bitwise.pas), line = 43
   605 					@printSTRING #CODEORIGIN+$002D
   605 				 LDY> CODEORIGIN+$002D\ LDA< CODEORIGIN+$002D\ JSR @PRINTSTRING
   605 2325 A0 20		 LDY> CODEORIGIN+$002D
   605 2327 A9 2D		 LDA< CODEORIGIN+$002D
   605 2329 20 2F 21		 JSR @PRINTSTRING
   606 232C 20 21 21			@printEOL
   607
   608 				; optimize FAIL (100, examples\bitwise.pas), line = 44
   609 					@printSTRING #CODEORIGIN+$0065
   609 				 LDY> CODEORIGIN+$0065\ LDA< CODEORIGIN+$0065\ JSR @PRINTSTRING
   609 232F A0 20		 LDY> CODEORIGIN+$0065
   609 2331 A9 65		 LDA< CODEORIGIN+$0065
   609 2333 20 2F 21		 JSR @PRINTSTRING
   610
   611 				; optimize OK (examples\bitwise.pas), line = 45
   612
   613 2336 AD F4 24			lda N
   614 2339 49 02			eor #$02
   615 233B 8D F4 24			sta N
   616
   617 				; optimize FAIL (100, examples\bitwise.pas), line = 46
   618 233E AD F4 24			lda N
   619 2341 20 60 21			jsr @printBYTE._a
   620 2344 20 21 21			@printEOL
   621
   622 				; optimize FAIL (100, examples\bitwise.pas), line = 47
   623 					@printSTRING #CODEORIGIN+$002D
   623 				 LDY> CODEORIGIN+$002D\ LDA< CODEORIGIN+$002D\ JSR @PRINTSTRING
   623 2347 A0 20		 LDY> CODEORIGIN+$002D
   623 2349 A9 2D		 LDA< CODEORIGIN+$002D
   623 234B 20 2F 21		 JSR @PRINTSTRING
   624 234E 20 21 21			@printEOL
   625
   626 				; optimize FAIL (100, examples\bitwise.pas), line = 48
   627 					@printSTRING #CODEORIGIN+$0078
   627 				 LDY> CODEORIGIN+$0078\ LDA< CODEORIGIN+$0078\ JSR @PRINTSTRING
   627 2351 A0 20		 LDY> CODEORIGIN+$0078
   627 2353 A9 78		 LDA< CODEORIGIN+$0078
   627 2355 20 2F 21		 JSR @PRINTSTRING
   628
   629 				; optimize OK (examples\bitwise.pas), line = 49
   630
   631 2358 AD F4 24			lda N
   632 235B 4D F4 24			eor N
   633 235E 8D F4 24			sta N
   634
   635 				; optimize FAIL (100, examples\bitwise.pas), line = 50
   636 2361 AD F4 24			lda N
   637 2364 20 60 21			jsr @printBYTE._a
   638 2367 20 21 21			@printEOL
   639
   640 				; optimize FAIL (100, examples\bitwise.pas), line = 51
   641 					@printSTRING #CODEORIGIN+$002D
   641 				 LDY> CODEORIGIN+$002D\ LDA< CODEORIGIN+$002D\ JSR @PRINTSTRING
   641 236A A0 20		 LDY> CODEORIGIN+$002D
   641 236C A9 2D		 LDA< CODEORIGIN+$002D
   641 236E 20 2F 21		 JSR @PRINTSTRING
   642 2371 20 21 21			@printEOL
   643
   644 				; optimize FAIL (100, examples\bitwise.pas), line = 52
   645 					@printSTRING #CODEORIGIN+$0088
   645 				 LDY> CODEORIGIN+$0088\ LDA< CODEORIGIN+$0088\ JSR @PRINTSTRING
   645 2374 A0 20		 LDY> CODEORIGIN+$0088
   645 2376 A9 88		 LDA< CODEORIGIN+$0088
   645 2378 20 2F 21		 JSR @PRINTSTRING
   646 237B 20 21 21			@printEOL
   647
   648 				; optimize FAIL (100, examples\bitwise.pas), line = 53
   649 					@printSTRING #CODEORIGIN+$008E
   649 				 LDY> CODEORIGIN+$008E\ LDA< CODEORIGIN+$008E\ JSR @PRINTSTRING
   649 237E A0 20		 LDY> CODEORIGIN+$008E
   649 2380 A9 8E		 LDA< CODEORIGIN+$008E
   649 2382 20 2F 21		 JSR @PRINTSTRING
   650
   651 				; optimize OK (examples\bitwise.pas), line = 54
   652
   653 2385 A9 28 8D F5 24		mva #$28 A
   654
   655 				; optimize OK (examples\bitwise.pas), line = 55
   656
   657 238A 0A				asl @
   658 238B 8D F6 24			sta B
   659
   660 				; optimize FAIL (100, examples\bitwise.pas), line = 56
   661 238E AD F6 24			lda B
   662 2391 20 60 21			jsr @printBYTE._a
   663 2394 20 21 21			@printEOL
   664
   665 				; optimize FAIL (100, examples\bitwise.pas), line = 57
   666 					@printSTRING #CODEORIGIN+$002D
   666 				 LDY> CODEORIGIN+$002D\ LDA< CODEORIGIN+$002D\ JSR @PRINTSTRING
   666 2397 A0 20		 LDY> CODEORIGIN+$002D
   666 2399 A9 2D		 LDA< CODEORIGIN+$002D
   666 239B 20 2F 21		 JSR @PRINTSTRING
   667 239E 20 21 21			@printEOL
   668
   669 				; optimize FAIL (100, examples\bitwise.pas), line = 58
   670 					@printSTRING #CODEORIGIN+$00A2
   670 				 LDY> CODEORIGIN+$00A2\ LDA< CODEORIGIN+$00A2\ JSR @PRINTSTRING
   670 23A1 A0 20		 LDY> CODEORIGIN+$00A2
   670 23A3 A9 A2		 LDA< CODEORIGIN+$00A2
   670 23A5 20 2F 21		 JSR @PRINTSTRING
   671
   672 				; optimize OK (examples\bitwise.pas), line = 59
   673
   674 23A8 AD F5 24			lda A
   675 23AB 4A				lsr @
   676 23AC 8D F6 24			sta B
   677
   678 				; optimize FAIL (100, examples\bitwise.pas), line = 60
   679 23AF AD F6 24			lda B
   680 23B2 20 60 21			jsr @printBYTE._a
   681 23B5 20 21 21			@printEOL
   682
   683 				; optimize FAIL ('CIO.GET', examples\bitwise.pas), line = 61
   684 23B8 E8				inx
   685 23B9 A9 07 95 98			mva #$07 :STACKORIGIN,x
   686 23BD 20 3D 22			jsr CIO.GET
   687 23C0 B5 98 8D F3 24		mva :STACKORIGIN,x KEY
   688 23C5 CA				dex
   689
   690 23C6 20 2C 22			jsr CRT.READKEY					; call Entry
   691
   692 23C9 CA				dex
   693 23CA			@exit
   694 					.ifdef @new
   695 					lda <@VarData
   696 					sta :ztmp
   697 					lda >@VarData
   698 					ldy #@VarDataSize-1
   699 					jmp @FreeMem
   700 					eif
   701 23CA 60				rts						; ret
   702 				.endl
   703 23CB			l_00BD
   704
   705 				; optimize FAIL ('MAINPROC', examples\bitwise.pas), line = 66
   706 23CB 20 6C 22			jsr MAINPROC
   707
   708 				; ------------------------------------------------------------
   709
   710 = 23F3			adr.STRBUFFER	= DATAORIGIN+$000F
   711 23CE			.var STRBUFFER	= adr.STRBUFFER .word
   712 = 24F3			KEY	= DATAORIGIN+$010F
   713 = 24F4			N	= DATAORIGIN+$0110
   714 = 24F5			A	= DATAORIGIN+$0111
   715 = 24F6			B	= DATAORIGIN+$0112
   716 23CE			@exit
   717
   718 23CE A2 00		@halt	ldx #0
   719 23D0 9A				txs
   720 					.ifdef MAIN.@DEFINES.ROMOFF
   721 					inc portb
   722 					.endif
   723
   724 23D1 60				rts
   725
   726 				; ------------------------------------------------------------
   727
   728 23D2 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   729
   730 				; ------------------------------------------------------------
   731
   732 23E2			.local	@DEFINES
   733 23E2			ATARI
   734 				.endl
   735
   736 = 23E2 F3 23		STRBUFFER
   736 				.endl							; MAIN
   737
   738 				; ------------------------------------------------------------
   739 				; ------------------------------------------------------------
   740
   741 				.macro	UNITINITIALIZATION
   742 				
   743 					.ifdef MAIN.SYSTEM.@UnitInit
   744 					jsr MAIN.SYSTEM.@UnitInit
   745 					eif
   746 				
   747 					.ifdef MAIN.ATARI.@UnitInit
   748 					jsr MAIN.ATARI.@UnitInit
   749 					eif
   750 				
   751 					.ifdef MAIN.CRT.@UnitInit
   752 					jsr MAIN.CRT.@UnitInit
   753 					eif
   754 				
   755 					.ifdef MAIN.DOS.@UnitInit
   756 					jsr MAIN.DOS.@UnitInit
   757 					eif
   758 				
   759 					.ifdef MAIN.STRUTILS.@UnitInit
   760 					jsr MAIN.STRUTILS.@UnitInit
   761 					eif
   762 				
   763 					.ifdef MAIN.SYSUTILS.@UnitInit
   764 					jsr MAIN.SYSUTILS.@UnitInit
   765 					eif
   766 				
   767 					.ifdef MAIN.CIO.@UnitInit
   768 					jsr MAIN.CIO.@UnitInit
   769 					eif
   770 				.endm
   771
   772 				; ------------------------------------------------------------
   773
   774 					ift .SIZEOF(MAIN.SYSTEM) > 0
   775 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   775 				SYSTEM: $2228..$222B
   776 					eif
   777
   778 					ift .SIZEOF(MAIN.ATARI) > 0
   779 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   780 					eif
   781
   782 					ift .SIZEOF(MAIN.CRT) > 0
   783 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   783 				CRT: $222C..$223C
   784 					eif
   785
   786 					ift .SIZEOF(MAIN.DOS) > 0
   787 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   788 					eif
   789
   790 					ift .SIZEOF(MAIN.STRUTILS) > 0
   791 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   792 					eif
   793
   794 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   795 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   796 					eif
   797
   798 					ift .SIZEOF(MAIN.CIO) > 0
   799 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
   799 				CIO: $223D..$226B
   800 					eif
   801
   802 					.print 'CODE: ',CODEORIGIN,'..',*-1
   802 				CODE: $2000..$23E3
   803
   804 				; ------------------------------------------------------------
   805
   806 23E4			DATAORIGIN
   807 23E4 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   808
   809 = 0006			VARINITSIZE	= *-DATAORIGIN
   810 = 0113			VARDATASIZE	= 275
   811
   812 = 24F7			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   813
   814 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   814 				DATA: $23E4..$24F7
   815
   816 02E0-02E1> EB 21			run START
   817
   818 				; ------------------------------------------------------------
   819
   820 				.macro	STATICDATA
   821 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $1F $4C $6F  $67 $69 $63 $61 $6C $28 $62 $69
   822 				.by  $74 $77 $69 $73 $65 $29 $20 $6F  $70 $65 $72 $61 $74 $6F $72 $73  $20 $64 $65 $6D $6F $00 $00 $00
   823 				.by  $02 $6E $3D $00 $0E $6E $3D $3D  $26 $32 $20 $52 $65 $73 $75 $6C  $74 $3A $20 $00 $0F $6E $3D $6E
   824 				.by  $26 $34 $30 $20 $52 $65 $73 $75  $6C $74 $3A $20 $00 $0E $6E $3D  $3D $21 $32 $20 $52 $65 $73 $75
   825 				.by  $6C $74 $3A $20 $00 $11 $6E $3D  $3D $58 $4F $52 $20 $32 $20 $52  $65 $73 $75 $6C $74 $3A $20 $00
   826 				.by  $0E $6E $3D $3D $21 $6E $20 $52  $65 $73 $75 $6C $74 $3A $20 $00  $04 $61 $3D $34 $30 $00 $12 $62
   827 				.by  $3D $61 $20 $4C $53 $48 $20 $31  $20 $52 $65 $73 $75 $6C $74 $3A  $20 $00 $12 $62 $3D $61 $20 $52
   828 				.by  $53 $48 $20 $31 $20 $52 $65 $73  $75 $6C $74 $3A $20 $00
   829 				.endm
   830
   831 					end
