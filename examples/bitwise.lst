mads 2.1.0
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $20B6..$21AB
    97
    98 				; ------------------------------------------------------------
    99
   100 21AB			START
   101 21AB BA				tsx
   102 21AC 8E 63 23			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 000B			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 237C			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 21AF A2 F5			ldx #256-VLEN
   115 21B1 A9 00			lda #0
   116 21B3 9D 87 22 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   119 					eif
   120
   121 21B9 A2 0F			ldx #$0f
   122 21BB BD 40 03 9D 66 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 21C4 E8				inx		; X = 0 !!!
   125 21C5 86 8E			stx bp		; lo BP = 0
   126
   127 21C7				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: bitwise.a65]
   128
   129 21C7			.local	MAIN						; PROCEDURE
   130
   131 21C7 4C 5F 23			jmp l_00BD
   132
   133 				; ------------------------------------------------------------
   134
   135 21CA			.local	SYSTEM						; UNIT
   136
   137 				; ------------------------------------------------------------
   138
   139 = 0648			M_PI_2	= $0648
   140 = 0192			D_PI_2	= $0192
   141 = 0004			D_PI_180	= $0004
   142 = 0000			MGTIA	= $0000
   143 = 0080			MVBXE	= $0080
   144 = 0000			VBXE_XDLADR	= $0000
   145 = 0100			VBXE_BCBADR	= $0100
   146 = 1000			VBXE_MAPADR	= $1000
   147 = 5000			VBXE_OVRADR	= $5000
   148 = B000			VBXE_WINDOW	= $B000
   149 = 0000			IDLI	= $0000
   150 = 0001			IVBL	= $0001
   151 = 00FE			CH_DELCHR	= $00FE
   152 = 009B			CH_ENTER	= $009B
   153 = 001B			CH_ESC	= $001B
   154 = 001C			CH_CURS_UP	= $001C
   155 = 001D			CH_CURS_DOWN	= $001D
   156 = 001E			CH_CURS_LEFT	= $001E
   157 = 001F			CH_CURS_RIGHT	= $001F
   158 = 007F			CH_TAB	= $007F
   159 = 009B			CH_EOL	= $009B
   160 = 007D			CH_CLR	= $007D
   161 = 00FD			CH_BELL	= $00FD
   162 = 007E			CH_DEL	= $007E
   163 = 009C			CH_DELLINE	= $009C
   164 = 009D			CH_INSLINE	= $009D
   165 = 0000			COLOR_BLACK	= $0000
   166 = 000E			COLOR_WHITE	= $000E
   167 = 0032			COLOR_RED	= $0032
   168 = 0096			COLOR_CYAN	= $0096
   169 = 0068			COLOR_VIOLET	= $0068
   170 = 00C4			COLOR_GREEN	= $00C4
   171 = 0074			COLOR_BLUE	= $0074
   172 = 00EE			COLOR_YELLOW	= $00EE
   173 = 0028			COLOR_ORANGE	= $0028
   174 = 00E4			COLOR_BROWN	= $00E4
   175 = 003C			COLOR_LIGHTRED	= $003C
   176 = 0004			COLOR_GRAY1	= $0004
   177 = 0006			COLOR_GRAY2	= $0006
   178 = 000A			COLOR_GRAY3	= $000A
   179 = 00CC			COLOR_LIGHTGREEN	= $00CC
   180 = 007C			COLOR_LIGHTBLUE	= $007C
   181 = 0004			FMOPENREAD	= $0004
   182 = 0008			FMOPENWRITE	= $0008
   183 = 0009			FMOPENAPPEND	= $0009
   184 = 000C			FMOPENREADWRITE	= $000C
   185 = 2376			SCREENWIDTH	= DATAORIGIN+$0000
   186 = 2378			SCREENHEIGHT	= DATAORIGIN+$0002
   187 = 237A			DATESEPARATOR	= DATAORIGIN+$0004
   188 = D014			TVSYSTEM	= $D014
   189 = 02C0			adr.PALETTE	= $02C0
   190 21CA			.var PALETTE	= adr.PALETTE .word
   191 = D012			adr.HPALETTE	= $D012
   192 21CA			.var HPALETTE	= adr.HPALETTE .word
   193 = 237B			FILEMODE	= DATAORIGIN+$0005
   194 = 237C			SCREENMODE	= DATAORIGIN+$0006
   195 = 237D			IORESULT	= DATAORIGIN+$0007
   196 = 237E			EOLN	= DATAORIGIN+$0008
   197 = 237F			RNDSEED	= DATAORIGIN+$0009
   198
   199 = 21CA C0 02		PALETTE
   199 = 21CC 12 D0		HPALETTE
   199 				.endl							; UNIT SYSTEM
   200
   201 				; ------------------------------------------------------------
   202
   203 21CE			.local	DOS						; UNIT
   204
   205 				; ------------------------------------------------------------
   206
   207 = D014			PALNTSC	= $D014
   208
   209 				.endl							; UNIT DOS
   210
   211 				; ------------------------------------------------------------
   212
   213 21CE			.local	STRUTILS					; UNIT
   214
   215 				; ------------------------------------------------------------
   216
   217 				.endl							; UNIT STRUTILS
   218
   219 				; ------------------------------------------------------------
   220
   221 21CE			.local	SYSUTILS					; UNIT
   222
   223 				; ------------------------------------------------------------
   224
   225 = 0001			FAREADONLY	= $0001
   226 = 0002			FAHIDDEN	= $0002
   227 = 0004			FASYSFILE	= $0004
   228 = 0008			FAVOLUMEID	= $0008
   229 = 0010			FADIRECTORY	= $0010
   230 = 0020			FAARCHIVE	= $0020
   231 = 003F			FAANYFILE	= $003F
   232
   233 				.endl							; UNIT SYSUTILS
   234
   235 				; ------------------------------------------------------------
   236
   237 21CE			.local	ATARI						; UNIT
   238
   239 				; ------------------------------------------------------------
   240
   241 = 0012			RTCLOK	= $0012
   242 = 004D			ATRACT	= $004D
   243 = 0052			LMARGIN	= $0052
   244 = 0053			RMARGIN	= $0053
   245 = 0054			ROWCRS	= $0054
   246 = 0055			COLCRS	= $0055
   247 = 0057			DINDEX	= $0057
   248 = 0058			SAVMSC	= $0058
   249 = 006A			RAMTOP	= $006A
   250 = 0200			VDSLST	= $0200
   251 = 0230			SDLSTL	= $0230
   252 = 0290			TXTROW	= $0290
   253 = 0291			TXTCOL	= $0291
   254 = 0293			TINDEX	= $0293
   255 = 0294			TXTMSC	= $0294
   256 = 022F			SDMCTL	= $022F
   257 = 026F			GPRIOR	= $026F
   258 = 02F0			CRSINH	= $02F0
   259 = 02F3			CHACT	= $02F3
   260 = 02F4			CHBAS	= $02F4
   261 = 02FC			CH	= $02FC
   262 = 02C0			PCOLR0	= $02C0
   263 = 02C1			PCOLR1	= $02C1
   264 = 02C2			PCOLR2	= $02C2
   265 = 02C3			PCOLR3	= $02C3
   266 = 02C4			COLOR0	= $02C4
   267 = 02C5			COLOR1	= $02C5
   268 = 02C6			COLOR2	= $02C6
   269 = 02C7			COLOR3	= $02C7
   270 = 02C8			COLOR4	= $02C8
   271 = 02C8			COLBAKS	= $02C8
   272 = D000			HPOSP0	= $D000
   273 = D001			HPOSP1	= $D001
   274 = D002			HPOSP2	= $D002
   275 = D003			HPOSP3	= $D003
   276 = D004			HPOSM0	= $D004
   277 = D005			HPOSM1	= $D005
   278 = D006			HPOSM2	= $D006
   279 = D007			HPOSM3	= $D007
   280 = D008			SIZEP0	= $D008
   281 = D009			SIZEP1	= $D009
   282 = D00A			SIZEP2	= $D00A
   283 = D00B			SIZEP3	= $D00B
   284 = D00C			SIZEM	= $D00C
   285 = D00D			GRAFP0	= $D00D
   286 = D00E			GRAFP1	= $D00E
   287 = D00F			GRAFP2	= $D00F
   288 = D010			GRAFP3	= $D010
   289 = D011			GRAFM	= $D011
   290 = D004			P0PF	= $D004
   291 = D014			PAL	= $D014
   292 = D012			COLPM0	= $D012
   293 = D013			COLPM1	= $D013
   294 = D014			COLPM2	= $D014
   295 = D015			COLPM3	= $D015
   296 = D016			COLPF0	= $D016
   297 = D017			COLPF1	= $D017
   298 = D018			COLPF2	= $D018
   299 = D019			COLPF3	= $D019
   300 = D01A			COLBK	= $D01A
   301 = D01B			PRIOR	= $D01B
   302 = D01D			GRACTL	= $D01D
   303 = D01E			HITCLR	= $D01E
   304 = D200			AUDF1	= $D200
   305 = D201			AUDC1	= $D201
   306 = D202			AUDF2	= $D202
   307 = D203			AUDC2	= $D203
   308 = D204			AUDF3	= $D204
   309 = D205			AUDC3	= $D205
   310 = D206			AUDF4	= $D206
   311 = D207			AUDC4	= $D207
   312 = D208			AUDCTL	= $D208
   313 = D20F			SKSTAT	= $D20F
   314 = D301			PORTB	= $D301
   315 = D400			DMACTL	= $D400
   316 = D401			CHACTL	= $D401
   317 = D402			DLISTL	= $D402
   318 = D404			HSCROL	= $D404
   319 = D405			VSCROL	= $D405
   320 = D407			PMBASE	= $D407
   321 = D409			CHBASE	= $D409
   322 = D40A			WSYNC	= $D40A
   323 = D40B			VCOUNT	= $D40B
   324 = D40C			PENH	= $D40C
   325 = D40D			PENV	= $D40D
   326 = D40E			NMIEN	= $D40E
   327
   328 				.endl							; UNIT ATARI
   329
   330 				; ------------------------------------------------------------
   331
   332 21CE			.local	CRT						; UNIT
   333
   334 21CE			.local	READKEY						; FUNCTION | ASSEMBLER
   335
   336 				; ---------------------  ASM Block 063  ---------------------
   337
   338 21CE 8A 48			txa:pha
   339
   340 21D0 20 9B 21			@GetKey
   341
   342 21D3 8D 82 23			sta Result
   343
   344 21D6 68 AA			pla:tax
   345
   346 21D8			@exit
   347
   348 				; ------------------------------------------------------------
   349
   350 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   351 				; as Pointer
   352
   353 21D8 E8				inx						; add bx, 1
   354 21D9 AD 82 23 95 98		mva RESULT :STACKORIGIN,x
   355
   356 					.ifdef @new
   357 					@FreeMem #@VarData #@VarDataSize
   358 					eif
   359
   360 				; ------------------------------------------------------------
   361
   362 = 2382			RESULT	= DATAORIGIN+$000C
   363
   364 = 2382			@VarData	= RESULT
   365 = 0001			@VarDataSize	= 1
   366
   367 21DE 60				rts						; ret
   368 				.endl
   369
   370 				; ------------------------------------------------------------
   371
   372 = 2381			TEXTATTR	= DATAORIGIN+$000B
   373 = D01F			CONSOL	= $D01F
   374 = 0000			CN_START_SELECT_OPTION	= $0000
   375 = 0001			CN_SELECT_OPTION	= $0001
   376 = 0002			CN_START_OPTION	= $0002
   377 = 0003			CN_OPTION	= $0003
   378 = 0004			CN_START_SELECT	= $0004
   379 = 0005			CN_SELECT	= $0005
   380 = 0006			CN_START	= $0006
   381 = 0007			CN_NONE	= $0007
   382 = 0000			BW40	= $0000
   383 = 0001			CO40	= $0001
   384 = 0002			BW80	= $0002
   385 = 0003			CO80	= $0003
   386 = 0007			MONO	= $0007
   387 = 0001			C40	= $0001
   388 = 0003			C80	= $0003
   389 = 0000			BLACK	= $0000
   390 = 0001			BLUE	= $0001
   391 = 0002			GREEN	= $0002
   392 = 0003			CYAN	= $0003
   393 = 0004			RED	= $0004
   394 = 0005			MAGENTA	= $0005
   395 = 0006			BROWN	= $0006
   396 = 0007			LIGHTGRAY	= $0007
   397 = 0008			DARKGRAY	= $0008
   398 = 0009			LIGHTBLUE	= $0009
   399 = 000A			LIGHTGREEN	= $000A
   400 = 000B			LIGHTCYAN	= $000B
   401 = 000C			LIGHTRED	= $000C
   402 = 000D			LIGHTMAGENTA	= $000D
   403 = 000E			YELLOW	= $000E
   404 = 000F			WHITE	= $000F
   405 = 0080			BLINK	= $0080
   406
   407 				.endl							; UNIT CRT
   408
   409 21DF			.local	MAINPROC					; PROCEDURE
   410
   411 				; optimize FAIL (100, examples\bitwise.pas), line = 18
   412 					@print #$7D
   412 				 LDY# $7D\ JSR @PRINT
   412 21DF A0 7D		 LDY# $7D
   412 21E1 20 BB 20		 JSR @PRINT
   413
   414 				; optimize FAIL (100, examples\bitwise.pas), line = 19
   415 					@printSTRING #CODEORIGIN+$000D
   415 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   415 21E4 A0 20		 LDY> CODEORIGIN+$000D
   415 21E6 A9 0D		 LDA< CODEORIGIN+$000D
   415 21E8 20 C4 20		 JSR @PRINTSTRING
   416 21EB 20 B6 20			@printEOL
   417
   418 				; optimize FAIL (100, examples\bitwise.pas), line = 20
   419 					@printSTRING #CODEORIGIN+$002E
   419 				 LDY> CODEORIGIN+$002E\ LDA< CODEORIGIN+$002E\ JSR @PRINTSTRING
   419 21EE A0 20		 LDY> CODEORIGIN+$002E
   419 21F0 A9 2E		 LDA< CODEORIGIN+$002E
   419 21F2 20 C4 20		 JSR @PRINTSTRING
   420 21F5 20 B6 20			@printEOL
   421
   422 				; optimize FAIL (100, examples\bitwise.pas), line = 21
   423 					@printSTRING #CODEORIGIN+$0030
   423 				 LDY> CODEORIGIN+$0030\ LDA< CODEORIGIN+$0030\ JSR @PRINTSTRING
   423 21F8 A0 20		 LDY> CODEORIGIN+$0030
   423 21FA A9 30		 LDA< CODEORIGIN+$0030
   423 21FC 20 C4 20		 JSR @PRINTSTRING
   424
   425 				; optimize OK (examples\bitwise.pas), line = 22
   426
   427 21FF A9 02 8D 84 23		mva #$02 N
   428
   429 				; optimize OK (examples\bitwise.pas), line = 23
   430
   431 2204 AD 84 23			lda N
   432 2207 18 69 02			add #$02
   433 220A 8D 84 23			sta N
   434
   435 				; optimize FAIL (100, examples\bitwise.pas), line = 24
   436 220D E8				inx
   437 220E AD 84 23 95 98		mva N :STACKORIGIN,x
   438 2213 20 04 21			jsr @printBYTE
   439 2216 CA				dex
   440 2217 20 B6 20			@printEOL
   441
   442 				; optimize FAIL (100, examples\bitwise.pas), line = 25
   443 					@printSTRING #CODEORIGIN+$002D
   443 				 LDY> CODEORIGIN+$002D\ LDA< CODEORIGIN+$002D\ JSR @PRINTSTRING
   443 221A A0 20		 LDY> CODEORIGIN+$002D
   443 221C A9 2D		 LDA< CODEORIGIN+$002D
   443 221E 20 C4 20		 JSR @PRINTSTRING
   444 2221 20 B6 20			@printEOL
   445
   446 				; optimize FAIL (100, examples\bitwise.pas), line = 26
   447 					@printSTRING #CODEORIGIN+$0034
   447 				 LDY> CODEORIGIN+$0034\ LDA< CODEORIGIN+$0034\ JSR @PRINTSTRING
   447 2224 A0 20		 LDY> CODEORIGIN+$0034
   447 2226 A9 34		 LDA< CODEORIGIN+$0034
   447 2228 20 C4 20		 JSR @PRINTSTRING
   448
   449 				; optimize OK (examples\bitwise.pas), line = 27
   450
   451 222B AD 84 23			lda N
   452 222E 29 02			and #$02
   453 2230 8D 84 23			sta N
   454
   455 				; optimize FAIL (100, examples\bitwise.pas), line = 28
   456 2233 E8				inx
   457 2234 AD 84 23 95 98		mva N :STACKORIGIN,x
   458 2239 20 04 21			jsr @printBYTE
   459 223C CA				dex
   460 223D 20 B6 20			@printEOL
   461
   462 				; optimize FAIL (100, examples\bitwise.pas), line = 29
   463 					@printSTRING #CODEORIGIN+$002D
   463 				 LDY> CODEORIGIN+$002D\ LDA< CODEORIGIN+$002D\ JSR @PRINTSTRING
   463 2240 A0 20		 LDY> CODEORIGIN+$002D
   463 2242 A9 2D		 LDA< CODEORIGIN+$002D
   463 2244 20 C4 20		 JSR @PRINTSTRING
   464 2247 20 B6 20			@printEOL
   465
   466 				; optimize FAIL (100, examples\bitwise.pas), line = 30
   467 					@printSTRING #CODEORIGIN+$0044
   467 				 LDY> CODEORIGIN+$0044\ LDA< CODEORIGIN+$0044\ JSR @PRINTSTRING
   467 224A A0 20		 LDY> CODEORIGIN+$0044
   467 224C A9 44		 LDA< CODEORIGIN+$0044
   467 224E 20 C4 20		 JSR @PRINTSTRING
   468
   469 				; optimize OK (examples\bitwise.pas), line = 31
   470
   471 2251 AD 84 23			lda N
   472 2254 29 28			and #$28
   473 2256 8D 84 23			sta N
   474
   475 				; optimize FAIL (100, examples\bitwise.pas), line = 32
   476 2259 E8				inx
   477 225A AD 84 23 95 98		mva N :STACKORIGIN,x
   478 225F 20 04 21			jsr @printBYTE
   479 2262 CA				dex
   480 2263 20 B6 20			@printEOL
   481
   482 				; optimize FAIL (100, examples\bitwise.pas), line = 33
   483 					@printSTRING #CODEORIGIN+$002D
   483 				 LDY> CODEORIGIN+$002D\ LDA< CODEORIGIN+$002D\ JSR @PRINTSTRING
   483 2266 A0 20		 LDY> CODEORIGIN+$002D
   483 2268 A9 2D		 LDA< CODEORIGIN+$002D
   483 226A 20 C4 20		 JSR @PRINTSTRING
   484 226D 20 B6 20			@printEOL
   485
   486 				; optimize FAIL (100, examples\bitwise.pas), line = 34
   487 					@printSTRING #CODEORIGIN+$0030
   487 				 LDY> CODEORIGIN+$0030\ LDA< CODEORIGIN+$0030\ JSR @PRINTSTRING
   487 2270 A0 20		 LDY> CODEORIGIN+$0030
   487 2272 A9 30		 LDA< CODEORIGIN+$0030
   487 2274 20 C4 20		 JSR @PRINTSTRING
   488
   489 				; optimize OK (examples\bitwise.pas), line = 35
   490
   491 2277 A9 02 8D 84 23		mva #$02 N
   492
   493 				; optimize FAIL (100, examples\bitwise.pas), line = 36
   494 227C E8				inx
   495 227D AD 84 23 95 98		mva N :STACKORIGIN,x
   496 2282 20 04 21			jsr @printBYTE
   497 2285 CA				dex
   498 2286 20 B6 20			@printEOL
   499
   500 				; optimize FAIL (100, examples\bitwise.pas), line = 37
   501 					@printSTRING #CODEORIGIN+$002D
   501 				 LDY> CODEORIGIN+$002D\ LDA< CODEORIGIN+$002D\ JSR @PRINTSTRING
   501 2289 A0 20		 LDY> CODEORIGIN+$002D
   501 228B A9 2D		 LDA< CODEORIGIN+$002D
   501 228D 20 C4 20		 JSR @PRINTSTRING
   502 2290 20 B6 20			@printEOL
   503
   504 				; optimize FAIL (100, examples\bitwise.pas), line = 38
   505 					@printSTRING #CODEORIGIN+$0055
   505 				 LDY> CODEORIGIN+$0055\ LDA< CODEORIGIN+$0055\ JSR @PRINTSTRING
   505 2293 A0 20		 LDY> CODEORIGIN+$0055
   505 2295 A9 55		 LDA< CODEORIGIN+$0055
   505 2297 20 C4 20		 JSR @PRINTSTRING
   506
   507 				; optimize OK (examples\bitwise.pas), line = 39
   508
   509 229A AD 84 23			lda N
   510 229D 49 02			eor #$02
   511 229F 8D 84 23			sta N
   512
   513 				; optimize FAIL (100, examples\bitwise.pas), line = 40
   514 22A2 E8				inx
   515 22A3 AD 84 23 95 98		mva N :STACKORIGIN,x
   516 22A8 20 04 21			jsr @printBYTE
   517 22AB CA				dex
   518 22AC 20 B6 20			@printEOL
   519
   520 				; optimize FAIL (100, examples\bitwise.pas), line = 41
   521 					@printSTRING #CODEORIGIN+$002D
   521 				 LDY> CODEORIGIN+$002D\ LDA< CODEORIGIN+$002D\ JSR @PRINTSTRING
   521 22AF A0 20		 LDY> CODEORIGIN+$002D
   521 22B1 A9 2D		 LDA< CODEORIGIN+$002D
   521 22B3 20 C4 20		 JSR @PRINTSTRING
   522 22B6 20 B6 20			@printEOL
   523
   524 				; optimize FAIL (100, examples\bitwise.pas), line = 42
   525 					@printSTRING #CODEORIGIN+$0065
   525 				 LDY> CODEORIGIN+$0065\ LDA< CODEORIGIN+$0065\ JSR @PRINTSTRING
   525 22B9 A0 20		 LDY> CODEORIGIN+$0065
   525 22BB A9 65		 LDA< CODEORIGIN+$0065
   525 22BD 20 C4 20		 JSR @PRINTSTRING
   526
   527 				; optimize OK (examples\bitwise.pas), line = 43
   528
   529 22C0 AD 84 23			lda N
   530 22C3 49 02			eor #$02
   531 22C5 8D 84 23			sta N
   532
   533 				; optimize FAIL (100, examples\bitwise.pas), line = 44
   534 22C8 E8				inx
   535 22C9 AD 84 23 95 98		mva N :STACKORIGIN,x
   536 22CE 20 04 21			jsr @printBYTE
   537 22D1 CA				dex
   538 22D2 20 B6 20			@printEOL
   539
   540 				; optimize FAIL (100, examples\bitwise.pas), line = 45
   541 					@printSTRING #CODEORIGIN+$002D
   541 				 LDY> CODEORIGIN+$002D\ LDA< CODEORIGIN+$002D\ JSR @PRINTSTRING
   541 22D5 A0 20		 LDY> CODEORIGIN+$002D
   541 22D7 A9 2D		 LDA< CODEORIGIN+$002D
   541 22D9 20 C4 20		 JSR @PRINTSTRING
   542 22DC 20 B6 20			@printEOL
   543
   544 				; optimize FAIL (100, examples\bitwise.pas), line = 46
   545 					@printSTRING #CODEORIGIN+$0078
   545 				 LDY> CODEORIGIN+$0078\ LDA< CODEORIGIN+$0078\ JSR @PRINTSTRING
   545 22DF A0 20		 LDY> CODEORIGIN+$0078
   545 22E1 A9 78		 LDA< CODEORIGIN+$0078
   545 22E3 20 C4 20		 JSR @PRINTSTRING
   546
   547 				; optimize OK (examples\bitwise.pas), line = 47
   548
   549 22E6 AD 84 23			lda N
   550 22E9 4D 84 23			eor N
   551 22EC 8D 84 23			sta N
   552
   553 				; optimize FAIL (100, examples\bitwise.pas), line = 48
   554 22EF E8				inx
   555 22F0 AD 84 23 95 98		mva N :STACKORIGIN,x
   556 22F5 20 04 21			jsr @printBYTE
   557 22F8 CA				dex
   558 22F9 20 B6 20			@printEOL
   559
   560 				; optimize FAIL (100, examples\bitwise.pas), line = 49
   561 					@printSTRING #CODEORIGIN+$002D
   561 				 LDY> CODEORIGIN+$002D\ LDA< CODEORIGIN+$002D\ JSR @PRINTSTRING
   561 22FC A0 20		 LDY> CODEORIGIN+$002D
   561 22FE A9 2D		 LDA< CODEORIGIN+$002D
   561 2300 20 C4 20		 JSR @PRINTSTRING
   562 2303 20 B6 20			@printEOL
   563
   564 				; optimize FAIL (100, examples\bitwise.pas), line = 50
   565 					@printSTRING #CODEORIGIN+$0088
   565 				 LDY> CODEORIGIN+$0088\ LDA< CODEORIGIN+$0088\ JSR @PRINTSTRING
   565 2306 A0 20		 LDY> CODEORIGIN+$0088
   565 2308 A9 88		 LDA< CODEORIGIN+$0088
   565 230A 20 C4 20		 JSR @PRINTSTRING
   566 230D 20 B6 20			@printEOL
   567
   568 				; optimize FAIL (100, examples\bitwise.pas), line = 51
   569 					@printSTRING #CODEORIGIN+$008E
   569 				 LDY> CODEORIGIN+$008E\ LDA< CODEORIGIN+$008E\ JSR @PRINTSTRING
   569 2310 A0 20		 LDY> CODEORIGIN+$008E
   569 2312 A9 8E		 LDA< CODEORIGIN+$008E
   569 2314 20 C4 20		 JSR @PRINTSTRING
   570
   571 				; optimize OK (examples\bitwise.pas), line = 52
   572
   573 2317 A9 28 8D 85 23		mva #$28 A
   574
   575 				; optimize OK (examples\bitwise.pas), line = 53
   576
   577 231C AD 85 23			lda A
   578 231F 0A				asl @
   579 2320 8D 86 23			sta B
   580
   581 				; optimize FAIL (100, examples\bitwise.pas), line = 54
   582 2323 E8				inx
   583 2324 AD 86 23 95 98		mva B :STACKORIGIN,x
   584 2329 20 04 21			jsr @printBYTE
   585 232C CA				dex
   586 232D 20 B6 20			@printEOL
   587
   588 				; optimize FAIL (100, examples\bitwise.pas), line = 55
   589 					@printSTRING #CODEORIGIN+$002D
   589 				 LDY> CODEORIGIN+$002D\ LDA< CODEORIGIN+$002D\ JSR @PRINTSTRING
   589 2330 A0 20		 LDY> CODEORIGIN+$002D
   589 2332 A9 2D		 LDA< CODEORIGIN+$002D
   589 2334 20 C4 20		 JSR @PRINTSTRING
   590 2337 20 B6 20			@printEOL
   591
   592 				; optimize FAIL (100, examples\bitwise.pas), line = 56
   593 					@printSTRING #CODEORIGIN+$00A2
   593 				 LDY> CODEORIGIN+$00A2\ LDA< CODEORIGIN+$00A2\ JSR @PRINTSTRING
   593 233A A0 20		 LDY> CODEORIGIN+$00A2
   593 233C A9 A2		 LDA< CODEORIGIN+$00A2
   593 233E 20 C4 20		 JSR @PRINTSTRING
   594
   595 				; optimize OK (examples\bitwise.pas), line = 57
   596
   597 2341 AD 85 23			lda A
   598 2344 4A				lsr @
   599 2345 8D 86 23			sta B
   600
   601 				; optimize FAIL (100, examples\bitwise.pas), line = 58
   602 2348 E8				inx
   603 2349 AD 86 23 95 98		mva B :STACKORIGIN,x
   604 234E 20 04 21			jsr @printBYTE
   605 2351 CA				dex
   606 2352 20 B6 20			@printEOL
   607
   608 				; optimize FAIL ('CRT.READKEY', examples\bitwise.pas), line = 59
   609 2355 20 CE 21			jsr CRT.READKEY
   610 2358 B5 98 8D 83 23		mva :STACKORIGIN,x KEY
   611 235D CA				dex
   612 235E			@exit
   613 					.ifdef @new
   614 					@FreeMem #@VarData #@VarDataSize
   615 					eif
   616 235E 60				rts						; ret
   617 				.endl
   618 235F			l_00BD
   619
   620 				; optimize FAIL ('MAINPROC', examples\bitwise.pas), line = 63
   621 235F 20 DF 21			jsr MAINPROC
   622
   623 				; ------------------------------------------------------------
   624
   625 = 2383			KEY	= DATAORIGIN+$000D
   626 = 2384			N	= DATAORIGIN+$000E
   627 = 2385			A	= DATAORIGIN+$000F
   628 = 2386			B	= DATAORIGIN+$0010
   629 2362			@exit
   630
   631 2362 A2 00		@halt	ldx #0
   632 2364 9A				txs
   633
   634 2365 60				rts
   635
   636 				; ------------------------------------------------------------
   637
   638 2366 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   639
   640 				; ------------------------------------------------------------
   641
   642 2376			.local	@DEFINES
   643 2376			ATARI
   644 				.endl
   645
   646 				.endl							; MAIN
   647
   648 				; ------------------------------------------------------------
   649 				; ------------------------------------------------------------
   650
   651 				.macro	UNITINITIALIZATION
   652 				
   653 					.ifdef MAIN.SYSTEM.@UnitInit
   654 					jsr MAIN.SYSTEM.@UnitInit
   655 					eif
   656 				
   657 					.ifdef MAIN.DOS.@UnitInit
   658 					jsr MAIN.DOS.@UnitInit
   659 					eif
   660 				
   661 					.ifdef MAIN.STRUTILS.@UnitInit
   662 					jsr MAIN.STRUTILS.@UnitInit
   663 					eif
   664 				
   665 					.ifdef MAIN.SYSUTILS.@UnitInit
   666 					jsr MAIN.SYSUTILS.@UnitInit
   667 					eif
   668 				
   669 					.ifdef MAIN.ATARI.@UnitInit
   670 					jsr MAIN.ATARI.@UnitInit
   671 					eif
   672 				
   673 					.ifdef MAIN.CRT.@UnitInit
   674 					jsr MAIN.CRT.@UnitInit
   675 					eif
   676 				.endm
   677
   678 				; ------------------------------------------------------------
   679
   680 					ift .SIZEOF(MAIN.SYSTEM) > 0
   681 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   681 				SYSTEM: $21CA..$21CD
   682 					eif
   683
   684 					ift .SIZEOF(MAIN.DOS) > 0
   685 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   686 					eif
   687
   688 					ift .SIZEOF(MAIN.STRUTILS) > 0
   689 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   690 					eif
   691
   692 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   693 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   694 					eif
   695
   696 					ift .SIZEOF(MAIN.ATARI) > 0
   697 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   698 					eif
   699
   700 					ift .SIZEOF(MAIN.CRT) > 0
   701 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   701 				CRT: $21CE..$21DE
   702 					eif
   703
   704 					.print 'CODE: ',CODEORIGIN,'..',*-1
   704 				CODE: $2000..$2375
   705
   706 				; ------------------------------------------------------------
   707
   708 2376			DATAORIGIN
   709 2376 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   710
   711 = 0006			VARINITSIZE	= *-DATAORIGIN
   712 = 0011			VARDATASIZE	= 17
   713
   714 = 2387			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   715
   716 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   716 				DATA: $2376..$2387
   717
   718 02E0-02E1> AB 21			run START
   719
   720 				; ------------------------------------------------------------
   721
   722 				.macro	STATICDATA
   723 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $1F $4C $6F  $67 $69 $63 $61 $6C $28 $62 $69
   724 				.by  $74 $77 $69 $73 $65 $29 $20 $6F  $70 $65 $72 $61 $74 $6F $72 $73  $20 $64 $65 $6D $6F $00 $00 $00
   725 				.by  $02 $6E $3D $00 $0E $6E $3D $3D  $26 $32 $20 $52 $65 $73 $75 $6C  $74 $3A $20 $00 $0F $6E $3D $6E
   726 				.by  $26 $34 $30 $20 $52 $65 $73 $75  $6C $74 $3A $20 $00 $0E $6E $3D  $3D $21 $32 $20 $52 $65 $73 $75
   727 				.by  $6C $74 $3A $20 $00 $11 $6E $3D  $3D $58 $4F $52 $20 $32 $20 $52  $65 $73 $75 $6C $74 $3A $20 $00
   728 				.by  $0E $6E $3D $3D $21 $6E $20 $52  $65 $73 $75 $6C $74 $3A $20 $00  $04 $61 $3D $34 $30 $00 $12 $62
   729 				.by  $3D $61 $20 $4C $53 $48 $20 $31  $20 $52 $65 $73 $75 $6C $74 $3A  $20 $00 $12 $62 $3D $61 $20 $52
   730 				.by  $53 $48 $20 $31 $20 $52 $65 $73  $75 $6C $74 $3A $20 $00
   731 				.endm
   732
   733 					end
