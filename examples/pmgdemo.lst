mads 2.1.0 build 8 (23 Dec 19)
   388 					opt l+
   101
   102 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   102 				ZPAGE: $0080..$00D7
   103
   104 				.print 'RTLIB: ',RTLIB,'..',*-1
   104 				RTLIB: $200D..$217D
   105
   106 				; ------------------------------------------------------------
   107
   108 217E			START
   109 217E BA				tsx
   110 217F 8E 23 23			stx MAIN.@halt+1
   111
   112 					.ifdef fmulinit
   113 					fmulinit
   114 					eif
   115
   116 = 0004			VLEN	= VARDATASIZE-VARINITSIZE
   117 = 2473			VADR	= DATAORIGIN+VARINITSIZE
   118
   119 					ift VADR > $BFFF
   120 					ert 'Invalid memory address range ',VADR
   121 					eli (VLEN>0) && (VLEN<=256)
   122 2182 A2 FC			ldx #256-VLEN
   123 2184 A9 00			lda #0
   124 2186 9D 77 23 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>0
   126 					@fill #VADR #VLEN #0
   127 					eif
   128
   129 					.ifdef MAIN.@DEFINES.ROMOFF
   130 					icl 'atari\romoff.asm'
   131 					.endif
   132
   133 218C A9 77 85 82 A9 24 + 	mwa #PROGRAMSTACK psptr
   134
   135 2194 A2 0F			ldx #$0f					; DOS II+/D ParamStr
   136 2196 BD 40 03 9D 26 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   137
   138 219F E8				inx						; X = 0
   139 21A0 86 90			stx bp						; BP = 0
   140
   141 21A2 8E 08 D2			stx audctl					; reset POKEY
   142 21A5 A9 03			lda #3
   143 21A7 8D 0F D2			sta skctl
   144
   145 21AA CA				dex						; X = 255
   146
   147 21AB				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: pmgdemo.a65]
   148
   149 21AB			.local	MAIN						; PROCEDURE
   150
   151 21AB 4C 1F 23			jmp l_0014
   152
   153 				; ------------------------------------------------------------
   154
   155 21AE			.local	SYSTEM						; UNIT
   156
   157 21AE			.local	FILLCHAR_004F					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   158
   159 				; ------------------------------------------------------------
   160
   161 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   162 				; as Pointer
   163 21AE B5 98 85 84			mva :STACKORIGIN,x VALUE
   164 21B2 CA				dex
   165
   166 				; ------------------------------------------------------------
   167
   168 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   169 				; as Pointer
   170 21B3 B5 98 85 8C			mva :STACKORIGIN,x COUNT
   171 21B7 B5 A8 85 8D			mva :STACKORIGIN+STACKWIDTH,x COUNT+1
   172 21BB CA				dex
   173
   174 				; ------------------------------------------------------------
   175
   176 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   177 				; as Pointer
   178 21BC B5 98 85 88			mva :STACKORIGIN,x A
   179 21C0 B5 A8 85 89			mva :STACKORIGIN+STACKWIDTH,x A+1
   180 21C4 CA				dex
   181
   182 				; ---------------------  ASM Block 024  ---------------------
   183
   184 21C5 20 36 21			jsr @fill
   185
   186
   187 				; ------------------------------------------------------------
   188
   189 = 0088			A	= edx
   190 = 008C			COUNT	= ecx
   191 = 0084			VALUE	= eax
   192 21C8			@exit
   193 					.ifdef @new
   194 					lda <@VarData
   195 					sta :ztmp
   196 					lda >@VarData
   197 					ldy #@VarDataSize-1
   198 					jmp @FreeMem
   199 					eif
   200 21C8 60				rts						; ret
   201 				.endl
   202
   203 21C9			.local	MOVE_0059					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   204
   205 				; ------------------------------------------------------------
   206
   207 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   208 				; as Pointer
   209 21C9 B5 98 85 84			mva :STACKORIGIN,x COUNT
   210 21CD B5 A8 85 85			mva :STACKORIGIN+STACKWIDTH,x COUNT+1
   211 21D1 CA				dex
   212
   213 				; ------------------------------------------------------------
   214
   215 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   216 				; as Pointer
   217 21D2 B5 98 85 8C			mva :STACKORIGIN,x DEST
   218 21D6 B5 A8 85 8D			mva :STACKORIGIN+STACKWIDTH,x DEST+1
   219 21DA CA				dex
   220
   221 				; ------------------------------------------------------------
   222
   223 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   224 				; as Pointer
   225 21DB B5 98 85 88			mva :STACKORIGIN,x SOURCE
   226 21DF B5 A8 85 89			mva :STACKORIGIN+STACKWIDTH,x SOURCE+1
   227 21E3 CA				dex
   228
   229 				; ---------------------  ASM Block 031  ---------------------
   230
   231 21E4 20 E1 20			jsr @move
   232
   233
   234 				; ------------------------------------------------------------
   235
   236 = 0088			SOURCE	= edx
   237 = 008C			DEST	= ecx
   238 = 0084			COUNT	= eax
   239 21E7			@exit
   240 					.ifdef @new
   241 					lda <@VarData
   242 					sta :ztmp
   243 					lda >@VarData
   244 					ldy #@VarDataSize-1
   245 					jmp @FreeMem
   246 					eif
   247 21E7 60				rts						; ret
   248 				.endl
   249
   250 				; ------------------------------------------------------------
   251
   252 = 0101			__PORTB_BANKS	= $0101
   253 = 0648			M_PI_2	= $0648
   254 = 0192			D_PI_2	= $0192
   255 = 0004			D_PI_180	= $04
   256 = 0000			MGTIA	= $00
   257 = 0080			MVBXE	= $80
   258 = 0000			VBXE_XDLADR	= $00
   259 = 0100			VBXE_BCBADR	= $0100
   260 = 1000			VBXE_MAPADR	= $1000
   261 = 5000			VBXE_OVRADR	= $5000
   262 = B000			VBXE_WINDOW	= $B000
   263 = 0000			IDLI	= $00
   264 = 0001			IVBL	= $01
   265 = 00FE			CH_DELCHR	= $FE
   266 = 009B			CH_ENTER	= $9B
   267 = 001B			CH_ESC	= $1B
   268 = 001C			CH_CURS_UP	= $1C
   269 = 001D			CH_CURS_DOWN	= $1D
   270 = 001E			CH_CURS_LEFT	= $1E
   271 = 001F			CH_CURS_RIGHT	= $1F
   272 = 007F			CH_TAB	= $7F
   273 = 009B			CH_EOL	= $9B
   274 = 007D			CH_CLR	= $7D
   275 = 00FD			CH_BELL	= $FD
   276 = 007E			CH_DEL	= $7E
   277 = 009C			CH_DELLINE	= $9C
   278 = 009D			CH_INSLINE	= $9D
   279 = 0000			COLOR_BLACK	= $00
   280 = 000E			COLOR_WHITE	= $0E
   281 = 0032			COLOR_RED	= $32
   282 = 0096			COLOR_CYAN	= $96
   283 = 0068			COLOR_VIOLET	= $68
   284 = 00C4			COLOR_GREEN	= $C4
   285 = 0074			COLOR_BLUE	= $74
   286 = 00EE			COLOR_YELLOW	= $EE
   287 = 0028			COLOR_ORANGE	= $28
   288 = 00E4			COLOR_BROWN	= $E4
   289 = 003C			COLOR_LIGHTRED	= $3C
   290 = 0004			COLOR_GRAY1	= $04
   291 = 0006			COLOR_GRAY2	= $06
   292 = 000A			COLOR_GRAY3	= $0A
   293 = 00CC			COLOR_LIGHTGREEN	= $CC
   294 = 007C			COLOR_LIGHTBLUE	= $7C
   295 = 0004			FMOPENREAD	= $04
   296 = 0008			FMOPENWRITE	= $08
   297 = 0009			FMOPENAPPEND	= $09
   298 = 000C			FMOPENREADWRITE	= $0C
   299 = 2338			SCREENWIDTH	= DATAORIGIN+$0000
   300 = 233A			SCREENHEIGHT	= DATAORIGIN+$0002
   301 = 233C			DATESEPARATOR	= DATAORIGIN+$0004
   302 = D014			TVSYSTEM	= $D014
   303 = 02C0			adr.PALETTE	= $02C0
   304 21E8			.var PALETTE	= adr.PALETTE .word
   305 = D012			adr.HPALETTE	= $D012
   306 21E8			.var HPALETTE	= adr.HPALETTE .word
   307 = 233D			FILEMODE	= DATAORIGIN+$0005
   308 = 233E			GRAPHMODE	= DATAORIGIN+$0006
   309 = 233F			IORESULT	= DATAORIGIN+$0007
   310 = 2340			EOLN	= DATAORIGIN+$0008
   311 = 2341			RNDSEED	= DATAORIGIN+$0009
   312
   313 = 21E8 C0 02		PALETTE
   313 = 21EA 12 D0		HPALETTE
   313 				.endl							; UNIT SYSTEM
   314
   315 				; ------------------------------------------------------------
   316
   317 21EC			.local	ATARI						; UNIT
   318
   319 				; ------------------------------------------------------------
   320
   321 = 0012			RTCLOK	= $12
   322 = 004D			ATRACT	= $4D
   323 = 0052			LMARGIN	= $52
   324 = 0053			RMARGIN	= $53
   325 = 0054			ROWCRS	= $54
   326 = 0055			COLCRS	= $55
   327 = 0057			DINDEX	= $57
   328 = 0058			SAVMSC	= $58
   329 = 0062			PALNTS	= $62
   330 = 006A			RAMTOP	= $6A
   331 = 0200			VDSLST	= $0200
   332 = 0230			SDLSTL	= $0230
   333 = 0290			TXTROW	= $0290
   334 = 0291			TXTCOL	= $0291
   335 = 0293			TINDEX	= $0293
   336 = 0294			TXTMSC	= $0294
   337 = 022F			SDMCTL	= $022F
   338 = 026F			GPRIOR	= $026F
   339 = 02F0			CRSINH	= $02F0
   340 = 02F3			CHACT	= $02F3
   341 = 02F4			CHBAS	= $02F4
   342 = 02FC			CH	= $02FC
   343 = 02C0			PCOLR0	= $02C0
   344 = 02C1			PCOLR1	= $02C1
   345 = 02C2			PCOLR2	= $02C2
   346 = 02C3			PCOLR3	= $02C3
   347 = 02C4			COLOR0	= $02C4
   348 = 02C5			COLOR1	= $02C5
   349 = 02C6			COLOR2	= $02C6
   350 = 02C7			COLOR3	= $02C7
   351 = 02C8			COLOR4	= $02C8
   352 = 02C8			COLBAKS	= $02C8
   353 = D000			HPOSP0	= $D000
   354 = D001			HPOSP1	= $D001
   355 = D002			HPOSP2	= $D002
   356 = D003			HPOSP3	= $D003
   357 = D004			HPOSM0	= $D004
   358 = D005			HPOSM1	= $D005
   359 = D006			HPOSM2	= $D006
   360 = D007			HPOSM3	= $D007
   361 = D008			SIZEP0	= $D008
   362 = D009			SIZEP1	= $D009
   363 = D00A			SIZEP2	= $D00A
   364 = D00B			SIZEP3	= $D00B
   365 = D00C			SIZEM	= $D00C
   366 = D00D			GRAFP0	= $D00D
   367 = D00E			GRAFP1	= $D00E
   368 = D00F			GRAFP2	= $D00F
   369 = D010			GRAFP3	= $D010
   370 = D011			GRAFM	= $D011
   371 = D004			P0PF	= $D004
   372 = D014			PAL	= $D014
   373 = D012			COLPM0	= $D012
   374 = D013			COLPM1	= $D013
   375 = D014			COLPM2	= $D014
   376 = D015			COLPM3	= $D015
   377 = D016			COLPF0	= $D016
   378 = D017			COLPF1	= $D017
   379 = D018			COLPF2	= $D018
   380 = D019			COLPF3	= $D019
   381 = D01A			COLBK	= $D01A
   382 = D01B			PRIOR	= $D01B
   383 = D01D			GRACTL	= $D01D
   384 = D01E			HITCLR	= $D01E
   385 = D200			AUDF1	= $D200
   386 = D201			AUDC1	= $D201
   387 = D202			AUDF2	= $D202
   388 = D203			AUDC2	= $D203
   389 = D204			AUDF3	= $D204
   390 = D205			AUDC3	= $D205
   391 = D206			AUDF4	= $D206
   392 = D207			AUDC4	= $D207
   393 = D208			AUDCTL	= $D208
   394 = D20F			SKSTAT	= $D20F
   395 = D301			PORTB	= $D301
   396 = D400			DMACTL	= $D400
   397 = D401			CHACTL	= $D401
   398 = D402			DLISTL	= $D402
   399 = D404			HSCROL	= $D404
   400 = D405			VSCROL	= $D405
   401 = D407			PMBASE	= $D407
   402 = D409			CHBASE	= $D409
   403 = D40A			WSYNC	= $D40A
   404 = D40B			VCOUNT	= $D40B
   405 = D40C			PENH	= $D40C
   406 = D40D			PENV	= $D40D
   407 = D40E			NMIEN	= $D40E
   408
   409 				.endl							; UNIT ATARI
   410
   411 				; ------------------------------------------------------------
   412
   413 21EC			.local	CRT						; UNIT
   414
   415 21EC			.local	READKEY						; FUNCTION | ASSEMBLER
   416
   417 				; ---------------------  ASM Block 049  ---------------------
   418
   419 21EC 8A 48			txa:pha
   420
   421 21EE 20 0D 20			@GetKey
   422
   423 21F1 8D 44 23			sta Result
   424
   425 21F4 68 AA			pla:tax
   426
   427 21F6			@exit
   428
   429 				; ------------------------------------------------------------
   430
   431 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   432 				; as Pointer
   433
   434 21F6 E8				inx
   435 21F7 AD 44 23 95 98		mva RESULT :STACKORIGIN,x
   436
   437 					.ifdef @new
   438 					lda <@VarData
   439 					sta :ztmp
   440 					lda >@VarData
   441 					ldy #@VarDataSize-1
   442 					jmp @FreeMem
   443 					eif
   444
   445 				; ------------------------------------------------------------
   446
   447 = 2344			RESULT	= DATAORIGIN+$000C
   448
   449 = 2344			@VarData	= RESULT
   450 = 0001			@VarDataSize	= 1
   451
   452 21FC 60				rts						; ret
   453 				.endl
   454
   455 				; ------------------------------------------------------------
   456
   457 = 2343			TEXTATTR	= DATAORIGIN+$000B
   458 = D01F			CONSOL	= $D01F
   459 = 0000			CN_START_SELECT_OPTION	= $00
   460 = 0001			CN_SELECT_OPTION	= $01
   461 = 0002			CN_START_OPTION	= $02
   462 = 0003			CN_OPTION	= $03
   463 = 0004			CN_START_SELECT	= $04
   464 = 0005			CN_SELECT	= $05
   465 = 0006			CN_START	= $06
   466 = 0007			CN_NONE	= $07
   467 = 0000			BW40	= $00
   468 = 0001			CO40	= $01
   469 = 0002			BW80	= $02
   470 = 0003			CO80	= $03
   471 = 0007			MONO	= $07
   472 = 0001			C40	= $01
   473 = 0003			C80	= $03
   474 = 0000			BLACK	= $00
   475 = 0001			BLUE	= $01
   476 = 0002			GREEN	= $02
   477 = 0003			CYAN	= $03
   478 = 0004			RED	= $04
   479 = 0005			MAGENTA	= $05
   480 = 0006			BROWN	= $06
   481 = 0007			LIGHTGRAY	= $07
   482 = 0008			DARKGRAY	= $08
   483 = 0009			LIGHTBLUE	= $09
   484 = 000A			LIGHTGREEN	= $0A
   485 = 000B			LIGHTCYAN	= $0B
   486 = 000C			LIGHTRED	= $0C
   487 = 000D			LIGHTMAGENTA	= $0D
   488 = 000E			YELLOW	= $0E
   489 = 000F			WHITE	= $0F
   490 = 0080			BLINK	= $80
   491
   492 				.endl							; UNIT CRT
   493
   494 				; ------------------------------------------------------------
   495
   496 21FD			.local	DOS						; UNIT
   497
   498 				; ------------------------------------------------------------
   499
   500 = D014			PALNTSC	= $D014
   501
   502 				.endl							; UNIT DOS
   503
   504 				; ------------------------------------------------------------
   505
   506 21FD			.local	STRUTILS					; UNIT
   507
   508 				; ------------------------------------------------------------
   509
   510 				.endl							; UNIT STRUTILS
   511
   512 				; ------------------------------------------------------------
   513
   514 21FD			.local	SYSUTILS					; UNIT
   515
   516 				; ------------------------------------------------------------
   517
   518 = 0001			FAREADONLY	= $01
   519 = 0002			FAHIDDEN	= $02
   520 = 0004			FASYSFILE	= $04
   521 = 0008			FAVOLUMEID	= $08
   522 = 0010			FADIRECTORY	= $10
   523 = 0020			FAARCHIVE	= $20
   524 = 003F			FAANYFILE	= $3F
   525
   526 				.endl							; UNIT SYSUTILS
   527
   528 				; ------------------------------------------------------------
   529
   530 21FD			.local	TYPES						; UNIT
   531
   532 				; ------------------------------------------------------------
   533
   534 				.endl							; UNIT TYPES
   535
   536 				; ------------------------------------------------------------
   537
   538 21FD			.local	GRAPH						; UNIT
   539
   540 21FD			.local	INITGRAPH_00BA					; PROCEDURE | OVERLOAD
   541
   542 				; ------------------------------------------------------------
   543
   544 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   545 				; as Pointer
   546 21FD B5 98 8D 62 23		mva :STACKORIGIN,x MODE
   547 2202 CA				dex
   548
   549 				; ---------------------  ASM Block 078  ---------------------
   550
   551
   552 2203 8A 48			txa:pha
   553
   554 2205 AD 62 23			lda mode
   555 2208 8D 3E 23			sta MAIN.SYSTEM.GraphMode
   556 220B 29 0F			and #$0f
   557 220D A8				tay
   558
   559 220E A2 60			ldx #$60		; 6*16
   560 2210 AD 62 23			lda mode		; %00010000 with text window
   561 2213 29 10			and #$10
   562 2215 49 10			eor #$10
   563 2217 09 02			ora #2			; read
   564
   565 					.nowarn @GRAPHICS
   565 2219 20 4E 20		 JSR @GRAPHICS
   566
   567 221C 8C 4D 23			sty GraphResult
   568
   569
   570 					.ifdef MAIN.@DEFINES.ROMOFF
   571 					inc portb
   572 					.endif
   573
   574 = EE6D			tlshc	equ $ee6d
   575
   576 221F A6 57			ldx dindex
   577 2221 BC 6D EE			ldy tlshc,x
   578 2224 A9 05			lda #5
   579 2226 0A			shift	asl @
   580 2227 88				dey
   581 2228 D0 FC			bne shift
   582
   583 222A 8D 61 23			sta SCANLINE_WIDTH
   584
   585 				; Fox/TQA
   586
   587 = 0057			dindex	equ $57
   588 = EE7D			tmccn	equ $ee7d
   589 = EE8D			tmrcn	equ $ee8d
   590
   591 222D A6 57			ldx dindex
   592 222F BD 7D EE			lda tmccn,x
   593 2232 BC 8D EE			ldy tmrcn,x
   594 2235 A2 00			ldx #0
   595 2237 C9 40			cmp #<320
   596 2239 D0 01 E8			sne:inx
   597
   598 				; X:A = horizontal resolution
   599 				; Y = vertical resolution
   600
   601 223C 20 88 20			@SCREENSIZE
   602
   603 					.ifdef MAIN.@DEFINES.ROMOFF
   604 					dec portb
   605 					.endif
   606
   607 223F 68 AA			pla:tax
   608
   609
   610 				; optimize OK (GRAPH), line = 132
   611
   612 2241 A5 58 8D 5F 23		mva ATARI.SAVMSC VIDEORAM
   613 2246 A5 59 8D 60 23		mva ATARI.SAVMSC+1 VIDEORAM+1
   614
   615 				; ------------------------------------------------------------
   616
   617 = 2362			MODE	= DATAORIGIN+$002A
   618
   619 = 2362			@VarData	= MODE
   620 = 0001			@VarDataSize	= 1
   621
   622 224B			@exit
   623 					.ifdef @new
   624 					lda <@VarData
   625 					sta :ztmp
   626 					lda >@VarData
   627 					ldy #@VarDataSize-1
   628 					jmp @FreeMem
   629 					eif
   630 224B 60				rts						; ret
   631 				.endl
   632
   633 				; ------------------------------------------------------------
   634
   635 = 0080			CURRENTDRIVER	= $80
   636 = 0000			DETECT	= $00
   637 = 0001			CGA	= $01
   638 = 0002			MCGA	= $02
   639 = 0003			EGA	= $03
   640 = 0004			EGA64	= $04
   641 = 0005			EGAMONO	= $05
   642 = 0006			LOWRES	= $06
   643 = 0007			HERCMONO	= $07
   644 = 0009			VGA	= $09
   645 = 000A			VESA	= $0A
   646 = 000B			D1BIT	= $0B
   647 = 000C			D2BIT	= $0C
   648 = 000D			D4BIT	= $0D
   649 = 000E			D6BIT	= $0E
   650 = 000F			D8BIT	= $0F
   651 = 0010			D12BIT	= $10
   652 = 0018			M640X400	= $18
   653 = 0018			M640X480	= $18
   654 = 0001			GROK	= $01
   655 = 00FF			GRNOINITGRAPH	= $FF
   656 = 00FE			GRNOTDETECTED	= $FE
   657 = 00FD			GRFILENOTFOUND	= $FD
   658 = 00FC			GRINVALIDDRIVER	= $FC
   659 = 00FB			GRNOLOADMEM	= $FB
   660 = 00FA			GRNOSCANMEM	= $FA
   661 = 00F9			GRNOFLOODMEM	= $F9
   662 = 00F8			GRFONTNOTFOUND	= $F8
   663 = 00F7			GRNOFONTMEM	= $F7
   664 = 00F6			GRINVALIDMODE	= $F6
   665 = 00F5			GRERROR	= $F5
   666 = 00F4			GRIOERROR	= $F4
   667 = 00F3			GRINVALIDFONT	= $F3
   668 = 00F2			GRINVALIDFONTNUM	= $F2
   669 = 00EE			GRINVALIDVERSION	= $EE
   670 = 0000			CGAC0	= $00
   671 = 0001			CGAC1	= $01
   672 = 0002			CGAC2	= $02
   673 = 0003			CGAC3	= $03
   674 = 0004			CGAHI	= $04
   675 = 0000			MCGAC0	= $00
   676 = 0001			MCGAC1	= $01
   677 = 0002			MCGAC2	= $02
   678 = 0003			MCGAC3	= $03
   679 = 0004			MCGAMED	= $04
   680 = 0005			MCGAHI	= $05
   681 = 0000			EGALO	= $00
   682 = 0001			EGAHI	= $01
   683 = 0000			EGA64LO	= $00
   684 = 0001			EGA64HI	= $01
   685 = 0003			EGAMONOHI	= $03
   686 = 000A			VGALO	= $0A
   687 = 001F			VGAMED	= $1F
   688 = 0018			VGAHI	= $18
   689 = 2345			WIN_LEFT	= DATAORIGIN+$000D
   690 = 2347			WIN_RIGHT	= DATAORIGIN+$000F
   691 = 2349			WIN_TOP	= DATAORIGIN+$0011
   692 = 234B			WIN_BOTTOM	= DATAORIGIN+$0013
   693 = 234D			GRAPHRESULT	= DATAORIGIN+$0015
   694 = 234E			GETCOLOR	= DATAORIGIN+$0016
   695 = 234F			adr.LASTARCCOORDS	= DATAORIGIN+$0017
   696 224C			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   697 = 234F			LASTARCCOORDS.X	= DATAORIGIN+$0017
   698 = 2351			LASTARCCOORDS.Y	= DATAORIGIN+$0019
   699 = 2353			LASTARCCOORDS.XSTART	= DATAORIGIN+$001B
   700 = 2355			LASTARCCOORDS.YSTART	= DATAORIGIN+$001D
   701 = 2357			LASTARCCOORDS.XEND	= DATAORIGIN+$001F
   702 = 2359			LASTARCCOORDS.YEND	= DATAORIGIN+$0021
   703 = 235B			CURRENTX	= DATAORIGIN+$0023
   704 = 235D			CURRENTY	= DATAORIGIN+$0025
   705 = 235F			VIDEORAM	= DATAORIGIN+$0027
   706 = 2361			SCANLINE_WIDTH	= DATAORIGIN+$0029
   707
   708 = 224C 4F 23		LASTARCCOORDS
   708 				.endl							; UNIT GRAPH
   709
   710 				; ------------------------------------------------------------
   711
   712 224E			.local	CIO						; UNIT
   713
   714 224E			.local	GET						; FUNCTION | ASSEMBLER
   715
   716 				; ------------------------------------------------------------
   717
   718 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   719 				; as Pointer
   720 224E B5 98 8D 63 23		mva :STACKORIGIN,x CHN
   721 2253 CA				dex
   722
   723 				; ---------------------  ASM Block 095  ---------------------
   724
   725 2254 8A 48			txa:pha
   726
   727 2256 AD 63 23			lda chn
   728 2259 0A 0A 0A 0A			:4 asl @
   729 225D AA				tax
   730
   731 225E A9 07			lda #7		;get char command
   732 2260 9D 42 03			sta iccmd,x
   733
   734 2263 A9 00			lda #$00	;zero out the unused
   735 2265 9D 48 03			sta icbufl,x	;store in accumulator
   736 2268 9D 49 03			sta icbufh,x	;...after CIOV jump
   737
   738 226B				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 226B 20 56 E4				jsr CIOV
   739
   740 226E 8C 3F 23			sty MAIN.SYSTEM.IOResult
   741
   742 2271 8D 64 23			sta Result
   743
   744 2274 68 AA			pla:tax
   745
   746 2276			@exit
   747
   748 				; ------------------------------------------------------------
   749
   750 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   751 				; as Pointer
   752
   753 2276 E8				inx
   754 2277 AD 64 23 95 98		mva RESULT :STACKORIGIN,x
   755
   756 					.ifdef @new
   757 					lda <@VarData
   758 					sta :ztmp
   759 					lda >@VarData
   760 					ldy #@VarDataSize-1
   761 					jmp @FreeMem
   762 					eif
   763
   764 				; ------------------------------------------------------------
   765
   766 = 2363			CHN	= DATAORIGIN+$002B
   767 = 2364			RESULT	= DATAORIGIN+$002C
   768
   769 = 2363			@VarData	= CHN
   770 = 0002			@VarDataSize	= 2
   771
   772 227C 60				rts						; ret
   773 				.endl
   774
   775 				; ------------------------------------------------------------
   776
   777 				.endl							; UNIT CIO
   778
   779 227D			.local	MAINPROC					; PROCEDURE
   780
   781 				; optimize OK (examples\pmgdemo.pas), line = 31
   782
   783 227D A9 00 8D 1D D0		mva #$00 GRACTL
   784
   785 				; optimize FAIL ('GRAPH.INITGRAPH_00BA', examples\pmgdemo.pas), line = 33
   786 2282 E8				inx
   787 2283 A9 00 95 98			mva #$00 :STACKORIGIN,x
   788 2287 20 FD 21			jsr GRAPH.INITGRAPH_00BA
   789
   790 				; optimize OK (examples\pmgdemo.pas), line = 35
   791
   792 228A A5 6A			lda RAMTOP
   793 228C 38 E9 10			sub #$10
   794 228F 8D 75 24			sta PGMMEM
   795 2292 A9 00			lda #$00
   796 2294 E9 00			sbc #$00
   797 2296 8D 76 24			sta PGMMEM+1
   798
   799 				; optimize OK (examples\pmgdemo.pas), line = 37
   800
   801 2299 AD 75 24 8D 07 D4		mva PGMMEM PMBASE
   802
   803 				; optimize OK (examples\pmgdemo.pas), line = 39
   804
   805 229F A9 00			lda #$00
   806 22A1 85 84			sta :eax
   807 22A3 AD 75 24			lda PGMMEM
   808 22A6 85 85			sta :eax+1
   809 22A8 A5 84			lda :eax
   810 22AA 8D 75 24			sta PGMMEM
   811 22AD A5 85			lda :eax+1
   812 22AF 8D 76 24			sta PGMMEM+1
   813
   814 				; optimize OK (examples\pmgdemo.pas), line = 41
   815
   816 22B2 A9 2E 8D 2F 02		mva #$2E SDMCTL
   817
   818 				; optimize OK (examples\pmgdemo.pas), line = 43
   819
   820 22B7 A9 00 8D 08 D0		mva #$00 SIZEP0
   821
   822 				; optimize OK (examples\pmgdemo.pas), line = 45
   823
   824 22BC AD 75 24			lda PGMMEM
   825 22BF 85 88			sta :edx
   826 22C1 AD 76 24			lda PGMMEM+1
   827 22C4 18 69 02			add #$02
   828 22C7 85 89			sta :edx+1
   829 22C9 A0 7F			ldy #$7F
   830 22CB A9 00			lda #$00
   831 22CD 91 88 88 10 FB		sta:rpl (:edx),y-
   832
   833 				; optimize OK (examples\pmgdemo.pas), line = 47
   834
   835 22D2 AD 75 24			lda PGMMEM
   836 22D5 18 69 3C			add #$3C
   837 22D8 85 8C			sta :ecx
   838 22DA AD 76 24			lda PGMMEM+1
   839 22DD 69 02			adc #$02
   840 22DF 85 8D			sta :ecx+1
   841 22E1 AD 1D 23			lda P0
   842 22E4 85 88			sta :edx
   843 22E6 AD 1E 23			lda P0+1
   844 22E9 85 89			sta :edx+1
   845 22EB A9 0E			lda #$0E
   846 22ED 85 84			sta :eax
   847 22EF A9 00			lda #$00
   848 22F1 85 85			sta :eax+1
   849 22F3 20 E1 20			jsr @move
   850
   851 				; optimize OK (examples\pmgdemo.pas), line = 49
   852
   853 22F6 A9 03 8D 1D D0		mva #$03 GRACTL
   854
   855 				; optimize OK (examples\pmgdemo.pas), line = 50
   856
   857 22FB A9 32 8D C0 02		mva #$32 PCOLR0
   858
   859 				; optimize OK (examples\pmgdemo.pas), line = 51
   860
   861 2300 A9 78 8D 00 D0		mva #$78 HPOSP0
   862
   863 				; optimize FAIL ('CIO.GET', examples\pmgdemo.pas), line = 52
   864 2305 E8				inx
   865 2306 A9 07 95 98			mva #$07 :STACKORIGIN,x
   866 230A 20 4E 22			jsr CIO.GET
   867 230D B5 98 8D 65 24		mva :STACKORIGIN,x KEY
   868 2312 CA				dex
   869
   870 2313 20 EC 21			jsr CRT.READKEY					; call Entry
   871
   872 2316 CA				dex
   873
   874 				; optimize OK (examples\pmgdemo.pas), line = 55
   875
   876 2317 A9 00 8D 1D D0		mva #$00 GRACTL
   877
   878 				; ------------------------------------------------------------
   879
   880 = 2465			KEY	= DATAORIGIN+$012D
   881 = D407			PMBASE	= $D407
   882 = 022F			SDMCTL	= $022F
   883 = D01D			GRACTL	= $D01D
   884 = D008			SIZEP0	= $D008
   885 = 02C0			PCOLR0	= $02C0
   886 = D000			HPOSP0	= $D000
   887 = 006A			RAMTOP	= $6A
   888 = 2466			adr.P0	= DATAORIGIN+$012E
   889 231C			.var P0	= adr.P0 .word
   890 = 2475			PGMMEM	= DATAORIGIN+$013D
   891
   892 = 2465			@VarData	= KEY
   893 = 0012			@VarDataSize	= 18
   894
   895 231C			@exit
   896 					.ifdef @new
   897 					lda <@VarData
   898 					sta :ztmp
   899 					lda >@VarData
   900 					ldy #@VarDataSize-1
   901 					jmp @FreeMem
   902 					eif
   903 231C 60				rts						; ret
   904 = 231D 66 24		P0
   904 				.endl
   905 231F			l_0014
   906
   907 				; optimize FAIL ('MAINPROC', examples\pmgdemo.pas), line = 59
   908 231F 20 7D 22			jsr MAINPROC
   909
   910 				; ------------------------------------------------------------
   911
   912 = 2365			adr.STRBUFFER	= DATAORIGIN+$002D
   913 2322			.var STRBUFFER	= adr.STRBUFFER .word
   914 2322			@exit
   915
   916 2322 A2 00		@halt	ldx #0
   917 2324 9A				txs
   918 					.ifdef MAIN.@DEFINES.ROMOFF
   919 					inc portb
   920 					.endif
   921
   922 2325 60				rts
   923
   924 				; ------------------------------------------------------------
   925
   926 2326 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   927
   928 				; ------------------------------------------------------------
   929
   930 2336			.local	@DEFINES
   931 2336			ATARI
   932 				.endl
   933
   934 = 2336 65 23		STRBUFFER
   934 				.endl							; MAIN
   935
   936 				; ------------------------------------------------------------
   937 				; ------------------------------------------------------------
   938
   939 				.macro	UNITINITIALIZATION
   940 				
   941 					.ifdef MAIN.SYSTEM.@UnitInit
   942 					jsr MAIN.SYSTEM.@UnitInit
   943 					eif
   944 				
   945 					.ifdef MAIN.ATARI.@UnitInit
   946 					jsr MAIN.ATARI.@UnitInit
   947 					eif
   948 				
   949 					.ifdef MAIN.CRT.@UnitInit
   950 					jsr MAIN.CRT.@UnitInit
   951 					eif
   952 				
   953 					.ifdef MAIN.DOS.@UnitInit
   954 					jsr MAIN.DOS.@UnitInit
   955 					eif
   956 				
   957 					.ifdef MAIN.STRUTILS.@UnitInit
   958 					jsr MAIN.STRUTILS.@UnitInit
   959 					eif
   960 				
   961 					.ifdef MAIN.SYSUTILS.@UnitInit
   962 					jsr MAIN.SYSUTILS.@UnitInit
   963 					eif
   964 				
   965 					.ifdef MAIN.TYPES.@UnitInit
   966 					jsr MAIN.TYPES.@UnitInit
   967 					eif
   968 				
   969 					.ifdef MAIN.GRAPH.@UnitInit
   970 					jsr MAIN.GRAPH.@UnitInit
   971 					eif
   972 				
   973 					.ifdef MAIN.CIO.@UnitInit
   974 					jsr MAIN.CIO.@UnitInit
   975 					eif
   976 				.endm
   977
   978 				; ------------------------------------------------------------
   979
   980 					ift .SIZEOF(MAIN.SYSTEM) > 0
   981 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   981 				SYSTEM: $21AE..$21EB
   982 					eif
   983
   984 					ift .SIZEOF(MAIN.ATARI) > 0
   985 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   986 					eif
   987
   988 					ift .SIZEOF(MAIN.CRT) > 0
   989 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   989 				CRT: $21EC..$21FC
   990 					eif
   991
   992 					ift .SIZEOF(MAIN.DOS) > 0
   993 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   994 					eif
   995
   996 					ift .SIZEOF(MAIN.STRUTILS) > 0
   997 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   998 					eif
   999
  1000 					ift .SIZEOF(MAIN.SYSUTILS) > 0
  1001 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
  1002 					eif
  1003
  1004 					ift .SIZEOF(MAIN.TYPES) > 0
  1005 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
  1006 					eif
  1007
  1008 					ift .SIZEOF(MAIN.GRAPH) > 0
  1009 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
  1009 				GRAPH: $21FD..$224D
  1010 					eif
  1011
  1012 					ift .SIZEOF(MAIN.CIO) > 0
  1013 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
  1013 				CIO: $224E..$227C
  1014 					eif
  1015
  1016 					.print 'CODE: ',CODEORIGIN,'..',*-1
  1016 				CODE: $2000..$2337
  1017
  1018 				; ------------------------------------------------------------
  1019
  1020 2338			DATAORIGIN
  1021 2338 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $27  $00 $00 $00 $17 $00 $00 $00 $00
  1022 2350 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1023 2368 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1024 2380 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1025 2398 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1026 23B0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1027 23C8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1028 23E0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1029 23F8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1030 2410 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1031 2428 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1032 2440 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1033 2458 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $1C $1C $08 $1C $3A $59 $18 $28
  1034 2470 4C 44 44		.by  $4C $44 $44
  1035
  1036 = 013B			VARINITSIZE	= *-DATAORIGIN
  1037 = 013F			VARDATASIZE	= 319
  1038
  1039 = 2477			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1040
  1041 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1041 				DATA: $2338..$2477
  1042
  1043 02E0-02E1> 7E 21			run START
  1044
  1045 				; ------------------------------------------------------------
  1046
  1047 				.macro	STATICDATA
  1048 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00
  1049 				.endm
  1050
  1051 					end
