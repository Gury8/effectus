mads 2.1.0 build 4 (27 Oct 19)
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $200D..$2138
    97
    98 				; ------------------------------------------------------------
    99
   100 2138			START
   101 2138 BA				tsx
   102 2139 8E C3 22			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 0004			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 230F			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 213C A2 FC			ldx #256-VLEN
   115 213E A9 00			lda #0
   116 2140 9D 13 22 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   119 					eif
   120
   121 2146 A2 0F			ldx #$0f
   122 2148 BD 40 03 9D C6 22 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 2151 E8				inx		; X = 0 !!!
   125 2152 86 8E			stx bp		; lo BP = 0
   126
   127 2154				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: pmgdemo.a65]
   128
   129 2154			.local	MAIN						; PROCEDURE
   130
   131 2154 4C BF 22			jmp l_0014
   132
   133 				; ------------------------------------------------------------
   134
   135 2157			.local	SYSTEM						; UNIT
   136
   137 2157			.local	FILLCHAR_002E					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   138
   139 				; ------------------------------------------------------------
   140
   141 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   142 				; as Pointer
   143 2157 B5 98 85 82			mva :STACKORIGIN,x VALUE
   144 215B CA				dex						; sub bx, 1
   145
   146 				; ------------------------------------------------------------
   147
   148 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   149 				; as Pointer
   150 215C B5 98 85 8A			mva :STACKORIGIN,x COUNT
   151 2160 B5 A8 85 8B			mva :STACKORIGIN+STACKWIDTH,x COUNT+1
   152 2164 CA				dex						; sub bx, 1
   153
   154 				; ------------------------------------------------------------
   155
   156 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   157 				; as Pointer
   158 2165 B5 98 85 86			mva :STACKORIGIN,x A
   159 2169 B5 A8 85 87			mva :STACKORIGIN+STACKWIDTH,x A+1
   160 216D CA				dex						; sub bx, 1
   161
   162 				; ---------------------  ASM Block 024  ---------------------
   163
   164 216E 20 F0 20			jsr @fill
   165
   166
   167 				; ------------------------------------------------------------
   168
   169 = 0086			A	= edx
   170 = 008A			COUNT	= ecx
   171 = 0082			VALUE	= eax
   172 2171			@exit
   173 					.ifdef @new
   174 					@FreeMem #@VarData #@VarDataSize
   175 					eif
   176 2171 60				rts						; ret
   177 				.endl
   178
   179 2172			.local	MOVE_0038					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   180
   181 				; ------------------------------------------------------------
   182
   183 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   184 				; as Pointer
   185 2172 B5 98 85 82			mva :STACKORIGIN,x COUNT
   186 2176 B5 A8 85 83			mva :STACKORIGIN+STACKWIDTH,x COUNT+1
   187 217A CA				dex						; sub bx, 1
   188
   189 				; ------------------------------------------------------------
   190
   191 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   192 				; as Pointer
   193 217B B5 98 85 8A			mva :STACKORIGIN,x DEST
   194 217F B5 A8 85 8B			mva :STACKORIGIN+STACKWIDTH,x DEST+1
   195 2183 CA				dex						; sub bx, 1
   196
   197 				; ------------------------------------------------------------
   198
   199 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   200 				; as Pointer
   201 2184 B5 98 85 86			mva :STACKORIGIN,x SOURCE
   202 2188 B5 A8 85 87			mva :STACKORIGIN+STACKWIDTH,x SOURCE+1
   203 218C CA				dex						; sub bx, 1
   204
   205 				; ---------------------  ASM Block 031  ---------------------
   206
   207 218D 20 9B 20			jsr @move
   208
   209
   210 				; ------------------------------------------------------------
   211
   212 = 0086			SOURCE	= edx
   213 = 008A			DEST	= ecx
   214 = 0082			COUNT	= eax
   215 2190			@exit
   216 					.ifdef @new
   217 					@FreeMem #@VarData #@VarDataSize
   218 					eif
   219 2190 60				rts						; ret
   220 				.endl
   221
   222 				; ------------------------------------------------------------
   223
   224 = 0648			M_PI_2	= $0648
   225 = 0192			D_PI_2	= $0192
   226 = 0004			D_PI_180	= $0004
   227 = 0000			MGTIA	= $0000
   228 = 0080			MVBXE	= $0080
   229 = 0000			VBXE_XDLADR	= $0000
   230 = 0100			VBXE_BCBADR	= $0100
   231 = 1000			VBXE_MAPADR	= $1000
   232 = 5000			VBXE_OVRADR	= $5000
   233 = B000			VBXE_WINDOW	= $B000
   234 = 0000			IDLI	= $0000
   235 = 0001			IVBL	= $0001
   236 = 00FE			CH_DELCHR	= $00FE
   237 = 009B			CH_ENTER	= $009B
   238 = 001B			CH_ESC	= $001B
   239 = 001C			CH_CURS_UP	= $001C
   240 = 001D			CH_CURS_DOWN	= $001D
   241 = 001E			CH_CURS_LEFT	= $001E
   242 = 001F			CH_CURS_RIGHT	= $001F
   243 = 007F			CH_TAB	= $007F
   244 = 009B			CH_EOL	= $009B
   245 = 007D			CH_CLR	= $007D
   246 = 00FD			CH_BELL	= $00FD
   247 = 007E			CH_DEL	= $007E
   248 = 009C			CH_DELLINE	= $009C
   249 = 009D			CH_INSLINE	= $009D
   250 = 0000			COLOR_BLACK	= $0000
   251 = 000E			COLOR_WHITE	= $000E
   252 = 0032			COLOR_RED	= $0032
   253 = 0096			COLOR_CYAN	= $0096
   254 = 0068			COLOR_VIOLET	= $0068
   255 = 00C4			COLOR_GREEN	= $00C4
   256 = 0074			COLOR_BLUE	= $0074
   257 = 00EE			COLOR_YELLOW	= $00EE
   258 = 0028			COLOR_ORANGE	= $0028
   259 = 00E4			COLOR_BROWN	= $00E4
   260 = 003C			COLOR_LIGHTRED	= $003C
   261 = 0004			COLOR_GRAY1	= $0004
   262 = 0006			COLOR_GRAY2	= $0006
   263 = 000A			COLOR_GRAY3	= $000A
   264 = 00CC			COLOR_LIGHTGREEN	= $00CC
   265 = 007C			COLOR_LIGHTBLUE	= $007C
   266 = 0004			FMOPENREAD	= $0004
   267 = 0008			FMOPENWRITE	= $0008
   268 = 0009			FMOPENAPPEND	= $0009
   269 = 000C			FMOPENREADWRITE	= $000C
   270 = 22D6			SCREENWIDTH	= DATAORIGIN+$0000
   271 = 22D8			SCREENHEIGHT	= DATAORIGIN+$0002
   272 = 22DA			DATESEPARATOR	= DATAORIGIN+$0004
   273 = D014			TVSYSTEM	= $D014
   274 = 02C0			adr.PALETTE	= $02C0
   275 2191			.var PALETTE	= adr.PALETTE .word
   276 = D012			adr.HPALETTE	= $D012
   277 2191			.var HPALETTE	= adr.HPALETTE .word
   278 = 22DB			FILEMODE	= DATAORIGIN+$0005
   279 = 22DC			SCREENMODE	= DATAORIGIN+$0006
   280 = 22DD			IORESULT	= DATAORIGIN+$0007
   281 = 22DE			EOLN	= DATAORIGIN+$0008
   282 = 22DF			RNDSEED	= DATAORIGIN+$0009
   283
   284 = 2191 C0 02		PALETTE
   284 = 2193 12 D0		HPALETTE
   284 				.endl							; UNIT SYSTEM
   285
   286 				; ------------------------------------------------------------
   287
   288 2195			.local	DOS						; UNIT
   289
   290 				; ------------------------------------------------------------
   291
   292 = D014			PALNTSC	= $D014
   293
   294 				.endl							; UNIT DOS
   295
   296 				; ------------------------------------------------------------
   297
   298 2195			.local	STRUTILS					; UNIT
   299
   300 				; ------------------------------------------------------------
   301
   302 				.endl							; UNIT STRUTILS
   303
   304 				; ------------------------------------------------------------
   305
   306 2195			.local	SYSUTILS					; UNIT
   307
   308 				; ------------------------------------------------------------
   309
   310 = 0001			FAREADONLY	= $0001
   311 = 0002			FAHIDDEN	= $0002
   312 = 0004			FASYSFILE	= $0004
   313 = 0008			FAVOLUMEID	= $0008
   314 = 0010			FADIRECTORY	= $0010
   315 = 0020			FAARCHIVE	= $0020
   316 = 003F			FAANYFILE	= $003F
   317
   318 				.endl							; UNIT SYSUTILS
   319
   320 				; ------------------------------------------------------------
   321
   322 2195			.local	ATARI						; UNIT
   323
   324 				; ------------------------------------------------------------
   325
   326 = 0012			RTCLOK	= $0012
   327 = 004D			ATRACT	= $004D
   328 = 0052			LMARGIN	= $0052
   329 = 0053			RMARGIN	= $0053
   330 = 0054			ROWCRS	= $0054
   331 = 0055			COLCRS	= $0055
   332 = 0057			DINDEX	= $0057
   333 = 0058			SAVMSC	= $0058
   334 = 006A			RAMTOP	= $006A
   335 = 0200			VDSLST	= $0200
   336 = 0230			SDLSTL	= $0230
   337 = 0290			TXTROW	= $0290
   338 = 0291			TXTCOL	= $0291
   339 = 0293			TINDEX	= $0293
   340 = 0294			TXTMSC	= $0294
   341 = 022F			SDMCTL	= $022F
   342 = 026F			GPRIOR	= $026F
   343 = 02F0			CRSINH	= $02F0
   344 = 02F3			CHACT	= $02F3
   345 = 02F4			CHBAS	= $02F4
   346 = 02FC			CH	= $02FC
   347 = 02C0			PCOLR0	= $02C0
   348 = 02C1			PCOLR1	= $02C1
   349 = 02C2			PCOLR2	= $02C2
   350 = 02C3			PCOLR3	= $02C3
   351 = 02C4			COLOR0	= $02C4
   352 = 02C5			COLOR1	= $02C5
   353 = 02C6			COLOR2	= $02C6
   354 = 02C7			COLOR3	= $02C7
   355 = 02C8			COLOR4	= $02C8
   356 = 02C8			COLBAKS	= $02C8
   357 = D000			HPOSP0	= $D000
   358 = D001			HPOSP1	= $D001
   359 = D002			HPOSP2	= $D002
   360 = D003			HPOSP3	= $D003
   361 = D004			HPOSM0	= $D004
   362 = D005			HPOSM1	= $D005
   363 = D006			HPOSM2	= $D006
   364 = D007			HPOSM3	= $D007
   365 = D008			SIZEP0	= $D008
   366 = D009			SIZEP1	= $D009
   367 = D00A			SIZEP2	= $D00A
   368 = D00B			SIZEP3	= $D00B
   369 = D00C			SIZEM	= $D00C
   370 = D00D			GRAFP0	= $D00D
   371 = D00E			GRAFP1	= $D00E
   372 = D00F			GRAFP2	= $D00F
   373 = D010			GRAFP3	= $D010
   374 = D011			GRAFM	= $D011
   375 = D004			P0PF	= $D004
   376 = D014			PAL	= $D014
   377 = D012			COLPM0	= $D012
   378 = D013			COLPM1	= $D013
   379 = D014			COLPM2	= $D014
   380 = D015			COLPM3	= $D015
   381 = D016			COLPF0	= $D016
   382 = D017			COLPF1	= $D017
   383 = D018			COLPF2	= $D018
   384 = D019			COLPF3	= $D019
   385 = D01A			COLBK	= $D01A
   386 = D01B			PRIOR	= $D01B
   387 = D01D			GRACTL	= $D01D
   388 = D01E			HITCLR	= $D01E
   389 = D200			AUDF1	= $D200
   390 = D201			AUDC1	= $D201
   391 = D202			AUDF2	= $D202
   392 = D203			AUDC2	= $D203
   393 = D204			AUDF3	= $D204
   394 = D205			AUDC3	= $D205
   395 = D206			AUDF4	= $D206
   396 = D207			AUDC4	= $D207
   397 = D208			AUDCTL	= $D208
   398 = D20F			SKSTAT	= $D20F
   399 = D301			PORTB	= $D301
   400 = D400			DMACTL	= $D400
   401 = D401			CHACTL	= $D401
   402 = D402			DLISTL	= $D402
   403 = D404			HSCROL	= $D404
   404 = D405			VSCROL	= $D405
   405 = D407			PMBASE	= $D407
   406 = D409			CHBASE	= $D409
   407 = D40A			WSYNC	= $D40A
   408 = D40B			VCOUNT	= $D40B
   409 = D40C			PENH	= $D40C
   410 = D40D			PENV	= $D40D
   411 = D40E			NMIEN	= $D40E
   412
   413 				.endl							; UNIT ATARI
   414
   415 				; ------------------------------------------------------------
   416
   417 2195			.local	CRT						; UNIT
   418
   419 2195			.local	READKEY						; FUNCTION | ASSEMBLER
   420
   421 				; ---------------------  ASM Block 063  ---------------------
   422
   423 2195 8A 48			txa:pha
   424
   425 2197 20 60 20			@GetKey
   426
   427 219A 8D E2 22			sta Result
   428
   429 219D 68 AA			pla:tax
   430
   431 219F			@exit
   432
   433 				; ------------------------------------------------------------
   434
   435 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   436 				; as Pointer
   437
   438 219F E8				inx						; add bx, 1
   439 21A0 AD E2 22 95 98		mva RESULT :STACKORIGIN,x
   440
   441 					.ifdef @new
   442 					@FreeMem #@VarData #@VarDataSize
   443 					eif
   444
   445 				; ------------------------------------------------------------
   446
   447 = 22E2			RESULT	= DATAORIGIN+$000C
   448
   449 = 22E2			@VarData	= RESULT
   450 = 0001			@VarDataSize	= 1
   451
   452 21A5 60				rts						; ret
   453 				.endl
   454
   455 				; ------------------------------------------------------------
   456
   457 = 22E1			TEXTATTR	= DATAORIGIN+$000B
   458 = D01F			CONSOL	= $D01F
   459 = 0000			CN_START_SELECT_OPTION	= $0000
   460 = 0001			CN_SELECT_OPTION	= $0001
   461 = 0002			CN_START_OPTION	= $0002
   462 = 0003			CN_OPTION	= $0003
   463 = 0004			CN_START_SELECT	= $0004
   464 = 0005			CN_SELECT	= $0005
   465 = 0006			CN_START	= $0006
   466 = 0007			CN_NONE	= $0007
   467 = 0000			BW40	= $0000
   468 = 0001			CO40	= $0001
   469 = 0002			BW80	= $0002
   470 = 0003			CO80	= $0003
   471 = 0007			MONO	= $0007
   472 = 0001			C40	= $0001
   473 = 0003			C80	= $0003
   474 = 0000			BLACK	= $0000
   475 = 0001			BLUE	= $0001
   476 = 0002			GREEN	= $0002
   477 = 0003			CYAN	= $0003
   478 = 0004			RED	= $0004
   479 = 0005			MAGENTA	= $0005
   480 = 0006			BROWN	= $0006
   481 = 0007			LIGHTGRAY	= $0007
   482 = 0008			DARKGRAY	= $0008
   483 = 0009			LIGHTBLUE	= $0009
   484 = 000A			LIGHTGREEN	= $000A
   485 = 000B			LIGHTCYAN	= $000B
   486 = 000C			LIGHTRED	= $000C
   487 = 000D			LIGHTMAGENTA	= $000D
   488 = 000E			YELLOW	= $000E
   489 = 000F			WHITE	= $000F
   490 = 0080			BLINK	= $0080
   491
   492 				.endl							; UNIT CRT
   493
   494 				; ------------------------------------------------------------
   495
   496 21A6			.local	TYPES						; UNIT
   497
   498 				; ------------------------------------------------------------
   499
   500 				.endl							; UNIT TYPES
   501
   502 				; ------------------------------------------------------------
   503
   504 21A6			.local	GRAPH						; UNIT
   505
   506 21A6			.local	INITGRAPH_007C					; PROCEDURE | OVERLOAD
   507
   508 				; ------------------------------------------------------------
   509
   510 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   511 				; as Pointer
   512 21A6 B5 98 8D 00 23		mva :STACKORIGIN,x MODE
   513 21AB CA				dex						; sub bx, 1
   514
   515 				; optimize OK (GRAPH), line = 73
   516
   517 21AC A9 00 8D EB 22		mva #$00 GRAPHRESULT
   518
   519 				; optimize OK (GRAPH), line = 75
   520
   521 21B1 AD 00 23 8D DC 22		mva MODE SYSTEM.SCREENMODE
   522
   523 				; ---------------------  ASM Block 074  ---------------------
   524
   525
   526 21B7 8A 48			txa:pha
   527
   528 21B9 A9 2C 8D 4D 20		mva #$2c @putchar.vbxe
   529
   530 21BE AD 00 23			lda mode
   531 21C1 29 0F			and #$0f
   532 21C3 A8				tay
   533
   534 21C4 A2 60			ldx #$60	; 6*16
   535 21C6 AD 00 23			lda mode	; %00010000 with text window
   536 21C9 29 10			and #$10
   537 21CB 49 10			eor #$10
   538 21CD 09 02			ora #2		; read
   539
   540 					.nowarn @graphics
   540 21CF 20 1E 20		 JSR @GRAPHICS
   541 					
   542 					
   543 = EE6D			tlshc	equ $ee6d
   544
   545 21D2 A6 57			ldx dindex
   546 21D4 BC 6D EE			ldy tlshc,x
   547 21D7 A9 05			lda #5
   548 21D9 0A			shift	asl @
   549 21DA 88				dey
   550 21DB D0 FC			bne shift
   551
   552 21DD 8D FF 22			sta SCANLINE_WIDTH
   553 					
   554
   555 				; Fox/TQA
   556
   557 = 0057			dindex	equ $57
   558 = EE7D			tmccn	equ $ee7d
   559 = EE8D			tmrcn	equ $ee8d
   560
   561 21E0 A6 57			ldx dindex
   562 21E2 BD 7D EE			lda tmccn,x
   563 21E5 BC 8D EE			ldy tmrcn,x
   564 21E8 A2 00			ldx #0
   565 21EA C9 40			cmp #<320
   566 21EC D0 01 E8			sne:inx
   567 				    
   568 				; X:A = horizontal resolution
   569 				; Y = vertical resolution
   570
   571 21EF 8D D6 22			sta MAIN.SYSTEM.ScreenWidth
   572 21F2 8E D7 22			stx MAIN.SYSTEM.ScreenWidth+1
   573 					
   574 21F5 38 E9 01			sub #1
   575 21F8 8D E5 22			sta WIN_RIGHT
   576 21FB 8A				txa
   577 21FC E9 00			sbc #0
   578 21FE 8D E6 22			sta WIN_RIGHT+1
   579 					
   580 2201 8C D8 22			sty MAIN.SYSTEM.ScreenHeight
   581 2204 A9 00			lda #0
   582 2206 8D D9 22			sta MAIN.SYSTEM.ScreenHeight+1
   583 					
   584 2209 8D E3 22			sta WIN_LEFT
   585 220C 8D E4 22			sta WIN_LEFT+1
   586 220F 8D E7 22			sta WIN_TOP
   587 2212 8D E8 22			sta WIN_TOP+1
   588
   589 2215 8D EA 22			sta WIN_BOTTOM+1	
   590 2218 88				dey
   591 2219 8C E9 22			sty WIN_BOTTOM
   592
   593 221C 68 AA			pla:tax
   594
   595
   596 				; ------------------------------------------------------------
   597
   598 = 2300			MODE	= DATAORIGIN+$002A
   599
   600 = 2300			@VarData	= MODE
   601 = 0001			@VarDataSize	= 1
   602
   603 221E			@exit
   604 					.ifdef @new
   605 					@FreeMem #@VarData #@VarDataSize
   606 					eif
   607 221E 60				rts						; ret
   608 				.endl
   609
   610 				; ------------------------------------------------------------
   611
   612 = FFFFFF80		CURRENTDRIVER	= $FFFFFF80
   613 = 0000			DETECT	= $0000
   614 = 0001			CGA	= $0001
   615 = 0002			MCGA	= $0002
   616 = 0003			EGA	= $0003
   617 = 0004			EGA64	= $0004
   618 = 0005			EGAMONO	= $0005
   619 = 0006			LOWRES	= $0006
   620 = 0007			HERCMONO	= $0007
   621 = 0009			VGA	= $0009
   622 = 000A			VESA	= $000A
   623 = 000B			D1BIT	= $000B
   624 = 000C			D2BIT	= $000C
   625 = 000D			D4BIT	= $000D
   626 = 000E			D6BIT	= $000E
   627 = 000F			D8BIT	= $000F
   628 = 0010			D12BIT	= $0010
   629 = 0018			M640X400	= $0018
   630 = 0018			M640X480	= $0018
   631 = 0000			GROK	= $0000
   632 = FFFFFFFF		GRNOINITGRAPH	= $FFFFFFFF
   633 = FFFFFFFE		GRNOTDETECTED	= $FFFFFFFE
   634 = FFFFFFFD		GRFILENOTFOUND	= $FFFFFFFD
   635 = FFFFFFFC		GRINVALIDDRIVER	= $FFFFFFFC
   636 = FFFFFFFB		GRNOLOADMEM	= $FFFFFFFB
   637 = FFFFFFFA		GRNOSCANMEM	= $FFFFFFFA
   638 = FFFFFFF9		GRNOFLOODMEM	= $FFFFFFF9
   639 = FFFFFFF8		GRFONTNOTFOUND	= $FFFFFFF8
   640 = FFFFFFF7		GRNOFONTMEM	= $FFFFFFF7
   641 = FFFFFFF6		GRINVALIDMODE	= $FFFFFFF6
   642 = FFFFFFF5		GRERROR	= $FFFFFFF5
   643 = FFFFFFF4		GRIOERROR	= $FFFFFFF4
   644 = FFFFFFF3		GRINVALIDFONT	= $FFFFFFF3
   645 = FFFFFFF2		GRINVALIDFONTNUM	= $FFFFFFF2
   646 = FFFFFFEE		GRINVALIDVERSION	= $FFFFFFEE
   647 = 0000			CGAC0	= $0000
   648 = 0001			CGAC1	= $0001
   649 = 0002			CGAC2	= $0002
   650 = 0003			CGAC3	= $0003
   651 = 0004			CGAHI	= $0004
   652 = 0000			MCGAC0	= $0000
   653 = 0001			MCGAC1	= $0001
   654 = 0002			MCGAC2	= $0002
   655 = 0003			MCGAC3	= $0003
   656 = 0004			MCGAMED	= $0004
   657 = 0005			MCGAHI	= $0005
   658 = 0000			EGALO	= $0000
   659 = 0001			EGAHI	= $0001
   660 = 0000			EGA64LO	= $0000
   661 = 0001			EGA64HI	= $0001
   662 = 0003			EGAMONOHI	= $0003
   663 = 000A			VGALO	= $000A
   664 = 001F			VGAMED	= $001F
   665 = 0018			VGAHI	= $0018
   666 = 22E3			WIN_LEFT	= DATAORIGIN+$000D
   667 = 22E5			WIN_RIGHT	= DATAORIGIN+$000F
   668 = 22E7			WIN_TOP	= DATAORIGIN+$0011
   669 = 22E9			WIN_BOTTOM	= DATAORIGIN+$0013
   670 = 22EB			GRAPHRESULT	= DATAORIGIN+$0015
   671 = 22EC			GETCOLOR	= DATAORIGIN+$0016
   672 = 22ED			adr.LASTARCCOORDS	= DATAORIGIN+$0017
   673 221F			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   674 = 22ED			LASTARCCOORDS.X	= DATAORIGIN+$0017
   675 = 22EF			LASTARCCOORDS.Y	= DATAORIGIN+$0019
   676 = 22F1			LASTARCCOORDS.XSTART	= DATAORIGIN+$001B
   677 = 22F3			LASTARCCOORDS.YSTART	= DATAORIGIN+$001D
   678 = 22F5			LASTARCCOORDS.XEND	= DATAORIGIN+$001F
   679 = 22F7			LASTARCCOORDS.YEND	= DATAORIGIN+$0021
   680 = 22F9			CURRENTX	= DATAORIGIN+$0023
   681 = 22FB			CURRENTY	= DATAORIGIN+$0025
   682 = 22FD			VIDEORAM	= DATAORIGIN+$0027
   683 = 22FF			SCANLINE_WIDTH	= DATAORIGIN+$0029
   684
   685 = 221F ED 22		LASTARCCOORDS
   685 				.endl							; UNIT GRAPH
   686
   687 2221			.local	MAINPROC					; PROCEDURE
   688
   689 				; optimize OK (examples\pmgdemo.pas), line = 28
   690
   691 2221 A9 00 8D 1D D0		mva #$00 GRACTL
   692
   693 				; optimize FAIL ('GRAPH.INITGRAPH_007C', examples\pmgdemo.pas), line = 30
   694 2226 E8				inx
   695 2227 A9 00 95 98			mva #$00 :STACKORIGIN,x
   696 222B 20 A6 21			jsr GRAPH.INITGRAPH_007C
   697
   698 				; optimize OK (examples\pmgdemo.pas), line = 32
   699
   700 222E A5 6A			lda RAMTOP
   701 2230 38 E9 10			sub #$10
   702 2233 8D 11 23			sta PGMMEM
   703 2236 A9 00			lda #$00
   704 2238 E9 00			sbc #$00
   705 223A 8D 12 23			sta PGMMEM+1
   706
   707 				; optimize OK (examples\pmgdemo.pas), line = 34
   708
   709 223D AD 11 23 8D 07 D4		mva PGMMEM PMBASE
   710
   711 				; optimize OK (examples\pmgdemo.pas), line = 36
   712
   713 2243 A9 00			lda #$00
   714 2245 85 82			sta :eax
   715 2247 AD 11 23			lda PGMMEM
   716 224A 85 83			sta :eax+1
   717 224C A5 82			lda :eax
   718 224E 8D 11 23			sta PGMMEM
   719 2251 A5 83			lda :eax+1
   720 2253 8D 12 23			sta PGMMEM+1
   721
   722 				; optimize OK (examples\pmgdemo.pas), line = 38
   723
   724 2256 A9 2E 8D 2F 02		mva #$2E SDMCTL
   725
   726 				; optimize OK (examples\pmgdemo.pas), line = 40
   727
   728 225B A9 00 8D 08 D0		mva #$00 SIZEP0
   729
   730 				; optimize OK (examples\pmgdemo.pas), line = 42
   731
   732 2260 AD 11 23			lda PGMMEM
   733 2263 85 86			sta :edx
   734 2265 AD 12 23			lda PGMMEM+1
   735 2268 18 69 02			add #$02
   736 226B 85 87			sta :edx+1
   737 226D A0 7F			ldy #$7F
   738 226F A9 00			lda #$00
   739 2271 91 86 88 10 FB		sta:rpl (:edx),y-
   740
   741 				; optimize OK (examples\pmgdemo.pas), line = 44
   742
   743 2276 AD 12 23			lda PGMMEM+1
   744 2279 18 69 02			add #$02
   745 227C 85 8B			sta :ecx+1
   746 227E AD 11 23			lda PGMMEM
   747 2281 18 69 3C			add #$3C
   748 2284 85 8A			sta :ecx
   749 2286 90 02			scc
   750 2288 E6 8B			inc :ecx+1
   751 228A AD BD 22			lda P0
   752 228D 85 86			sta :edx
   753 228F AD BE 22			lda P0+1
   754 2292 85 87			sta :edx+1
   755 2294 A9 0E			lda #$0E
   756 2296 85 82			sta :eax
   757 2298 A9 00			lda #$00
   758 229A 85 83			sta :eax+1
   759 229C 20 9B 20			jsr @move
   760
   761 				; optimize OK (examples\pmgdemo.pas), line = 46
   762
   763 229F A9 03 8D 1D D0		mva #$03 GRACTL
   764
   765 				; optimize OK (examples\pmgdemo.pas), line = 47
   766
   767 22A4 A9 32 8D C0 02		mva #$32 PCOLR0
   768
   769 				; optimize OK (examples\pmgdemo.pas), line = 48
   770
   771 22A9 A9 78 8D 00 D0		mva #$78 HPOSP0
   772
   773 				; optimize FAIL ('CRT.READKEY', examples\pmgdemo.pas), line = 49
   774 22AE 20 95 21			jsr CRT.READKEY
   775 22B1 B5 98 8D 01 23		mva :STACKORIGIN,x KEY
   776 22B6 CA				dex
   777
   778 				; optimize OK (examples\pmgdemo.pas), line = 51
   779
   780 22B7 A9 00 8D 1D D0		mva #$00 GRACTL
   781
   782 				; ------------------------------------------------------------
   783
   784 = 2301			KEY	= DATAORIGIN+$002B
   785 = D407			PMBASE	= $D407
   786 = 022F			SDMCTL	= $022F
   787 = D01D			GRACTL	= $D01D
   788 = D008			SIZEP0	= $D008
   789 = 02C0			PCOLR0	= $02C0
   790 = D000			HPOSP0	= $D000
   791 = 006A			RAMTOP	= $006A
   792 = 2302			adr.P0	= DATAORIGIN+$002C
   793 22BC			.var P0	= adr.P0 .word
   794 = 2311			PGMMEM	= DATAORIGIN+$003B
   795
   796 = 2301			@VarData	= KEY
   797 = 0012			@VarDataSize	= 18
   798
   799 22BC			@exit
   800 					.ifdef @new
   801 					@FreeMem #@VarData #@VarDataSize
   802 					eif
   803 22BC 60				rts						; ret
   804 = 22BD 02 23		P0
   804 				.endl
   805 22BF			l_0014
   806
   807 				; optimize FAIL ('MAINPROC', examples\pmgdemo.pas), line = 55
   808 22BF 20 21 22			jsr MAINPROC
   809
   810 				; ------------------------------------------------------------
   811
   812 22C2			@exit
   813
   814 22C2 A2 00		@halt	ldx #0
   815 22C4 9A				txs
   816
   817 22C5 60				rts
   818
   819 				; ------------------------------------------------------------
   820
   821 22C6 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   822
   823 				; ------------------------------------------------------------
   824
   825 22D6			.local	@DEFINES
   826 22D6			ATARI
   827 				.endl
   828
   829 				.endl							; MAIN
   830
   831 				; ------------------------------------------------------------
   832 				; ------------------------------------------------------------
   833
   834 				.macro	UNITINITIALIZATION
   835 				
   836 					.ifdef MAIN.SYSTEM.@UnitInit
   837 					jsr MAIN.SYSTEM.@UnitInit
   838 					eif
   839 				
   840 					.ifdef MAIN.DOS.@UnitInit
   841 					jsr MAIN.DOS.@UnitInit
   842 					eif
   843 				
   844 					.ifdef MAIN.STRUTILS.@UnitInit
   845 					jsr MAIN.STRUTILS.@UnitInit
   846 					eif
   847 				
   848 					.ifdef MAIN.SYSUTILS.@UnitInit
   849 					jsr MAIN.SYSUTILS.@UnitInit
   850 					eif
   851 				
   852 					.ifdef MAIN.ATARI.@UnitInit
   853 					jsr MAIN.ATARI.@UnitInit
   854 					eif
   855 				
   856 					.ifdef MAIN.CRT.@UnitInit
   857 					jsr MAIN.CRT.@UnitInit
   858 					eif
   859 				
   860 					.ifdef MAIN.TYPES.@UnitInit
   861 					jsr MAIN.TYPES.@UnitInit
   862 					eif
   863 				
   864 					.ifdef MAIN.GRAPH.@UnitInit
   865 					jsr MAIN.GRAPH.@UnitInit
   866 					eif
   867 				.endm
   868
   869 				; ------------------------------------------------------------
   870
   871 					ift .SIZEOF(MAIN.SYSTEM) > 0
   872 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   872 				SYSTEM: $2157..$2194
   873 					eif
   874
   875 					ift .SIZEOF(MAIN.DOS) > 0
   876 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   877 					eif
   878
   879 					ift .SIZEOF(MAIN.STRUTILS) > 0
   880 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   881 					eif
   882
   883 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   884 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   885 					eif
   886
   887 					ift .SIZEOF(MAIN.ATARI) > 0
   888 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   889 					eif
   890
   891 					ift .SIZEOF(MAIN.CRT) > 0
   892 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   892 				CRT: $2195..$21A5
   893 					eif
   894
   895 					ift .SIZEOF(MAIN.TYPES) > 0
   896 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
   897 					eif
   898
   899 					ift .SIZEOF(MAIN.GRAPH) > 0
   900 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
   900 				GRAPH: $21A6..$2220
   901 					eif
   902
   903 					.print 'CODE: ',CODEORIGIN,'..',*-1
   903 				CODE: $2000..$22D5
   904
   905 				; ------------------------------------------------------------
   906
   907 22D6			DATAORIGIN
   908 22D6 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $27  $00 $00 $00 $17 $00 $00 $00 $00
   909 22EE 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $1C $1C
   910 2306 08 1C 3A 59 18 28 + .by  $08 $1C $3A $59 $18 $28 $4C $44  $44
   911
   912 = 0039			VARINITSIZE	= *-DATAORIGIN
   913 = 003D			VARDATASIZE	= 61
   914
   915 = 2313			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   916
   917 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   917 				DATA: $22D6..$2313
   918
   919 02E0-02E1> 38 21			run START
   920
   921 				; ------------------------------------------------------------
   922
   923 				.macro	STATICDATA
   924 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00
   925 				.endm
   926
   927 					end
