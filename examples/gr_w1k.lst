mads 2.1.0
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $2014..$20B4
    97
    98 				; ------------------------------------------------------------
    99
   100 20B4			START
   101 20B4 BA				tsx
   102 20B5 8E B2 23			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 002A			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 23D9			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 20B8 A2 D6			ldx #256-VLEN
   115 20BA A9 00			lda #0
   116 20BC 9D 03 23 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   119 					eif
   120
   121 20C2 A2 0F			ldx #$0f
   122 20C4 BD 40 03 9D B5 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 20CD E8				inx		; X = 0 !!!
   125 20CE 86 8E			stx bp		; lo BP = 0
   126
   127 20D0				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: gr_w1k.a65]
   128
   129 20D0			.local	MAIN						; PROCEDURE
   130
   131 20D0 4C AE 23			jmp l_001B
   132
   133 				; ------------------------------------------------------------
   134
   135 20D3			.local	SYSTEM						; UNIT
   136
   137 				; ------------------------------------------------------------
   138
   139 = 0648			M_PI_2	= $0648
   140 = 0192			D_PI_2	= $0192
   141 = 0004			D_PI_180	= $0004
   142 = 0000			MGTIA	= $0000
   143 = 0080			MVBXE	= $0080
   144 = 0000			VBXE_XDLADR	= $0000
   145 = 0100			VBXE_BCBADR	= $0100
   146 = 1000			VBXE_MAPADR	= $1000
   147 = 5000			VBXE_OVRADR	= $5000
   148 = B000			VBXE_WINDOW	= $B000
   149 = 0000			IDLI	= $0000
   150 = 0001			IVBL	= $0001
   151 = 00FE			CH_DELCHR	= $00FE
   152 = 009B			CH_ENTER	= $009B
   153 = 001B			CH_ESC	= $001B
   154 = 001C			CH_CURS_UP	= $001C
   155 = 001D			CH_CURS_DOWN	= $001D
   156 = 001E			CH_CURS_LEFT	= $001E
   157 = 001F			CH_CURS_RIGHT	= $001F
   158 = 007F			CH_TAB	= $007F
   159 = 009B			CH_EOL	= $009B
   160 = 007D			CH_CLR	= $007D
   161 = 00FD			CH_BELL	= $00FD
   162 = 007E			CH_DEL	= $007E
   163 = 009C			CH_DELLINE	= $009C
   164 = 009D			CH_INSLINE	= $009D
   165 = 0000			COLOR_BLACK	= $0000
   166 = 000E			COLOR_WHITE	= $000E
   167 = 0032			COLOR_RED	= $0032
   168 = 0096			COLOR_CYAN	= $0096
   169 = 0068			COLOR_VIOLET	= $0068
   170 = 00C4			COLOR_GREEN	= $00C4
   171 = 0074			COLOR_BLUE	= $0074
   172 = 00EE			COLOR_YELLOW	= $00EE
   173 = 0028			COLOR_ORANGE	= $0028
   174 = 00E4			COLOR_BROWN	= $00E4
   175 = 003C			COLOR_LIGHTRED	= $003C
   176 = 0004			COLOR_GRAY1	= $0004
   177 = 0006			COLOR_GRAY2	= $0006
   178 = 000A			COLOR_GRAY3	= $000A
   179 = 00CC			COLOR_LIGHTGREEN	= $00CC
   180 = 007C			COLOR_LIGHTBLUE	= $007C
   181 = 0004			FMOPENREAD	= $0004
   182 = 0008			FMOPENWRITE	= $0008
   183 = 0009			FMOPENAPPEND	= $0009
   184 = 000C			FMOPENREADWRITE	= $000C
   185 = 23C5			SCREENWIDTH	= DATAORIGIN+$0000
   186 = 23C7			SCREENHEIGHT	= DATAORIGIN+$0002
   187 = 23C9			DATESEPARATOR	= DATAORIGIN+$0004
   188 = D014			TVSYSTEM	= $D014
   189 = 02C0			adr.PALETTE	= $02C0
   190 20D3			.var PALETTE	= adr.PALETTE .word
   191 = D012			adr.HPALETTE	= $D012
   192 20D3			.var HPALETTE	= adr.HPALETTE .word
   193 = 23CA			FILEMODE	= DATAORIGIN+$0005
   194 = 23CB			SCREENMODE	= DATAORIGIN+$0006
   195 = 23CC			IORESULT	= DATAORIGIN+$0007
   196 = 23CD			EOLN	= DATAORIGIN+$0008
   197 = 23CE			RNDSEED	= DATAORIGIN+$0009
   198
   199 = 20D3 C0 02		PALETTE
   199 = 20D5 12 D0		HPALETTE
   199 				.endl							; UNIT SYSTEM
   200
   201 				; ------------------------------------------------------------
   202
   203 20D7			.local	DOS						; UNIT
   204
   205 				; ------------------------------------------------------------
   206
   207 = D014			PALNTSC	= $D014
   208
   209 				.endl							; UNIT DOS
   210
   211 				; ------------------------------------------------------------
   212
   213 20D7			.local	STRUTILS					; UNIT
   214
   215 				; ------------------------------------------------------------
   216
   217 				.endl							; UNIT STRUTILS
   218
   219 				; ------------------------------------------------------------
   220
   221 20D7			.local	SYSUTILS					; UNIT
   222
   223 				; ------------------------------------------------------------
   224
   225 = 0001			FAREADONLY	= $0001
   226 = 0002			FAHIDDEN	= $0002
   227 = 0004			FASYSFILE	= $0004
   228 = 0008			FAVOLUMEID	= $0008
   229 = 0010			FADIRECTORY	= $0010
   230 = 0020			FAARCHIVE	= $0020
   231 = 003F			FAANYFILE	= $003F
   232
   233 				.endl							; UNIT SYSUTILS
   234
   235 				; ------------------------------------------------------------
   236
   237 20D7			.local	ATARI						; UNIT
   238
   239 				; ------------------------------------------------------------
   240
   241 = 0012			RTCLOK	= $0012
   242 = 004D			ATRACT	= $004D
   243 = 0052			LMARGIN	= $0052
   244 = 0053			RMARGIN	= $0053
   245 = 0054			ROWCRS	= $0054
   246 = 0055			COLCRS	= $0055
   247 = 0057			DINDEX	= $0057
   248 = 0058			SAVMSC	= $0058
   249 = 006A			RAMTOP	= $006A
   250 = 0200			VDSLST	= $0200
   251 = 0230			SDLSTL	= $0230
   252 = 0290			TXTROW	= $0290
   253 = 0291			TXTCOL	= $0291
   254 = 0293			TINDEX	= $0293
   255 = 0294			TXTMSC	= $0294
   256 = 022F			SDMCTL	= $022F
   257 = 026F			GPRIOR	= $026F
   258 = 02F0			CRSINH	= $02F0
   259 = 02F3			CHACT	= $02F3
   260 = 02F4			CHBAS	= $02F4
   261 = 02FC			CH	= $02FC
   262 = 02C0			PCOLR0	= $02C0
   263 = 02C1			PCOLR1	= $02C1
   264 = 02C2			PCOLR2	= $02C2
   265 = 02C3			PCOLR3	= $02C3
   266 = 02C4			COLOR0	= $02C4
   267 = 02C5			COLOR1	= $02C5
   268 = 02C6			COLOR2	= $02C6
   269 = 02C7			COLOR3	= $02C7
   270 = 02C8			COLOR4	= $02C8
   271 = 02C8			COLBAKS	= $02C8
   272 = D000			HPOSP0	= $D000
   273 = D001			HPOSP1	= $D001
   274 = D002			HPOSP2	= $D002
   275 = D003			HPOSP3	= $D003
   276 = D004			HPOSM0	= $D004
   277 = D005			HPOSM1	= $D005
   278 = D006			HPOSM2	= $D006
   279 = D007			HPOSM3	= $D007
   280 = D008			SIZEP0	= $D008
   281 = D009			SIZEP1	= $D009
   282 = D00A			SIZEP2	= $D00A
   283 = D00B			SIZEP3	= $D00B
   284 = D00C			SIZEM	= $D00C
   285 = D00D			GRAFP0	= $D00D
   286 = D00E			GRAFP1	= $D00E
   287 = D00F			GRAFP2	= $D00F
   288 = D010			GRAFP3	= $D010
   289 = D011			GRAFM	= $D011
   290 = D004			P0PF	= $D004
   291 = D014			PAL	= $D014
   292 = D012			COLPM0	= $D012
   293 = D013			COLPM1	= $D013
   294 = D014			COLPM2	= $D014
   295 = D015			COLPM3	= $D015
   296 = D016			COLPF0	= $D016
   297 = D017			COLPF1	= $D017
   298 = D018			COLPF2	= $D018
   299 = D019			COLPF3	= $D019
   300 = D01A			COLBK	= $D01A
   301 = D01B			PRIOR	= $D01B
   302 = D01D			GRACTL	= $D01D
   303 = D01E			HITCLR	= $D01E
   304 = D200			AUDF1	= $D200
   305 = D201			AUDC1	= $D201
   306 = D202			AUDF2	= $D202
   307 = D203			AUDC2	= $D203
   308 = D204			AUDF3	= $D204
   309 = D205			AUDC3	= $D205
   310 = D206			AUDF4	= $D206
   311 = D207			AUDC4	= $D207
   312 = D208			AUDCTL	= $D208
   313 = D20F			SKSTAT	= $D20F
   314 = D301			PORTB	= $D301
   315 = D400			DMACTL	= $D400
   316 = D401			CHACTL	= $D401
   317 = D402			DLISTL	= $D402
   318 = D404			HSCROL	= $D404
   319 = D405			VSCROL	= $D405
   320 = D407			PMBASE	= $D407
   321 = D409			CHBASE	= $D409
   322 = D40A			WSYNC	= $D40A
   323 = D40B			VCOUNT	= $D40B
   324 = D40C			PENH	= $D40C
   325 = D40D			PENV	= $D40D
   326 = D40E			NMIEN	= $D40E
   327
   328 				.endl							; UNIT ATARI
   329
   330 				; ------------------------------------------------------------
   331
   332 20D7			.local	CRT						; UNIT
   333
   334 20D7			.local	READKEY						; FUNCTION | ASSEMBLER
   335
   336 				; ---------------------  ASM Block 063  ---------------------
   337
   338 20D7 8A 48			txa:pha
   339
   340 20D9 20 A4 20			@GetKey
   341
   342 20DC 8D D1 23			sta Result
   343
   344 20DF 68 AA			pla:tax
   345
   346 20E1			@exit
   347
   348 				; ------------------------------------------------------------
   349
   350 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   351 				; as Pointer
   352
   353 20E1 E8				inx						; add bx, 1
   354 20E2 AD D1 23 95 98		mva RESULT :STACKORIGIN,x
   355
   356 					.ifdef @new
   357 					@FreeMem #@VarData #@VarDataSize
   358 					eif
   359
   360 				; ------------------------------------------------------------
   361
   362 = 23D1			RESULT	= DATAORIGIN+$000C
   363
   364 = 23D1			@VarData	= RESULT
   365 = 0001			@VarDataSize	= 1
   366
   367 20E7 60				rts						; ret
   368 				.endl
   369
   370 				; ------------------------------------------------------------
   371
   372 = 23D0			TEXTATTR	= DATAORIGIN+$000B
   373 = D01F			CONSOL	= $D01F
   374 = 0000			CN_START_SELECT_OPTION	= $0000
   375 = 0001			CN_SELECT_OPTION	= $0001
   376 = 0002			CN_START_OPTION	= $0002
   377 = 0003			CN_OPTION	= $0003
   378 = 0004			CN_START_SELECT	= $0004
   379 = 0005			CN_SELECT	= $0005
   380 = 0006			CN_START	= $0006
   381 = 0007			CN_NONE	= $0007
   382 = 0000			BW40	= $0000
   383 = 0001			CO40	= $0001
   384 = 0002			BW80	= $0002
   385 = 0003			CO80	= $0003
   386 = 0007			MONO	= $0007
   387 = 0001			C40	= $0001
   388 = 0003			C80	= $0003
   389 = 0000			BLACK	= $0000
   390 = 0001			BLUE	= $0001
   391 = 0002			GREEN	= $0002
   392 = 0003			CYAN	= $0003
   393 = 0004			RED	= $0004
   394 = 0005			MAGENTA	= $0005
   395 = 0006			BROWN	= $0006
   396 = 0007			LIGHTGRAY	= $0007
   397 = 0008			DARKGRAY	= $0008
   398 = 0009			LIGHTBLUE	= $0009
   399 = 000A			LIGHTGREEN	= $000A
   400 = 000B			LIGHTCYAN	= $000B
   401 = 000C			LIGHTRED	= $000C
   402 = 000D			LIGHTMAGENTA	= $000D
   403 = 000E			YELLOW	= $000E
   404 = 000F			WHITE	= $000F
   405 = 0080			BLINK	= $0080
   406
   407 				.endl							; UNIT CRT
   408
   409 				; ------------------------------------------------------------
   410
   411 20E8			.local	TYPES						; UNIT
   412
   413 				; ------------------------------------------------------------
   414
   415 				.endl							; UNIT TYPES
   416
   417 				; ------------------------------------------------------------
   418
   419 20E8			.local	GRAPH						; UNIT
   420
   421 20E8			.local	INITGRAPH_006F					; PROCEDURE | OVERLOAD
   422
   423 				; ------------------------------------------------------------
   424
   425 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   426 				; as Pointer
   427 20E8 B5 98 8D EF 23		mva :STACKORIGIN,x MODE
   428 20ED CA				dex						; sub bx, 1
   429
   430 				; optimize OK (GRAPH), line = 73
   431
   432 20EE A9 00 8D DA 23		mva #$00 GRAPHRESULT
   433
   434 				; optimize OK (GRAPH), line = 75
   435
   436 20F3 AD EF 23 8D CB 23		mva MODE SYSTEM.SCREENMODE
   437
   438 				; ---------------------  ASM Block 074  ---------------------
   439
   440
   441 20F9 8A 48			txa:pha
   442
   443 20FB A9 2C 8D 91 20		mva #$2c @putchar.vbxe
   444
   445 2100 AD EF 23			lda mode
   446 2103 29 0F			and #$0f
   447 2105 A8				tay
   448
   449 2106 A2 60			ldx #$60	; 6*16
   450 2108 AD EF 23			lda mode	; %00010000 with text window
   451 210B 29 10			and #$10
   452 210D 49 10			eor #$10
   453 210F 09 02			ora #2		; read
   454
   455 					.nowarn @graphics
   455 2111 20 62 20		 JSR @GRAPHICS
   456 					
   457 					
   458 = EE6D			tlshc	equ $ee6d
   459
   460 2114 A6 57			ldx dindex
   461 2116 BC 6D EE			ldy tlshc,x
   462 2119 A9 05			lda #5
   463 211B 0A			shift	asl @
   464 211C 88				dey
   465 211D D0 FC			bne shift
   466
   467 211F 8D EE 23			sta SCANLINE_WIDTH
   468 					
   469
   470 				; Fox/TQA
   471
   472 = 0057			dindex	equ $57
   473 = EE7D			tmccn	equ $ee7d
   474 = EE8D			tmrcn	equ $ee8d
   475
   476 2122 A6 57			ldx dindex
   477 2124 BD 7D EE			lda tmccn,x
   478 2127 BC 8D EE			ldy tmrcn,x
   479 212A A2 00			ldx #0
   480 212C C9 40			cmp #<320
   481 212E D0 01 E8			sne:inx
   482 				    
   483 				; X:A = horizontal resolution
   484 				; Y = vertical resolution
   485
   486 2131 8D C5 23			sta MAIN.SYSTEM.ScreenWidth
   487 2134 8E C6 23			stx MAIN.SYSTEM.ScreenWidth+1
   488 					
   489 2137 38 E9 01			sub #1
   490 213A 8D D4 23			sta WIN_RIGHT
   491 213D 8A				txa
   492 213E E9 00			sbc #0
   493 2140 8D D5 23			sta WIN_RIGHT+1
   494 					
   495 2143 8C C7 23			sty MAIN.SYSTEM.ScreenHeight
   496 2146 A9 00			lda #0
   497 2148 8D C8 23			sta MAIN.SYSTEM.ScreenHeight+1
   498 					
   499 214B 8D D2 23			sta WIN_LEFT
   500 214E 8D D3 23			sta WIN_LEFT+1
   501 2151 8D D6 23			sta WIN_TOP
   502 2154 8D D7 23			sta WIN_TOP+1
   503
   504 2157 8D D9 23			sta WIN_BOTTOM+1	
   505 215A 88				dey
   506 215B 8C D8 23			sty WIN_BOTTOM
   507
   508 215E 68 AA			pla:tax
   509
   510
   511 				; ------------------------------------------------------------
   512
   513 = 23EF			MODE	= DATAORIGIN+$002A
   514
   515 = 23EF			@VarData	= MODE
   516 = 0001			@VarDataSize	= 1
   517
   518 2160			@exit
   519 					.ifdef @new
   520 					@FreeMem #@VarData #@VarDataSize
   521 					eif
   522 2160 60				rts						; ret
   523 				.endl
   524
   525 2161			.local	SETCOLOR					; PROCEDURE | ASSEMBLER
   526
   527 				; ------------------------------------------------------------
   528
   529 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   530 				; as Pointer
   531 2161 B5 98 8D F0 23		mva :STACKORIGIN,x COLOR
   532 2166 CA				dex						; sub bx, 1
   533
   534 				; ---------------------  ASM Block 076  ---------------------
   535
   536 2167 AD F0 23 8D 5B 20		mva color @COMMAND.colscr
   537 216D 8D DB 23			sta GetColor
   538
   539
   540 				; ------------------------------------------------------------
   541
   542 = 23F0			COLOR	= DATAORIGIN+$002B
   543
   544 = 23F0			@VarData	= COLOR
   545 = 0001			@VarDataSize	= 1
   546
   547 2170			@exit
   548 					.ifdef @new
   549 					@FreeMem #@VarData #@VarDataSize
   550 					eif
   551 2170 60				rts						; ret
   552 				.endl
   553
   554 2171			.local	PUTPIXEL_0084					; PROCEDURE | ASSEMBLER | OVERLOAD
   555
   556 				; ------------------------------------------------------------
   557
   558 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   559 				; as Pointer
   560 2171 B5 98 8D F3 23		mva :STACKORIGIN,x Y
   561 2176 B5 A8 8D F4 23		mva :STACKORIGIN+STACKWIDTH,x Y+1
   562 217B CA				dex						; sub bx, 1
   563
   564 				; ------------------------------------------------------------
   565
   566 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   567 				; as Pointer
   568 217C B5 98 8D F1 23		mva :STACKORIGIN,x X
   569 2181 B5 A8 8D F2 23		mva :STACKORIGIN+STACKWIDTH,x X+1
   570 2186 CA				dex						; sub bx, 1
   571
   572 				; ---------------------  ASM Block 077  ---------------------
   573
   574 2187 8A 48			txa:pha
   575 				{
   576 2189 AD F4 23			lda y+1
   577 218C 30 33			bmi stop
   578 218E CD C8 23			cmp MAIN.SYSTEM.ScreenHeight+1
   579 2191 D0 06			bne sk0
   580 2193 AD F3 23			lda y
   581 2196 CD C7 23			cmp MAIN.SYSTEM.ScreenHeight
   582 2199			sk0
   583 2199 B0 26			bcs stop
   584
   585 219B AD F2 23			lda x+1
   586 219E 30 21			bmi stop
   587 21A0 CD C6 23			cmp MAIN.SYSTEM.ScreenWidth+1
   588 21A3 D0 06			bne sk1
   589 21A5 AD F1 23			lda x
   590 21A8 CD C5 23			cmp MAIN.SYSTEM.ScreenWidth
   591 21AB			sk1
   592 21AB B0 14			bcs stop
   593
   594 21AD AD F1 23 85 55 AD + 	mwa x colcrs
   595 21B7 AD F3 23 85 54		mva y rowcrs
   596
   597 21BC A9 09			lda #@IDput
   598
   599 21BE 20 55 20			jsr @COMMAND
   600
   601 21C1 68 AA		stop	pla:tax
   602
   603
   604 				; ------------------------------------------------------------
   605
   606 = 23F1			X	= DATAORIGIN+$002C
   607 = 23F3			Y	= DATAORIGIN+$002E
   608
   609 = 23F1			@VarData	= X
   610 = 0004			@VarDataSize	= 4
   611
   612 21C3			@exit
   613 					.ifdef @new
   614 					@FreeMem #@VarData #@VarDataSize
   615 					eif
   616 21C3 60				rts						; ret
   617 				.endl
   618
   619 21C4			.local	MOVETO						; PROCEDURE | ASSEMBLER
   620
   621 				; ------------------------------------------------------------
   622
   623 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   624 				; as Pointer
   625 21C4 B5 98 8D F7 23		mva :STACKORIGIN,x Y
   626 21C9 B5 A8 8D F8 23		mva :STACKORIGIN+STACKWIDTH,x Y+1
   627 21CE CA				dex						; sub bx, 1
   628
   629 				; ------------------------------------------------------------
   630
   631 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   632 				; as Pointer
   633 21CF B5 98 8D F5 23		mva :STACKORIGIN,x X
   634 21D4 B5 A8 8D F6 23		mva :STACKORIGIN+STACKWIDTH,x X+1
   635 21D9 CA				dex						; sub bx, 1
   636
   637 				; ---------------------  ASM Block 080  ---------------------
   638
   639 21DA AD F8 23			lda y+1
   640 21DD 10 08			bpl _0
   641
   642 21DF A9 00			lda #0
   643 21E1 8D F7 23			sta y
   644 21E4 8D F8 23			sta y+1
   645 21E7			_0
   646 21E7 AD F6 23			lda x+1
   647 21EA 10 08			bpl _1
   648
   649 21EC A9 00			lda #0
   650 21EE 8D F5 23			sta x
   651 21F1 8D F6 23			sta x+1
   652 21F4			_1
   653 21F4 AD F8 23 CD C8 23 + 	cpw y main.system.ScreenHeight
   654 2202 90 11			bcc _2
   655
   656 2204 38 AD C7 23 E9 01 + 	sbw main.system.ScreenHeight #1 y
   657 2215			_2
   658 2215 AD F6 23 CD C6 23 + 	cpw x main.system.ScreenWidth
   659 2223 90 11			bcc _3
   660
   661 2225 38 AD C5 23 E9 01 + 	sbw main.system.ScreenWidth #1 x
   662 2236			_3
   663 2236 AD F5 23 8D E8 23 + 	mwa x CurrentX
   664 2242 AD F7 23 8D EA 23 + 	mwa y CurrentY
   665
   666
   667 				; ------------------------------------------------------------
   668
   669 = 23F5			X	= DATAORIGIN+$0030
   670 = 23F7			Y	= DATAORIGIN+$0032
   671
   672 = 23F5			@VarData	= X
   673 = 0004			@VarDataSize	= 4
   674
   675 224E			@exit
   676 					.ifdef @new
   677 					@FreeMem #@VarData #@VarDataSize
   678 					eif
   679 224E 60				rts						; ret
   680 				.endl
   681
   682 224F			.local	LINETO						; PROCEDURE | ASSEMBLER
   683
   684 				; ------------------------------------------------------------
   685
   686 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   687 				; as Pointer
   688 224F B5 98 8D FB 23		mva :STACKORIGIN,x Y
   689 2254 B5 A8 8D FC 23		mva :STACKORIGIN+STACKWIDTH,x Y+1
   690 2259 CA				dex						; sub bx, 1
   691
   692 				; ------------------------------------------------------------
   693
   694 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   695 				; as Pointer
   696 225A B5 98 8D F9 23		mva :STACKORIGIN,x X
   697 225F B5 A8 8D FA 23		mva :STACKORIGIN+STACKWIDTH,x X+1
   698 2264 CA				dex						; sub bx, 1
   699
   700 				; ---------------------  ASM Block 081  ---------------------
   701
   702 2265 AD FC 23			lda y+1
   703 2268 10 08			bpl _0
   704
   705 226A A9 00			lda #0
   706 226C 8D FB 23			sta y
   707 226F 8D FC 23			sta y+1
   708 2272			_0
   709 2272 AD FA 23			lda x+1
   710 2275 10 08			bpl _1
   711
   712 2277 A9 00			lda #0
   713 2279 8D F9 23			sta x
   714 227C 8D FA 23			sta x+1
   715 227F			_1
   716 227F AD FC 23 CD C8 23 + 	cpw y main.system.ScreenHeight
   717 228D 90 11			bcc _2
   718
   719 228F 38 AD C7 23 E9 01 + 	sbw main.system.ScreenHeight #1 y
   720 22A0			_2
   721 22A0 AD FA 23 CD C6 23 + 	cpw x main.system.ScreenWidth
   722 22AE 90 11			bcc _3
   723
   724 22B0 38 AD C5 23 E9 01 + 	sbw main.system.ScreenWidth #1 x
   725 22C1			_3
   726 22C1 8A 48			txa:pha
   727
   728 22C3 AD E8 23 85 55 AD + 	mwa CurrentX colcrs
   729 22CD AD EA 23 85 54		mva CurrentY rowcrs
   730
   731 22D2 A9 09			lda #@IDput
   732
   733 22D4 20 55 20			jsr @COMMAND
   734
   735 22D7 AD F9 23			lda x
   736 22DA 85 55			sta colcrs
   737 22DC 8D E8 23			sta CurrentX
   738 22DF AD FA 23			lda x+1
   739 22E2 85 56			sta colcrs+1
   740 22E4 8D E9 23			sta CurrentX+1
   741
   742 22E7 AD FB 23 85 54		mva y rowcrs
   743 22EC 8D EA 23			sta CurrentY
   744 22EF AD FC 23			lda y+1
   745 22F2 8D EB 23			sta CurrentY+1
   746
   747 22F5 A9 11			lda #@IDdraw
   748
   749 22F7 20 55 20			jsr @COMMAND
   750
   751 22FA 68 AA			pla:tax
   752
   753
   754 				; ------------------------------------------------------------
   755
   756 = 23F9			X	= DATAORIGIN+$0034
   757 = 23FB			Y	= DATAORIGIN+$0036
   758
   759 = 23F9			@VarData	= X
   760 = 0004			@VarDataSize	= 4
   761
   762 22FC			@exit
   763 					.ifdef @new
   764 					@FreeMem #@VarData #@VarDataSize
   765 					eif
   766 22FC 60				rts						; ret
   767 				.endl
   768
   769 				; ------------------------------------------------------------
   770
   771 = FFFFFF80		CURRENTDRIVER	= $FFFFFF80
   772 = 0000			DETECT	= $0000
   773 = 0001			CGA	= $0001
   774 = 0002			MCGA	= $0002
   775 = 0003			EGA	= $0003
   776 = 0004			EGA64	= $0004
   777 = 0005			EGAMONO	= $0005
   778 = 0006			LOWRES	= $0006
   779 = 0007			HERCMONO	= $0007
   780 = 0009			VGA	= $0009
   781 = 000A			VESA	= $000A
   782 = 000B			D1BIT	= $000B
   783 = 000C			D2BIT	= $000C
   784 = 000D			D4BIT	= $000D
   785 = 000E			D6BIT	= $000E
   786 = 000F			D8BIT	= $000F
   787 = 0010			D12BIT	= $0010
   788 = 0018			M640X400	= $0018
   789 = 0018			M640X480	= $0018
   790 = 0000			GROK	= $0000
   791 = FFFFFFFF		GRNOINITGRAPH	= $FFFFFFFF
   792 = FFFFFFFE		GRNOTDETECTED	= $FFFFFFFE
   793 = FFFFFFFD		GRFILENOTFOUND	= $FFFFFFFD
   794 = FFFFFFFC		GRINVALIDDRIVER	= $FFFFFFFC
   795 = FFFFFFFB		GRNOLOADMEM	= $FFFFFFFB
   796 = FFFFFFFA		GRNOSCANMEM	= $FFFFFFFA
   797 = FFFFFFF9		GRNOFLOODMEM	= $FFFFFFF9
   798 = FFFFFFF8		GRFONTNOTFOUND	= $FFFFFFF8
   799 = FFFFFFF7		GRNOFONTMEM	= $FFFFFFF7
   800 = FFFFFFF6		GRINVALIDMODE	= $FFFFFFF6
   801 = FFFFFFF5		GRERROR	= $FFFFFFF5
   802 = FFFFFFF4		GRIOERROR	= $FFFFFFF4
   803 = FFFFFFF3		GRINVALIDFONT	= $FFFFFFF3
   804 = FFFFFFF2		GRINVALIDFONTNUM	= $FFFFFFF2
   805 = FFFFFFEE		GRINVALIDVERSION	= $FFFFFFEE
   806 = 0000			CGAC0	= $0000
   807 = 0001			CGAC1	= $0001
   808 = 0002			CGAC2	= $0002
   809 = 0003			CGAC3	= $0003
   810 = 0004			CGAHI	= $0004
   811 = 0000			MCGAC0	= $0000
   812 = 0001			MCGAC1	= $0001
   813 = 0002			MCGAC2	= $0002
   814 = 0003			MCGAC3	= $0003
   815 = 0004			MCGAMED	= $0004
   816 = 0005			MCGAHI	= $0005
   817 = 0000			EGALO	= $0000
   818 = 0001			EGAHI	= $0001
   819 = 0000			EGA64LO	= $0000
   820 = 0001			EGA64HI	= $0001
   821 = 0003			EGAMONOHI	= $0003
   822 = 000A			VGALO	= $000A
   823 = 001F			VGAMED	= $001F
   824 = 0018			VGAHI	= $0018
   825 = 23D2			WIN_LEFT	= DATAORIGIN+$000D
   826 = 23D4			WIN_RIGHT	= DATAORIGIN+$000F
   827 = 23D6			WIN_TOP	= DATAORIGIN+$0011
   828 = 23D8			WIN_BOTTOM	= DATAORIGIN+$0013
   829 = 23DA			GRAPHRESULT	= DATAORIGIN+$0015
   830 = 23DB			GETCOLOR	= DATAORIGIN+$0016
   831 = 23DC			adr.LASTARCCOORDS	= DATAORIGIN+$0017
   832 22FD			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   833 = 23DC			LASTARCCOORDS.X	= DATAORIGIN+$0017
   834 = 23DE			LASTARCCOORDS.Y	= DATAORIGIN+$0019
   835 = 23E0			LASTARCCOORDS.XSTART	= DATAORIGIN+$001B
   836 = 23E2			LASTARCCOORDS.YSTART	= DATAORIGIN+$001D
   837 = 23E4			LASTARCCOORDS.XEND	= DATAORIGIN+$001F
   838 = 23E6			LASTARCCOORDS.YEND	= DATAORIGIN+$0021
   839 = 23E8			CURRENTX	= DATAORIGIN+$0023
   840 = 23EA			CURRENTY	= DATAORIGIN+$0025
   841 = 23EC			VIDEORAM	= DATAORIGIN+$0027
   842 = 23EE			SCANLINE_WIDTH	= DATAORIGIN+$0029
   843
   844 = 22FD DC 23		LASTARCCOORDS
   844 				.endl							; UNIT GRAPH
   845
   846 22FF			.local	LINKAPROC					; PROCEDURE
   847
   848 				; ------------------------------------------------------------
   849
   850 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   851 				; as Pointer
   852 22FF B5 98 8D 02 24		mva :STACKORIGIN,x Y1
   853 2304 CA				dex						; sub bx, 1
   854
   855 				; ------------------------------------------------------------
   856
   857 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   858 				; as Pointer
   859 2305 B5 98 8D 01 24		mva :STACKORIGIN,x X1
   860 230A CA				dex						; sub bx, 1
   861
   862 				; ------------------------------------------------------------
   863
   864 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   865 				; as Pointer
   866 230B B5 98 8D 00 24		mva :STACKORIGIN,x Y0
   867 2310 CA				dex						; sub bx, 1
   868
   869 				; ------------------------------------------------------------
   870
   871 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   872 				; as Pointer
   873 2311 B5 98 8D FF 23		mva :STACKORIGIN,x X0
   874 2316 CA				dex						; sub bx, 1
   875
   876 				; optimize FAIL ('GRAPH.PUTPIXEL_0084', examples\gr_w1k.pas), line = 19
   877 2317 E8				inx
   878 2318 AD FF 23 95 98		mva X0 :STACKORIGIN,x
   879 231D A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   880 2321 E8				inx
   881 2322 AD 00 24 95 98		mva Y0 :STACKORIGIN,x
   882 2327 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   883 232B 20 71 21			jsr GRAPH.PUTPIXEL_0084
   884
   885 				; optimize FAIL ('GRAPH.MOVETO', examples\gr_w1k.pas), line = 20
   886 232E E8				inx
   887 232F AD FF 23 95 98		mva X0 :STACKORIGIN,x
   888 2334 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   889 2338 E8				inx
   890 2339 AD 00 24 95 98		mva Y0 :STACKORIGIN,x
   891 233E A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   892 2342 20 C4 21			jsr GRAPH.MOVETO
   893
   894 				; optimize FAIL ('GRAPH.LINETO', examples\gr_w1k.pas), line = 21
   895 2345 E8				inx
   896 2346 AD 01 24 95 98		mva X1 :STACKORIGIN,x
   897 234B A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   898 234F E8				inx
   899 2350 AD 02 24 95 98		mva Y1 :STACKORIGIN,x
   900 2355 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   901 2359 20 4F 22			jsr GRAPH.LINETO
   902
   903 				; ------------------------------------------------------------
   904
   905 = 23FF			X0	= DATAORIGIN+$003A
   906 = 2400			Y0	= DATAORIGIN+$003B
   907 = 2401			X1	= DATAORIGIN+$003C
   908 = 2402			Y1	= DATAORIGIN+$003D
   909
   910 = 23FF			@VarData	= X0
   911 = 0004			@VarDataSize	= 4
   912
   913 235C			@exit
   914 					.ifdef @new
   915 					@FreeMem #@VarData #@VarDataSize
   916 					eif
   917 235C 60				rts						; ret
   918 				.endl
   919
   920 235D			.local	DEMOPROC					; PROCEDURE
   921
   922 				; --- For
   923
   924 				; optimize OK (examples\gr_w1k.pas), line = 26
   925
   926 235D A9 00 8D FD 23		mva #$00 I
   927
   928 				; optimize OK (examples\gr_w1k.pas), line = 26
   929
   930 				; --- To
   931 2362			l_0100
   932
   933 				; --- ForToDoCondition
   934
   935 				; optimize OK (examples\gr_w1k.pas), line = 26
   936
   937 2362 AD FD 23			lda I
   938 2365 C9 4F			cmp #$4F
   939 2367 90 02			scc
   940 2369 D0 1B			jne l_010E
   941
   942 				; optimize FAIL ('LINKAPROC', examples\gr_w1k.pas), line = 27
   943 236B E8				inx
   944 236C A9 00 95 98			mva #$00 :STACKORIGIN,x
   945 2370 E8				inx
   946 2371 95 98			sta :STACKORIGIN,x
   947 2373 E8				inx
   948 2374 A9 9F 95 98			mva #$9F :STACKORIGIN,x
   949 2378 E8				inx
   950 2379 AD FD 23 95 98		mva I :STACKORIGIN,x
   951 237E 20 FF 22			jsr LINKAPROC
   952
   953 				; --- ForToDoEpilog
   954 2381 EE FD 23			inc I						; inc ptr byte [CounterAddress]
   955
   956 2384 D0 DC			jne l_0100
   957
   958 2386			l_010E
   959
   960 				; ------------------------------------------------------------
   961
   962 = 004F			@FORTMP_00FD	= $004F
   963 2386			@exit
   964 					.ifdef @new
   965 					@FreeMem #@VarData #@VarDataSize
   966 					eif
   967 2386 60				rts						; ret
   968 				.endl
   969
   970 2387			.local	HLPROGRAMPROC					; PROCEDURE
   971
   972 				; optimize FAIL ('GRAPH.INITGRAPH_006F', examples\gr_w1k.pas), line = 33
   973 2387 E8				inx
   974 2388 A9 07 95 98			mva #$07 :STACKORIGIN,x
   975 238C 20 E8 20			jsr GRAPH.INITGRAPH_006F
   976
   977 				; optimize FAIL ('GRAPH.SETCOLOR', examples\gr_w1k.pas), line = 34
   978 238F E8				inx
   979 2390 A9 01 95 98			mva #$01 :STACKORIGIN,x
   980 2394 20 61 21			jsr GRAPH.SETCOLOR
   981
   982 				; optimize FAIL ('DEMOPROC', examples\gr_w1k.pas), line = 35
   983 2397 20 5D 23			jsr DEMOPROC
   984
   985 				; optimize FAIL (100, examples\gr_w1k.pas), line = 36
   986 					@printSTRING #CODEORIGIN+$000D
   986 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   986 239A A0 20		 LDY> CODEORIGIN+$000D
   986 239C A9 0D		 LDA< CODEORIGIN+$000D
   986 239E 20 22 20		 JSR @PRINTSTRING
   987 23A1 20 14 20			@printEOL
   988
   989 				; optimize FAIL ('CRT.READKEY', examples\gr_w1k.pas), line = 37
   990 23A4 20 D7 20			jsr CRT.READKEY
   991 23A7 B5 98 8D FE 23		mva :STACKORIGIN,x KLAVESA
   992 23AC CA				dex
   993 23AD			@exit
   994 					.ifdef @new
   995 					@FreeMem #@VarData #@VarDataSize
   996 					eif
   997 23AD 60				rts						; ret
   998 				.endl
   999 23AE			l_001B
  1000
  1001 				; optimize FAIL ('HLPROGRAMPROC', examples\gr_w1k.pas), line = 41
  1002 23AE 20 87 23			jsr HLPROGRAMPROC
  1003
  1004 				; ------------------------------------------------------------
  1005
  1006 = 23FD			I	= DATAORIGIN+$0038
  1007 = 23FE			KLAVESA	= DATAORIGIN+$0039
  1008 23B1			@exit
  1009
  1010 23B1 A2 00		@halt	ldx #0
  1011 23B3 9A				txs
  1012
  1013 23B4 60				rts
  1014
  1015 				; ------------------------------------------------------------
  1016
  1017 23B5 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1018
  1019 				; ------------------------------------------------------------
  1020
  1021 23C5			.local	@DEFINES
  1022 23C5			ATARI
  1023 				.endl
  1024
  1025 				.endl							; MAIN
  1026
  1027 				; ------------------------------------------------------------
  1028 				; ------------------------------------------------------------
  1029
  1030 				.macro	UNITINITIALIZATION
  1031 				
  1032 					.ifdef MAIN.SYSTEM.@UnitInit
  1033 					jsr MAIN.SYSTEM.@UnitInit
  1034 					eif
  1035 				
  1036 					.ifdef MAIN.DOS.@UnitInit
  1037 					jsr MAIN.DOS.@UnitInit
  1038 					eif
  1039 				
  1040 					.ifdef MAIN.STRUTILS.@UnitInit
  1041 					jsr MAIN.STRUTILS.@UnitInit
  1042 					eif
  1043 				
  1044 					.ifdef MAIN.SYSUTILS.@UnitInit
  1045 					jsr MAIN.SYSUTILS.@UnitInit
  1046 					eif
  1047 				
  1048 					.ifdef MAIN.ATARI.@UnitInit
  1049 					jsr MAIN.ATARI.@UnitInit
  1050 					eif
  1051 				
  1052 					.ifdef MAIN.CRT.@UnitInit
  1053 					jsr MAIN.CRT.@UnitInit
  1054 					eif
  1055 				
  1056 					.ifdef MAIN.TYPES.@UnitInit
  1057 					jsr MAIN.TYPES.@UnitInit
  1058 					eif
  1059 				
  1060 					.ifdef MAIN.GRAPH.@UnitInit
  1061 					jsr MAIN.GRAPH.@UnitInit
  1062 					eif
  1063 				.endm
  1064
  1065 				; ------------------------------------------------------------
  1066
  1067 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1068 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1068 				SYSTEM: $20D3..$20D6
  1069 					eif
  1070
  1071 					ift .SIZEOF(MAIN.DOS) > 0
  1072 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
  1073 					eif
  1074
  1075 					ift .SIZEOF(MAIN.STRUTILS) > 0
  1076 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
  1077 					eif
  1078
  1079 					ift .SIZEOF(MAIN.SYSUTILS) > 0
  1080 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
  1081 					eif
  1082
  1083 					ift .SIZEOF(MAIN.ATARI) > 0
  1084 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1085 					eif
  1086
  1087 					ift .SIZEOF(MAIN.CRT) > 0
  1088 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1088 				CRT: $20D7..$20E7
  1089 					eif
  1090
  1091 					ift .SIZEOF(MAIN.TYPES) > 0
  1092 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
  1093 					eif
  1094
  1095 					ift .SIZEOF(MAIN.GRAPH) > 0
  1096 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
  1096 				GRAPH: $20E8..$22FE
  1097 					eif
  1098
  1099 					.print 'CODE: ',CODEORIGIN,'..',*-1
  1099 				CODE: $2000..$23C4
  1100
  1101 				; ------------------------------------------------------------
  1102
  1103 23C5			DATAORIGIN
  1104 23C5 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $27  $00 $00 $00 $17
  1105
  1106 = 0014			VARINITSIZE	= *-DATAORIGIN
  1107 = 003E			VARDATASIZE	= 62
  1108
  1109 = 2403			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1110
  1111 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1111 				DATA: $23C5..$2403
  1112
  1113 02E0-02E1> B4 20			run START
  1114
  1115 				; ------------------------------------------------------------
  1116
  1117 				.macro	STATICDATA
  1118 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $05 $53 $54  $4C $41 $43 $00
  1119 				.endm
  1120
  1121 					end
