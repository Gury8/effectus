mads 2.1.0 build 8 (23 Dec 19)
   388 					opt l+
   101
   102 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   102 				ZPAGE: $0080..$00D7
   103
   104 				.print 'RTLIB: ',RTLIB,'..',*-1
   104 				RTLIB: $2014..$2141
   105
   106 				; ------------------------------------------------------------
   107
   108 2142			START
   109 2142 BA				tsx
   110 2143 8E 72 24			stx MAIN.@halt+1
   111
   112 					.ifdef fmulinit
   113 					fmulinit
   114 					eif
   115
   116 = 012C			VLEN	= VARDATASIZE-VARINITSIZE
   117 = 249B			VADR	= DATAORIGIN+VARINITSIZE
   118
   119 					ift VADR > $BFFF
   120 					ert 'Invalid memory address range ',VADR
   121 					eli (VLEN>0) && (VLEN<=256)
   122 					ldx #256-VLEN
   123 					lda #0
   124 					sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>0
   126 					@fill #VADR #VLEN #0
   126 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   126 2146 A9 9B 85 88 A9 24 +  MWA #VADR @FILL.PTR1
   126 214E A9 2C 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   126 2156 A9 00 85 84		 MVA #0 @FILL.PTR2
   126 215A 20 BD 20		 JSR @FILL
   127 					eif
   128
   129 					.ifdef MAIN.@DEFINES.ROMOFF
   130 					icl 'atari\romoff.asm'
   131 					.endif
   132
   133 215D A9 C7 85 82 A9 25 + 	mwa #PROGRAMSTACK psptr
   134
   135 2165 A2 0F			ldx #$0f					; DOS II+/D ParamStr
   136 2167 BD 40 03 9D 75 24 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   137
   138 2170 E8				inx						; X = 0
   139 2171 86 90			stx bp						; BP = 0
   140
   141 2173 8E 08 D2			stx audctl					; reset POKEY
   142 2176 A9 03			lda #3
   143 2178 8D 0F D2			sta skctl
   144
   145 217B CA				dex						; X = 255
   146
   147 217C				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: gr_w1k.a65]
Source: gr_w1k.a65
   148
   149 217C			.local	MAIN						; PROCEDURE
   150
   151 217C 4C 6E 24			jmp l_001B
   152
   153 				; ------------------------------------------------------------
   154
   155 217F			.local	SYSTEM						; UNIT
   156
   157 				; ------------------------------------------------------------
   158
   159 = 0101			__PORTB_BANKS	= $0101
   160 = 0648			M_PI_2	= $0648
   161 = 0192			D_PI_2	= $0192
   162 = 0004			D_PI_180	= $04
   163 = 0000			MGTIA	= $00
   164 = 0080			MVBXE	= $80
   165 = 0000			VBXE_XDLADR	= $00
   166 = 0100			VBXE_BCBADR	= $0100
   167 = 1000			VBXE_MAPADR	= $1000
   168 = 5000			VBXE_OVRADR	= $5000
   169 = B000			VBXE_WINDOW	= $B000
   170 = 0000			IDLI	= $00
   171 = 0001			IVBL	= $01
   172 = 00FE			CH_DELCHR	= $FE
   173 = 009B			CH_ENTER	= $9B
   174 = 001B			CH_ESC	= $1B
   175 = 001C			CH_CURS_UP	= $1C
   176 = 001D			CH_CURS_DOWN	= $1D
   177 = 001E			CH_CURS_LEFT	= $1E
   178 = 001F			CH_CURS_RIGHT	= $1F
   179 = 007F			CH_TAB	= $7F
   180 = 009B			CH_EOL	= $9B
   181 = 007D			CH_CLR	= $7D
   182 = 00FD			CH_BELL	= $FD
   183 = 007E			CH_DEL	= $7E
   184 = 009C			CH_DELLINE	= $9C
   185 = 009D			CH_INSLINE	= $9D
   186 = 0000			COLOR_BLACK	= $00
   187 = 000E			COLOR_WHITE	= $0E
   188 = 0032			COLOR_RED	= $32
   189 = 0096			COLOR_CYAN	= $96
   190 = 0068			COLOR_VIOLET	= $68
   191 = 00C4			COLOR_GREEN	= $C4
   192 = 0074			COLOR_BLUE	= $74
   193 = 00EE			COLOR_YELLOW	= $EE
   194 = 0028			COLOR_ORANGE	= $28
   195 = 00E4			COLOR_BROWN	= $E4
   196 = 003C			COLOR_LIGHTRED	= $3C
   197 = 0004			COLOR_GRAY1	= $04
   198 = 0006			COLOR_GRAY2	= $06
   199 = 000A			COLOR_GRAY3	= $0A
   200 = 00CC			COLOR_LIGHTGREEN	= $CC
   201 = 007C			COLOR_LIGHTBLUE	= $7C
   202 = 0004			FMOPENREAD	= $04
   203 = 0008			FMOPENWRITE	= $08
   204 = 0009			FMOPENAPPEND	= $09
   205 = 000C			FMOPENREADWRITE	= $0C
   206 = 2487			SCREENWIDTH	= DATAORIGIN+$0000
   207 = 2489			SCREENHEIGHT	= DATAORIGIN+$0002
   208 = 248B			DATESEPARATOR	= DATAORIGIN+$0004
   209 = D014			TVSYSTEM	= $D014
   210 = 02C0			adr.PALETTE	= $02C0
   211 217F			.var PALETTE	= adr.PALETTE .word
   212 = D012			adr.HPALETTE	= $D012
   213 217F			.var HPALETTE	= adr.HPALETTE .word
   214 = 248C			FILEMODE	= DATAORIGIN+$0005
   215 = 248D			GRAPHMODE	= DATAORIGIN+$0006
   216 = 248E			IORESULT	= DATAORIGIN+$0007
   217 = 248F			EOLN	= DATAORIGIN+$0008
   218 = 2490			RNDSEED	= DATAORIGIN+$0009
   219
   220 = 217F C0 02		PALETTE
   220 = 2181 12 D0		HPALETTE
   220 				.endl							; UNIT SYSTEM
   221
   222 				; ------------------------------------------------------------
   223
   224 2183			.local	ATARI						; UNIT
   225
   226 				; ------------------------------------------------------------
   227
   228 = 0012			RTCLOK	= $12
   229 = 004D			ATRACT	= $4D
   230 = 0052			LMARGIN	= $52
   231 = 0053			RMARGIN	= $53
   232 = 0054			ROWCRS	= $54
   233 = 0055			COLCRS	= $55
   234 = 0057			DINDEX	= $57
   235 = 0058			SAVMSC	= $58
   236 = 0062			PALNTS	= $62
   237 = 006A			RAMTOP	= $6A
   238 = 0200			VDSLST	= $0200
   239 = 0230			SDLSTL	= $0230
   240 = 0290			TXTROW	= $0290
   241 = 0291			TXTCOL	= $0291
   242 = 0293			TINDEX	= $0293
   243 = 0294			TXTMSC	= $0294
   244 = 022F			SDMCTL	= $022F
   245 = 026F			GPRIOR	= $026F
   246 = 02F0			CRSINH	= $02F0
   247 = 02F3			CHACT	= $02F3
   248 = 02F4			CHBAS	= $02F4
   249 = 02FC			CH	= $02FC
   250 = 02C0			PCOLR0	= $02C0
   251 = 02C1			PCOLR1	= $02C1
   252 = 02C2			PCOLR2	= $02C2
   253 = 02C3			PCOLR3	= $02C3
   254 = 02C4			COLOR0	= $02C4
   255 = 02C5			COLOR1	= $02C5
   256 = 02C6			COLOR2	= $02C6
   257 = 02C7			COLOR3	= $02C7
   258 = 02C8			COLOR4	= $02C8
   259 = 02C8			COLBAKS	= $02C8
   260 = D000			HPOSP0	= $D000
   261 = D001			HPOSP1	= $D001
   262 = D002			HPOSP2	= $D002
   263 = D003			HPOSP3	= $D003
   264 = D004			HPOSM0	= $D004
   265 = D005			HPOSM1	= $D005
   266 = D006			HPOSM2	= $D006
   267 = D007			HPOSM3	= $D007
   268 = D008			SIZEP0	= $D008
   269 = D009			SIZEP1	= $D009
   270 = D00A			SIZEP2	= $D00A
   271 = D00B			SIZEP3	= $D00B
   272 = D00C			SIZEM	= $D00C
   273 = D00D			GRAFP0	= $D00D
   274 = D00E			GRAFP1	= $D00E
   275 = D00F			GRAFP2	= $D00F
   276 = D010			GRAFP3	= $D010
   277 = D011			GRAFM	= $D011
   278 = D004			P0PF	= $D004
   279 = D014			PAL	= $D014
   280 = D012			COLPM0	= $D012
   281 = D013			COLPM1	= $D013
   282 = D014			COLPM2	= $D014
   283 = D015			COLPM3	= $D015
   284 = D016			COLPF0	= $D016
   285 = D017			COLPF1	= $D017
   286 = D018			COLPF2	= $D018
   287 = D019			COLPF3	= $D019
   288 = D01A			COLBK	= $D01A
   289 = D01B			PRIOR	= $D01B
   290 = D01D			GRACTL	= $D01D
   291 = D01E			HITCLR	= $D01E
   292 = D200			AUDF1	= $D200
   293 = D201			AUDC1	= $D201
   294 = D202			AUDF2	= $D202
   295 = D203			AUDC2	= $D203
   296 = D204			AUDF3	= $D204
   297 = D205			AUDC3	= $D205
   298 = D206			AUDF4	= $D206
   299 = D207			AUDC4	= $D207
   300 = D208			AUDCTL	= $D208
   301 = D20F			SKSTAT	= $D20F
   302 = D301			PORTB	= $D301
   303 = D400			DMACTL	= $D400
   304 = D401			CHACTL	= $D401
   305 = D402			DLISTL	= $D402
   306 = D404			HSCROL	= $D404
   307 = D405			VSCROL	= $D405
   308 = D407			PMBASE	= $D407
   309 = D409			CHBASE	= $D409
   310 = D40A			WSYNC	= $D40A
   311 = D40B			VCOUNT	= $D40B
   312 = D40C			PENH	= $D40C
   313 = D40D			PENV	= $D40D
   314 = D40E			NMIEN	= $D40E
   315
   316 				.endl							; UNIT ATARI
   317
   318 				; ------------------------------------------------------------
   319
   320 2183			.local	CRT						; UNIT
   321
   322 2183			.local	READKEY						; FUNCTION | ASSEMBLER
   323
   324 				; ---------------------  ASM Block 049  ---------------------
   325
   326 2183 8A 48			txa:pha
   327
   328 2185 20 14 20			@GetKey
   329
   330 2188 8D 93 24			sta Result
   331
   332 218B 68 AA			pla:tax
   333
   334 218D			@exit
   335
   336 				; ------------------------------------------------------------
   337
   338 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   339 				; as Pointer
   340
   341 218D E8				inx
   342 218E AD 93 24 95 98		mva RESULT :STACKORIGIN,x
   343
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					eif
   351
   352 				; ------------------------------------------------------------
   353
   354 = 2493			RESULT	= DATAORIGIN+$000C
   355
   356 = 2493			@VarData	= RESULT
   357 = 0001			@VarDataSize	= 1
   358
   359 2193 60				rts						; ret
   360 				.endl
   361
   362 				; ------------------------------------------------------------
   363
   364 = 2492			TEXTATTR	= DATAORIGIN+$000B
   365 = D01F			CONSOL	= $D01F
   366 = 0000			CN_START_SELECT_OPTION	= $00
   367 = 0001			CN_SELECT_OPTION	= $01
   368 = 0002			CN_START_OPTION	= $02
   369 = 0003			CN_OPTION	= $03
   370 = 0004			CN_START_SELECT	= $04
   371 = 0005			CN_SELECT	= $05
   372 = 0006			CN_START	= $06
   373 = 0007			CN_NONE	= $07
   374 = 0000			BW40	= $00
   375 = 0001			CO40	= $01
   376 = 0002			BW80	= $02
   377 = 0003			CO80	= $03
   378 = 0007			MONO	= $07
   379 = 0001			C40	= $01
   380 = 0003			C80	= $03
   381 = 0000			BLACK	= $00
   382 = 0001			BLUE	= $01
   383 = 0002			GREEN	= $02
   384 = 0003			CYAN	= $03
   385 = 0004			RED	= $04
   386 = 0005			MAGENTA	= $05
   387 = 0006			BROWN	= $06
   388 = 0007			LIGHTGRAY	= $07
   389 = 0008			DARKGRAY	= $08
   390 = 0009			LIGHTBLUE	= $09
   391 = 000A			LIGHTGREEN	= $0A
   392 = 000B			LIGHTCYAN	= $0B
   393 = 000C			LIGHTRED	= $0C
   394 = 000D			LIGHTMAGENTA	= $0D
   395 = 000E			YELLOW	= $0E
   396 = 000F			WHITE	= $0F
   397 = 0080			BLINK	= $80
   398
   399 				.endl							; UNIT CRT
   400
   401 				; ------------------------------------------------------------
   402
   403 2194			.local	DOS						; UNIT
   404
   405 				; ------------------------------------------------------------
   406
   407 = D014			PALNTSC	= $D014
   408
   409 				.endl							; UNIT DOS
   410
   411 				; ------------------------------------------------------------
   412
   413 2194			.local	STRUTILS					; UNIT
   414
   415 				; ------------------------------------------------------------
   416
   417 				.endl							; UNIT STRUTILS
   418
   419 				; ------------------------------------------------------------
   420
   421 2194			.local	SYSUTILS					; UNIT
   422
   423 				; ------------------------------------------------------------
   424
   425 = 0001			FAREADONLY	= $01
   426 = 0002			FAHIDDEN	= $02
   427 = 0004			FASYSFILE	= $04
   428 = 0008			FAVOLUMEID	= $08
   429 = 0010			FADIRECTORY	= $10
   430 = 0020			FAARCHIVE	= $20
   431 = 003F			FAANYFILE	= $3F
   432
   433 				.endl							; UNIT SYSUTILS
   434
   435 				; ------------------------------------------------------------
   436
   437 2194			.local	TYPES						; UNIT
   438
   439 				; ------------------------------------------------------------
   440
   441 				.endl							; UNIT TYPES
   442
   443 				; ------------------------------------------------------------
   444
   445 2194			.local	GRAPH						; UNIT
   446
   447 2194			.local	INITGRAPH_00AD					; PROCEDURE | OVERLOAD
   448
   449 				; ------------------------------------------------------------
   450
   451 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   452 				; as Pointer
   453 2194 B5 98 8D B1 24		mva :STACKORIGIN,x MODE
   454 2199 CA				dex
   455
   456 				; ---------------------  ASM Block 078  ---------------------
   457
   458
   459 219A 8A 48			txa:pha
   460
   461 219C AD B1 24			lda mode
   462 219F 8D 8D 24			sta MAIN.SYSTEM.GraphMode
   463 21A2 29 0F			and #$0f
   464 21A4 A8				tay
   465
   466 21A5 A2 60			ldx #$60		; 6*16
   467 21A7 AD B1 24			lda mode		; %00010000 with text window
   468 21AA 29 10			and #$10
   469 21AC 49 10			eor #$10
   470 21AE 09 02			ora #2			; read
   471
   472 					.nowarn @GRAPHICS
   472 21B0 20 55 20		 JSR @GRAPHICS
   473
   474 21B3 8C 9C 24			sty GraphResult
   475
   476
   477 					.ifdef MAIN.@DEFINES.ROMOFF
   478 					inc portb
   479 					.endif
   480
   481 = EE6D			tlshc	equ $ee6d
   482
   483 21B6 A6 57			ldx dindex
   484 21B8 BC 6D EE			ldy tlshc,x
   485 21BB A9 05			lda #5
   486 21BD 0A			shift	asl @
   487 21BE 88				dey
   488 21BF D0 FC			bne shift
   489
   490 21C1 8D B0 24			sta SCANLINE_WIDTH
   491
   492 				; Fox/TQA
   493
   494 = 0057			dindex	equ $57
   495 = EE7D			tmccn	equ $ee7d
   496 = EE8D			tmrcn	equ $ee8d
   497
   498 21C4 A6 57			ldx dindex
   499 21C6 BD 7D EE			lda tmccn,x
   500 21C9 BC 8D EE			ldy tmrcn,x
   501 21CC A2 00			ldx #0
   502 21CE C9 40			cmp #<320
   503 21D0 D0 01 E8			sne:inx
   504
   505 				; X:A = horizontal resolution
   506 				; Y = vertical resolution
   507
   508 21D3 20 8F 20			@SCREENSIZE
   509
   510 					.ifdef MAIN.@DEFINES.ROMOFF
   511 					dec portb
   512 					.endif
   513
   514 21D6 68 AA			pla:tax
   515
   516
   517 				; optimize OK (GRAPH), line = 132
   518
   519 21D8 A5 58 8D AE 24		mva ATARI.SAVMSC VIDEORAM
   520 21DD A5 59 8D AF 24		mva ATARI.SAVMSC+1 VIDEORAM+1
   521
   522 				; ------------------------------------------------------------
   523
   524 = 24B1			MODE	= DATAORIGIN+$002A
   525
   526 = 24B1			@VarData	= MODE
   527 = 0001			@VarDataSize	= 1
   528
   529 21E2			@exit
   530 					.ifdef @new
   531 					lda <@VarData
   532 					sta :ztmp
   533 					lda >@VarData
   534 					ldy #@VarDataSize-1
   535 					jmp @FreeMem
   536 					eif
   537 21E2 60				rts						; ret
   538 				.endl
   539
   540 21E3			.local	SETCOLOR					; PROCEDURE | ASSEMBLER
   541
   542 				; ------------------------------------------------------------
   543
   544 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   545 				; as Pointer
   546 21E3 B5 98 8D B2 24		mva :STACKORIGIN,x COLOR
   547 21E8 CA				dex
   548
   549 				; ---------------------  ASM Block 080  ---------------------
   550
   551 21E9 AD B2 24 8D 4D 20		mva color @COMMAND.colscr
   552 21EF 8D 9D 24			sta GetColor
   553
   554
   555 				; ------------------------------------------------------------
   556
   557 = 24B2			COLOR	= DATAORIGIN+$002B
   558
   559 = 24B2			@VarData	= COLOR
   560 = 0001			@VarDataSize	= 1
   561
   562 21F2			@exit
   563 					.ifdef @new
   564 					lda <@VarData
   565 					sta :ztmp
   566 					lda >@VarData
   567 					ldy #@VarDataSize-1
   568 					jmp @FreeMem
   569 					eif
   570 21F2 60				rts						; ret
   571 				.endl
   572
   573 21F3			.local	PUTPIXEL_00BD					; PROCEDURE | ASSEMBLER | OVERLOAD
   574
   575 				; ------------------------------------------------------------
   576
   577 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   578 				; as Pointer
   579 21F3 B5 98 8D B5 24		mva :STACKORIGIN,x Y
   580 21F8 B5 A8 8D B6 24		mva :STACKORIGIN+STACKWIDTH,x Y+1
   581 21FD CA				dex
   582
   583 				; ------------------------------------------------------------
   584
   585 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   586 				; as Pointer
   587 21FE B5 98 8D B3 24		mva :STACKORIGIN,x X
   588 2203 B5 A8 8D B4 24		mva :STACKORIGIN+STACKWIDTH,x X+1
   589 2208 CA				dex
   590
   591 				; ---------------------  ASM Block 081  ---------------------
   592
   593 2209 8A 48			txa:pha
   594 				{
   595 220B AD B6 24			lda y+1
   596 220E 30 37			bmi stop
   597 2210 CD 8A 24			cmp MAIN.SYSTEM.ScreenHeight+1
   598 2213 D0 06			bne sk0
   599 2215 AD B5 24			lda y
   600 2218 CD 89 24			cmp MAIN.SYSTEM.ScreenHeight
   601 221B			sk0
   602 221B B0 2A			bcs stop
   603
   604 221D AD B4 24			lda x+1
   605 2220 30 25			bmi stop
   606 2222 CD 88 24			cmp MAIN.SYSTEM.ScreenWidth+1
   607 2225 D0 06			bne sk1
   608 2227 AD B3 24			lda x
   609 222A CD 87 24			cmp MAIN.SYSTEM.ScreenWidth
   610 222D			sk1
   611 222D B0 18			bcs stop
   612
   613 222F AD B3 24 85 55 AD + 	mwa x colcrs
   614 2239 AD B5 24 85 54		mva y rowcrs
   615
   616 				;	lda #@IDput		; slower
   617 				;	jsr @COMMAND
   618
   619 223E AE 38 20			ldx @COMMAND.scrchn	; faster
   620 2241 AD 4D 20			lda @COMMAND.colscr
   621
   622 2244				m@call	@putchar.main
Macro: M@CALL [Source: rtl6502.asm]
    12 2244 20 2C 20				jsr @PUTCHAR.MAIN
Source: gr_w1k.a65
   623
   624 2247 68 AA		stop	pla:tax
   625
   626
   627 				; ------------------------------------------------------------
   628
   629 = 24B3			X	= DATAORIGIN+$002C
   630 = 24B5			Y	= DATAORIGIN+$002E
   631
   632 = 24B3			@VarData	= X
   633 = 0004			@VarDataSize	= 4
   634
   635 2249			@exit
   636 					.ifdef @new
   637 					lda <@VarData
   638 					sta :ztmp
   639 					lda >@VarData
   640 					ldy #@VarDataSize-1
   641 					jmp @FreeMem
   642 					eif
   643 2249 60				rts						; ret
   644 				.endl
   645
   646 224A			.local	MOVETO						; PROCEDURE | ASSEMBLER
   647
   648 				; ------------------------------------------------------------
   649
   650 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   651 				; as Pointer
   652 224A B5 98 8D B9 24		mva :STACKORIGIN,x Y
   653 224F B5 A8 8D BA 24		mva :STACKORIGIN+STACKWIDTH,x Y+1
   654 2254 CA				dex
   655
   656 				; ------------------------------------------------------------
   657
   658 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   659 				; as Pointer
   660 2255 B5 98 8D B7 24		mva :STACKORIGIN,x X
   661 225A B5 A8 8D B8 24		mva :STACKORIGIN+STACKWIDTH,x X+1
   662 225F CA				dex
   663
   664 				; ---------------------  ASM Block 084  ---------------------
   665
   666 2260 AD BA 24			lda y+1
   667 2263 10 08			bpl _0
   668
   669 2265 A9 00			lda #0
   670 2267 8D B9 24			sta y
   671 226A 8D BA 24			sta y+1
   672 226D			_0
   673 226D AD B8 24			lda x+1
   674 2270 10 08			bpl _1
   675
   676 2272 A9 00			lda #0
   677 2274 8D B7 24			sta x
   678 2277 8D B8 24			sta x+1
   679 227A			_1
   680 227A AD BA 24 CD 8A 24 + 	cpw y main.system.ScreenHeight
   681 2288 90 11			bcc _2
   682
   683 228A 38 AD 89 24 E9 01 + 	sbw main.system.ScreenHeight #1 y
   684 229B			_2
   685 229B AD B8 24 CD 88 24 + 	cpw x main.system.ScreenWidth
   686 22A9 90 11			bcc _3
   687
   688 22AB 38 AD 87 24 E9 01 + 	sbw main.system.ScreenWidth #1 x
   689 22BC			_3
   690 22BC AD B7 24 8D AA 24 + 	mwa x CurrentX
   691 22C8 AD B9 24 8D AC 24 + 	mwa y CurrentY
   692
   693
   694 				; ------------------------------------------------------------
   695
   696 = 24B7			X	= DATAORIGIN+$0030
   697 = 24B9			Y	= DATAORIGIN+$0032
   698
   699 = 24B7			@VarData	= X
   700 = 0004			@VarDataSize	= 4
   701
   702 22D4			@exit
   703 					.ifdef @new
   704 					lda <@VarData
   705 					sta :ztmp
   706 					lda >@VarData
   707 					ldy #@VarDataSize-1
   708 					jmp @FreeMem
   709 					eif
   710 22D4 60				rts						; ret
   711 				.endl
   712
   713 22D5			.local	LINETO						; PROCEDURE | ASSEMBLER
   714
   715 				; ------------------------------------------------------------
   716
   717 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   718 				; as Pointer
   719 22D5 B5 98 8D BD 24		mva :STACKORIGIN,x Y
   720 22DA B5 A8 8D BE 24		mva :STACKORIGIN+STACKWIDTH,x Y+1
   721 22DF CA				dex
   722
   723 				; ------------------------------------------------------------
   724
   725 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   726 				; as Pointer
   727 22E0 B5 98 8D BB 24		mva :STACKORIGIN,x X
   728 22E5 B5 A8 8D BC 24		mva :STACKORIGIN+STACKWIDTH,x X+1
   729 22EA CA				dex
   730
   731 				; ---------------------  ASM Block 085  ---------------------
   732
   733 22EB AD BE 24			lda y+1
   734 22EE 10 08			bpl _0
   735
   736 22F0 A9 00			lda #0
   737 22F2 8D BD 24			sta y
   738 22F5 8D BE 24			sta y+1
   739 22F8			_0
   740 22F8 AD BC 24			lda x+1
   741 22FB 10 08			bpl _1
   742
   743 22FD A9 00			lda #0
   744 22FF 8D BB 24			sta x
   745 2302 8D BC 24			sta x+1
   746 2305			_1
   747 2305 AD BE 24 CD 8A 24 + 	cpw y main.system.ScreenHeight
   748 2313 90 11			bcc _2
   749
   750 2315 38 AD 89 24 E9 01 + 	sbw main.system.ScreenHeight #1 y
   751 2326			_2
   752 2326 AD BC 24 CD 88 24 + 	cpw x main.system.ScreenWidth
   753 2334 90 11			bcc _3
   754
   755 2336 38 AD 87 24 E9 01 + 	sbw main.system.ScreenWidth #1 x
   756 2347			_3
   757 2347 8A 48			txa:pha
   758
   759 2349 AD AA 24 85 55 AD + 	mwa CurrentX colcrs
   760 2353 AD AC 24 85 54		mva CurrentY rowcrs
   761
   762 				;	lda #@IDput		; slower
   763 				;	jsr @COMMAND
   764
   765 2358 AE 38 20			ldx @COMMAND.scrchn	; faster
   766 235B AD 4D 20			lda @COMMAND.colscr
   767
   768 235E				m@call	@putchar.main
Macro: M@CALL [Source: rtl6502.asm]
    12 235E 20 2C 20				jsr @PUTCHAR.MAIN
Source: gr_w1k.a65
   769
   770 2361 AD BB 24			lda x
   771 2364 85 55			sta colcrs
   772 2366 8D AA 24			sta CurrentX
   773 2369 AD BC 24			lda x+1
   774 236C 85 56			sta colcrs+1
   775 236E 8D AB 24			sta CurrentX+1
   776
   777 2371 AD BD 24 85 54		mva y rowcrs
   778 2376 8D AC 24			sta CurrentY
   779 2379 AD BE 24			lda y+1
   780 237C 8D AD 24			sta CurrentY+1
   781
   782 237F A9 11			lda #@IDdraw
   783
   784 2381 20 37 20			jsr @COMMAND
   785
   786 2384 68 AA			pla:tax
   787
   788
   789 				; ------------------------------------------------------------
   790
   791 = 24BB			X	= DATAORIGIN+$0034
   792 = 24BD			Y	= DATAORIGIN+$0036
   793
   794 = 24BB			@VarData	= X
   795 = 0004			@VarDataSize	= 4
   796
   797 2386			@exit
   798 					.ifdef @new
   799 					lda <@VarData
   800 					sta :ztmp
   801 					lda >@VarData
   802 					ldy #@VarDataSize-1
   803 					jmp @FreeMem
   804 					eif
   805 2386 60				rts						; ret
   806 				.endl
   807
   808 				; ------------------------------------------------------------
   809
   810 = 0080			CURRENTDRIVER	= $80
   811 = 0000			DETECT	= $00
   812 = 0001			CGA	= $01
   813 = 0002			MCGA	= $02
   814 = 0003			EGA	= $03
   815 = 0004			EGA64	= $04
   816 = 0005			EGAMONO	= $05
   817 = 0006			LOWRES	= $06
   818 = 0007			HERCMONO	= $07
   819 = 0009			VGA	= $09
   820 = 000A			VESA	= $0A
   821 = 000B			D1BIT	= $0B
   822 = 000C			D2BIT	= $0C
   823 = 000D			D4BIT	= $0D
   824 = 000E			D6BIT	= $0E
   825 = 000F			D8BIT	= $0F
   826 = 0010			D12BIT	= $10
   827 = 0018			M640X400	= $18
   828 = 0018			M640X480	= $18
   829 = 0001			GROK	= $01
   830 = 00FF			GRNOINITGRAPH	= $FF
   831 = 00FE			GRNOTDETECTED	= $FE
   832 = 00FD			GRFILENOTFOUND	= $FD
   833 = 00FC			GRINVALIDDRIVER	= $FC
   834 = 00FB			GRNOLOADMEM	= $FB
   835 = 00FA			GRNOSCANMEM	= $FA
   836 = 00F9			GRNOFLOODMEM	= $F9
   837 = 00F8			GRFONTNOTFOUND	= $F8
   838 = 00F7			GRNOFONTMEM	= $F7
   839 = 00F6			GRINVALIDMODE	= $F6
   840 = 00F5			GRERROR	= $F5
   841 = 00F4			GRIOERROR	= $F4
   842 = 00F3			GRINVALIDFONT	= $F3
   843 = 00F2			GRINVALIDFONTNUM	= $F2
   844 = 00EE			GRINVALIDVERSION	= $EE
   845 = 0000			CGAC0	= $00
   846 = 0001			CGAC1	= $01
   847 = 0002			CGAC2	= $02
   848 = 0003			CGAC3	= $03
   849 = 0004			CGAHI	= $04
   850 = 0000			MCGAC0	= $00
   851 = 0001			MCGAC1	= $01
   852 = 0002			MCGAC2	= $02
   853 = 0003			MCGAC3	= $03
   854 = 0004			MCGAMED	= $04
   855 = 0005			MCGAHI	= $05
   856 = 0000			EGALO	= $00
   857 = 0001			EGAHI	= $01
   858 = 0000			EGA64LO	= $00
   859 = 0001			EGA64HI	= $01
   860 = 0003			EGAMONOHI	= $03
   861 = 000A			VGALO	= $0A
   862 = 001F			VGAMED	= $1F
   863 = 0018			VGAHI	= $18
   864 = 2494			WIN_LEFT	= DATAORIGIN+$000D
   865 = 2496			WIN_RIGHT	= DATAORIGIN+$000F
   866 = 2498			WIN_TOP	= DATAORIGIN+$0011
   867 = 249A			WIN_BOTTOM	= DATAORIGIN+$0013
   868 = 249C			GRAPHRESULT	= DATAORIGIN+$0015
   869 = 249D			GETCOLOR	= DATAORIGIN+$0016
   870 = 249E			adr.LASTARCCOORDS	= DATAORIGIN+$0017
   871 2387			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   872 = 249E			LASTARCCOORDS.X	= DATAORIGIN+$0017
   873 = 24A0			LASTARCCOORDS.Y	= DATAORIGIN+$0019
   874 = 24A2			LASTARCCOORDS.XSTART	= DATAORIGIN+$001B
   875 = 24A4			LASTARCCOORDS.YSTART	= DATAORIGIN+$001D
   876 = 24A6			LASTARCCOORDS.XEND	= DATAORIGIN+$001F
   877 = 24A8			LASTARCCOORDS.YEND	= DATAORIGIN+$0021
   878 = 24AA			CURRENTX	= DATAORIGIN+$0023
   879 = 24AC			CURRENTY	= DATAORIGIN+$0025
   880 = 24AE			VIDEORAM	= DATAORIGIN+$0027
   881 = 24B0			SCANLINE_WIDTH	= DATAORIGIN+$0029
   882
   883 = 2387 9E 24		LASTARCCOORDS
   883 				.endl							; UNIT GRAPH
   884
   885 				; ------------------------------------------------------------
   886
   887 2389			.local	CIO						; UNIT
   888
   889 2389			.local	GET						; FUNCTION | ASSEMBLER
   890
   891 				; ------------------------------------------------------------
   892
   893 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   894 				; as Pointer
   895 2389 B5 98 8D BF 24		mva :STACKORIGIN,x CHN
   896 238E CA				dex
   897
   898 				; ---------------------  ASM Block 095  ---------------------
   899
   900 238F 8A 48			txa:pha
   901
   902 2391 AD BF 24			lda chn
   903 2394 0A 0A 0A 0A			:4 asl @
   904 2398 AA				tax
   905
   906 2399 A9 07			lda #7		;get char command
   907 239B 9D 42 03			sta iccmd,x
   908
   909 239E A9 00			lda #$00	;zero out the unused
   910 23A0 9D 48 03			sta icbufl,x	;store in accumulator
   911 23A3 9D 49 03			sta icbufh,x	;...after CIOV jump
   912
   913 23A6				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 23A6 20 56 E4				jsr CIOV
Source: gr_w1k.a65
   914
   915 23A9 8C 8E 24			sty MAIN.SYSTEM.IOResult
   916
   917 23AC 8D C0 24			sta Result
   918
   919 23AF 68 AA			pla:tax
   920
   921 23B1			@exit
   922
   923 				; ------------------------------------------------------------
   924
   925 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   926 				; as Pointer
   927
   928 23B1 E8				inx
   929 23B2 AD C0 24 95 98		mva RESULT :STACKORIGIN,x
   930
   931 					.ifdef @new
   932 					lda <@VarData
   933 					sta :ztmp
   934 					lda >@VarData
   935 					ldy #@VarDataSize-1
   936 					jmp @FreeMem
   937 					eif
   938
   939 				; ------------------------------------------------------------
   940
   941 = 24BF			CHN	= DATAORIGIN+$0038
   942 = 24C0			RESULT	= DATAORIGIN+$0039
   943
   944 = 24BF			@VarData	= CHN
   945 = 0002			@VarDataSize	= 2
   946
   947 23B7 60				rts						; ret
   948 				.endl
   949
   950 				; ------------------------------------------------------------
   951
   952 				.endl							; UNIT CIO
   953
   954 23B8			.local	LINKAPROC					; PROCEDURE
   955
   956 				; ------------------------------------------------------------
   957
   958 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   959 				; as Pointer
   960 23B8 B5 98 8D C6 25		mva :STACKORIGIN,x Y1
   961 23BD CA				dex
   962
   963 				; ------------------------------------------------------------
   964
   965 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   966 				; as Pointer
   967 23BE B5 98 8D C5 25		mva :STACKORIGIN,x X1
   968 23C3 CA				dex
   969
   970 				; ------------------------------------------------------------
   971
   972 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   973 				; as Pointer
   974 23C4 B5 98 8D C4 25		mva :STACKORIGIN,x Y0
   975 23C9 CA				dex
   976
   977 				; ------------------------------------------------------------
   978
   979 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   980 				; as Pointer
   981 23CA B5 98 8D C3 25		mva :STACKORIGIN,x X0
   982 23CF CA				dex
   983
   984 				; optimize FAIL ('GRAPH.PUTPIXEL_00BD', examples\gr_w1k.pas), line = 21
   985 23D0 E8				inx
   986 23D1 AD C3 25 95 98		mva X0 :STACKORIGIN,x
   987 23D6 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   988 23DA E8				inx
   989 23DB AD C4 25 95 98		mva Y0 :STACKORIGIN,x
   990 23E0 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   991 23E4 20 F3 21			jsr GRAPH.PUTPIXEL_00BD
   992
   993 				; optimize FAIL ('GRAPH.MOVETO', examples\gr_w1k.pas), line = 22
   994 23E7 E8				inx
   995 23E8 AD C3 25 95 98		mva X0 :STACKORIGIN,x
   996 23ED A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   997 23F1 E8				inx
   998 23F2 AD C4 25 95 98		mva Y0 :STACKORIGIN,x
   999 23F7 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1000 23FB 20 4A 22			jsr GRAPH.MOVETO
  1001
  1002 				; optimize FAIL ('GRAPH.LINETO', examples\gr_w1k.pas), line = 23
  1003 23FE E8				inx
  1004 23FF AD C5 25 95 98		mva X1 :STACKORIGIN,x
  1005 2404 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1006 2408 E8				inx
  1007 2409 AD C6 25 95 98		mva Y1 :STACKORIGIN,x
  1008 240E A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1009 2412 20 D5 22			jsr GRAPH.LINETO
  1010
  1011 				; ------------------------------------------------------------
  1012
  1013 = 25C3			X0	= DATAORIGIN+$013C
  1014 = 25C4			Y0	= DATAORIGIN+$013D
  1015 = 25C5			X1	= DATAORIGIN+$013E
  1016 = 25C6			Y1	= DATAORIGIN+$013F
  1017
  1018 = 25C3			@VarData	= X0
  1019 = 0004			@VarDataSize	= 4
  1020
  1021 2415			@exit
  1022 					.ifdef @new
  1023 					lda <@VarData
  1024 					sta :ztmp
  1025 					lda >@VarData
  1026 					ldy #@VarDataSize-1
  1027 					jmp @FreeMem
  1028 					eif
  1029 2415 60				rts						; ret
  1030 				.endl
  1031
  1032 2416			.local	DEMOPROC					; PROCEDURE
  1033
  1034 				; --- For
  1035
  1036 				; optimize OK (examples\gr_w1k.pas), line = 28
  1037
  1038 2416 A9 00 8D C1 25		mva #$00 I
  1039
  1040 				; optimize OK (examples\gr_w1k.pas), line = 28
  1041
  1042 241B			l_0152
  1043 				; --- ForToDoCondition
  1044
  1045 				; optimize OK (examples\gr_w1k.pas), line = 28
  1046
  1047 241B AD C1 25			lda I
  1048 241E C9 50			cmp #$50
  1049 2420 B0 1B			jcs l_0160
  1050
  1051 				; optimize FAIL ('LINKAPROC', examples\gr_w1k.pas), line = 29
  1052 2422 E8				inx
  1053 2423 A9 00 95 98			mva #$00 :STACKORIGIN,x
  1054 2427 E8				inx
  1055 2428 95 98			sta :STACKORIGIN,x
  1056 242A E8				inx
  1057 242B A9 9F 95 98			mva #$9F :STACKORIGIN,x
  1058 242F E8				inx
  1059 2430 AD C1 25 95 98		mva I :STACKORIGIN,x
  1060 2435 20 B8 23			jsr LINKAPROC
  1061
  1062 				; --- ForToDoEpilog
  1063 2438 EE C1 25			inc I						; inc ptr byte [CounterAddress]
  1064 243B D0 DE			jne l_0152
  1065 243D			l_0160
  1066
  1067 				; ------------------------------------------------------------
  1068
  1069 = 004F			@FORTMP_014F	= $4F
  1070 243D			@exit
  1071 					.ifdef @new
  1072 					lda <@VarData
  1073 					sta :ztmp
  1074 					lda >@VarData
  1075 					ldy #@VarDataSize-1
  1076 					jmp @FreeMem
  1077 					eif
  1078 243D 60				rts						; ret
  1079 				.endl
  1080
  1081 243E			.local	HLPROGRAMPROC					; PROCEDURE
  1082
  1083 				; optimize FAIL ('GRAPH.INITGRAPH_00AD', examples\gr_w1k.pas), line = 35
  1084 243E E8				inx
  1085 243F A9 07 95 98			mva #$07 :STACKORIGIN,x
  1086 2443 20 94 21			jsr GRAPH.INITGRAPH_00AD
  1087
  1088 				; optimize FAIL ('GRAPH.SETCOLOR', examples\gr_w1k.pas), line = 36
  1089 2446 E8				inx
  1090 2447 A9 01 95 98			mva #$01 :STACKORIGIN,x
  1091 244B 20 E3 21			jsr GRAPH.SETCOLOR
  1092
  1093 				; optimize FAIL ('DEMOPROC', examples\gr_w1k.pas), line = 37
  1094 244E 20 16 24			jsr DEMOPROC
  1095
  1096 				; optimize FAIL (100, examples\gr_w1k.pas), line = 38
  1097 					@printSTRING #CODEORIGIN+$000D
  1097 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
  1097 2451 A0 20		 LDY> CODEORIGIN+$000D
  1097 2453 A9 0D		 LDA< CODEORIGIN+$000D
  1097 2455 20 13 21		 JSR @PRINTSTRING
  1098 2458 20 05 21			@printEOL
  1099
  1100 				; optimize FAIL ('CIO.GET', examples\gr_w1k.pas), line = 39
  1101 245B E8				inx
  1102 245C A9 07 95 98			mva #$07 :STACKORIGIN,x
  1103 2460 20 89 23			jsr CIO.GET
  1104 2463 B5 98 8D C2 25		mva :STACKORIGIN,x KLAVESA
  1105 2468 CA				dex
  1106
  1107 2469 20 83 21			jsr CRT.READKEY					; call Entry
  1108
  1109 246C CA				dex
  1110 246D			@exit
  1111 					.ifdef @new
  1112 					lda <@VarData
  1113 					sta :ztmp
  1114 					lda >@VarData
  1115 					ldy #@VarDataSize-1
  1116 					jmp @FreeMem
  1117 					eif
  1118 246D 60				rts						; ret
  1119 				.endl
  1120 246E			l_001B
  1121
  1122 				; optimize FAIL ('HLPROGRAMPROC', examples\gr_w1k.pas), line = 44
  1123 246E 20 3E 24			jsr HLPROGRAMPROC
  1124
  1125 				; ------------------------------------------------------------
  1126
  1127 = 24C1			adr.STRBUFFER	= DATAORIGIN+$003A
  1128 2471			.var STRBUFFER	= adr.STRBUFFER .word
  1129 = 25C1			I	= DATAORIGIN+$013A
  1130 = 25C2			KLAVESA	= DATAORIGIN+$013B
  1131 2471			@exit
  1132
  1133 2471 A2 00		@halt	ldx #0
  1134 2473 9A				txs
  1135 					.ifdef MAIN.@DEFINES.ROMOFF
  1136 					inc portb
  1137 					.endif
  1138
  1139 2474 60				rts
  1140
  1141 				; ------------------------------------------------------------
  1142
  1143 2475 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1144
  1145 				; ------------------------------------------------------------
  1146
  1147 2485			.local	@DEFINES
  1148 2485			ATARI
  1149 				.endl
  1150
  1151 = 2485 C1 24		STRBUFFER
  1151 				.endl							; MAIN
  1152
  1153 				; ------------------------------------------------------------
  1154 				; ------------------------------------------------------------
  1155
  1156 				.macro	UNITINITIALIZATION
  1157 				
  1158 					.ifdef MAIN.SYSTEM.@UnitInit
  1159 					jsr MAIN.SYSTEM.@UnitInit
  1160 					eif
  1161 				
  1162 					.ifdef MAIN.ATARI.@UnitInit
  1163 					jsr MAIN.ATARI.@UnitInit
  1164 					eif
  1165 				
  1166 					.ifdef MAIN.CRT.@UnitInit
  1167 					jsr MAIN.CRT.@UnitInit
  1168 					eif
  1169 				
  1170 					.ifdef MAIN.DOS.@UnitInit
  1171 					jsr MAIN.DOS.@UnitInit
  1172 					eif
  1173 				
  1174 					.ifdef MAIN.STRUTILS.@UnitInit
  1175 					jsr MAIN.STRUTILS.@UnitInit
  1176 					eif
  1177 				
  1178 					.ifdef MAIN.SYSUTILS.@UnitInit
  1179 					jsr MAIN.SYSUTILS.@UnitInit
  1180 					eif
  1181 				
  1182 					.ifdef MAIN.TYPES.@UnitInit
  1183 					jsr MAIN.TYPES.@UnitInit
  1184 					eif
  1185 				
  1186 					.ifdef MAIN.GRAPH.@UnitInit
  1187 					jsr MAIN.GRAPH.@UnitInit
  1188 					eif
  1189 				
  1190 					.ifdef MAIN.CIO.@UnitInit
  1191 					jsr MAIN.CIO.@UnitInit
  1192 					eif
  1193 				.endm
  1194
  1195 				; ------------------------------------------------------------
  1196
  1197 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1198 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1198 				SYSTEM: $217F..$2182
  1199 					eif
  1200
  1201 					ift .SIZEOF(MAIN.ATARI) > 0
  1202 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1203 					eif
  1204
  1205 					ift .SIZEOF(MAIN.CRT) > 0
  1206 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1206 				CRT: $2183..$2193
  1207 					eif
  1208
  1209 					ift .SIZEOF(MAIN.DOS) > 0
  1210 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
  1211 					eif
  1212
  1213 					ift .SIZEOF(MAIN.STRUTILS) > 0
  1214 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
  1215 					eif
  1216
  1217 					ift .SIZEOF(MAIN.SYSUTILS) > 0
  1218 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
  1219 					eif
  1220
  1221 					ift .SIZEOF(MAIN.TYPES) > 0
  1222 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
  1223 					eif
  1224
  1225 					ift .SIZEOF(MAIN.GRAPH) > 0
  1226 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
  1226 				GRAPH: $2194..$2388
  1227 					eif
  1228
  1229 					ift .SIZEOF(MAIN.CIO) > 0
  1230 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
  1230 				CIO: $2389..$23B7
  1231 					eif
  1232
  1233 					.print 'CODE: ',CODEORIGIN,'..',*-1
  1233 				CODE: $2000..$2486
  1234
  1235 				; ------------------------------------------------------------
  1236
  1237 2487			DATAORIGIN
  1238 2487 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $27  $00 $00 $00 $17
  1239
  1240 = 0014			VARINITSIZE	= *-DATAORIGIN
  1241 = 0140			VARDATASIZE	= 320
  1242
  1243 = 25C7			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1244
  1245 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1245 				DATA: $2487..$25C7
  1246
  1247 02E0-02E1> 42 21			run START
  1248
  1249 				; ------------------------------------------------------------
  1250
  1251 				.macro	STATICDATA
  1252 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $05 $53 $54  $4C $41 $43 $00
  1253 				.endm
  1254
  1255 					end
