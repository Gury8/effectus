mads 2.1.0 build 8 (23 Dec 19)
   388 					opt l+
   101
   102 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   102 				ZPAGE: $0080..$00D7
   103
   104 				.print 'RTLIB: ',RTLIB,'..',*-1
   104 				RTLIB: $2019..$21F2
   105
   106 				; ------------------------------------------------------------
   107
   108 21F3			START
   109 21F3 BA				tsx
   110 21F4 8E 89 23			stx MAIN.@halt+1
   111
   112 					.ifdef fmulinit
   113 					fmulinit
   114 					eif
   115
   116 = 011F			VLEN	= VARDATASIZE-VARINITSIZE
   117 = 23B2			VADR	= DATAORIGIN+VARINITSIZE
   118
   119 					ift VADR > $BFFF
   120 					ert 'Invalid memory address range ',VADR
   121 					eli (VLEN>0) && (VLEN<=256)
   122 					ldx #256-VLEN
   123 					lda #0
   124 					sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>0
   126 					@fill #VADR #VLEN #0
   126 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   126 21F7 A9 B2 85 88 A9 23 +  MWA #VADR @FILL.PTR1
   126 21FF A9 1F 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   126 2207 A9 00 85 84		 MVA #0 @FILL.PTR2
   126 220B 20 C2 20		 JSR @FILL
   127 					eif
   128
   129 					.ifdef MAIN.@DEFINES.ROMOFF
   130 					icl 'atari\romoff.asm'
   131 					.endif
   132
   133 220E A9 D1 85 82 A9 24 + 	mwa #PROGRAMSTACK psptr
   134
   135 2216 A2 0F			ldx #$0f					; DOS II+/D ParamStr
   136 2218 BD 40 03 9D 8C 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   137
   138 2221 E8				inx						; X = 0
   139 2222 86 90			stx bp						; BP = 0
   140
   141 2224 8E 08 D2			stx audctl					; reset POKEY
   142 2227 A9 03			lda #3
   143 2229 8D 0F D2			sta skctl
   144
   145 222C CA				dex						; X = 255
   146
   147 222D				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: fillscr.a65]
Source: fillscr.a65
   148
   149 222D			.local	MAIN						; PROCEDURE
   150
   151 222D 4C 85 23			jmp l_0020
   152
   153 				; ------------------------------------------------------------
   154
   155 2230			.local	SYSTEM						; UNIT
   156
   157 2230			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   158
   159 				; ------------------------------------------------------------
   160
   161 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   162 				; as Pointer
   163 2230 B5 98 85 8C			mva :STACKORIGIN,x VALUE
   164 2234 CA				dex
   165
   166 				; ------------------------------------------------------------
   167
   168 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   169 				; as Pointer
   170 2235 B5 98 85 88			mva :STACKORIGIN,x A
   171 2239 B5 A8 85 89			mva :STACKORIGIN+STACKWIDTH,x A+1
   172 223D CA				dex
   173
   174 				; ---------------------  ASM Block 021  ---------------------
   175
   176 223E A0 00			ldy #0
   177 2240 A5 8C 91 88			mva value (edx),y
   178
   179
   180 				; ------------------------------------------------------------
   181
   182 = 0088			A	= edx
   183 = 008C			VALUE	= ecx
   184 2244			@exit
   185 					.ifdef @new
   186 					lda <@VarData
   187 					sta :ztmp
   188 					lda >@VarData
   189 					ldy #@VarDataSize-1
   190 					jmp @FreeMem
   191 					eif
   192 2244 60				rts						; ret
   193 				.endl
   194
   195 				; ------------------------------------------------------------
   196
   197 = 0101			__PORTB_BANKS	= $0101
   198 = 0648			M_PI_2	= $0648
   199 = 0192			D_PI_2	= $0192
   200 = 0004			D_PI_180	= $04
   201 = 0000			MGTIA	= $00
   202 = 0080			MVBXE	= $80
   203 = 0000			VBXE_XDLADR	= $00
   204 = 0100			VBXE_BCBADR	= $0100
   205 = 1000			VBXE_MAPADR	= $1000
   206 = 5000			VBXE_OVRADR	= $5000
   207 = B000			VBXE_WINDOW	= $B000
   208 = 0000			IDLI	= $00
   209 = 0001			IVBL	= $01
   210 = 00FE			CH_DELCHR	= $FE
   211 = 009B			CH_ENTER	= $9B
   212 = 001B			CH_ESC	= $1B
   213 = 001C			CH_CURS_UP	= $1C
   214 = 001D			CH_CURS_DOWN	= $1D
   215 = 001E			CH_CURS_LEFT	= $1E
   216 = 001F			CH_CURS_RIGHT	= $1F
   217 = 007F			CH_TAB	= $7F
   218 = 009B			CH_EOL	= $9B
   219 = 007D			CH_CLR	= $7D
   220 = 00FD			CH_BELL	= $FD
   221 = 007E			CH_DEL	= $7E
   222 = 009C			CH_DELLINE	= $9C
   223 = 009D			CH_INSLINE	= $9D
   224 = 0000			COLOR_BLACK	= $00
   225 = 000E			COLOR_WHITE	= $0E
   226 = 0032			COLOR_RED	= $32
   227 = 0096			COLOR_CYAN	= $96
   228 = 0068			COLOR_VIOLET	= $68
   229 = 00C4			COLOR_GREEN	= $C4
   230 = 0074			COLOR_BLUE	= $74
   231 = 00EE			COLOR_YELLOW	= $EE
   232 = 0028			COLOR_ORANGE	= $28
   233 = 00E4			COLOR_BROWN	= $E4
   234 = 003C			COLOR_LIGHTRED	= $3C
   235 = 0004			COLOR_GRAY1	= $04
   236 = 0006			COLOR_GRAY2	= $06
   237 = 000A			COLOR_GRAY3	= $0A
   238 = 00CC			COLOR_LIGHTGREEN	= $CC
   239 = 007C			COLOR_LIGHTBLUE	= $7C
   240 = 0004			FMOPENREAD	= $04
   241 = 0008			FMOPENWRITE	= $08
   242 = 0009			FMOPENAPPEND	= $09
   243 = 000C			FMOPENREADWRITE	= $0C
   244 = 239E			SCREENWIDTH	= DATAORIGIN+$0000
   245 = 23A0			SCREENHEIGHT	= DATAORIGIN+$0002
   246 = 23A2			DATESEPARATOR	= DATAORIGIN+$0004
   247 = D014			TVSYSTEM	= $D014
   248 = 02C0			adr.PALETTE	= $02C0
   249 2245			.var PALETTE	= adr.PALETTE .word
   250 = D012			adr.HPALETTE	= $D012
   251 2245			.var HPALETTE	= adr.HPALETTE .word
   252 = 23A3			FILEMODE	= DATAORIGIN+$0005
   253 = 23A4			GRAPHMODE	= DATAORIGIN+$0006
   254 = 23A5			IORESULT	= DATAORIGIN+$0007
   255 = 23A6			EOLN	= DATAORIGIN+$0008
   256 = 23A7			RNDSEED	= DATAORIGIN+$0009
   257
   258 = 2245 C0 02		PALETTE
   258 = 2247 12 D0		HPALETTE
   258 				.endl							; UNIT SYSTEM
   259
   260 				; ------------------------------------------------------------
   261
   262 2249			.local	ATARI						; UNIT
   263
   264 				; ------------------------------------------------------------
   265
   266 = 0012			RTCLOK	= $12
   267 = 004D			ATRACT	= $4D
   268 = 0052			LMARGIN	= $52
   269 = 0053			RMARGIN	= $53
   270 = 0054			ROWCRS	= $54
   271 = 0055			COLCRS	= $55
   272 = 0057			DINDEX	= $57
   273 = 0058			SAVMSC	= $58
   274 = 0062			PALNTS	= $62
   275 = 006A			RAMTOP	= $6A
   276 = 0200			VDSLST	= $0200
   277 = 0230			SDLSTL	= $0230
   278 = 0290			TXTROW	= $0290
   279 = 0291			TXTCOL	= $0291
   280 = 0293			TINDEX	= $0293
   281 = 0294			TXTMSC	= $0294
   282 = 022F			SDMCTL	= $022F
   283 = 026F			GPRIOR	= $026F
   284 = 02F0			CRSINH	= $02F0
   285 = 02F3			CHACT	= $02F3
   286 = 02F4			CHBAS	= $02F4
   287 = 02FC			CH	= $02FC
   288 = 02C0			PCOLR0	= $02C0
   289 = 02C1			PCOLR1	= $02C1
   290 = 02C2			PCOLR2	= $02C2
   291 = 02C3			PCOLR3	= $02C3
   292 = 02C4			COLOR0	= $02C4
   293 = 02C5			COLOR1	= $02C5
   294 = 02C6			COLOR2	= $02C6
   295 = 02C7			COLOR3	= $02C7
   296 = 02C8			COLOR4	= $02C8
   297 = 02C8			COLBAKS	= $02C8
   298 = D000			HPOSP0	= $D000
   299 = D001			HPOSP1	= $D001
   300 = D002			HPOSP2	= $D002
   301 = D003			HPOSP3	= $D003
   302 = D004			HPOSM0	= $D004
   303 = D005			HPOSM1	= $D005
   304 = D006			HPOSM2	= $D006
   305 = D007			HPOSM3	= $D007
   306 = D008			SIZEP0	= $D008
   307 = D009			SIZEP1	= $D009
   308 = D00A			SIZEP2	= $D00A
   309 = D00B			SIZEP3	= $D00B
   310 = D00C			SIZEM	= $D00C
   311 = D00D			GRAFP0	= $D00D
   312 = D00E			GRAFP1	= $D00E
   313 = D00F			GRAFP2	= $D00F
   314 = D010			GRAFP3	= $D010
   315 = D011			GRAFM	= $D011
   316 = D004			P0PF	= $D004
   317 = D014			PAL	= $D014
   318 = D012			COLPM0	= $D012
   319 = D013			COLPM1	= $D013
   320 = D014			COLPM2	= $D014
   321 = D015			COLPM3	= $D015
   322 = D016			COLPF0	= $D016
   323 = D017			COLPF1	= $D017
   324 = D018			COLPF2	= $D018
   325 = D019			COLPF3	= $D019
   326 = D01A			COLBK	= $D01A
   327 = D01B			PRIOR	= $D01B
   328 = D01D			GRACTL	= $D01D
   329 = D01E			HITCLR	= $D01E
   330 = D200			AUDF1	= $D200
   331 = D201			AUDC1	= $D201
   332 = D202			AUDF2	= $D202
   333 = D203			AUDC2	= $D203
   334 = D204			AUDF3	= $D204
   335 = D205			AUDC3	= $D205
   336 = D206			AUDF4	= $D206
   337 = D207			AUDC4	= $D207
   338 = D208			AUDCTL	= $D208
   339 = D20F			SKSTAT	= $D20F
   340 = D301			PORTB	= $D301
   341 = D400			DMACTL	= $D400
   342 = D401			CHACTL	= $D401
   343 = D402			DLISTL	= $D402
   344 = D404			HSCROL	= $D404
   345 = D405			VSCROL	= $D405
   346 = D407			PMBASE	= $D407
   347 = D409			CHBASE	= $D409
   348 = D40A			WSYNC	= $D40A
   349 = D40B			VCOUNT	= $D40B
   350 = D40C			PENH	= $D40C
   351 = D40D			PENV	= $D40D
   352 = D40E			NMIEN	= $D40E
   353
   354 				.endl							; UNIT ATARI
   355
   356 				; ------------------------------------------------------------
   357
   358 2249			.local	CRT						; UNIT
   359
   360 2249			.local	READKEY						; FUNCTION | ASSEMBLER
   361
   362 				; ---------------------  ASM Block 049  ---------------------
   363
   364 2249 8A 48			txa:pha
   365
   366 224B 20 19 20			@GetKey
   367
   368 224E 8D AA 23			sta Result
   369
   370 2251 68 AA			pla:tax
   371
   372 2253			@exit
   373
   374 				; ------------------------------------------------------------
   375
   376 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   377 				; as Pointer
   378
   379 2253 E8				inx
   380 2254 AD AA 23 95 98		mva RESULT :STACKORIGIN,x
   381
   382 					.ifdef @new
   383 					lda <@VarData
   384 					sta :ztmp
   385 					lda >@VarData
   386 					ldy #@VarDataSize-1
   387 					jmp @FreeMem
   388 					eif
   389
   390 				; ------------------------------------------------------------
   391
   392 = 23AA			RESULT	= DATAORIGIN+$000C
   393
   394 = 23AA			@VarData	= RESULT
   395 = 0001			@VarDataSize	= 1
   396
   397 2259 60				rts						; ret
   398 				.endl
   399
   400 				; ------------------------------------------------------------
   401
   402 = 23A9			TEXTATTR	= DATAORIGIN+$000B
   403 = D01F			CONSOL	= $D01F
   404 = 0000			CN_START_SELECT_OPTION	= $00
   405 = 0001			CN_SELECT_OPTION	= $01
   406 = 0002			CN_START_OPTION	= $02
   407 = 0003			CN_OPTION	= $03
   408 = 0004			CN_START_SELECT	= $04
   409 = 0005			CN_SELECT	= $05
   410 = 0006			CN_START	= $06
   411 = 0007			CN_NONE	= $07
   412 = 0000			BW40	= $00
   413 = 0001			CO40	= $01
   414 = 0002			BW80	= $02
   415 = 0003			CO80	= $03
   416 = 0007			MONO	= $07
   417 = 0001			C40	= $01
   418 = 0003			C80	= $03
   419 = 0000			BLACK	= $00
   420 = 0001			BLUE	= $01
   421 = 0002			GREEN	= $02
   422 = 0003			CYAN	= $03
   423 = 0004			RED	= $04
   424 = 0005			MAGENTA	= $05
   425 = 0006			BROWN	= $06
   426 = 0007			LIGHTGRAY	= $07
   427 = 0008			DARKGRAY	= $08
   428 = 0009			LIGHTBLUE	= $09
   429 = 000A			LIGHTGREEN	= $0A
   430 = 000B			LIGHTCYAN	= $0B
   431 = 000C			LIGHTRED	= $0C
   432 = 000D			LIGHTMAGENTA	= $0D
   433 = 000E			YELLOW	= $0E
   434 = 000F			WHITE	= $0F
   435 = 0080			BLINK	= $80
   436
   437 				.endl							; UNIT CRT
   438
   439 				; ------------------------------------------------------------
   440
   441 225A			.local	DOS						; UNIT
   442
   443 				; ------------------------------------------------------------
   444
   445 = D014			PALNTSC	= $D014
   446
   447 				.endl							; UNIT DOS
   448
   449 				; ------------------------------------------------------------
   450
   451 225A			.local	STRUTILS					; UNIT
   452
   453 				; ------------------------------------------------------------
   454
   455 				.endl							; UNIT STRUTILS
   456
   457 				; ------------------------------------------------------------
   458
   459 225A			.local	SYSUTILS					; UNIT
   460
   461 				; ------------------------------------------------------------
   462
   463 = 0001			FAREADONLY	= $01
   464 = 0002			FAHIDDEN	= $02
   465 = 0004			FASYSFILE	= $04
   466 = 0008			FAVOLUMEID	= $08
   467 = 0010			FADIRECTORY	= $10
   468 = 0020			FAARCHIVE	= $20
   469 = 003F			FAANYFILE	= $3F
   470
   471 				.endl							; UNIT SYSUTILS
   472
   473 				; ------------------------------------------------------------
   474
   475 225A			.local	TYPES						; UNIT
   476
   477 				; ------------------------------------------------------------
   478
   479 				.endl							; UNIT TYPES
   480
   481 				; ------------------------------------------------------------
   482
   483 225A			.local	GRAPH						; UNIT
   484
   485 225A			.local	INITGRAPH_00B9					; PROCEDURE | OVERLOAD
   486
   487 				; ------------------------------------------------------------
   488
   489 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   490 				; as Pointer
   491 225A B5 98 8D C8 23		mva :STACKORIGIN,x MODE
   492 225F CA				dex
   493
   494 				; ---------------------  ASM Block 078  ---------------------
   495
   496
   497 2260 8A 48			txa:pha
   498
   499 2262 AD C8 23			lda mode
   500 2265 8D A4 23			sta MAIN.SYSTEM.GraphMode
   501 2268 29 0F			and #$0f
   502 226A A8				tay
   503
   504 226B A2 60			ldx #$60		; 6*16
   505 226D AD C8 23			lda mode		; %00010000 with text window
   506 2270 29 10			and #$10
   507 2272 49 10			eor #$10
   508 2274 09 02			ora #2			; read
   509
   510 					.nowarn @GRAPHICS
   510 2276 20 5A 20		 JSR @GRAPHICS
   511
   512 2279 8C B3 23			sty GraphResult
   513
   514
   515 					.ifdef MAIN.@DEFINES.ROMOFF
   516 					inc portb
   517 					.endif
   518
   519 = EE6D			tlshc	equ $ee6d
   520
   521 227C A6 57			ldx dindex
   522 227E BC 6D EE			ldy tlshc,x
   523 2281 A9 05			lda #5
   524 2283 0A			shift	asl @
   525 2284 88				dey
   526 2285 D0 FC			bne shift
   527
   528 2287 8D C7 23			sta SCANLINE_WIDTH
   529
   530 				; Fox/TQA
   531
   532 = 0057			dindex	equ $57
   533 = EE7D			tmccn	equ $ee7d
   534 = EE8D			tmrcn	equ $ee8d
   535
   536 228A A6 57			ldx dindex
   537 228C BD 7D EE			lda tmccn,x
   538 228F BC 8D EE			ldy tmrcn,x
   539 2292 A2 00			ldx #0
   540 2294 C9 40			cmp #<320
   541 2296 D0 01 E8			sne:inx
   542
   543 				; X:A = horizontal resolution
   544 				; Y = vertical resolution
   545
   546 2299 20 94 20			@SCREENSIZE
   547
   548 					.ifdef MAIN.@DEFINES.ROMOFF
   549 					dec portb
   550 					.endif
   551
   552 229C 68 AA			pla:tax
   553
   554
   555 				; optimize OK (GRAPH), line = 132
   556
   557 229E A5 58 8D C5 23		mva ATARI.SAVMSC VIDEORAM
   558 22A3 A5 59 8D C6 23		mva ATARI.SAVMSC+1 VIDEORAM+1
   559
   560 				; ------------------------------------------------------------
   561
   562 = 23C8			MODE	= DATAORIGIN+$002A
   563
   564 = 23C8			@VarData	= MODE
   565 = 0001			@VarDataSize	= 1
   566
   567 22A8			@exit
   568 					.ifdef @new
   569 					lda <@VarData
   570 					sta :ztmp
   571 					lda >@VarData
   572 					ldy #@VarDataSize-1
   573 					jmp @FreeMem
   574 					eif
   575 22A8 60				rts						; ret
   576 				.endl
   577
   578 				; ------------------------------------------------------------
   579
   580 = 0080			CURRENTDRIVER	= $80
   581 = 0000			DETECT	= $00
   582 = 0001			CGA	= $01
   583 = 0002			MCGA	= $02
   584 = 0003			EGA	= $03
   585 = 0004			EGA64	= $04
   586 = 0005			EGAMONO	= $05
   587 = 0006			LOWRES	= $06
   588 = 0007			HERCMONO	= $07
   589 = 0009			VGA	= $09
   590 = 000A			VESA	= $0A
   591 = 000B			D1BIT	= $0B
   592 = 000C			D2BIT	= $0C
   593 = 000D			D4BIT	= $0D
   594 = 000E			D6BIT	= $0E
   595 = 000F			D8BIT	= $0F
   596 = 0010			D12BIT	= $10
   597 = 0018			M640X400	= $18
   598 = 0018			M640X480	= $18
   599 = 0001			GROK	= $01
   600 = 00FF			GRNOINITGRAPH	= $FF
   601 = 00FE			GRNOTDETECTED	= $FE
   602 = 00FD			GRFILENOTFOUND	= $FD
   603 = 00FC			GRINVALIDDRIVER	= $FC
   604 = 00FB			GRNOLOADMEM	= $FB
   605 = 00FA			GRNOSCANMEM	= $FA
   606 = 00F9			GRNOFLOODMEM	= $F9
   607 = 00F8			GRFONTNOTFOUND	= $F8
   608 = 00F7			GRNOFONTMEM	= $F7
   609 = 00F6			GRINVALIDMODE	= $F6
   610 = 00F5			GRERROR	= $F5
   611 = 00F4			GRIOERROR	= $F4
   612 = 00F3			GRINVALIDFONT	= $F3
   613 = 00F2			GRINVALIDFONTNUM	= $F2
   614 = 00EE			GRINVALIDVERSION	= $EE
   615 = 0000			CGAC0	= $00
   616 = 0001			CGAC1	= $01
   617 = 0002			CGAC2	= $02
   618 = 0003			CGAC3	= $03
   619 = 0004			CGAHI	= $04
   620 = 0000			MCGAC0	= $00
   621 = 0001			MCGAC1	= $01
   622 = 0002			MCGAC2	= $02
   623 = 0003			MCGAC3	= $03
   624 = 0004			MCGAMED	= $04
   625 = 0005			MCGAHI	= $05
   626 = 0000			EGALO	= $00
   627 = 0001			EGAHI	= $01
   628 = 0000			EGA64LO	= $00
   629 = 0001			EGA64HI	= $01
   630 = 0003			EGAMONOHI	= $03
   631 = 000A			VGALO	= $0A
   632 = 001F			VGAMED	= $1F
   633 = 0018			VGAHI	= $18
   634 = 23AB			WIN_LEFT	= DATAORIGIN+$000D
   635 = 23AD			WIN_RIGHT	= DATAORIGIN+$000F
   636 = 23AF			WIN_TOP	= DATAORIGIN+$0011
   637 = 23B1			WIN_BOTTOM	= DATAORIGIN+$0013
   638 = 23B3			GRAPHRESULT	= DATAORIGIN+$0015
   639 = 23B4			GETCOLOR	= DATAORIGIN+$0016
   640 = 23B5			adr.LASTARCCOORDS	= DATAORIGIN+$0017
   641 22A9			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   642 = 23B5			LASTARCCOORDS.X	= DATAORIGIN+$0017
   643 = 23B7			LASTARCCOORDS.Y	= DATAORIGIN+$0019
   644 = 23B9			LASTARCCOORDS.XSTART	= DATAORIGIN+$001B
   645 = 23BB			LASTARCCOORDS.YSTART	= DATAORIGIN+$001D
   646 = 23BD			LASTARCCOORDS.XEND	= DATAORIGIN+$001F
   647 = 23BF			LASTARCCOORDS.YEND	= DATAORIGIN+$0021
   648 = 23C1			CURRENTX	= DATAORIGIN+$0023
   649 = 23C3			CURRENTY	= DATAORIGIN+$0025
   650 = 23C5			VIDEORAM	= DATAORIGIN+$0027
   651 = 23C7			SCANLINE_WIDTH	= DATAORIGIN+$0029
   652
   653 = 22A9 B5 23		LASTARCCOORDS
   653 				.endl							; UNIT GRAPH
   654
   655 				; ------------------------------------------------------------
   656
   657 22AB			.local	CIO						; UNIT
   658
   659 22AB			.local	GET						; FUNCTION | ASSEMBLER
   660
   661 				; ------------------------------------------------------------
   662
   663 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   664 				; as Pointer
   665 22AB B5 98 8D C9 23		mva :STACKORIGIN,x CHN
   666 22B0 CA				dex
   667
   668 				; ---------------------  ASM Block 095  ---------------------
   669
   670 22B1 8A 48			txa:pha
   671
   672 22B3 AD C9 23			lda chn
   673 22B6 0A 0A 0A 0A			:4 asl @
   674 22BA AA				tax
   675
   676 22BB A9 07			lda #7		;get char command
   677 22BD 9D 42 03			sta iccmd,x
   678
   679 22C0 A9 00			lda #$00	;zero out the unused
   680 22C2 9D 48 03			sta icbufl,x	;store in accumulator
   681 22C5 9D 49 03			sta icbufh,x	;...after CIOV jump
   682
   683 22C8				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 22C8 20 56 E4				jsr CIOV
Source: fillscr.a65
   684
   685 22CB 8C A5 23			sty MAIN.SYSTEM.IOResult
   686
   687 22CE 8D CA 23			sta Result
   688
   689 22D1 68 AA			pla:tax
   690
   691 22D3			@exit
   692
   693 				; ------------------------------------------------------------
   694
   695 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   696 				; as Pointer
   697
   698 22D3 E8				inx
   699 22D4 AD CA 23 95 98		mva RESULT :STACKORIGIN,x
   700
   701 					.ifdef @new
   702 					lda <@VarData
   703 					sta :ztmp
   704 					lda >@VarData
   705 					ldy #@VarDataSize-1
   706 					jmp @FreeMem
   707 					eif
   708
   709 				; ------------------------------------------------------------
   710
   711 = 23C9			CHN	= DATAORIGIN+$002B
   712 = 23CA			RESULT	= DATAORIGIN+$002C
   713
   714 = 23C9			@VarData	= CHN
   715 = 0002			@VarDataSize	= 2
   716
   717 22D9 60				rts						; ret
   718 				.endl
   719
   720 				; ------------------------------------------------------------
   721
   722 				.endl							; UNIT CIO
   723
   724 22DA			.local	BENCHPROC					; PROCEDURE
   725
   726 				; optimize FAIL ('GRAPH.INITGRAPH_00B9', examples\fillscr.pas), line = 24
   727 22DA E8				inx
   728 22DB A9 18 95 98			mva #$18 :STACKORIGIN,x
   729 22DF 20 5A 22			jsr GRAPH.INITGRAPH_00B9
   730
   731 				; optimize OK (examples\fillscr.pas), line = 25
   732
   733 22E2 A9 00 85 14			mva #$00 RTCLOCK
   734
   735 				; optimize OK (examples\fillscr.pas), line = 26
   736
   737 22E6 A5 59			lda SAVMSCH
   738 22E8 85 8C			sta :ecx
   739 22EA A9 00			lda #$00
   740 22EC 85 8D			sta :ecx+1
   741 22EE 85 84			sta :eax
   742 22F0 A9 01			lda #$01
   743 22F2 85 85			sta :eax+1
   744 					.ifdef fmulinit
   745 					fmulu_16
   746 					els
   747 22F4 20 0A 21			imulCX
   748 					eif
   749 22F7 A5 58			lda SAVMSCL
   750 22F9 18 65 84			add :eax
   751 22FC 8D CF 24			sta SCREEN
   752 22FF A9 00			lda #$00
   753 2301 65 85			adc :eax+1
   754 2303 8D D0 24			sta SCREEN+1
   755 				; --- For
   756
   757 				; optimize OK (examples\fillscr.pas), line = 27
   758
   759 2306 A9 00 8D CB 24		mva #$00 I
   760
   761 				; optimize OK (examples\fillscr.pas), line = 27
   762
   763 230B			l_0136
   764 				; --- ForToDoCondition
   765
   766 				; optimize OK (examples\fillscr.pas), line = 27
   767
   768 230B AD CB 24			lda I
   769 230E C9 20			cmp #$20
   770 2310 B0 35			jcs l_0144
   771 				; --- For
   772
   773 				; optimize OK (examples\fillscr.pas), line = 28
   774
   775 2312 A9 00 8D CC 24		mva #$00 J
   776
   777 				; optimize OK (examples\fillscr.pas), line = 28
   778
   779 2317			l_014D
   780 				; --- ForToDoCondition
   781
   782 				; optimize OK (examples\fillscr.pas), line = 28
   783
   784 2317 AD CC 24			lda J
   785 231A C9 F0			cmp #$F0
   786 231C B0 16			jcs l_015B
   787
   788 				; optimize OK (examples\fillscr.pas), line = 29
   789
   790 231E AC CF 24 84 92 AC + 	mwy SCREEN :bp2
   791 2328 AC CC 24			ldy J
   792 232B A9 FF			lda #$FF
   793 232D 91 92			sta (:bp2),y
   794
   795 				; --- ForToDoEpilog
   796 232F EE CC 24			inc J						; inc ptr byte [CounterAddress]
   797 2332 D0 E3			jne l_014D
   798 2334			l_015B
   799
   800 				; optimize OK (examples\fillscr.pas), line = 31
   801
   802 2334 AD CF 24			lda SCREEN
   803 2337 18 69 F0			add #$F0
   804 233A 8D CF 24			sta SCREEN
   805 233D 90 03			scc
   806 233F EE D0 24			inc SCREEN+1
   807
   808 				; --- ForToDoEpilog
   809 2342 EE CB 24			inc I						; inc ptr byte [CounterAddress]
   810 2345 D0 C4			jne l_0136
   811 2347			l_0144
   812
   813 				; optimize OK (examples\fillscr.pas), line = 33
   814
   815 2347 A5 14 8D CD 24		mva RTCLOCK TIME
   816
   817 				; optimize FAIL ('GRAPH.INITGRAPH_00B9', examples\fillscr.pas), line = 34
   818 234C E8				inx
   819 234D A9 00 95 98			mva #$00 :STACKORIGIN,x
   820 2351 20 5A 22			jsr GRAPH.INITGRAPH_00B9
   821
   822 				; optimize FAIL (100, examples\fillscr.pas), line = 35
   823 					@printSTRING #CODEORIGIN+$000D
   823 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   823 2354 A0 20		 LDY> CODEORIGIN+$000D
   823 2356 A9 0D		 LDA< CODEORIGIN+$000D
   823 2358 20 37 21		 JSR @PRINTSTRING
   824 					@print #$9B
   824 				 LDY# $9B\ JSR @PRINT
   824 235B A0 9B		 LDY# $9B
   824 235D 20 2E 21		 JSR @PRINT
   825 					@print #$20
   825 				 LDY# $20\ JSR @PRINT
   825 2360 A0 20		 LDY# $20
   825 2362 20 2E 21		 JSR @PRINT
   826 2365 AD CD 24			lda TIME
   827 2368 20 68 21			jsr @printBYTE._a
   828 					@printSTRING #CODEORIGIN+$000F
   828 				 LDY> CODEORIGIN+$000F\ LDA< CODEORIGIN+$000F\ JSR @PRINTSTRING
   828 236B A0 20		 LDY> CODEORIGIN+$000F
   828 236D A9 0F		 LDA< CODEORIGIN+$000F
   828 236F 20 37 21		 JSR @PRINTSTRING
   829
   830 				; optimize FAIL ('CIO.GET', examples\fillscr.pas), line = 36
   831 2372 E8				inx
   832 2373 A9 07 95 98			mva #$07 :STACKORIGIN,x
   833 2377 20 AB 22			jsr CIO.GET
   834 237A B5 98 8D CE 24		mva :STACKORIGIN,x KEY
   835 237F CA				dex
   836
   837 2380 20 49 22			jsr CRT.READKEY					; call Entry
   838
   839 2383 CA				dex
   840
   841 				; ------------------------------------------------------------
   842
   843 = 001F			@FORTMP_0133	= $1F
   844 = 00EF			@FORTMP_014A	= $EF
   845 2384			@exit
   846 					.ifdef @new
   847 					lda <@VarData
   848 					sta :ztmp
   849 					lda >@VarData
   850 					ldy #@VarDataSize-1
   851 					jmp @FreeMem
   852 					eif
   853 2384 60				rts						; ret
   854 				.endl
   855 2385			l_0020
   856
   857 				; optimize FAIL ('BENCHPROC', examples\fillscr.pas), line = 41
   858 2385 20 DA 22			jsr BENCHPROC
   859
   860 				; ------------------------------------------------------------
   861
   862 = 23CB			adr.STRBUFFER	= DATAORIGIN+$002D
   863 2388			.var STRBUFFER	= adr.STRBUFFER .word
   864 = 0014			RTCLOCK	= $14
   865 = 0058			SAVMSCL	= $58
   866 = 0059			SAVMSCH	= $59
   867 = 24CB			I	= DATAORIGIN+$012D
   868 = 24CC			J	= DATAORIGIN+$012E
   869 = 24CD			TIME	= DATAORIGIN+$012F
   870 = 24CE			KEY	= DATAORIGIN+$0130
   871 = 24CF			SCREEN	= DATAORIGIN+$0131
   872 2388			@exit
   873
   874 2388 A2 00		@halt	ldx #0
   875 238A 9A				txs
   876 					.ifdef MAIN.@DEFINES.ROMOFF
   877 					inc portb
   878 					.endif
   879
   880 238B 60				rts
   881
   882 				; ------------------------------------------------------------
   883
   884 238C 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   885
   886 				; ------------------------------------------------------------
   887
   888 239C			.local	@DEFINES
   889 239C			ATARI
   890 				.endl
   891
   892 = 239C CB 23		STRBUFFER
   892 				.endl							; MAIN
   893
   894 				; ------------------------------------------------------------
   895 				; ------------------------------------------------------------
   896
   897 				.macro	UNITINITIALIZATION
   898 				
   899 					.ifdef MAIN.SYSTEM.@UnitInit
   900 					jsr MAIN.SYSTEM.@UnitInit
   901 					eif
   902 				
   903 					.ifdef MAIN.ATARI.@UnitInit
   904 					jsr MAIN.ATARI.@UnitInit
   905 					eif
   906 				
   907 					.ifdef MAIN.CRT.@UnitInit
   908 					jsr MAIN.CRT.@UnitInit
   909 					eif
   910 				
   911 					.ifdef MAIN.DOS.@UnitInit
   912 					jsr MAIN.DOS.@UnitInit
   913 					eif
   914 				
   915 					.ifdef MAIN.STRUTILS.@UnitInit
   916 					jsr MAIN.STRUTILS.@UnitInit
   917 					eif
   918 				
   919 					.ifdef MAIN.SYSUTILS.@UnitInit
   920 					jsr MAIN.SYSUTILS.@UnitInit
   921 					eif
   922 				
   923 					.ifdef MAIN.TYPES.@UnitInit
   924 					jsr MAIN.TYPES.@UnitInit
   925 					eif
   926 				
   927 					.ifdef MAIN.GRAPH.@UnitInit
   928 					jsr MAIN.GRAPH.@UnitInit
   929 					eif
   930 				
   931 					.ifdef MAIN.CIO.@UnitInit
   932 					jsr MAIN.CIO.@UnitInit
   933 					eif
   934 				.endm
   935
   936 				; ------------------------------------------------------------
   937
   938 					ift .SIZEOF(MAIN.SYSTEM) > 0
   939 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   939 				SYSTEM: $2230..$2248
   940 					eif
   941
   942 					ift .SIZEOF(MAIN.ATARI) > 0
   943 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   944 					eif
   945
   946 					ift .SIZEOF(MAIN.CRT) > 0
   947 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   947 				CRT: $2249..$2259
   948 					eif
   949
   950 					ift .SIZEOF(MAIN.DOS) > 0
   951 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   952 					eif
   953
   954 					ift .SIZEOF(MAIN.STRUTILS) > 0
   955 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   956 					eif
   957
   958 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   959 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   960 					eif
   961
   962 					ift .SIZEOF(MAIN.TYPES) > 0
   963 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
   964 					eif
   965
   966 					ift .SIZEOF(MAIN.GRAPH) > 0
   967 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
   967 				GRAPH: $225A..$22AA
   968 					eif
   969
   970 					ift .SIZEOF(MAIN.CIO) > 0
   971 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
   971 				CIO: $22AB..$22D9
   972 					eif
   973
   974 					.print 'CODE: ',CODEORIGIN,'..',*-1
   974 				CODE: $2000..$239D
   975
   976 				; ------------------------------------------------------------
   977
   978 239E			DATAORIGIN
   979 239E 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $27  $00 $00 $00 $17
   980
   981 = 0014			VARINITSIZE	= *-DATAORIGIN
   982 = 0133			VARDATASIZE	= 307
   983
   984 = 24D1			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   985
   986 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   986 				DATA: $239E..$24D1
   987
   988 02E0-02E1> F3 21			run START
   989
   990 				; ------------------------------------------------------------
   991
   992 				.macro	STATICDATA
   993 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $00 $00 $08  $20 $4A $49 $46 $46 $49 $45 $53
   994 				.by  $00
   995 				.endm
   996
   997 					end
