mads 2.1.0 build 8 (23 Dec 19)
   388 					opt l+
   101
   102 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   102 				ZPAGE: $0080..$00D7
   103
   104 				.print 'RTLIB: ',RTLIB,'..',*-1
   104 				RTLIB: $2020..$222D
   105
   106 				; ------------------------------------------------------------
   107
   108 222E			START
   109 222E BA				tsx
   110 222F 8E 7F 23			stx MAIN.@halt+1
   111
   112 					.ifdef fmulinit
   113 					fmulinit
   114 					eif
   115
   116 = 0117			VLEN	= VARDATASIZE-VARINITSIZE
   117 = 239A			VADR	= DATAORIGIN+VARINITSIZE
   118
   119 					ift VADR > $BFFF
   120 					ert 'Invalid memory address range ',VADR
   121 					eli (VLEN>0) && (VLEN<=256)
   122 					ldx #256-VLEN
   123 					lda #0
   124 					sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>0
   126 					@fill #VADR #VLEN #0
   126 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   126 2232 A9 9A 85 88 A9 23 +  MWA #VADR @FILL.PTR1
   126 223A A9 17 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   126 2242 A9 00 85 84		 MVA #0 @FILL.PTR2
   126 2246 20 77 20		 JSR @FILL
   127 					eif
   128
   129 					.ifdef MAIN.@DEFINES.ROMOFF
   130 					icl 'atari\romoff.asm'
   131 					.endif
   132
   133 2249 A9 B1 85 82 A9 24 + 	mwa #PROGRAMSTACK psptr
   134
   135 2251 A2 0F			ldx #$0f					; DOS II+/D ParamStr
   136 2253 BD 40 03 9D 82 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   137
   138 225C E8				inx						; X = 0
   139 225D 86 90			stx bp						; BP = 0
   140
   141 225F 8E 08 D2			stx audctl					; reset POKEY
   142 2262 A9 03			lda #3
   143 2264 8D 0F D2			sta skctl
   144
   145 2267 CA				dex						; X = 255
   146
   147 2268				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: valbci.a65]
Source: valbci.a65
   148
   149 2268			.local	MAIN						; PROCEDURE
   150
   151 2268 4C 7B 23			jmp l_0027
   152
   153 				; ------------------------------------------------------------
   154
   155 226B			.local	SYSTEM						; UNIT
   156
   157 				; ------------------------------------------------------------
   158
   159 = 0101			__PORTB_BANKS	= $0101
   160 = 0648			M_PI_2	= $0648
   161 = 0192			D_PI_2	= $0192
   162 = 0004			D_PI_180	= $04
   163 = 0000			MGTIA	= $00
   164 = 0080			MVBXE	= $80
   165 = 0000			VBXE_XDLADR	= $00
   166 = 0100			VBXE_BCBADR	= $0100
   167 = 1000			VBXE_MAPADR	= $1000
   168 = 5000			VBXE_OVRADR	= $5000
   169 = B000			VBXE_WINDOW	= $B000
   170 = 0000			IDLI	= $00
   171 = 0001			IVBL	= $01
   172 = 00FE			CH_DELCHR	= $FE
   173 = 009B			CH_ENTER	= $9B
   174 = 001B			CH_ESC	= $1B
   175 = 001C			CH_CURS_UP	= $1C
   176 = 001D			CH_CURS_DOWN	= $1D
   177 = 001E			CH_CURS_LEFT	= $1E
   178 = 001F			CH_CURS_RIGHT	= $1F
   179 = 007F			CH_TAB	= $7F
   180 = 009B			CH_EOL	= $9B
   181 = 007D			CH_CLR	= $7D
   182 = 00FD			CH_BELL	= $FD
   183 = 007E			CH_DEL	= $7E
   184 = 009C			CH_DELLINE	= $9C
   185 = 009D			CH_INSLINE	= $9D
   186 = 0000			COLOR_BLACK	= $00
   187 = 000E			COLOR_WHITE	= $0E
   188 = 0032			COLOR_RED	= $32
   189 = 0096			COLOR_CYAN	= $96
   190 = 0068			COLOR_VIOLET	= $68
   191 = 00C4			COLOR_GREEN	= $C4
   192 = 0074			COLOR_BLUE	= $74
   193 = 00EE			COLOR_YELLOW	= $EE
   194 = 0028			COLOR_ORANGE	= $28
   195 = 00E4			COLOR_BROWN	= $E4
   196 = 003C			COLOR_LIGHTRED	= $3C
   197 = 0004			COLOR_GRAY1	= $04
   198 = 0006			COLOR_GRAY2	= $06
   199 = 000A			COLOR_GRAY3	= $0A
   200 = 00CC			COLOR_LIGHTGREEN	= $CC
   201 = 007C			COLOR_LIGHTBLUE	= $7C
   202 = 0004			FMOPENREAD	= $04
   203 = 0008			FMOPENWRITE	= $08
   204 = 0009			FMOPENAPPEND	= $09
   205 = 000C			FMOPENREADWRITE	= $0C
   206 = 2394			SCREENWIDTH	= DATAORIGIN+$0000
   207 = 2396			SCREENHEIGHT	= DATAORIGIN+$0002
   208 = 2398			DATESEPARATOR	= DATAORIGIN+$0004
   209 = D014			TVSYSTEM	= $D014
   210 = 02C0			adr.PALETTE	= $02C0
   211 226B			.var PALETTE	= adr.PALETTE .word
   212 = D012			adr.HPALETTE	= $D012
   213 226B			.var HPALETTE	= adr.HPALETTE .word
   214 = 2399			FILEMODE	= DATAORIGIN+$0005
   215 = 239A			GRAPHMODE	= DATAORIGIN+$0006
   216 = 239B			IORESULT	= DATAORIGIN+$0007
   217 = 239C			EOLN	= DATAORIGIN+$0008
   218 = 239D			RNDSEED	= DATAORIGIN+$0009
   219
   220 = 226B C0 02		PALETTE
   220 = 226D 12 D0		HPALETTE
   220 				.endl							; UNIT SYSTEM
   221
   222 				; ------------------------------------------------------------
   223
   224 226F			.local	ATARI						; UNIT
   225
   226 				; ------------------------------------------------------------
   227
   228 = 0012			RTCLOK	= $12
   229 = 004D			ATRACT	= $4D
   230 = 0052			LMARGIN	= $52
   231 = 0053			RMARGIN	= $53
   232 = 0054			ROWCRS	= $54
   233 = 0055			COLCRS	= $55
   234 = 0057			DINDEX	= $57
   235 = 0058			SAVMSC	= $58
   236 = 0062			PALNTS	= $62
   237 = 006A			RAMTOP	= $6A
   238 = 0200			VDSLST	= $0200
   239 = 0230			SDLSTL	= $0230
   240 = 0290			TXTROW	= $0290
   241 = 0291			TXTCOL	= $0291
   242 = 0293			TINDEX	= $0293
   243 = 0294			TXTMSC	= $0294
   244 = 022F			SDMCTL	= $022F
   245 = 026F			GPRIOR	= $026F
   246 = 02F0			CRSINH	= $02F0
   247 = 02F3			CHACT	= $02F3
   248 = 02F4			CHBAS	= $02F4
   249 = 02FC			CH	= $02FC
   250 = 02C0			PCOLR0	= $02C0
   251 = 02C1			PCOLR1	= $02C1
   252 = 02C2			PCOLR2	= $02C2
   253 = 02C3			PCOLR3	= $02C3
   254 = 02C4			COLOR0	= $02C4
   255 = 02C5			COLOR1	= $02C5
   256 = 02C6			COLOR2	= $02C6
   257 = 02C7			COLOR3	= $02C7
   258 = 02C8			COLOR4	= $02C8
   259 = 02C8			COLBAKS	= $02C8
   260 = D000			HPOSP0	= $D000
   261 = D001			HPOSP1	= $D001
   262 = D002			HPOSP2	= $D002
   263 = D003			HPOSP3	= $D003
   264 = D004			HPOSM0	= $D004
   265 = D005			HPOSM1	= $D005
   266 = D006			HPOSM2	= $D006
   267 = D007			HPOSM3	= $D007
   268 = D008			SIZEP0	= $D008
   269 = D009			SIZEP1	= $D009
   270 = D00A			SIZEP2	= $D00A
   271 = D00B			SIZEP3	= $D00B
   272 = D00C			SIZEM	= $D00C
   273 = D00D			GRAFP0	= $D00D
   274 = D00E			GRAFP1	= $D00E
   275 = D00F			GRAFP2	= $D00F
   276 = D010			GRAFP3	= $D010
   277 = D011			GRAFM	= $D011
   278 = D004			P0PF	= $D004
   279 = D014			PAL	= $D014
   280 = D012			COLPM0	= $D012
   281 = D013			COLPM1	= $D013
   282 = D014			COLPM2	= $D014
   283 = D015			COLPM3	= $D015
   284 = D016			COLPF0	= $D016
   285 = D017			COLPF1	= $D017
   286 = D018			COLPF2	= $D018
   287 = D019			COLPF3	= $D019
   288 = D01A			COLBK	= $D01A
   289 = D01B			PRIOR	= $D01B
   290 = D01D			GRACTL	= $D01D
   291 = D01E			HITCLR	= $D01E
   292 = D200			AUDF1	= $D200
   293 = D201			AUDC1	= $D201
   294 = D202			AUDF2	= $D202
   295 = D203			AUDC2	= $D203
   296 = D204			AUDF3	= $D204
   297 = D205			AUDC3	= $D205
   298 = D206			AUDF4	= $D206
   299 = D207			AUDC4	= $D207
   300 = D208			AUDCTL	= $D208
   301 = D20F			SKSTAT	= $D20F
   302 = D301			PORTB	= $D301
   303 = D400			DMACTL	= $D400
   304 = D401			CHACTL	= $D401
   305 = D402			DLISTL	= $D402
   306 = D404			HSCROL	= $D404
   307 = D405			VSCROL	= $D405
   308 = D407			PMBASE	= $D407
   309 = D409			CHBASE	= $D409
   310 = D40A			WSYNC	= $D40A
   311 = D40B			VCOUNT	= $D40B
   312 = D40C			PENH	= $D40C
   313 = D40D			PENV	= $D40D
   314 = D40E			NMIEN	= $D40E
   315
   316 				.endl							; UNIT ATARI
   317
   318 				; ------------------------------------------------------------
   319
   320 226F			.local	CRT						; UNIT
   321
   322 226F			.local	READKEY						; FUNCTION | ASSEMBLER
   323
   324 				; ---------------------  ASM Block 049  ---------------------
   325
   326 226F 8A 48			txa:pha
   327
   328 2271 20 20 20			@GetKey
   329
   330 2274 8D A0 23			sta Result
   331
   332 2277 68 AA			pla:tax
   333
   334 2279			@exit
   335
   336 				; ------------------------------------------------------------
   337
   338 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   339 				; as Pointer
   340
   341 2279 E8				inx
   342 227A AD A0 23 95 98		mva RESULT :STACKORIGIN,x
   343
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					eif
   351
   352 				; ------------------------------------------------------------
   353
   354 = 23A0			RESULT	= DATAORIGIN+$000C
   355
   356 = 23A0			@VarData	= RESULT
   357 = 0001			@VarDataSize	= 1
   358
   359 227F 60				rts						; ret
   360 				.endl
   361
   362 				; ------------------------------------------------------------
   363
   364 = 239F			TEXTATTR	= DATAORIGIN+$000B
   365 = D01F			CONSOL	= $D01F
   366 = 0000			CN_START_SELECT_OPTION	= $00
   367 = 0001			CN_SELECT_OPTION	= $01
   368 = 0002			CN_START_OPTION	= $02
   369 = 0003			CN_OPTION	= $03
   370 = 0004			CN_START_SELECT	= $04
   371 = 0005			CN_SELECT	= $05
   372 = 0006			CN_START	= $06
   373 = 0007			CN_NONE	= $07
   374 = 0000			BW40	= $00
   375 = 0001			CO40	= $01
   376 = 0002			BW80	= $02
   377 = 0003			CO80	= $03
   378 = 0007			MONO	= $07
   379 = 0001			C40	= $01
   380 = 0003			C80	= $03
   381 = 0000			BLACK	= $00
   382 = 0001			BLUE	= $01
   383 = 0002			GREEN	= $02
   384 = 0003			CYAN	= $03
   385 = 0004			RED	= $04
   386 = 0005			MAGENTA	= $05
   387 = 0006			BROWN	= $06
   388 = 0007			LIGHTGRAY	= $07
   389 = 0008			DARKGRAY	= $08
   390 = 0009			LIGHTBLUE	= $09
   391 = 000A			LIGHTGREEN	= $0A
   392 = 000B			LIGHTCYAN	= $0B
   393 = 000C			LIGHTRED	= $0C
   394 = 000D			LIGHTMAGENTA	= $0D
   395 = 000E			YELLOW	= $0E
   396 = 000F			WHITE	= $0F
   397 = 0080			BLINK	= $80
   398
   399 				.endl							; UNIT CRT
   400
   401 				; ------------------------------------------------------------
   402
   403 2280			.local	DOS						; UNIT
   404
   405 				; ------------------------------------------------------------
   406
   407 = D014			PALNTSC	= $D014
   408
   409 				.endl							; UNIT DOS
   410
   411 				; ------------------------------------------------------------
   412
   413 2280			.local	STRUTILS					; UNIT
   414
   415 				; ------------------------------------------------------------
   416
   417 				.endl							; UNIT STRUTILS
   418
   419 				; ------------------------------------------------------------
   420
   421 2280			.local	SYSUTILS					; UNIT
   422
   423 2280			.local	STRTOINT_0088					; FUNCTION | ASSEMBLER | OVERLOAD
   424
   425 				; ------------------------------------------------------------
   426
   427 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   428 				; as Pointer
   429 2280 B5 98 8D A1 23		mva :STACKORIGIN,x S
   430 2285 B5 A8 8D A2 23		mva :STACKORIGIN+STACKWIDTH,x S+1
   431 228A CA				dex
   432
   433 				; ---------------------  ASM Block 074  ---------------------
   434
   435 					@StrToInt s
   435 				 LDY S+1\ LDA S\ JSR @STRTOINT
   435 228B AC A2 23		 LDY S+1
   435 228E AD A1 23		 LDA S
   435 2291 20 BF 20		 JSR @STRTOINT
   436
   437 2294 A5 88 8D A3 23		mva edx Result
   438 2299 A5 89 8D A4 23		mva edx+1 Result+1
   439 229E A5 8A 8D A5 23		mva edx+2 Result+2
   440 22A3 A5 8B 8D A6 23		mva edx+3 Result+3
   441
   442 22A8			@exit
   443
   444 				; ------------------------------------------------------------
   445
   446 				; Push CARDINAL / INTEGER / REAL / SINGLE
   447 				; as Pointer
   448
   449 22A8 E8				inx
   450 22A9 AD A3 23 95 98		mva RESULT :STACKORIGIN,x
   451 22AE AD A4 23 95 A8		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   452 22B3 AD A5 23 95 B8		mva RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
   453 22B8 AD A6 23 95 C8		mva RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
   454
   455 					.ifdef @new
   456 					lda <@VarData
   457 					sta :ztmp
   458 					lda >@VarData
   459 					ldy #@VarDataSize-1
   460 					jmp @FreeMem
   461 					eif
   462
   463 				; ------------------------------------------------------------
   464
   465 = 23A1			S	= DATAORIGIN+$000D
   466 = 23A3			RESULT	= DATAORIGIN+$000F
   467
   468 = 23A1			@VarData	= S
   469 = 0006			@VarDataSize	= 6
   470
   471 22BD 60				rts						; ret
   472 				.endl
   473
   474 				; ------------------------------------------------------------
   475
   476 = 0001			FAREADONLY	= $01
   477 = 0002			FAHIDDEN	= $02
   478 = 0004			FASYSFILE	= $04
   479 = 0008			FAVOLUMEID	= $08
   480 = 0010			FADIRECTORY	= $10
   481 = 0020			FAARCHIVE	= $20
   482 = 003F			FAANYFILE	= $3F
   483
   484 				.endl							; UNIT SYSUTILS
   485
   486 				; ------------------------------------------------------------
   487
   488 22BE			.local	CIO						; UNIT
   489
   490 22BE			.local	GET						; FUNCTION | ASSEMBLER
   491
   492 				; ------------------------------------------------------------
   493
   494 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   495 				; as Pointer
   496 22BE B5 98 8D A7 23		mva :STACKORIGIN,x CHN
   497 22C3 CA				dex
   498
   499 				; ---------------------  ASM Block 080  ---------------------
   500
   501 22C4 8A 48			txa:pha
   502
   503 22C6 AD A7 23			lda chn
   504 22C9 0A 0A 0A 0A			:4 asl @
   505 22CD AA				tax
   506
   507 22CE A9 07			lda #7		;get char command
   508 22D0 9D 42 03			sta iccmd,x
   509
   510 22D3 A9 00			lda #$00	;zero out the unused
   511 22D5 9D 48 03			sta icbufl,x	;store in accumulator
   512 22D8 9D 49 03			sta icbufh,x	;...after CIOV jump
   513
   514 22DB				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 22DB 20 56 E4				jsr CIOV
Source: valbci.a65
   515
   516 22DE 8C 9B 23			sty MAIN.SYSTEM.IOResult
   517
   518 22E1 8D A8 23			sta Result
   519
   520 22E4 68 AA			pla:tax
   521
   522 22E6			@exit
   523
   524 				; ------------------------------------------------------------
   525
   526 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   527 				; as Pointer
   528
   529 22E6 E8				inx
   530 22E7 AD A8 23 95 98		mva RESULT :STACKORIGIN,x
   531
   532 					.ifdef @new
   533 					lda <@VarData
   534 					sta :ztmp
   535 					lda >@VarData
   536 					ldy #@VarDataSize-1
   537 					jmp @FreeMem
   538 					eif
   539
   540 				; ------------------------------------------------------------
   541
   542 = 23A7			CHN	= DATAORIGIN+$0013
   543 = 23A8			RESULT	= DATAORIGIN+$0014
   544
   545 = 23A7			@VarData	= CHN
   546 = 0002			@VarDataSize	= 2
   547
   548 22EC 60				rts						; ret
   549 				.endl
   550
   551 				; ------------------------------------------------------------
   552
   553 				.endl							; UNIT CIO
   554
   555 22ED			.local	MAINPROC					; PROCEDURE
   556
   557 				; optimize FAIL ('SYSUTILS.STRTOINT_0088', examples\valbci.pas), line = 21
   558 22ED E8				inx
   559 22EE A9 0D 95 98			mva #$0D :STACKORIGIN,x
   560 22F2 A9 20 95 A8			mva #$20 :STACKORIGIN+STACKWIDTH,x
   561 22F6 20 80 22			jsr SYSUTILS.STRTOINT_0088
   562 22F9 B5 98 8D AA 24		mva :STACKORIGIN,x B
   563 22FE CA				dex
   564
   565 				; optimize FAIL ('SYSUTILS.STRTOINT_0088', examples\valbci.pas), line = 22
   566 22FF E8				inx
   567 2300 A9 12 95 98			mva #$12 :STACKORIGIN,x
   568 2304 A9 20 95 A8			mva #$20 :STACKORIGIN+STACKWIDTH,x
   569 2308 20 80 22			jsr SYSUTILS.STRTOINT_0088
   570 230B B5 98 8D AB 24		mva :STACKORIGIN,x C
   571 2310 B5 A8 8D AC 24		mva :STACKORIGIN+STACKWIDTH,x C+1
   572 2315 CA				dex
   573
   574 				; optimize FAIL ('SYSUTILS.STRTOINT_0088', examples\valbci.pas), line = 23
   575 2316 E8				inx
   576 2317 A9 19 95 98			mva #$19 :STACKORIGIN,x
   577 231B A9 20 95 A8			mva #$20 :STACKORIGIN+STACKWIDTH,x
   578 231F 20 80 22			jsr SYSUTILS.STRTOINT_0088
   579 2322 B5 98 8D AD 24		mva :STACKORIGIN,x I
   580 2327 B5 A8 8D AE 24		mva :STACKORIGIN+STACKWIDTH,x I+1
   581 232C B5 B8 8D AF 24		mva :STACKORIGIN+STACKWIDTH*2,x I+2
   582 2331 B5 C8 8D B0 24		mva :STACKORIGIN+STACKWIDTH*3,x I+3
   583 2336 CA				dex
   584
   585 				; optimize FAIL (100, examples\valbci.pas), line = 24
   586 2337 AD AA 24			lda B
   587 233A 20 77 21			jsr @printBYTE._a
   588 233D 20 5D 21			@printEOL
   589
   590 				; optimize FAIL (100, examples\valbci.pas), line = 25
   591 2340 AD AB 24			lda C
   592 2343 AC AC 24			ldy C+1
   593 2346 20 88 21			jsr @printWORD._ay
   594 2349 20 5D 21			@printEOL
   595
   596 				; optimize FAIL (100, examples\valbci.pas), line = 26
   597 234C E8				inx
   598 234D AD AD 24 95 98		mva I :STACKORIGIN,x
   599 2352 AD AE 24 95 A8		mva I+1 :STACKORIGIN+STACKWIDTH,x
   600 2357 AD AF 24 95 B8		mva I+2 :STACKORIGIN+STACKWIDTH*2,x
   601 235C AD B0 24 95 C8		mva I+3 :STACKORIGIN+STACKWIDTH*3,x
   602 2361 20 6B 21			jsr @printINT
   603 2364 CA				dex
   604 2365 20 5D 21			@printEOL
   605
   606 				; optimize FAIL ('CIO.GET', examples\valbci.pas), line = 27
   607 2368 E8				inx
   608 2369 A9 07 95 98			mva #$07 :STACKORIGIN,x
   609 236D 20 BE 22			jsr CIO.GET
   610 2370 B5 98 8D A9 24		mva :STACKORIGIN,x KEY
   611 2375 CA				dex
   612
   613 2376 20 6F 22			jsr CRT.READKEY					; call Entry
   614
   615 2379 CA				dex
   616
   617 				; ------------------------------------------------------------
   618
   619 = 24A9			KEY	= DATAORIGIN+$0115
   620 = 24AA			B	= DATAORIGIN+$0116
   621 = 24AB			C	= DATAORIGIN+$0117
   622 = 24AD			I	= DATAORIGIN+$0119
   623
   624 = 24A9			@VarData	= KEY
   625 = 0008			@VarDataSize	= 8
   626
   627 237A			@exit
   628 					.ifdef @new
   629 					lda <@VarData
   630 					sta :ztmp
   631 					lda >@VarData
   632 					ldy #@VarDataSize-1
   633 					jmp @FreeMem
   634 					eif
   635 237A 60				rts						; ret
   636 				.endl
   637 237B			l_0027
   638
   639 				; optimize FAIL ('MAINPROC', examples\valbci.pas), line = 32
   640 237B 20 ED 22			jsr MAINPROC
   641
   642 				; ------------------------------------------------------------
   643
   644 = 23A9			adr.STRBUFFER	= DATAORIGIN+$0015
   645 237E			.var STRBUFFER	= adr.STRBUFFER .word
   646 237E			@exit
   647
   648 237E A2 00		@halt	ldx #0
   649 2380 9A				txs
   650 					.ifdef MAIN.@DEFINES.ROMOFF
   651 					inc portb
   652 					.endif
   653
   654 2381 60				rts
   655
   656 				; ------------------------------------------------------------
   657
   658 2382 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   659
   660 				; ------------------------------------------------------------
   661
   662 2392			.local	@DEFINES
   663 2392			ATARI
   664 				.endl
   665
   666 = 2392 A9 23		STRBUFFER
   666 				.endl							; MAIN
   667
   668 				; ------------------------------------------------------------
   669 				; ------------------------------------------------------------
   670
   671 				.macro	UNITINITIALIZATION
   672 				
   673 					.ifdef MAIN.SYSTEM.@UnitInit
   674 					jsr MAIN.SYSTEM.@UnitInit
   675 					eif
   676 				
   677 					.ifdef MAIN.ATARI.@UnitInit
   678 					jsr MAIN.ATARI.@UnitInit
   679 					eif
   680 				
   681 					.ifdef MAIN.CRT.@UnitInit
   682 					jsr MAIN.CRT.@UnitInit
   683 					eif
   684 				
   685 					.ifdef MAIN.DOS.@UnitInit
   686 					jsr MAIN.DOS.@UnitInit
   687 					eif
   688 				
   689 					.ifdef MAIN.STRUTILS.@UnitInit
   690 					jsr MAIN.STRUTILS.@UnitInit
   691 					eif
   692 				
   693 					.ifdef MAIN.SYSUTILS.@UnitInit
   694 					jsr MAIN.SYSUTILS.@UnitInit
   695 					eif
   696 				
   697 					.ifdef MAIN.CIO.@UnitInit
   698 					jsr MAIN.CIO.@UnitInit
   699 					eif
   700 				.endm
   701
   702 				; ------------------------------------------------------------
   703
   704 					ift .SIZEOF(MAIN.SYSTEM) > 0
   705 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   705 				SYSTEM: $226B..$226E
   706 					eif
   707
   708 					ift .SIZEOF(MAIN.ATARI) > 0
   709 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   710 					eif
   711
   712 					ift .SIZEOF(MAIN.CRT) > 0
   713 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   713 				CRT: $226F..$227F
   714 					eif
   715
   716 					ift .SIZEOF(MAIN.DOS) > 0
   717 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   718 					eif
   719
   720 					ift .SIZEOF(MAIN.STRUTILS) > 0
   721 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   722 					eif
   723
   724 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   725 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   725 				SYSUTILS: $2280..$22BD
   726 					eif
   727
   728 					ift .SIZEOF(MAIN.CIO) > 0
   729 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
   729 				CIO: $22BE..$22EC
   730 					eif
   731
   732 					.print 'CODE: ',CODEORIGIN,'..',*-1
   732 				CODE: $2000..$2393
   733
   734 				; ------------------------------------------------------------
   735
   736 2394			DATAORIGIN
   737 2394 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   738
   739 = 0006			VARINITSIZE	= *-DATAORIGIN
   740 = 011D			VARDATASIZE	= 285
   741
   742 = 24B1			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   743
   744 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   744 				DATA: $2394..$24B1
   745
   746 02E0-02E1> 2E 22			run START
   747
   748 				; ------------------------------------------------------------
   749
   750 				.macro	STATICDATA
   751 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $03 $31 $32  $30 $00 $05 $36 $35 $30 $30 $30
   752 				.by  $00 $05 $2D $33 $34 $30 $30 $00
   753 				.endm
   754
   755 					end
