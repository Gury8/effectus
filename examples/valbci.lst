mads 2.1.0 build 4 (27 Oct 19)
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $2020..$2276
    97
    98 				; ------------------------------------------------------------
    99
   100 2276			START
   101 2276 BA				tsx
   102 2277 8E A2 23			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 0034			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 23BB			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 227A A2 CC			ldx #256-VLEN
   115 227C A9 00			lda #0
   116 227E 9D EF 22 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   119 					eif
   120
   121 2284 A2 0F			ldx #$0f
   122 2286 BD 40 03 9D A5 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 228F E8				inx		; X = 0 !!!
   125 2290 86 8E			stx bp		; lo BP = 0
   126
   127 2292				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: valbci.a65]
   128
   129 2292			.local	MAIN						; PROCEDURE
   130
   131 2292 4C 9E 23			jmp l_0027
   132
   133 				; ------------------------------------------------------------
   134
   135 2295			.local	SYSTEM						; UNIT
   136
   137 				; ------------------------------------------------------------
   138
   139 = 0648			M_PI_2	= $0648
   140 = 0192			D_PI_2	= $0192
   141 = 0004			D_PI_180	= $0004
   142 = 0000			MGTIA	= $0000
   143 = 0080			MVBXE	= $0080
   144 = 0000			VBXE_XDLADR	= $0000
   145 = 0100			VBXE_BCBADR	= $0100
   146 = 1000			VBXE_MAPADR	= $1000
   147 = 5000			VBXE_OVRADR	= $5000
   148 = B000			VBXE_WINDOW	= $B000
   149 = 0000			IDLI	= $0000
   150 = 0001			IVBL	= $0001
   151 = 00FE			CH_DELCHR	= $00FE
   152 = 009B			CH_ENTER	= $009B
   153 = 001B			CH_ESC	= $001B
   154 = 001C			CH_CURS_UP	= $001C
   155 = 001D			CH_CURS_DOWN	= $001D
   156 = 001E			CH_CURS_LEFT	= $001E
   157 = 001F			CH_CURS_RIGHT	= $001F
   158 = 007F			CH_TAB	= $007F
   159 = 009B			CH_EOL	= $009B
   160 = 007D			CH_CLR	= $007D
   161 = 00FD			CH_BELL	= $00FD
   162 = 007E			CH_DEL	= $007E
   163 = 009C			CH_DELLINE	= $009C
   164 = 009D			CH_INSLINE	= $009D
   165 = 0000			COLOR_BLACK	= $0000
   166 = 000E			COLOR_WHITE	= $000E
   167 = 0032			COLOR_RED	= $0032
   168 = 0096			COLOR_CYAN	= $0096
   169 = 0068			COLOR_VIOLET	= $0068
   170 = 00C4			COLOR_GREEN	= $00C4
   171 = 0074			COLOR_BLUE	= $0074
   172 = 00EE			COLOR_YELLOW	= $00EE
   173 = 0028			COLOR_ORANGE	= $0028
   174 = 00E4			COLOR_BROWN	= $00E4
   175 = 003C			COLOR_LIGHTRED	= $003C
   176 = 0004			COLOR_GRAY1	= $0004
   177 = 0006			COLOR_GRAY2	= $0006
   178 = 000A			COLOR_GRAY3	= $000A
   179 = 00CC			COLOR_LIGHTGREEN	= $00CC
   180 = 007C			COLOR_LIGHTBLUE	= $007C
   181 = 0004			FMOPENREAD	= $0004
   182 = 0008			FMOPENWRITE	= $0008
   183 = 0009			FMOPENAPPEND	= $0009
   184 = 000C			FMOPENREADWRITE	= $000C
   185 = 23B5			SCREENWIDTH	= DATAORIGIN+$0000
   186 = 23B7			SCREENHEIGHT	= DATAORIGIN+$0002
   187 = 23B9			DATESEPARATOR	= DATAORIGIN+$0004
   188 = D014			TVSYSTEM	= $D014
   189 = 02C0			adr.PALETTE	= $02C0
   190 2295			.var PALETTE	= adr.PALETTE .word
   191 = D012			adr.HPALETTE	= $D012
   192 2295			.var HPALETTE	= adr.HPALETTE .word
   193 = 23BA			FILEMODE	= DATAORIGIN+$0005
   194 = 23BB			SCREENMODE	= DATAORIGIN+$0006
   195 = 23BC			IORESULT	= DATAORIGIN+$0007
   196 = 23BD			EOLN	= DATAORIGIN+$0008
   197 = 23BE			RNDSEED	= DATAORIGIN+$0009
   198
   199 = 2295 C0 02		PALETTE
   199 = 2297 12 D0		HPALETTE
   199 				.endl							; UNIT SYSTEM
   200
   201 				; ------------------------------------------------------------
   202
   203 2299			.local	DOS						; UNIT
   204
   205 				; ------------------------------------------------------------
   206
   207 = D014			PALNTSC	= $D014
   208
   209 				.endl							; UNIT DOS
   210
   211 				; ------------------------------------------------------------
   212
   213 2299			.local	STRUTILS					; UNIT
   214
   215 				; ------------------------------------------------------------
   216
   217 				.endl							; UNIT STRUTILS
   218
   219 				; ------------------------------------------------------------
   220
   221 2299			.local	SYSUTILS					; UNIT
   222
   223 2299			.local	STRTOINT_0053					; FUNCTION | ASSEMBLER | OVERLOAD
   224
   225 				; ------------------------------------------------------------
   226
   227 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   228 				; as Pointer
   229 2299 B5 98 8D FC 22		mva :STACKORIGIN,x S
   230 229E B5 A8 8D FD 22		mva :STACKORIGIN+STACKWIDTH,x S+1
   231 22A3 CA				dex						; sub bx, 1
   232 					@move S #adr.S #33
   232 				 MWA S @MOVE.PTR1\ MWA #ADR.S @MOVE.PTR2\ MWA #33 @MOVE.PTR3\ JSR @MOVE
   232 22A4 AD FC 22 85 86 AD +  MWA S @MOVE.PTR1
   232 22AE A9 C0 85 8A A9 23 +  MWA #ADR.S @MOVE.PTR2
   232 22B6 A9 21 85 82 A9 00 +  MWA #33 @MOVE.PTR3
   232 22BE 20 21 22		 JSR @MOVE
   233 22C1 A9 C0 8D FC 22 A9 + 	mwa #adr.S S
   234
   235 				; ---------------------  ASM Block 059  ---------------------
   236
   237 					@StrToInt #adr.s
   237 				 LDY> ADR.S\ LDA< ADR.S\ JSR @STRTOINT
   237 22CB A0 23		 LDY> ADR.S
   237 22CD A9 C0		 LDA< ADR.S
   237 22CF 20 1B 21		 JSR @STRTOINT
   238
   239 22D2 A5 86 8D E1 23		mva edx Result
   240 22D7 A5 87 8D E2 23		mva edx+1 Result+1
   241 22DC A5 88 8D E3 23		mva edx+2 Result+2
   242 22E1 A5 89 8D E4 23		mva edx+3 Result+3
   243
   244 22E6			@exit
   245
   246 				; ------------------------------------------------------------
   247
   248 				; Push CARDINAL / INTEGER / REAL / SINGLE
   249 				; as Pointer
   250
   251 22E6 E8				inx						; add bx, 1
   252 22E7 AD E1 23 95 98		mva RESULT :STACKORIGIN,x
   253 22EC AD E2 23 95 A8		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   254 22F1 AD E3 23 95 B8		mva RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
   255 22F6 AD E4 23 95 C8		mva RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
   256
   257 					.ifdef @new
   258 					@FreeMem #@VarData #@VarDataSize
   259 					eif
   260
   261 				; ------------------------------------------------------------
   262
   263 = 23C0			adr.S	= DATAORIGIN+$000B
   264 22FB			.var S	= adr.S .word
   265 = 23E1			RESULT	= DATAORIGIN+$002C
   266
   267 = 22FC			@VarData	= S
   268 = 0025			@VarDataSize	= 37
   269
   270 22FB 60				rts						; ret
   271 = 22FC C0 23		S
   271 				.endl
   272
   273 				; ------------------------------------------------------------
   274
   275 = 0001			FAREADONLY	= $0001
   276 = 0002			FAHIDDEN	= $0002
   277 = 0004			FASYSFILE	= $0004
   278 = 0008			FAVOLUMEID	= $0008
   279 = 0010			FADIRECTORY	= $0010
   280 = 0020			FAARCHIVE	= $0020
   281 = 003F			FAANYFILE	= $003F
   282
   283 				.endl							; UNIT SYSUTILS
   284
   285 				; ------------------------------------------------------------
   286
   287 22FE			.local	ATARI						; UNIT
   288
   289 				; ------------------------------------------------------------
   290
   291 = 0012			RTCLOK	= $0012
   292 = 004D			ATRACT	= $004D
   293 = 0052			LMARGIN	= $0052
   294 = 0053			RMARGIN	= $0053
   295 = 0054			ROWCRS	= $0054
   296 = 0055			COLCRS	= $0055
   297 = 0057			DINDEX	= $0057
   298 = 0058			SAVMSC	= $0058
   299 = 006A			RAMTOP	= $006A
   300 = 0200			VDSLST	= $0200
   301 = 0230			SDLSTL	= $0230
   302 = 0290			TXTROW	= $0290
   303 = 0291			TXTCOL	= $0291
   304 = 0293			TINDEX	= $0293
   305 = 0294			TXTMSC	= $0294
   306 = 022F			SDMCTL	= $022F
   307 = 026F			GPRIOR	= $026F
   308 = 02F0			CRSINH	= $02F0
   309 = 02F3			CHACT	= $02F3
   310 = 02F4			CHBAS	= $02F4
   311 = 02FC			CH	= $02FC
   312 = 02C0			PCOLR0	= $02C0
   313 = 02C1			PCOLR1	= $02C1
   314 = 02C2			PCOLR2	= $02C2
   315 = 02C3			PCOLR3	= $02C3
   316 = 02C4			COLOR0	= $02C4
   317 = 02C5			COLOR1	= $02C5
   318 = 02C6			COLOR2	= $02C6
   319 = 02C7			COLOR3	= $02C7
   320 = 02C8			COLOR4	= $02C8
   321 = 02C8			COLBAKS	= $02C8
   322 = D000			HPOSP0	= $D000
   323 = D001			HPOSP1	= $D001
   324 = D002			HPOSP2	= $D002
   325 = D003			HPOSP3	= $D003
   326 = D004			HPOSM0	= $D004
   327 = D005			HPOSM1	= $D005
   328 = D006			HPOSM2	= $D006
   329 = D007			HPOSM3	= $D007
   330 = D008			SIZEP0	= $D008
   331 = D009			SIZEP1	= $D009
   332 = D00A			SIZEP2	= $D00A
   333 = D00B			SIZEP3	= $D00B
   334 = D00C			SIZEM	= $D00C
   335 = D00D			GRAFP0	= $D00D
   336 = D00E			GRAFP1	= $D00E
   337 = D00F			GRAFP2	= $D00F
   338 = D010			GRAFP3	= $D010
   339 = D011			GRAFM	= $D011
   340 = D004			P0PF	= $D004
   341 = D014			PAL	= $D014
   342 = D012			COLPM0	= $D012
   343 = D013			COLPM1	= $D013
   344 = D014			COLPM2	= $D014
   345 = D015			COLPM3	= $D015
   346 = D016			COLPF0	= $D016
   347 = D017			COLPF1	= $D017
   348 = D018			COLPF2	= $D018
   349 = D019			COLPF3	= $D019
   350 = D01A			COLBK	= $D01A
   351 = D01B			PRIOR	= $D01B
   352 = D01D			GRACTL	= $D01D
   353 = D01E			HITCLR	= $D01E
   354 = D200			AUDF1	= $D200
   355 = D201			AUDC1	= $D201
   356 = D202			AUDF2	= $D202
   357 = D203			AUDC2	= $D203
   358 = D204			AUDF3	= $D204
   359 = D205			AUDC3	= $D205
   360 = D206			AUDF4	= $D206
   361 = D207			AUDC4	= $D207
   362 = D208			AUDCTL	= $D208
   363 = D20F			SKSTAT	= $D20F
   364 = D301			PORTB	= $D301
   365 = D400			DMACTL	= $D400
   366 = D401			CHACTL	= $D401
   367 = D402			DLISTL	= $D402
   368 = D404			HSCROL	= $D404
   369 = D405			VSCROL	= $D405
   370 = D407			PMBASE	= $D407
   371 = D409			CHBASE	= $D409
   372 = D40A			WSYNC	= $D40A
   373 = D40B			VCOUNT	= $D40B
   374 = D40C			PENH	= $D40C
   375 = D40D			PENV	= $D40D
   376 = D40E			NMIEN	= $D40E
   377
   378 				.endl							; UNIT ATARI
   379
   380 				; ------------------------------------------------------------
   381
   382 22FE			.local	CRT						; UNIT
   383
   384 22FE			.local	READKEY						; FUNCTION | ASSEMBLER
   385
   386 				; ---------------------  ASM Block 063  ---------------------
   387
   388 22FE 8A 48			txa:pha
   389
   390 2300 20 E6 21			@GetKey
   391
   392 2303 8D E6 23			sta Result
   393
   394 2306 68 AA			pla:tax
   395
   396 2308			@exit
   397
   398 				; ------------------------------------------------------------
   399
   400 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   401 				; as Pointer
   402
   403 2308 E8				inx						; add bx, 1
   404 2309 AD E6 23 95 98		mva RESULT :STACKORIGIN,x
   405
   406 					.ifdef @new
   407 					@FreeMem #@VarData #@VarDataSize
   408 					eif
   409
   410 				; ------------------------------------------------------------
   411
   412 = 23E6			RESULT	= DATAORIGIN+$0031
   413
   414 = 23E6			@VarData	= RESULT
   415 = 0001			@VarDataSize	= 1
   416
   417 230E 60				rts						; ret
   418 				.endl
   419
   420 				; ------------------------------------------------------------
   421
   422 = 23E5			TEXTATTR	= DATAORIGIN+$0030
   423 = D01F			CONSOL	= $D01F
   424 = 0000			CN_START_SELECT_OPTION	= $0000
   425 = 0001			CN_SELECT_OPTION	= $0001
   426 = 0002			CN_START_OPTION	= $0002
   427 = 0003			CN_OPTION	= $0003
   428 = 0004			CN_START_SELECT	= $0004
   429 = 0005			CN_SELECT	= $0005
   430 = 0006			CN_START	= $0006
   431 = 0007			CN_NONE	= $0007
   432 = 0000			BW40	= $0000
   433 = 0001			CO40	= $0001
   434 = 0002			BW80	= $0002
   435 = 0003			CO80	= $0003
   436 = 0007			MONO	= $0007
   437 = 0001			C40	= $0001
   438 = 0003			C80	= $0003
   439 = 0000			BLACK	= $0000
   440 = 0001			BLUE	= $0001
   441 = 0002			GREEN	= $0002
   442 = 0003			CYAN	= $0003
   443 = 0004			RED	= $0004
   444 = 0005			MAGENTA	= $0005
   445 = 0006			BROWN	= $0006
   446 = 0007			LIGHTGRAY	= $0007
   447 = 0008			DARKGRAY	= $0008
   448 = 0009			LIGHTBLUE	= $0009
   449 = 000A			LIGHTGREEN	= $000A
   450 = 000B			LIGHTCYAN	= $000B
   451 = 000C			LIGHTRED	= $000C
   452 = 000D			LIGHTMAGENTA	= $000D
   453 = 000E			YELLOW	= $000E
   454 = 000F			WHITE	= $000F
   455 = 0080			BLINK	= $0080
   456
   457 				.endl							; UNIT CRT
   458
   459 230F			.local	MAINPROC					; PROCEDURE
   460
   461 				; optimize FAIL ('SYSUTILS.STRTOINT_0053', examples\valbci.pas), line = 19
   462 230F E8				inx
   463 2310 A9 0D 95 98			mva #$0D :STACKORIGIN,x
   464 2314 A9 20 95 A8			mva #$20 :STACKORIGIN+STACKWIDTH,x
   465 2318 20 99 22			jsr SYSUTILS.STRTOINT_0053
   466 231B B5 98 8D E8 23		mva :STACKORIGIN,x B
   467 2320 CA				dex
   468
   469 				; optimize FAIL ('SYSUTILS.STRTOINT_0053', examples\valbci.pas), line = 20
   470 2321 E8				inx
   471 2322 A9 12 95 98			mva #$12 :STACKORIGIN,x
   472 2326 A9 20 95 A8			mva #$20 :STACKORIGIN+STACKWIDTH,x
   473 232A 20 99 22			jsr SYSUTILS.STRTOINT_0053
   474 232D B5 98 8D E9 23		mva :STACKORIGIN,x C
   475 2332 B5 A8 8D EA 23		mva :STACKORIGIN+STACKWIDTH,x C+1
   476 2337 CA				dex
   477
   478 				; optimize FAIL ('SYSUTILS.STRTOINT_0053', examples\valbci.pas), line = 21
   479 2338 E8				inx
   480 2339 A9 19 95 98			mva #$19 :STACKORIGIN,x
   481 233D A9 20 95 A8			mva #$20 :STACKORIGIN+STACKWIDTH,x
   482 2341 20 99 22			jsr SYSUTILS.STRTOINT_0053
   483 2344 B5 98 8D EB 23		mva :STACKORIGIN,x I
   484 2349 B5 A8 8D EC 23		mva :STACKORIGIN+STACKWIDTH,x I+1
   485 234E B5 B8 8D ED 23		mva :STACKORIGIN+STACKWIDTH*2,x I+2
   486 2353 B5 C8 8D EE 23		mva :STACKORIGIN+STACKWIDTH*3,x I+3
   487 2358 CA				dex
   488
   489 				; optimize FAIL (100, examples\valbci.pas), line = 22
   490 2359 E8				inx
   491 235A AD E8 23 95 98		mva B :STACKORIGIN,x
   492 235F 20 97 20			jsr @printBYTE
   493 2362 CA				dex
   494 2363 20 3A 20			@printEOL
   495
   496 				; optimize FAIL (100, examples\valbci.pas), line = 23
   497 2366 E8				inx
   498 2367 AD E9 23 95 98		mva C :STACKORIGIN,x
   499 236C AD EA 23 95 A8		mva C+1 :STACKORIGIN+STACKWIDTH,x
   500 2371 20 91 20			jsr @printWORD
   501 2374 CA				dex
   502 2375 20 3A 20			@printEOL
   503
   504 				; optimize FAIL (100, examples\valbci.pas), line = 24
   505 2378 E8				inx
   506 2379 AD EB 23 95 98		mva I :STACKORIGIN,x
   507 237E AD EC 23 95 A8		mva I+1 :STACKORIGIN+STACKWIDTH,x
   508 2383 AD ED 23 95 B8		mva I+2 :STACKORIGIN+STACKWIDTH*2,x
   509 2388 AD EE 23 95 C8		mva I+3 :STACKORIGIN+STACKWIDTH*3,x
   510 238D 20 81 20			jsr @printINT
   511 2390 CA				dex
   512 2391 20 3A 20			@printEOL
   513
   514 				; optimize FAIL ('CRT.READKEY', examples\valbci.pas), line = 25
   515 2394 20 FE 22			jsr CRT.READKEY
   516 2397 B5 98 8D E7 23		mva :STACKORIGIN,x KEY
   517 239C CA				dex
   518
   519 				; ------------------------------------------------------------
   520
   521 = 23E7			KEY	= DATAORIGIN+$0032
   522 = 23E8			B	= DATAORIGIN+$0033
   523 = 23E9			C	= DATAORIGIN+$0034
   524 = 23EB			I	= DATAORIGIN+$0036
   525
   526 = 23E7			@VarData	= KEY
   527 = 0008			@VarDataSize	= 8
   528
   529 239D			@exit
   530 					.ifdef @new
   531 					@FreeMem #@VarData #@VarDataSize
   532 					eif
   533 239D 60				rts						; ret
   534 				.endl
   535 239E			l_0027
   536
   537 				; optimize FAIL ('MAINPROC', examples\valbci.pas), line = 29
   538 239E 20 0F 23			jsr MAINPROC
   539
   540 				; ------------------------------------------------------------
   541
   542 23A1			@exit
   543
   544 23A1 A2 00		@halt	ldx #0
   545 23A3 9A				txs
   546
   547 23A4 60				rts
   548
   549 				; ------------------------------------------------------------
   550
   551 23A5 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   552
   553 				; ------------------------------------------------------------
   554
   555 23B5			.local	@DEFINES
   556 23B5			ATARI
   557 				.endl
   558
   559 				.endl							; MAIN
   560
   561 				; ------------------------------------------------------------
   562 				; ------------------------------------------------------------
   563
   564 				.macro	UNITINITIALIZATION
   565 				
   566 					.ifdef MAIN.SYSTEM.@UnitInit
   567 					jsr MAIN.SYSTEM.@UnitInit
   568 					eif
   569 				
   570 					.ifdef MAIN.DOS.@UnitInit
   571 					jsr MAIN.DOS.@UnitInit
   572 					eif
   573 				
   574 					.ifdef MAIN.STRUTILS.@UnitInit
   575 					jsr MAIN.STRUTILS.@UnitInit
   576 					eif
   577 				
   578 					.ifdef MAIN.SYSUTILS.@UnitInit
   579 					jsr MAIN.SYSUTILS.@UnitInit
   580 					eif
   581 				
   582 					.ifdef MAIN.ATARI.@UnitInit
   583 					jsr MAIN.ATARI.@UnitInit
   584 					eif
   585 				
   586 					.ifdef MAIN.CRT.@UnitInit
   587 					jsr MAIN.CRT.@UnitInit
   588 					eif
   589 				.endm
   590
   591 				; ------------------------------------------------------------
   592
   593 					ift .SIZEOF(MAIN.SYSTEM) > 0
   594 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   594 				SYSTEM: $2295..$2298
   595 					eif
   596
   597 					ift .SIZEOF(MAIN.DOS) > 0
   598 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   599 					eif
   600
   601 					ift .SIZEOF(MAIN.STRUTILS) > 0
   602 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   603 					eif
   604
   605 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   606 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   606 				SYSUTILS: $2299..$22FD
   607 					eif
   608
   609 					ift .SIZEOF(MAIN.ATARI) > 0
   610 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   611 					eif
   612
   613 					ift .SIZEOF(MAIN.CRT) > 0
   614 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   614 				CRT: $22FE..$230E
   615 					eif
   616
   617 					.print 'CODE: ',CODEORIGIN,'..',*-1
   617 				CODE: $2000..$23B4
   618
   619 				; ------------------------------------------------------------
   620
   621 23B5			DATAORIGIN
   622 23B5 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   623
   624 = 0006			VARINITSIZE	= *-DATAORIGIN
   625 = 003A			VARDATASIZE	= 58
   626
   627 = 23EF			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   628
   629 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   629 				DATA: $23B5..$23EF
   630
   631 02E0-02E1> 76 22			run START
   632
   633 				; ------------------------------------------------------------
   634
   635 				.macro	STATICDATA
   636 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $03 $31 $32  $30 $00 $05 $36 $35 $30 $30 $30
   637 				.by  $00 $05 $2D $33 $34 $30 $30 $00
   638 				.endm
   639
   640 					end
