mads 2.1.0 build 8 (23 Dec 19)
   388 					opt l+
   101
   102 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   102 				ZPAGE: $0080..$00D7
   103
   104 				.print 'RTLIB: ',RTLIB,'..',*-1
   104 				RTLIB: $213C..$2229
   105
   106 				; ------------------------------------------------------------
   107
   108 222A			START
   109 222A BA				tsx
   110 222B 8E 28 24			stx MAIN.@halt+1
   111
   112 					.ifdef fmulinit
   113 					fmulinit
   114 					eif
   115
   116 = 0019			VLEN	= VARDATASIZE-VARINITSIZE
   117 = 2451			VADR	= DATAORIGIN+VARINITSIZE
   118
   119 					ift VADR > $BFFF
   120 					ert 'Invalid memory address range ',VADR
   121 					eli (VLEN>0) && (VLEN<=256)
   122 222E A2 E7			ldx #256-VLEN
   123 2230 A9 00			lda #0
   124 2232 9D 6A 23 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>0
   126 					@fill #VADR #VLEN #0
   127 					eif
   128
   129 					.ifdef MAIN.@DEFINES.ROMOFF
   130 					icl 'atari\romoff.asm'
   131 					.endif
   132
   133 2238 A9 6A 85 82 A9 24 + 	mwa #PROGRAMSTACK psptr
   134
   135 2240 A2 0F			ldx #$0f					; DOS II+/D ParamStr
   136 2242 BD 40 03 9D 2B 24 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   137
   138 224B E8				inx						; X = 0
   139 224C 86 90			stx bp						; BP = 0
   140
   141 224E 8E 08 D2			stx audctl					; reset POKEY
   142 2251 A9 03			lda #3
   143 2253 8D 0F D2			sta skctl
   144
   145 2256 CA				dex						; X = 255
   146
   147 2257				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: peekpoke.a65]
   148
   149 2257			.local	MAIN						; PROCEDURE
   150
   151 2257 4C 24 24			jmp l_0143
   152
   153 				; ------------------------------------------------------------
   154
   155 225A			.local	SYSTEM						; UNIT
   156
   157 225A			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   158
   159 				; ------------------------------------------------------------
   160
   161 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   162 				; as Pointer
   163 225A B5 98 85 88			mva :STACKORIGIN,x A
   164 225E B5 A8 85 89			mva :STACKORIGIN+STACKWIDTH,x A+1
   165 2262 CA				dex
   166
   167 				; ---------------------  ASM Block 001  ---------------------
   168
   169 2263 A0 00			ldy #0
   170 2265 B1 88 8D 46 24		mva (edx),y Result
   171
   172 226A			@exit
   173
   174 				; ------------------------------------------------------------
   175
   176 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   177 				; as Pointer
   178
   179 226A E8				inx
   180 226B AD 46 24 95 98		mva RESULT :STACKORIGIN,x
   181
   182 					.ifdef @new
   183 					lda <@VarData
   184 					sta :ztmp
   185 					lda >@VarData
   186 					ldy #@VarDataSize-1
   187 					jmp @FreeMem
   188 					eif
   189
   190 				; ------------------------------------------------------------
   191
   192 = 0088			A	= edx
   193 = 2446			RESULT	= DATAORIGIN+$000B
   194
   195 = 2446			@VarData	= RESULT
   196 = 0001			@VarDataSize	= 1
   197
   198 2270 60				rts						; ret
   199 				.endl
   200
   201 2271			.local	DPEEK						; FUNCTION | ASSEMBLER | REGISTER
   202
   203 				; ------------------------------------------------------------
   204
   205 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   206 				; as Pointer
   207 2271 B5 98 85 88			mva :STACKORIGIN,x A
   208 2275 B5 A8 85 89			mva :STACKORIGIN+STACKWIDTH,x A+1
   209 2279 CA				dex
   210
   211 				; ---------------------  ASM Block 002  ---------------------
   212
   213 227A A0 00			ldy #0
   214 227C B1 88 8D 47 24		mva (edx),y Result
   215 2281 C8				iny
   216 2282 B1 88 8D 48 24		mva (edx),y Result+1
   217
   218 2287			@exit
   219
   220 				; ------------------------------------------------------------
   221
   222 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   223 				; as Pointer
   224
   225 2287 E8				inx
   226 2288 AD 47 24 95 98		mva RESULT :STACKORIGIN,x
   227 228D AD 48 24 95 A8		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   228
   229 					.ifdef @new
   230 					lda <@VarData
   231 					sta :ztmp
   232 					lda >@VarData
   233 					ldy #@VarDataSize-1
   234 					jmp @FreeMem
   235 					eif
   236
   237 				; ------------------------------------------------------------
   238
   239 = 0088			A	= edx
   240 = 2447			RESULT	= DATAORIGIN+$000C
   241
   242 = 2447			@VarData	= RESULT
   243 = 0002			@VarDataSize	= 2
   244
   245 2292 60				rts						; ret
   246 				.endl
   247
   248 2293			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   249
   250 				; ------------------------------------------------------------
   251
   252 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   253 				; as Pointer
   254 2293 B5 98 85 8C			mva :STACKORIGIN,x VALUE
   255 2297 CA				dex
   256
   257 				; ------------------------------------------------------------
   258
   259 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   260 				; as Pointer
   261 2298 B5 98 85 88			mva :STACKORIGIN,x A
   262 229C B5 A8 85 89			mva :STACKORIGIN+STACKWIDTH,x A+1
   263 22A0 CA				dex
   264
   265 				; ---------------------  ASM Block 021  ---------------------
   266
   267 22A1 A0 00			ldy #0
   268 22A3 A5 8C 91 88			mva value (edx),y
   269
   270
   271 				; ------------------------------------------------------------
   272
   273 = 0088			A	= edx
   274 = 008C			VALUE	= ecx
   275 22A7			@exit
   276 					.ifdef @new
   277 					lda <@VarData
   278 					sta :ztmp
   279 					lda >@VarData
   280 					ldy #@VarDataSize-1
   281 					jmp @FreeMem
   282 					eif
   283 22A7 60				rts						; ret
   284 				.endl
   285
   286 				; ------------------------------------------------------------
   287
   288 = 0101			__PORTB_BANKS	= $0101
   289 = 0648			M_PI_2	= $0648
   290 = 0192			D_PI_2	= $0192
   291 = 0004			D_PI_180	= $04
   292 = 0000			MGTIA	= $00
   293 = 0080			MVBXE	= $80
   294 = 0000			VBXE_XDLADR	= $00
   295 = 0100			VBXE_BCBADR	= $0100
   296 = 1000			VBXE_MAPADR	= $1000
   297 = 5000			VBXE_OVRADR	= $5000
   298 = B000			VBXE_WINDOW	= $B000
   299 = 0000			IDLI	= $00
   300 = 0001			IVBL	= $01
   301 = 00FE			CH_DELCHR	= $FE
   302 = 009B			CH_ENTER	= $9B
   303 = 001B			CH_ESC	= $1B
   304 = 001C			CH_CURS_UP	= $1C
   305 = 001D			CH_CURS_DOWN	= $1D
   306 = 001E			CH_CURS_LEFT	= $1E
   307 = 001F			CH_CURS_RIGHT	= $1F
   308 = 007F			CH_TAB	= $7F
   309 = 009B			CH_EOL	= $9B
   310 = 007D			CH_CLR	= $7D
   311 = 00FD			CH_BELL	= $FD
   312 = 007E			CH_DEL	= $7E
   313 = 009C			CH_DELLINE	= $9C
   314 = 009D			CH_INSLINE	= $9D
   315 = 0000			COLOR_BLACK	= $00
   316 = 000E			COLOR_WHITE	= $0E
   317 = 0032			COLOR_RED	= $32
   318 = 0096			COLOR_CYAN	= $96
   319 = 0068			COLOR_VIOLET	= $68
   320 = 00C4			COLOR_GREEN	= $C4
   321 = 0074			COLOR_BLUE	= $74
   322 = 00EE			COLOR_YELLOW	= $EE
   323 = 0028			COLOR_ORANGE	= $28
   324 = 00E4			COLOR_BROWN	= $E4
   325 = 003C			COLOR_LIGHTRED	= $3C
   326 = 0004			COLOR_GRAY1	= $04
   327 = 0006			COLOR_GRAY2	= $06
   328 = 000A			COLOR_GRAY3	= $0A
   329 = 00CC			COLOR_LIGHTGREEN	= $CC
   330 = 007C			COLOR_LIGHTBLUE	= $7C
   331 = 0004			FMOPENREAD	= $04
   332 = 0008			FMOPENWRITE	= $08
   333 = 0009			FMOPENAPPEND	= $09
   334 = 000C			FMOPENREADWRITE	= $0C
   335 = 243B			SCREENWIDTH	= DATAORIGIN+$0000
   336 = 243D			SCREENHEIGHT	= DATAORIGIN+$0002
   337 = 243F			DATESEPARATOR	= DATAORIGIN+$0004
   338 = D014			TVSYSTEM	= $D014
   339 = 02C0			adr.PALETTE	= $02C0
   340 22A8			.var PALETTE	= adr.PALETTE .word
   341 = D012			adr.HPALETTE	= $D012
   342 22A8			.var HPALETTE	= adr.HPALETTE .word
   343 = 2440			FILEMODE	= DATAORIGIN+$0005
   344 = 2441			GRAPHMODE	= DATAORIGIN+$0006
   345 = 2442			IORESULT	= DATAORIGIN+$0007
   346 = 2443			EOLN	= DATAORIGIN+$0008
   347 = 2444			RNDSEED	= DATAORIGIN+$0009
   348
   349 = 22A8 C0 02		PALETTE
   349 = 22AA 12 D0		HPALETTE
   349 				.endl							; UNIT SYSTEM
   350
   351 				; ------------------------------------------------------------
   352
   353 22AC			.local	ATARI						; UNIT
   354
   355 				; ------------------------------------------------------------
   356
   357 = 0012			RTCLOK	= $12
   358 = 004D			ATRACT	= $4D
   359 = 0052			LMARGIN	= $52
   360 = 0053			RMARGIN	= $53
   361 = 0054			ROWCRS	= $54
   362 = 0055			COLCRS	= $55
   363 = 0057			DINDEX	= $57
   364 = 0058			SAVMSC	= $58
   365 = 0062			PALNTS	= $62
   366 = 006A			RAMTOP	= $6A
   367 = 0200			VDSLST	= $0200
   368 = 0230			SDLSTL	= $0230
   369 = 0290			TXTROW	= $0290
   370 = 0291			TXTCOL	= $0291
   371 = 0293			TINDEX	= $0293
   372 = 0294			TXTMSC	= $0294
   373 = 022F			SDMCTL	= $022F
   374 = 026F			GPRIOR	= $026F
   375 = 02F0			CRSINH	= $02F0
   376 = 02F3			CHACT	= $02F3
   377 = 02F4			CHBAS	= $02F4
   378 = 02FC			CH	= $02FC
   379 = 02C0			PCOLR0	= $02C0
   380 = 02C1			PCOLR1	= $02C1
   381 = 02C2			PCOLR2	= $02C2
   382 = 02C3			PCOLR3	= $02C3
   383 = 02C4			COLOR0	= $02C4
   384 = 02C5			COLOR1	= $02C5
   385 = 02C6			COLOR2	= $02C6
   386 = 02C7			COLOR3	= $02C7
   387 = 02C8			COLOR4	= $02C8
   388 = 02C8			COLBAKS	= $02C8
   389 = D000			HPOSP0	= $D000
   390 = D001			HPOSP1	= $D001
   391 = D002			HPOSP2	= $D002
   392 = D003			HPOSP3	= $D003
   393 = D004			HPOSM0	= $D004
   394 = D005			HPOSM1	= $D005
   395 = D006			HPOSM2	= $D006
   396 = D007			HPOSM3	= $D007
   397 = D008			SIZEP0	= $D008
   398 = D009			SIZEP1	= $D009
   399 = D00A			SIZEP2	= $D00A
   400 = D00B			SIZEP3	= $D00B
   401 = D00C			SIZEM	= $D00C
   402 = D00D			GRAFP0	= $D00D
   403 = D00E			GRAFP1	= $D00E
   404 = D00F			GRAFP2	= $D00F
   405 = D010			GRAFP3	= $D010
   406 = D011			GRAFM	= $D011
   407 = D004			P0PF	= $D004
   408 = D014			PAL	= $D014
   409 = D012			COLPM0	= $D012
   410 = D013			COLPM1	= $D013
   411 = D014			COLPM2	= $D014
   412 = D015			COLPM3	= $D015
   413 = D016			COLPF0	= $D016
   414 = D017			COLPF1	= $D017
   415 = D018			COLPF2	= $D018
   416 = D019			COLPF3	= $D019
   417 = D01A			COLBK	= $D01A
   418 = D01B			PRIOR	= $D01B
   419 = D01D			GRACTL	= $D01D
   420 = D01E			HITCLR	= $D01E
   421 = D200			AUDF1	= $D200
   422 = D201			AUDC1	= $D201
   423 = D202			AUDF2	= $D202
   424 = D203			AUDC2	= $D203
   425 = D204			AUDF3	= $D204
   426 = D205			AUDC3	= $D205
   427 = D206			AUDF4	= $D206
   428 = D207			AUDC4	= $D207
   429 = D208			AUDCTL	= $D208
   430 = D20F			SKSTAT	= $D20F
   431 = D301			PORTB	= $D301
   432 = D400			DMACTL	= $D400
   433 = D401			CHACTL	= $D401
   434 = D402			DLISTL	= $D402
   435 = D404			HSCROL	= $D404
   436 = D405			VSCROL	= $D405
   437 = D407			PMBASE	= $D407
   438 = D409			CHBASE	= $D409
   439 = D40A			WSYNC	= $D40A
   440 = D40B			VCOUNT	= $D40B
   441 = D40C			PENH	= $D40C
   442 = D40D			PENV	= $D40D
   443 = D40E			NMIEN	= $D40E
   444
   445 				.endl							; UNIT ATARI
   446
   447 				; ------------------------------------------------------------
   448
   449 22AC			.local	CRT						; UNIT
   450
   451 				; ------------------------------------------------------------
   452
   453 = 2449			TEXTATTR	= DATAORIGIN+$000E
   454 = D01F			CONSOL	= $D01F
   455 = 0000			CN_START_SELECT_OPTION	= $00
   456 = 0001			CN_SELECT_OPTION	= $01
   457 = 0002			CN_START_OPTION	= $02
   458 = 0003			CN_OPTION	= $03
   459 = 0004			CN_START_SELECT	= $04
   460 = 0005			CN_SELECT	= $05
   461 = 0006			CN_START	= $06
   462 = 0007			CN_NONE	= $07
   463 = 0000			BW40	= $00
   464 = 0001			CO40	= $01
   465 = 0002			BW80	= $02
   466 = 0003			CO80	= $03
   467 = 0007			MONO	= $07
   468 = 0001			C40	= $01
   469 = 0003			C80	= $03
   470 = 0000			BLACK	= $00
   471 = 0001			BLUE	= $01
   472 = 0002			GREEN	= $02
   473 = 0003			CYAN	= $03
   474 = 0004			RED	= $04
   475 = 0005			MAGENTA	= $05
   476 = 0006			BROWN	= $06
   477 = 0007			LIGHTGRAY	= $07
   478 = 0008			DARKGRAY	= $08
   479 = 0009			LIGHTBLUE	= $09
   480 = 000A			LIGHTGREEN	= $0A
   481 = 000B			LIGHTCYAN	= $0B
   482 = 000C			LIGHTRED	= $0C
   483 = 000D			LIGHTMAGENTA	= $0D
   484 = 000E			YELLOW	= $0E
   485 = 000F			WHITE	= $0F
   486 = 0080			BLINK	= $80
   487
   488 				.endl							; UNIT CRT
   489
   490 				; ------------------------------------------------------------
   491
   492 22AC			.local	TYPES						; UNIT
   493
   494 				; ------------------------------------------------------------
   495
   496 				.endl							; UNIT TYPES
   497
   498 				; ------------------------------------------------------------
   499
   500 22AC			.local	GRAPH						; UNIT
   501
   502 				; ------------------------------------------------------------
   503
   504 = 0080			CURRENTDRIVER	= $80
   505 = 0000			DETECT	= $00
   506 = 0001			CGA	= $01
   507 = 0002			MCGA	= $02
   508 = 0003			EGA	= $03
   509 = 0004			EGA64	= $04
   510 = 0005			EGAMONO	= $05
   511 = 0006			LOWRES	= $06
   512 = 0007			HERCMONO	= $07
   513 = 0009			VGA	= $09
   514 = 000A			VESA	= $0A
   515 = 000B			D1BIT	= $0B
   516 = 000C			D2BIT	= $0C
   517 = 000D			D4BIT	= $0D
   518 = 000E			D6BIT	= $0E
   519 = 000F			D8BIT	= $0F
   520 = 0010			D12BIT	= $10
   521 = 0018			M640X400	= $18
   522 = 0018			M640X480	= $18
   523 = 0001			GROK	= $01
   524 = 00FF			GRNOINITGRAPH	= $FF
   525 = 00FE			GRNOTDETECTED	= $FE
   526 = 00FD			GRFILENOTFOUND	= $FD
   527 = 00FC			GRINVALIDDRIVER	= $FC
   528 = 00FB			GRNOLOADMEM	= $FB
   529 = 00FA			GRNOSCANMEM	= $FA
   530 = 00F9			GRNOFLOODMEM	= $F9
   531 = 00F8			GRFONTNOTFOUND	= $F8
   532 = 00F7			GRNOFONTMEM	= $F7
   533 = 00F6			GRINVALIDMODE	= $F6
   534 = 00F5			GRERROR	= $F5
   535 = 00F4			GRIOERROR	= $F4
   536 = 00F3			GRINVALIDFONT	= $F3
   537 = 00F2			GRINVALIDFONTNUM	= $F2
   538 = 00EE			GRINVALIDVERSION	= $EE
   539 = 0000			CGAC0	= $00
   540 = 0001			CGAC1	= $01
   541 = 0002			CGAC2	= $02
   542 = 0003			CGAC3	= $03
   543 = 0004			CGAHI	= $04
   544 = 0000			MCGAC0	= $00
   545 = 0001			MCGAC1	= $01
   546 = 0002			MCGAC2	= $02
   547 = 0003			MCGAC3	= $03
   548 = 0004			MCGAMED	= $04
   549 = 0005			MCGAHI	= $05
   550 = 0000			EGALO	= $00
   551 = 0001			EGAHI	= $01
   552 = 0000			EGA64LO	= $00
   553 = 0001			EGA64HI	= $01
   554 = 0003			EGAMONOHI	= $03
   555 = 000A			VGALO	= $0A
   556 = 001F			VGAMED	= $1F
   557 = 0018			VGAHI	= $18
   558 = 244A			WIN_LEFT	= DATAORIGIN+$000F
   559 = 244C			WIN_RIGHT	= DATAORIGIN+$0011
   560 = 244E			WIN_TOP	= DATAORIGIN+$0013
   561 = 2450			WIN_BOTTOM	= DATAORIGIN+$0015
   562 = 2452			GRAPHRESULT	= DATAORIGIN+$0017
   563 = 2453			GETCOLOR	= DATAORIGIN+$0018
   564 = 2454			adr.LASTARCCOORDS	= DATAORIGIN+$0019
   565 22AC			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   566 = 2454			LASTARCCOORDS.X	= DATAORIGIN+$0019
   567 = 2456			LASTARCCOORDS.Y	= DATAORIGIN+$001B
   568 = 2458			LASTARCCOORDS.XSTART	= DATAORIGIN+$001D
   569 = 245A			LASTARCCOORDS.YSTART	= DATAORIGIN+$001F
   570 = 245C			LASTARCCOORDS.XEND	= DATAORIGIN+$0021
   571 = 245E			LASTARCCOORDS.YEND	= DATAORIGIN+$0023
   572 = 2460			CURRENTX	= DATAORIGIN+$0025
   573 = 2462			CURRENTY	= DATAORIGIN+$0027
   574 = 2464			VIDEORAM	= DATAORIGIN+$0029
   575 = 2466			SCANLINE_WIDTH	= DATAORIGIN+$002B
   576
   577 = 22AC 54 24		LASTARCCOORDS
   577 				.endl							; UNIT GRAPH
   578
   579 22AE			.local	WAITFORKEYPROC					; PROCEDURE
   580
   581 				; --- WhileProlog
   582 22AE			l_0206
   583
   584 				; optimize OK (examples\peekpoke.pas), line = 17
   585
   586 22AE AD FC 02			lda CH
   587 22B1 C9 FF			cmp #$FF
   588 22B3 F0 F9			jeq l_0206
   589
   590 				; optimize OK (examples\peekpoke.pas), line = 19
   591
   592 22B5 A9 FF 8D FC 02		mva #$FF CH
   593 22BA			@exit
   594 					.ifdef @new
   595 					lda <@VarData
   596 					sta :ztmp
   597 					lda >@VarData
   598 					ldy #@VarDataSize-1
   599 					jmp @FreeMem
   600 					eif
   601 22BA 60				rts						; ret
   602 				.endl
   603
   604 22BB			.local	MAINPROC					; PROCEDURE
   605
   606 				; optimize FAIL (100, examples\peekpoke.pas), line = 24
   607 					@print #$7D
   607 				 LDY# $7D\ JSR @PRINT
   607 22BB A0 7D		 LDY# $7D
   607 22BD 20 54 21		 JSR @PRINT
   608
   609 				; optimize FAIL (100, examples\peekpoke.pas), line = 25
   610 					@printSTRING #CODEORIGIN+$0000
   610 				 LDY> CODEORIGIN+$0000\ LDA< CODEORIGIN+$0000\ JSR @PRINTSTRING
   610 22C0 A0 20		 LDY> CODEORIGIN+$0000
   610 22C2 A9 00		 LDA< CODEORIGIN+$0000
   610 22C4 20 5D 21		 JSR @PRINTSTRING
   611 22C7 20 4F 21			@printEOL
   612
   613 				; optimize FAIL (100, examples\peekpoke.pas), line = 26
   614 					@printSTRING #CODEORIGIN+$0013
   614 				 LDY> CODEORIGIN+$0013\ LDA< CODEORIGIN+$0013\ JSR @PRINTSTRING
   614 22CA A0 20		 LDY> CODEORIGIN+$0013
   614 22CC A9 13		 LDA< CODEORIGIN+$0013
   614 22CE 20 5D 21		 JSR @PRINTSTRING
   615 22D1 20 4F 21			@printEOL
   616
   617 				; optimize FAIL (100, examples\peekpoke.pas), line = 27
   618 					@printSTRING #CODEORIGIN+$0027
   618 				 LDY> CODEORIGIN+$0027\ LDA< CODEORIGIN+$0027\ JSR @PRINTSTRING
   618 22D4 A0 20		 LDY> CODEORIGIN+$0027
   618 22D6 A9 27		 LDA< CODEORIGIN+$0027
   618 22D8 20 5D 21		 JSR @PRINTSTRING
   619 22DB 20 4F 21			@printEOL
   620
   621 				; optimize OK (examples\peekpoke.pas), line = 28
   622
   623 22DE A9 00			lda #$00
   624 22E0 85 91			sta :bp+1
   625 22E2 AC FC 02			ldy CH
   626 22E5 B1 90			lda (:bp),y
   627 22E7 8D 67 24			sta N
   628
   629 				; optimize FAIL (100, examples\peekpoke.pas), line = 29
   630 					@printSTRING #CODEORIGIN+$0029
   630 				 LDY> CODEORIGIN+$0029\ LDA< CODEORIGIN+$0029\ JSR @PRINTSTRING
   630 22EA A0 20		 LDY> CODEORIGIN+$0029
   630 22EC A9 29		 LDA< CODEORIGIN+$0029
   630 22EE 20 5D 21		 JSR @PRINTSTRING
   631 22F1 20 4F 21			@printEOL
   632
   633 				; optimize FAIL (100, examples\peekpoke.pas), line = 30
   634 					@printSTRING #CODEORIGIN+$0026
   634 				 LDY> CODEORIGIN+$0026\ LDA< CODEORIGIN+$0026\ JSR @PRINTSTRING
   634 22F4 A0 20		 LDY> CODEORIGIN+$0026
   634 22F6 A9 26		 LDA< CODEORIGIN+$0026
   634 22F8 20 5D 21		 JSR @PRINTSTRING
   635 22FB 20 4F 21			@printEOL
   636
   637 				; optimize FAIL (100, examples\peekpoke.pas), line = 31
   638 22FE AD 67 24			lda N
   639 2301 20 8E 21			jsr @printBYTE._a
   640 2304 20 4F 21			@printEOL
   641
   642 				; optimize FAIL (100, examples\peekpoke.pas), line = 32
   643 					@printSTRING #CODEORIGIN+$0026
   643 				 LDY> CODEORIGIN+$0026\ LDA< CODEORIGIN+$0026\ JSR @PRINTSTRING
   643 2307 A0 20		 LDY> CODEORIGIN+$0026
   643 2309 A9 26		 LDA< CODEORIGIN+$0026
   643 230B 20 5D 21		 JSR @PRINTSTRING
   644 230E 20 4F 21			@printEOL
   645
   646 				; optimize OK (examples\peekpoke.pas), line = 33
   647
   648 2311 AD C6 02			lda $02C6
   649 2314 8D 67 24			sta N
   650
   651 				; optimize FAIL (100, examples\peekpoke.pas), line = 34
   652 					@printSTRING #CODEORIGIN+$004F
   652 				 LDY> CODEORIGIN+$004F\ LDA< CODEORIGIN+$004F\ JSR @PRINTSTRING
   652 2317 A0 20		 LDY> CODEORIGIN+$004F
   652 2319 A9 4F		 LDA< CODEORIGIN+$004F
   652 231B 20 5D 21		 JSR @PRINTSTRING
   653 231E 20 4F 21			@printEOL
   654
   655 				; optimize FAIL (100, examples\peekpoke.pas), line = 35
   656 					@printSTRING #CODEORIGIN+$0026
   656 				 LDY> CODEORIGIN+$0026\ LDA< CODEORIGIN+$0026\ JSR @PRINTSTRING
   656 2321 A0 20		 LDY> CODEORIGIN+$0026
   656 2323 A9 26		 LDA< CODEORIGIN+$0026
   656 2325 20 5D 21		 JSR @PRINTSTRING
   657 2328 20 4F 21			@printEOL
   658
   659 				; optimize FAIL (100, examples\peekpoke.pas), line = 36
   660 232B AD 67 24			lda N
   661 232E 20 8E 21			jsr @printBYTE._a
   662 2331 20 4F 21			@printEOL
   663
   664 				; optimize FAIL (100, examples\peekpoke.pas), line = 37
   665 					@printSTRING #CODEORIGIN+$0026
   665 				 LDY> CODEORIGIN+$0026\ LDA< CODEORIGIN+$0026\ JSR @PRINTSTRING
   665 2334 A0 20		 LDY> CODEORIGIN+$0026
   665 2336 A9 26		 LDA< CODEORIGIN+$0026
   665 2338 20 5D 21		 JSR @PRINTSTRING
   666 233B 20 4F 21			@printEOL
   667
   668 				; optimize OK (examples\peekpoke.pas), line = 38
   669
   670 233E AD 2F 02			lda $022F
   671 2341 8D 67 24			sta N
   672
   673 				; optimize FAIL (100, examples\peekpoke.pas), line = 39
   674 					@printSTRING #CODEORIGIN+$0075
   674 				 LDY> CODEORIGIN+$0075\ LDA< CODEORIGIN+$0075\ JSR @PRINTSTRING
   674 2344 A0 20		 LDY> CODEORIGIN+$0075
   674 2346 A9 75		 LDA< CODEORIGIN+$0075
   674 2348 20 5D 21		 JSR @PRINTSTRING
   675 234B 20 4F 21			@printEOL
   676
   677 				; optimize FAIL (100, examples\peekpoke.pas), line = 40
   678 					@printSTRING #CODEORIGIN+$0026
   678 				 LDY> CODEORIGIN+$0026\ LDA< CODEORIGIN+$0026\ JSR @PRINTSTRING
   678 234E A0 20		 LDY> CODEORIGIN+$0026
   678 2350 A9 26		 LDA< CODEORIGIN+$0026
   678 2352 20 5D 21		 JSR @PRINTSTRING
   679 2355 20 4F 21			@printEOL
   680
   681 				; optimize FAIL (100, examples\peekpoke.pas), line = 41
   682 2358 AD 67 24			lda N
   683 235B 20 8E 21			jsr @printBYTE._a
   684 235E 20 4F 21			@printEOL
   685
   686 				; optimize FAIL (100, examples\peekpoke.pas), line = 42
   687 					@printSTRING #CODEORIGIN+$0026
   687 				 LDY> CODEORIGIN+$0026\ LDA< CODEORIGIN+$0026\ JSR @PRINTSTRING
   687 2361 A0 20		 LDY> CODEORIGIN+$0026
   687 2363 A9 26		 LDA< CODEORIGIN+$0026
   687 2365 20 5D 21		 JSR @PRINTSTRING
   688 2368 20 4F 21			@printEOL
   689
   690 				; optimize OK (examples\peekpoke.pas), line = 43
   691
   692 236B AD 30 02			lda $0230
   693 236E 8D 68 24			sta MEM
   694 2371 AD 31 02			lda $0230+1
   695 2374 8D 69 24			sta MEM+1
   696
   697 				; optimize FAIL (100, examples\peekpoke.pas), line = 44
   698 					@printSTRING #CODEORIGIN+$009B
   698 				 LDY> CODEORIGIN+$009B\ LDA< CODEORIGIN+$009B\ JSR @PRINTSTRING
   698 2377 A0 20		 LDY> CODEORIGIN+$009B
   698 2379 A9 9B		 LDA< CODEORIGIN+$009B
   698 237B 20 5D 21		 JSR @PRINTSTRING
   699 237E 20 4F 21			@printEOL
   700
   701 				; optimize FAIL (100, examples\peekpoke.pas), line = 45
   702 					@printSTRING #CODEORIGIN+$00C0
   702 				 LDY> CODEORIGIN+$00C0\ LDA< CODEORIGIN+$00C0\ JSR @PRINTSTRING
   702 2381 A0 20		 LDY> CODEORIGIN+$00C0
   702 2383 A9 C0		 LDA< CODEORIGIN+$00C0
   702 2385 20 5D 21		 JSR @PRINTSTRING
   703 2388 20 4F 21			@printEOL
   704
   705 				; optimize FAIL (100, examples\peekpoke.pas), line = 46
   706 					@printSTRING #CODEORIGIN+$0026
   706 				 LDY> CODEORIGIN+$0026\ LDA< CODEORIGIN+$0026\ JSR @PRINTSTRING
   706 238B A0 20		 LDY> CODEORIGIN+$0026
   706 238D A9 26		 LDA< CODEORIGIN+$0026
   706 238F 20 5D 21		 JSR @PRINTSTRING
   707 2392 20 4F 21			@printEOL
   708
   709 				; optimize FAIL (100, examples\peekpoke.pas), line = 47
   710 2395 AD 68 24			lda MEM
   711 2398 AC 69 24			ldy MEM+1
   712 239B 20 9F 21			jsr @printWORD._ay
   713 239E 20 4F 21			@printEOL
   714
   715 				; optimize FAIL (100, examples\peekpoke.pas), line = 48
   716 					@printSTRING #CODEORIGIN+$0026
   716 				 LDY> CODEORIGIN+$0026\ LDA< CODEORIGIN+$0026\ JSR @PRINTSTRING
   716 23A1 A0 20		 LDY> CODEORIGIN+$0026
   716 23A3 A9 26		 LDA< CODEORIGIN+$0026
   716 23A5 20 5D 21		 JSR @PRINTSTRING
   717 					@print #$9B
   717 				 LDY# $9B\ JSR @PRINT
   717 23A8 A0 9B		 LDY# $9B
   717 23AA 20 54 21		 JSR @PRINT
   718 					@printSTRING #CODEORIGIN+$0026
   718 				 LDY> CODEORIGIN+$0026\ LDA< CODEORIGIN+$0026\ JSR @PRINTSTRING
   718 23AD A0 20		 LDY> CODEORIGIN+$0026
   718 23AF A9 26		 LDA< CODEORIGIN+$0026
   718 23B1 20 5D 21		 JSR @PRINTSTRING
   719 					@print #$9B
   719 				 LDY# $9B\ JSR @PRINT
   719 23B4 A0 9B		 LDY# $9B
   719 23B6 20 54 21		 JSR @PRINT
   720 					@printSTRING #CODEORIGIN+$00CA
   720 				 LDY> CODEORIGIN+$00CA\ LDA< CODEORIGIN+$00CA\ JSR @PRINTSTRING
   720 23B9 A0 20		 LDY> CODEORIGIN+$00CA
   720 23BB A9 CA		 LDA< CODEORIGIN+$00CA
   720 23BD 20 5D 21		 JSR @PRINTSTRING
   721 					@print #$9B
   721 				 LDY# $9B\ JSR @PRINT
   721 23C0 A0 9B		 LDY# $9B
   721 23C2 20 54 21		 JSR @PRINT
   722 					@printSTRING #CODEORIGIN+$0026
   722 				 LDY> CODEORIGIN+$0026\ LDA< CODEORIGIN+$0026\ JSR @PRINTSTRING
   722 23C5 A0 20		 LDY> CODEORIGIN+$0026
   722 23C7 A9 26		 LDA< CODEORIGIN+$0026
   722 23C9 20 5D 21		 JSR @PRINTSTRING
   723
   724 				; optimize FAIL (100, examples\peekpoke.pas), line = 49
   725 					@printSTRING #CODEORIGIN+$00DE
   725 				 LDY> CODEORIGIN+$00DE\ LDA< CODEORIGIN+$00DE\ JSR @PRINTSTRING
   725 23CC A0 20		 LDY> CODEORIGIN+$00DE
   725 23CE A9 DE		 LDA< CODEORIGIN+$00DE
   725 23D0 20 5D 21		 JSR @PRINTSTRING
   726 23D3 20 4F 21			@printEOL
   727
   728 				; optimize FAIL ('WAITFORKEYPROC', examples\peekpoke.pas), line = 50
   729 23D6 20 AE 22			jsr WAITFORKEYPROC
   730
   731 				; optimize OK (examples\peekpoke.pas), line = 51
   732
   733 23D9 A9 00 8D C6 02		mva #$00 COL
   734
   735 				; optimize FAIL (100, examples\peekpoke.pas), line = 52
   736 					@printSTRING #CODEORIGIN+$00FE
   736 				 LDY> CODEORIGIN+$00FE\ LDA< CODEORIGIN+$00FE\ JSR @PRINTSTRING
   736 23DE A0 20		 LDY> CODEORIGIN+$00FE
   736 23E0 A9 FE		 LDA< CODEORIGIN+$00FE
   736 23E2 20 5D 21		 JSR @PRINTSTRING
   737 23E5 20 4F 21			@printEOL
   738
   739 				; optimize FAIL ('WAITFORKEYPROC', examples\peekpoke.pas), line = 53
   740 23E8 20 AE 22			jsr WAITFORKEYPROC
   741
   742 				; optimize OK (examples\peekpoke.pas), line = 54
   743
   744 23EB A9 D4			lda #$D4
   745 23ED 8D C6 02			sta $02C6
   746
   747 				; optimize FAIL (100, examples\peekpoke.pas), line = 55
   748 					@printSTRING #CODEORIGIN+$0124
   748 				 LDY> CODEORIGIN+$0124\ LDA< CODEORIGIN+$0124\ JSR @PRINTSTRING
   748 23F0 A0 21		 LDY> CODEORIGIN+$0124
   748 23F2 A9 24		 LDA< CODEORIGIN+$0124
   748 23F4 20 5D 21		 JSR @PRINTSTRING
   749 23F7 20 4F 21			@printEOL
   750
   751 				; optimize FAIL ('WAITFORKEYPROC', examples\peekpoke.pas), line = 56
   752 23FA 20 AE 22			jsr WAITFORKEYPROC
   753
   754 				; optimize OK (examples\peekpoke.pas), line = 57
   755
   756 23FD A9 41 8D 67 24		mva #$41 N
   757
   758 				; optimize OK (examples\peekpoke.pas), line = 58
   759
   760 2402 8D C6 02			sta $02C6
   761
   762 				; optimize FAIL (100, examples\peekpoke.pas), line = 59
   763 					@printSTRING #CODEORIGIN+$0130
   763 				 LDY> CODEORIGIN+$0130\ LDA< CODEORIGIN+$0130\ JSR @PRINTSTRING
   763 2405 A0 21		 LDY> CODEORIGIN+$0130
   763 2407 A9 30		 LDA< CODEORIGIN+$0130
   763 2409 20 5D 21		 JSR @PRINTSTRING
   764 240C 20 4F 21			@printEOL
   765
   766 				; optimize FAIL ('WAITFORKEYPROC', examples\peekpoke.pas), line = 60
   767 240F 20 AE 22			jsr WAITFORKEYPROC
   768
   769 				; optimize OK (examples\peekpoke.pas), line = 61
   770
   771 2412 A9 B8 8D 67 24		mva #$B8 N
   772
   773 				; optimize OK (examples\peekpoke.pas), line = 62
   774
   775 2417 AC C6 02			ldy COL
   776 241A AD 67 24			lda N
   777 241D 99 00 00			sta $0000,y
   778
   779 				; optimize FAIL ('WAITFORKEYPROC', examples\peekpoke.pas), line = 63
   780 2420 20 AE 22			jsr WAITFORKEYPROC
   781 2423			@exit
   782 					.ifdef @new
   783 					lda <@VarData
   784 					sta :ztmp
   785 					lda >@VarData
   786 					ldy #@VarDataSize-1
   787 					jmp @FreeMem
   788 					eif
   789 2423 60				rts						; ret
   790 				.endl
   791 2424			l_0143
   792
   793 				; optimize FAIL ('MAINPROC', examples\peekpoke.pas), line = 67
   794 2424 20 BB 22			jsr MAINPROC
   795
   796 				; ------------------------------------------------------------
   797
   798 = 2467			N	= DATAORIGIN+$002C
   799 = 2468			MEM	= DATAORIGIN+$002D
   800 = 02FC			CH	= $02FC
   801 = 02C6			COL	= $02C6
   802 2427			@exit
   803
   804 2427 A2 00		@halt	ldx #0
   805 2429 9A				txs
   806 					.ifdef MAIN.@DEFINES.ROMOFF
   807 					inc portb
   808 					.endif
   809
   810 242A 60				rts
   811
   812 				; ------------------------------------------------------------
   813
   814 242B 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   815
   816 				; ------------------------------------------------------------
   817
   818 243B			.local	@DEFINES
   819 243B			ATARI
   820 				.endl
   821
   822 				.endl							; MAIN
   823
   824 				; ------------------------------------------------------------
   825 				; ------------------------------------------------------------
   826
   827 				.macro	UNITINITIALIZATION
   828 				
   829 					.ifdef MAIN.SYSTEM.@UnitInit
   830 					jsr MAIN.SYSTEM.@UnitInit
   831 					eif
   832 				
   833 					.ifdef MAIN.ATARI.@UnitInit
   834 					jsr MAIN.ATARI.@UnitInit
   835 					eif
   836 				
   837 					.ifdef MAIN.CRT.@UnitInit
   838 					jsr MAIN.CRT.@UnitInit
   839 					eif
   840 				
   841 					.ifdef MAIN.TYPES.@UnitInit
   842 					jsr MAIN.TYPES.@UnitInit
   843 					eif
   844 				
   845 					.ifdef MAIN.GRAPH.@UnitInit
   846 					jsr MAIN.GRAPH.@UnitInit
   847 					eif
   848 				.endm
   849
   850 				; ------------------------------------------------------------
   851
   852 					ift .SIZEOF(MAIN.SYSTEM) > 0
   853 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   853 				SYSTEM: $225A..$22AB
   854 					eif
   855
   856 					ift .SIZEOF(MAIN.ATARI) > 0
   857 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   858 					eif
   859
   860 					ift .SIZEOF(MAIN.CRT) > 0
   861 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   862 					eif
   863
   864 					ift .SIZEOF(MAIN.TYPES) > 0
   865 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
   866 					eif
   867
   868 					ift .SIZEOF(MAIN.GRAPH) > 0
   869 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
   869 				GRAPH: $22AC..$22AD
   870 					eif
   871
   872 					.print 'CODE: ',CODEORIGIN,'..',*-1
   872 				CODE: $2000..$243A
   873
   874 				; ------------------------------------------------------------
   875
   876 243B			DATAORIGIN
   877 243B 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $27 $00 $00 $00 $17
   878
   879 = 0016			VARINITSIZE	= *-DATAORIGIN
   880 = 002F			VARDATASIZE	= 47
   881
   882 = 246A			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   883
   884 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   884 				DATA: $243B..$246A
   885
   886 02E0-02E1> 2A 22			run START
   887
   888 				; ------------------------------------------------------------
   889
   890 				.macro	STATICDATA
   891 				.by  $11 $45 $66 $66 $65 $63 $74 $75  $73 $20 $65 $78 $61 $6D $70 $6C  $65 $3A $00 $12 $50 $45 $45 $4B
   892 				.by  $20 $64 $65 $6D $6F $6E $73 $74  $72 $61 $74 $69 $6F $6E $00 $00  $00 $24 $53 $68 $61 $64 $6F $77
   893 				.by  $20 $72 $65 $67 $69 $73 $74 $65  $72 $20 $37 $36 $34 $20 $63 $75  $72 $72 $65 $6E $74 $6C $79 $20
   894 				.by  $68 $6F $6C $64 $73 $3A $00 $24  $53 $68 $61 $64 $6F $77 $20 $72  $65 $67 $69 $73 $74 $65 $72 $20
   895 				.by  $37 $31 $30 $20 $63 $75 $72 $72  $65 $6E $74 $6C $79 $20 $68 $6F  $6C $64 $73 $3A $00 $24 $53 $68
   896 				.by  $61 $64 $6F $77 $20 $72 $65 $67  $69 $73 $74 $65 $72 $20 $35 $35  $39 $20 $63 $75 $72 $72 $65 $6E
   897 				.by  $74 $6C $79 $20 $68 $6F $6C $64  $73 $3A $00 $23 $44 $69 $73 $70  $6C $61 $79 $20 $4C $69 $73 $74
   898 				.by  $20 $50 $6F $69 $6E $74 $65 $72  $28 $44 $4C $49 $53 $54 $4C $2F  $44 $4C $49 $53 $54 $48 $29 $00
   899 				.by  $08 $61 $64 $64 $72 $65 $73 $73  $3A $00 $12 $50 $4F $4B $45 $20  $64 $65 $6D $6F $6E $73 $74 $72
   900 				.by  $61 $74 $69 $6F $6E $00 $1E $50  $72 $65 $73 $73 $20 $61 $6E $79  $20 $6B $65 $79 $20 $74 $6F $20
   901 				.by  $63 $68 $61 $6E $67 $65 $20 $63  $6F $6C $6F $72 $21 $00 $24 $50  $72 $65 $73 $73 $20 $61 $6E $79
   902 				.by  $20 $6B $65 $79 $20 $74 $6F $20  $63 $68 $61 $6E $67 $65 $20 $63  $6F $6C $6F $72 $20 $61 $67 $61
   903 				.by  $69 $6E $21 $00 $0A $41 $6E $64  $20 $61 $67 $61 $69 $6E $21 $00  $0A $4C $61 $73 $74 $20 $74 $69
   904 				.by  $6D $65 $21 $00
   905 				.endm
   906
   907 					end
