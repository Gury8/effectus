mads 2.1.0
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $211A..$21FF
    97
    98 				; ------------------------------------------------------------
    99
   100 21FF			START
   101 21FF BA				tsx
   102 2200 8E 91 23			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 0017			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 23B8			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 2203 A2 E9			ldx #256-VLEN
   115 2205 A9 00			lda #0
   116 2207 9D CF 22 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   119 					eif
   120
   121 220D A2 0F			ldx #$0f
   122 220F BD 40 03 9D 94 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 2218 E8				inx		; X = 0 !!!
   125 2219 86 8E			stx bp		; lo BP = 0
   126
   127 221B				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: peekpoke.a65]
   128
   129 221B			.local	MAIN						; PROCEDURE
   130
   131 221B 4C 8D 23			jmp l_0121
   132
   133 				; ------------------------------------------------------------
   134
   135 221E			.local	SYSTEM						; UNIT
   136
   137 221E			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   138
   139 				; ------------------------------------------------------------
   140
   141 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   142 				; as Pointer
   143 221E B5 98 85 86			mva :STACKORIGIN,x A
   144 2222 B5 A8 85 87			mva :STACKORIGIN+STACKWIDTH,x A+1
   145 2226 CA				dex						; sub bx, 1
   146
   147 				; ---------------------  ASM Block 004  ---------------------
   148
   149 2227 A0 00			ldy #0
   150 2229 B1 86 8D AF 23		mva (edx),y Result
   151
   152 222E			@exit
   153
   154 				; ------------------------------------------------------------
   155
   156 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   157 				; as Pointer
   158
   159 222E E8				inx						; add bx, 1
   160 222F AD AF 23 95 98		mva RESULT :STACKORIGIN,x
   161
   162 					.ifdef @new
   163 					@FreeMem #@VarData #@VarDataSize
   164 					eif
   165
   166 				; ------------------------------------------------------------
   167
   168 = 0086			A	= edx
   169 = 23AF			RESULT	= DATAORIGIN+$000B
   170
   171 = 23AF			@VarData	= RESULT
   172 = 0001			@VarDataSize	= 1
   173
   174 2234 60				rts						; ret
   175 				.endl
   176
   177 2235			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   178
   179 				; ------------------------------------------------------------
   180
   181 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   182 				; as Pointer
   183 2235 B5 98 85 8A			mva :STACKORIGIN,x VALUE
   184 2239 CA				dex						; sub bx, 1
   185
   186 				; ------------------------------------------------------------
   187
   188 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   189 				; as Pointer
   190 223A B5 98 85 86			mva :STACKORIGIN,x A
   191 223E B5 A8 85 87			mva :STACKORIGIN+STACKWIDTH,x A+1
   192 2242 CA				dex						; sub bx, 1
   193
   194 				; ---------------------  ASM Block 021  ---------------------
   195
   196 2243 A0 00			ldy #0
   197 2245 A5 8A 91 86			mva value (edx),y
   198
   199
   200 				; ------------------------------------------------------------
   201
   202 = 0086			A	= edx
   203 = 008A			VALUE	= ecx
   204 2249			@exit
   205 					.ifdef @new
   206 					@FreeMem #@VarData #@VarDataSize
   207 					eif
   208 2249 60				rts						; ret
   209 				.endl
   210
   211 				; ------------------------------------------------------------
   212
   213 = 0648			M_PI_2	= $0648
   214 = 0192			D_PI_2	= $0192
   215 = 0004			D_PI_180	= $0004
   216 = 0000			MGTIA	= $0000
   217 = 0080			MVBXE	= $0080
   218 = 0000			VBXE_XDLADR	= $0000
   219 = 0100			VBXE_BCBADR	= $0100
   220 = 1000			VBXE_MAPADR	= $1000
   221 = 5000			VBXE_OVRADR	= $5000
   222 = B000			VBXE_WINDOW	= $B000
   223 = 0000			IDLI	= $0000
   224 = 0001			IVBL	= $0001
   225 = 00FE			CH_DELCHR	= $00FE
   226 = 009B			CH_ENTER	= $009B
   227 = 001B			CH_ESC	= $001B
   228 = 001C			CH_CURS_UP	= $001C
   229 = 001D			CH_CURS_DOWN	= $001D
   230 = 001E			CH_CURS_LEFT	= $001E
   231 = 001F			CH_CURS_RIGHT	= $001F
   232 = 007F			CH_TAB	= $007F
   233 = 009B			CH_EOL	= $009B
   234 = 007D			CH_CLR	= $007D
   235 = 00FD			CH_BELL	= $00FD
   236 = 007E			CH_DEL	= $007E
   237 = 009C			CH_DELLINE	= $009C
   238 = 009D			CH_INSLINE	= $009D
   239 = 0000			COLOR_BLACK	= $0000
   240 = 000E			COLOR_WHITE	= $000E
   241 = 0032			COLOR_RED	= $0032
   242 = 0096			COLOR_CYAN	= $0096
   243 = 0068			COLOR_VIOLET	= $0068
   244 = 00C4			COLOR_GREEN	= $00C4
   245 = 0074			COLOR_BLUE	= $0074
   246 = 00EE			COLOR_YELLOW	= $00EE
   247 = 0028			COLOR_ORANGE	= $0028
   248 = 00E4			COLOR_BROWN	= $00E4
   249 = 003C			COLOR_LIGHTRED	= $003C
   250 = 0004			COLOR_GRAY1	= $0004
   251 = 0006			COLOR_GRAY2	= $0006
   252 = 000A			COLOR_GRAY3	= $000A
   253 = 00CC			COLOR_LIGHTGREEN	= $00CC
   254 = 007C			COLOR_LIGHTBLUE	= $007C
   255 = 0004			FMOPENREAD	= $0004
   256 = 0008			FMOPENWRITE	= $0008
   257 = 0009			FMOPENAPPEND	= $0009
   258 = 000C			FMOPENREADWRITE	= $000C
   259 = 23A4			SCREENWIDTH	= DATAORIGIN+$0000
   260 = 23A6			SCREENHEIGHT	= DATAORIGIN+$0002
   261 = 23A8			DATESEPARATOR	= DATAORIGIN+$0004
   262 = D014			TVSYSTEM	= $D014
   263 = 02C0			adr.PALETTE	= $02C0
   264 224A			.var PALETTE	= adr.PALETTE .word
   265 = D012			adr.HPALETTE	= $D012
   266 224A			.var HPALETTE	= adr.HPALETTE .word
   267 = 23A9			FILEMODE	= DATAORIGIN+$0005
   268 = 23AA			SCREENMODE	= DATAORIGIN+$0006
   269 = 23AB			IORESULT	= DATAORIGIN+$0007
   270 = 23AC			EOLN	= DATAORIGIN+$0008
   271 = 23AD			RNDSEED	= DATAORIGIN+$0009
   272
   273 = 224A C0 02		PALETTE
   273 = 224C 12 D0		HPALETTE
   273 				.endl							; UNIT SYSTEM
   274
   275 				; ------------------------------------------------------------
   276
   277 224E			.local	DOS						; UNIT
   278
   279 				; ------------------------------------------------------------
   280
   281 = D014			PALNTSC	= $D014
   282
   283 				.endl							; UNIT DOS
   284
   285 				; ------------------------------------------------------------
   286
   287 224E			.local	STRUTILS					; UNIT
   288
   289 				; ------------------------------------------------------------
   290
   291 				.endl							; UNIT STRUTILS
   292
   293 				; ------------------------------------------------------------
   294
   295 224E			.local	SYSUTILS					; UNIT
   296
   297 				; ------------------------------------------------------------
   298
   299 = 0001			FAREADONLY	= $0001
   300 = 0002			FAHIDDEN	= $0002
   301 = 0004			FASYSFILE	= $0004
   302 = 0008			FAVOLUMEID	= $0008
   303 = 0010			FADIRECTORY	= $0010
   304 = 0020			FAARCHIVE	= $0020
   305 = 003F			FAANYFILE	= $003F
   306
   307 				.endl							; UNIT SYSUTILS
   308
   309 				; ------------------------------------------------------------
   310
   311 224E			.local	ATARI						; UNIT
   312
   313 				; ------------------------------------------------------------
   314
   315 = 0012			RTCLOK	= $0012
   316 = 004D			ATRACT	= $004D
   317 = 0052			LMARGIN	= $0052
   318 = 0053			RMARGIN	= $0053
   319 = 0054			ROWCRS	= $0054
   320 = 0055			COLCRS	= $0055
   321 = 0057			DINDEX	= $0057
   322 = 0058			SAVMSC	= $0058
   323 = 006A			RAMTOP	= $006A
   324 = 0200			VDSLST	= $0200
   325 = 0230			SDLSTL	= $0230
   326 = 0290			TXTROW	= $0290
   327 = 0291			TXTCOL	= $0291
   328 = 0293			TINDEX	= $0293
   329 = 0294			TXTMSC	= $0294
   330 = 022F			SDMCTL	= $022F
   331 = 026F			GPRIOR	= $026F
   332 = 02F0			CRSINH	= $02F0
   333 = 02F3			CHACT	= $02F3
   334 = 02F4			CHBAS	= $02F4
   335 = 02FC			CH	= $02FC
   336 = 02C0			PCOLR0	= $02C0
   337 = 02C1			PCOLR1	= $02C1
   338 = 02C2			PCOLR2	= $02C2
   339 = 02C3			PCOLR3	= $02C3
   340 = 02C4			COLOR0	= $02C4
   341 = 02C5			COLOR1	= $02C5
   342 = 02C6			COLOR2	= $02C6
   343 = 02C7			COLOR3	= $02C7
   344 = 02C8			COLOR4	= $02C8
   345 = 02C8			COLBAKS	= $02C8
   346 = D000			HPOSP0	= $D000
   347 = D001			HPOSP1	= $D001
   348 = D002			HPOSP2	= $D002
   349 = D003			HPOSP3	= $D003
   350 = D004			HPOSM0	= $D004
   351 = D005			HPOSM1	= $D005
   352 = D006			HPOSM2	= $D006
   353 = D007			HPOSM3	= $D007
   354 = D008			SIZEP0	= $D008
   355 = D009			SIZEP1	= $D009
   356 = D00A			SIZEP2	= $D00A
   357 = D00B			SIZEP3	= $D00B
   358 = D00C			SIZEM	= $D00C
   359 = D00D			GRAFP0	= $D00D
   360 = D00E			GRAFP1	= $D00E
   361 = D00F			GRAFP2	= $D00F
   362 = D010			GRAFP3	= $D010
   363 = D011			GRAFM	= $D011
   364 = D004			P0PF	= $D004
   365 = D014			PAL	= $D014
   366 = D012			COLPM0	= $D012
   367 = D013			COLPM1	= $D013
   368 = D014			COLPM2	= $D014
   369 = D015			COLPM3	= $D015
   370 = D016			COLPF0	= $D016
   371 = D017			COLPF1	= $D017
   372 = D018			COLPF2	= $D018
   373 = D019			COLPF3	= $D019
   374 = D01A			COLBK	= $D01A
   375 = D01B			PRIOR	= $D01B
   376 = D01D			GRACTL	= $D01D
   377 = D01E			HITCLR	= $D01E
   378 = D200			AUDF1	= $D200
   379 = D201			AUDC1	= $D201
   380 = D202			AUDF2	= $D202
   381 = D203			AUDC2	= $D203
   382 = D204			AUDF3	= $D204
   383 = D205			AUDC3	= $D205
   384 = D206			AUDF4	= $D206
   385 = D207			AUDC4	= $D207
   386 = D208			AUDCTL	= $D208
   387 = D20F			SKSTAT	= $D20F
   388 = D301			PORTB	= $D301
   389 = D400			DMACTL	= $D400
   390 = D401			CHACTL	= $D401
   391 = D402			DLISTL	= $D402
   392 = D404			HSCROL	= $D404
   393 = D405			VSCROL	= $D405
   394 = D407			PMBASE	= $D407
   395 = D409			CHBASE	= $D409
   396 = D40A			WSYNC	= $D40A
   397 = D40B			VCOUNT	= $D40B
   398 = D40C			PENH	= $D40C
   399 = D40D			PENV	= $D40D
   400 = D40E			NMIEN	= $D40E
   401
   402 				.endl							; UNIT ATARI
   403
   404 				; ------------------------------------------------------------
   405
   406 224E			.local	CRT						; UNIT
   407
   408 				; ------------------------------------------------------------
   409
   410 = 23B0			TEXTATTR	= DATAORIGIN+$000C
   411 = D01F			CONSOL	= $D01F
   412 = 0000			CN_START_SELECT_OPTION	= $0000
   413 = 0001			CN_SELECT_OPTION	= $0001
   414 = 0002			CN_START_OPTION	= $0002
   415 = 0003			CN_OPTION	= $0003
   416 = 0004			CN_START_SELECT	= $0004
   417 = 0005			CN_SELECT	= $0005
   418 = 0006			CN_START	= $0006
   419 = 0007			CN_NONE	= $0007
   420 = 0000			BW40	= $0000
   421 = 0001			CO40	= $0001
   422 = 0002			BW80	= $0002
   423 = 0003			CO80	= $0003
   424 = 0007			MONO	= $0007
   425 = 0001			C40	= $0001
   426 = 0003			C80	= $0003
   427 = 0000			BLACK	= $0000
   428 = 0001			BLUE	= $0001
   429 = 0002			GREEN	= $0002
   430 = 0003			CYAN	= $0003
   431 = 0004			RED	= $0004
   432 = 0005			MAGENTA	= $0005
   433 = 0006			BROWN	= $0006
   434 = 0007			LIGHTGRAY	= $0007
   435 = 0008			DARKGRAY	= $0008
   436 = 0009			LIGHTBLUE	= $0009
   437 = 000A			LIGHTGREEN	= $000A
   438 = 000B			LIGHTCYAN	= $000B
   439 = 000C			LIGHTRED	= $000C
   440 = 000D			LIGHTMAGENTA	= $000D
   441 = 000E			YELLOW	= $000E
   442 = 000F			WHITE	= $000F
   443 = 0080			BLINK	= $0080
   444
   445 				.endl							; UNIT CRT
   446
   447 				; ------------------------------------------------------------
   448
   449 224E			.local	TYPES						; UNIT
   450
   451 				; ------------------------------------------------------------
   452
   453 				.endl							; UNIT TYPES
   454
   455 				; ------------------------------------------------------------
   456
   457 224E			.local	GRAPH						; UNIT
   458
   459 				; ------------------------------------------------------------
   460
   461 = FFFFFF80		CURRENTDRIVER	= $FFFFFF80
   462 = 0000			DETECT	= $0000
   463 = 0001			CGA	= $0001
   464 = 0002			MCGA	= $0002
   465 = 0003			EGA	= $0003
   466 = 0004			EGA64	= $0004
   467 = 0005			EGAMONO	= $0005
   468 = 0006			LOWRES	= $0006
   469 = 0007			HERCMONO	= $0007
   470 = 0009			VGA	= $0009
   471 = 000A			VESA	= $000A
   472 = 000B			D1BIT	= $000B
   473 = 000C			D2BIT	= $000C
   474 = 000D			D4BIT	= $000D
   475 = 000E			D6BIT	= $000E
   476 = 000F			D8BIT	= $000F
   477 = 0010			D12BIT	= $0010
   478 = 0018			M640X400	= $0018
   479 = 0018			M640X480	= $0018
   480 = 0000			GROK	= $0000
   481 = FFFFFFFF		GRNOINITGRAPH	= $FFFFFFFF
   482 = FFFFFFFE		GRNOTDETECTED	= $FFFFFFFE
   483 = FFFFFFFD		GRFILENOTFOUND	= $FFFFFFFD
   484 = FFFFFFFC		GRINVALIDDRIVER	= $FFFFFFFC
   485 = FFFFFFFB		GRNOLOADMEM	= $FFFFFFFB
   486 = FFFFFFFA		GRNOSCANMEM	= $FFFFFFFA
   487 = FFFFFFF9		GRNOFLOODMEM	= $FFFFFFF9
   488 = FFFFFFF8		GRFONTNOTFOUND	= $FFFFFFF8
   489 = FFFFFFF7		GRNOFONTMEM	= $FFFFFFF7
   490 = FFFFFFF6		GRINVALIDMODE	= $FFFFFFF6
   491 = FFFFFFF5		GRERROR	= $FFFFFFF5
   492 = FFFFFFF4		GRIOERROR	= $FFFFFFF4
   493 = FFFFFFF3		GRINVALIDFONT	= $FFFFFFF3
   494 = FFFFFFF2		GRINVALIDFONTNUM	= $FFFFFFF2
   495 = FFFFFFEE		GRINVALIDVERSION	= $FFFFFFEE
   496 = 0000			CGAC0	= $0000
   497 = 0001			CGAC1	= $0001
   498 = 0002			CGAC2	= $0002
   499 = 0003			CGAC3	= $0003
   500 = 0004			CGAHI	= $0004
   501 = 0000			MCGAC0	= $0000
   502 = 0001			MCGAC1	= $0001
   503 = 0002			MCGAC2	= $0002
   504 = 0003			MCGAC3	= $0003
   505 = 0004			MCGAMED	= $0004
   506 = 0005			MCGAHI	= $0005
   507 = 0000			EGALO	= $0000
   508 = 0001			EGAHI	= $0001
   509 = 0000			EGA64LO	= $0000
   510 = 0001			EGA64HI	= $0001
   511 = 0003			EGAMONOHI	= $0003
   512 = 000A			VGALO	= $000A
   513 = 001F			VGAMED	= $001F
   514 = 0018			VGAHI	= $0018
   515 = 23B1			WIN_LEFT	= DATAORIGIN+$000D
   516 = 23B3			WIN_RIGHT	= DATAORIGIN+$000F
   517 = 23B5			WIN_TOP	= DATAORIGIN+$0011
   518 = 23B7			WIN_BOTTOM	= DATAORIGIN+$0013
   519 = 23B9			GRAPHRESULT	= DATAORIGIN+$0015
   520 = 23BA			GETCOLOR	= DATAORIGIN+$0016
   521 = 23BB			adr.LASTARCCOORDS	= DATAORIGIN+$0017
   522 224E			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   523 = 23BB			LASTARCCOORDS.X	= DATAORIGIN+$0017
   524 = 23BD			LASTARCCOORDS.Y	= DATAORIGIN+$0019
   525 = 23BF			LASTARCCOORDS.XSTART	= DATAORIGIN+$001B
   526 = 23C1			LASTARCCOORDS.YSTART	= DATAORIGIN+$001D
   527 = 23C3			LASTARCCOORDS.XEND	= DATAORIGIN+$001F
   528 = 23C5			LASTARCCOORDS.YEND	= DATAORIGIN+$0021
   529 = 23C7			CURRENTX	= DATAORIGIN+$0023
   530 = 23C9			CURRENTY	= DATAORIGIN+$0025
   531 = 23CB			VIDEORAM	= DATAORIGIN+$0027
   532 = 23CD			SCANLINE_WIDTH	= DATAORIGIN+$0029
   533
   534 = 224E BB 23		LASTARCCOORDS
   534 				.endl							; UNIT GRAPH
   535
   536 2250			.local	WAITFORKEYPROC					; PROCEDURE
   537
   538 				; optimize OK (examples\peekpoke.pas), line = 17
   539
   540 2250 A9 FF 8D FC 02		mva #$FF CH
   541
   542 				; --- WhileProlog
   543 2255			l_01BD
   544
   545 				; optimize OK (examples\peekpoke.pas), line = 18
   546
   547 2255 AD FC 02			lda CH
   548 2258 C9 FF			cmp #$FF
   549 225A D0 03			jne l_01CC
   550 225C 4C 55 22			jmp l_01BD
   551 225F			l_01CC
   552
   553 				; optimize OK (examples\peekpoke.pas), line = 20
   554
   555 225F A9 FF 8D FC 02		mva #$FF CH
   556 2264			@exit
   557 					.ifdef @new
   558 					@FreeMem #@VarData #@VarDataSize
   559 					eif
   560 2264 60				rts						; ret
   561 				.endl
   562
   563 2265			.local	MAINPROC					; PROCEDURE
   564
   565 				; optimize FAIL (100, examples\peekpoke.pas), line = 25
   566 					@print #$7D
   566 				 LDY# $7D\ JSR @PRINT
   566 2265 A0 7D		 LDY# $7D
   566 2267 20 1F 21		 JSR @PRINT
   567
   568 				; optimize FAIL (100, examples\peekpoke.pas), line = 26
   569 					@printSTRING #CODEORIGIN+$000D
   569 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   569 226A A0 20		 LDY> CODEORIGIN+$000D
   569 226C A9 0D		 LDA< CODEORIGIN+$000D
   569 226E 20 28 21		 JSR @PRINTSTRING
   570 2271 20 1A 21			@printEOL
   571
   572 				; optimize FAIL (100, examples\peekpoke.pas), line = 27
   573 					@printSTRING #CODEORIGIN+$0020
   573 				 LDY> CODEORIGIN+$0020\ LDA< CODEORIGIN+$0020\ JSR @PRINTSTRING
   573 2274 A0 20		 LDY> CODEORIGIN+$0020
   573 2276 A9 20		 LDA< CODEORIGIN+$0020
   573 2278 20 28 21		 JSR @PRINTSTRING
   574 227B 20 1A 21			@printEOL
   575
   576 				; optimize FAIL (100, examples\peekpoke.pas), line = 28
   577 					@printSTRING #CODEORIGIN+$0034
   577 				 LDY> CODEORIGIN+$0034\ LDA< CODEORIGIN+$0034\ JSR @PRINTSTRING
   577 227E A0 20		 LDY> CODEORIGIN+$0034
   577 2280 A9 34		 LDA< CODEORIGIN+$0034
   577 2282 20 28 21		 JSR @PRINTSTRING
   578 2285 20 1A 21			@printEOL
   579
   580 				; optimize OK (examples\peekpoke.pas), line = 29
   581
   582 2288 AD FC 02 8D CE 23		mva CH N
   583
   584 				; optimize FAIL (100, examples\peekpoke.pas), line = 30
   585 					@printSTRING #CODEORIGIN+$0036
   585 				 LDY> CODEORIGIN+$0036\ LDA< CODEORIGIN+$0036\ JSR @PRINTSTRING
   585 228E A0 20		 LDY> CODEORIGIN+$0036
   585 2290 A9 36		 LDA< CODEORIGIN+$0036
   585 2292 20 28 21		 JSR @PRINTSTRING
   586 2295 20 1A 21			@printEOL
   587
   588 				; optimize FAIL (100, examples\peekpoke.pas), line = 31
   589 					@printSTRING #CODEORIGIN+$0033
   589 				 LDY> CODEORIGIN+$0033\ LDA< CODEORIGIN+$0033\ JSR @PRINTSTRING
   589 2298 A0 20		 LDY> CODEORIGIN+$0033
   589 229A A9 33		 LDA< CODEORIGIN+$0033
   589 229C 20 28 21		 JSR @PRINTSTRING
   590 229F 20 1A 21			@printEOL
   591
   592 				; optimize FAIL (100, examples\peekpoke.pas), line = 32
   593 22A2 E8				inx
   594 22A3 AD CE 23 95 98		mva N :STACKORIGIN,x
   595 22A8 20 68 21			jsr @printBYTE
   596 22AB CA				dex
   597 22AC 20 1A 21			@printEOL
   598
   599 				; optimize FAIL (100, examples\peekpoke.pas), line = 33
   600 					@printSTRING #CODEORIGIN+$0033
   600 				 LDY> CODEORIGIN+$0033\ LDA< CODEORIGIN+$0033\ JSR @PRINTSTRING
   600 22AF A0 20		 LDY> CODEORIGIN+$0033
   600 22B1 A9 33		 LDA< CODEORIGIN+$0033
   600 22B3 20 28 21		 JSR @PRINTSTRING
   601 22B6 20 1A 21			@printEOL
   602
   603 				; optimize OK (examples\peekpoke.pas), line = 34
   604
   605 22B9 AD C6 02 8D CE 23		mva COL N
   606
   607 				; optimize FAIL (100, examples\peekpoke.pas), line = 35
   608 					@printSTRING #CODEORIGIN+$005C
   608 				 LDY> CODEORIGIN+$005C\ LDA< CODEORIGIN+$005C\ JSR @PRINTSTRING
   608 22BF A0 20		 LDY> CODEORIGIN+$005C
   608 22C1 A9 5C		 LDA< CODEORIGIN+$005C
   608 22C3 20 28 21		 JSR @PRINTSTRING
   609 22C6 20 1A 21			@printEOL
   610
   611 				; optimize FAIL (100, examples\peekpoke.pas), line = 36
   612 					@printSTRING #CODEORIGIN+$0033
   612 				 LDY> CODEORIGIN+$0033\ LDA< CODEORIGIN+$0033\ JSR @PRINTSTRING
   612 22C9 A0 20		 LDY> CODEORIGIN+$0033
   612 22CB A9 33		 LDA< CODEORIGIN+$0033
   612 22CD 20 28 21		 JSR @PRINTSTRING
   613 22D0 20 1A 21			@printEOL
   614
   615 				; optimize FAIL (100, examples\peekpoke.pas), line = 37
   616 22D3 E8				inx
   617 22D4 AD CE 23 95 98		mva N :STACKORIGIN,x
   618 22D9 20 68 21			jsr @printBYTE
   619 22DC CA				dex
   620 22DD 20 1A 21			@printEOL
   621
   622 				; optimize FAIL (100, examples\peekpoke.pas), line = 38
   623 					@printSTRING #CODEORIGIN+$0033
   623 				 LDY> CODEORIGIN+$0033\ LDA< CODEORIGIN+$0033\ JSR @PRINTSTRING
   623 22E0 A0 20		 LDY> CODEORIGIN+$0033
   623 22E2 A9 33		 LDA< CODEORIGIN+$0033
   623 22E4 20 28 21		 JSR @PRINTSTRING
   624 22E7 20 1A 21			@printEOL
   625
   626 				; optimize OK (examples\peekpoke.pas), line = 39
   627
   628 22EA AD 2F 02			lda $022F
   629 22ED 8D CE 23			sta N
   630
   631 				; optimize FAIL (100, examples\peekpoke.pas), line = 40
   632 					@printSTRING #CODEORIGIN+$0082
   632 				 LDY> CODEORIGIN+$0082\ LDA< CODEORIGIN+$0082\ JSR @PRINTSTRING
   632 22F0 A0 20		 LDY> CODEORIGIN+$0082
   632 22F2 A9 82		 LDA< CODEORIGIN+$0082
   632 22F4 20 28 21		 JSR @PRINTSTRING
   633 22F7 20 1A 21			@printEOL
   634
   635 				; optimize FAIL (100, examples\peekpoke.pas), line = 41
   636 					@printSTRING #CODEORIGIN+$0033
   636 				 LDY> CODEORIGIN+$0033\ LDA< CODEORIGIN+$0033\ JSR @PRINTSTRING
   636 22FA A0 20		 LDY> CODEORIGIN+$0033
   636 22FC A9 33		 LDA< CODEORIGIN+$0033
   636 22FE 20 28 21		 JSR @PRINTSTRING
   637 2301 20 1A 21			@printEOL
   638
   639 				; optimize FAIL (100, examples\peekpoke.pas), line = 42
   640 2304 E8				inx
   641 2305 AD CE 23 95 98		mva N :STACKORIGIN,x
   642 230A 20 68 21			jsr @printBYTE
   643 230D CA				dex
   644 230E 20 1A 21			@printEOL
   645
   646 				; optimize FAIL (100, examples\peekpoke.pas), line = 43
   647 					@printSTRING #CODEORIGIN+$0033
   647 				 LDY> CODEORIGIN+$0033\ LDA< CODEORIGIN+$0033\ JSR @PRINTSTRING
   647 2311 A0 20		 LDY> CODEORIGIN+$0033
   647 2313 A9 33		 LDA< CODEORIGIN+$0033
   647 2315 20 28 21		 JSR @PRINTSTRING
   648 2318 20 1A 21			@printEOL
   649
   650 				; optimize FAIL (100, examples\peekpoke.pas), line = 44
   651 					@printSTRING #CODEORIGIN+$0033
   651 				 LDY> CODEORIGIN+$0033\ LDA< CODEORIGIN+$0033\ JSR @PRINTSTRING
   651 231B A0 20		 LDY> CODEORIGIN+$0033
   651 231D A9 33		 LDA< CODEORIGIN+$0033
   651 231F 20 28 21		 JSR @PRINTSTRING
   652 2322 20 1A 21			@printEOL
   653
   654 				; optimize FAIL (100, examples\peekpoke.pas), line = 45
   655 					@printSTRING #CODEORIGIN+$00A8
   655 				 LDY> CODEORIGIN+$00A8\ LDA< CODEORIGIN+$00A8\ JSR @PRINTSTRING
   655 2325 A0 20		 LDY> CODEORIGIN+$00A8
   655 2327 A9 A8		 LDA< CODEORIGIN+$00A8
   655 2329 20 28 21		 JSR @PRINTSTRING
   656 232C 20 1A 21			@printEOL
   657
   658 				; optimize FAIL (100, examples\peekpoke.pas), line = 46
   659 					@printSTRING #CODEORIGIN+$00BC
   659 				 LDY> CODEORIGIN+$00BC\ LDA< CODEORIGIN+$00BC\ JSR @PRINTSTRING
   659 232F A0 20		 LDY> CODEORIGIN+$00BC
   659 2331 A9 BC		 LDA< CODEORIGIN+$00BC
   659 2333 20 28 21		 JSR @PRINTSTRING
   660 2336 20 1A 21			@printEOL
   661
   662 				; optimize FAIL ('WAITFORKEYPROC', examples\peekpoke.pas), line = 47
   663 2339 20 50 22			jsr WAITFORKEYPROC
   664
   665 				; optimize OK (examples\peekpoke.pas), line = 48
   666
   667 233C A9 00 8D C6 02		mva #$00 COL
   668
   669 				; optimize FAIL (100, examples\peekpoke.pas), line = 49
   670 					@printSTRING #CODEORIGIN+$00DC
   670 				 LDY> CODEORIGIN+$00DC\ LDA< CODEORIGIN+$00DC\ JSR @PRINTSTRING
   670 2341 A0 20		 LDY> CODEORIGIN+$00DC
   670 2343 A9 DC		 LDA< CODEORIGIN+$00DC
   670 2345 20 28 21		 JSR @PRINTSTRING
   671 2348 20 1A 21			@printEOL
   672
   673 				; optimize FAIL ('WAITFORKEYPROC', examples\peekpoke.pas), line = 50
   674 234B 20 50 22			jsr WAITFORKEYPROC
   675
   676 				; optimize OK (examples\peekpoke.pas), line = 51
   677
   678 234E A9 E6			lda #$E6
   679 2350 8D C6 02			sta $02C6
   680
   681 				; optimize FAIL (100, examples\peekpoke.pas), line = 52
   682 					@printSTRING #CODEORIGIN+$0102
   682 				 LDY> CODEORIGIN+$0102\ LDA< CODEORIGIN+$0102\ JSR @PRINTSTRING
   682 2353 A0 21		 LDY> CODEORIGIN+$0102
   682 2355 A9 02		 LDA< CODEORIGIN+$0102
   682 2357 20 28 21		 JSR @PRINTSTRING
   683 235A 20 1A 21			@printEOL
   684
   685 				; optimize FAIL ('WAITFORKEYPROC', examples\peekpoke.pas), line = 53
   686 235D 20 50 22			jsr WAITFORKEYPROC
   687
   688 				; optimize OK (examples\peekpoke.pas), line = 54
   689
   690 2360 A9 41 8D CE 23		mva #$41 N
   691
   692 				; optimize OK (examples\peekpoke.pas), line = 55
   693
   694 2365 AD CE 23			lda N
   695 2368 8D C6 02			sta $02C6
   696
   697 				; optimize FAIL (100, examples\peekpoke.pas), line = 56
   698 					@printSTRING #CODEORIGIN+$010E
   698 				 LDY> CODEORIGIN+$010E\ LDA< CODEORIGIN+$010E\ JSR @PRINTSTRING
   698 236B A0 21		 LDY> CODEORIGIN+$010E
   698 236D A9 0E		 LDA< CODEORIGIN+$010E
   698 236F 20 28 21		 JSR @PRINTSTRING
   699 2372 20 1A 21			@printEOL
   700
   701 				; optimize FAIL ('WAITFORKEYPROC', examples\peekpoke.pas), line = 57
   702 2375 20 50 22			jsr WAITFORKEYPROC
   703
   704 				; optimize OK (examples\peekpoke.pas), line = 58
   705
   706 2378 A9 B8 8D CE 23		mva #$B8 N
   707
   708 				; optimize OK (examples\peekpoke.pas), line = 59
   709
   710 237D A9 00			lda #$00
   711 237F 85 8F			sta :bp+1
   712 2381 AC C6 02			ldy COL
   713 2384 AD CE 23			lda N
   714 2387 91 8E			sta (:bp),y
   715
   716 				; optimize FAIL ('WAITFORKEYPROC', examples\peekpoke.pas), line = 60
   717 2389 20 50 22			jsr WAITFORKEYPROC
   718 238C			@exit
   719 					.ifdef @new
   720 					@FreeMem #@VarData #@VarDataSize
   721 					eif
   722 238C 60				rts						; ret
   723 				.endl
   724 238D			l_0121
   725
   726 				; optimize FAIL ('MAINPROC', examples\peekpoke.pas), line = 64
   727 238D 20 65 22			jsr MAINPROC
   728
   729 				; ------------------------------------------------------------
   730
   731 = 23CE			N	= DATAORIGIN+$002A
   732 = 02FC			CH	= $02FC
   733 = 02C6			COL	= $02C6
   734 2390			@exit
   735
   736 2390 A2 00		@halt	ldx #0
   737 2392 9A				txs
   738
   739 2393 60				rts
   740
   741 				; ------------------------------------------------------------
   742
   743 2394 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   744
   745 				; ------------------------------------------------------------
   746
   747 23A4			.local	@DEFINES
   748 23A4			ATARI
   749 				.endl
   750
   751 				.endl							; MAIN
   752
   753 				; ------------------------------------------------------------
   754 				; ------------------------------------------------------------
   755
   756 				.macro	UNITINITIALIZATION
   757 				
   758 					.ifdef MAIN.SYSTEM.@UnitInit
   759 					jsr MAIN.SYSTEM.@UnitInit
   760 					eif
   761 				
   762 					.ifdef MAIN.DOS.@UnitInit
   763 					jsr MAIN.DOS.@UnitInit
   764 					eif
   765 				
   766 					.ifdef MAIN.STRUTILS.@UnitInit
   767 					jsr MAIN.STRUTILS.@UnitInit
   768 					eif
   769 				
   770 					.ifdef MAIN.SYSUTILS.@UnitInit
   771 					jsr MAIN.SYSUTILS.@UnitInit
   772 					eif
   773 				
   774 					.ifdef MAIN.ATARI.@UnitInit
   775 					jsr MAIN.ATARI.@UnitInit
   776 					eif
   777 				
   778 					.ifdef MAIN.CRT.@UnitInit
   779 					jsr MAIN.CRT.@UnitInit
   780 					eif
   781 				
   782 					.ifdef MAIN.TYPES.@UnitInit
   783 					jsr MAIN.TYPES.@UnitInit
   784 					eif
   785 				
   786 					.ifdef MAIN.GRAPH.@UnitInit
   787 					jsr MAIN.GRAPH.@UnitInit
   788 					eif
   789 				.endm
   790
   791 				; ------------------------------------------------------------
   792
   793 					ift .SIZEOF(MAIN.SYSTEM) > 0
   794 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   794 				SYSTEM: $221E..$224D
   795 					eif
   796
   797 					ift .SIZEOF(MAIN.DOS) > 0
   798 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   799 					eif
   800
   801 					ift .SIZEOF(MAIN.STRUTILS) > 0
   802 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   803 					eif
   804
   805 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   806 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   807 					eif
   808
   809 					ift .SIZEOF(MAIN.ATARI) > 0
   810 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   811 					eif
   812
   813 					ift .SIZEOF(MAIN.CRT) > 0
   814 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   815 					eif
   816
   817 					ift .SIZEOF(MAIN.TYPES) > 0
   818 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
   819 					eif
   820
   821 					ift .SIZEOF(MAIN.GRAPH) > 0
   822 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
   822 				GRAPH: $224E..$224F
   823 					eif
   824
   825 					.print 'CODE: ',CODEORIGIN,'..',*-1
   825 				CODE: $2000..$23A3
   826
   827 				; ------------------------------------------------------------
   828
   829 23A4			DATAORIGIN
   830 23A4 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $27  $00 $00 $00 $17
   831
   832 = 0014			VARINITSIZE	= *-DATAORIGIN
   833 = 002B			VARDATASIZE	= 43
   834
   835 = 23CF			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   836
   837 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   837 				DATA: $23A4..$23CF
   838
   839 02E0-02E1> FF 21			run START
   840
   841 				; ------------------------------------------------------------
   842
   843 				.macro	STATICDATA
   844 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $11 $45 $66  $66 $65 $63 $74 $75 $73 $20 $65
   845 				.by  $78 $61 $6D $70 $6C $65 $3A $00  $12 $50 $45 $45 $4B $20 $64 $65  $6D $6F $6E $73 $74 $72 $61 $74
   846 				.by  $69 $6F $6E $00 $00 $00 $24 $53  $68 $61 $64 $6F $77 $20 $72 $65  $67 $69 $73 $74 $65 $72 $20 $37
   847 				.by  $36 $34 $20 $63 $75 $72 $72 $65  $6E $74 $6C $79 $20 $68 $6F $6C  $64 $73 $3A $00 $24 $53 $68 $61
   848 				.by  $64 $6F $77 $20 $72 $65 $67 $69  $73 $74 $65 $72 $20 $37 $31 $30  $20 $63 $75 $72 $72 $65 $6E $74
   849 				.by  $6C $79 $20 $68 $6F $6C $64 $73  $3A $00 $24 $53 $68 $61 $64 $6F  $77 $20 $72 $65 $67 $69 $73 $74
   850 				.by  $65 $72 $20 $35 $35 $39 $20 $63  $75 $72 $72 $65 $6E $74 $6C $79  $20 $68 $6F $6C $64 $73 $3A $00
   851 				.by  $12 $50 $4F $4B $45 $20 $64 $65  $6D $6F $6E $73 $74 $72 $61 $74  $69 $6F $6E $00 $1E $50 $72 $65
   852 				.by  $73 $73 $20 $61 $6E $79 $20 $6B  $65 $79 $20 $74 $6F $20 $63 $68  $61 $6E $67 $65 $20 $63 $6F $6C
   853 				.by  $6F $72 $21 $00 $24 $50 $72 $65  $73 $73 $20 $61 $6E $79 $20 $6B  $65 $79 $20 $74 $6F $20 $63 $68
   854 				.by  $61 $6E $67 $65 $20 $63 $6F $6C  $6F $72 $20 $61 $67 $61 $69 $6E  $21 $00 $0A $41 $6E $64 $20 $61
   855 				.by  $67 $61 $69 $6E $21 $00 $0A $4C  $61 $73 $74 $20 $74 $69 $6D $65  $21 $00
   856 				.endm
   857
   858 					end
