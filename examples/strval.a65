; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.4 [2020/06/20] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

fxptr	.ds 2						; VBXE pointer
psptr	.ds 2						; PROGRAMSTACK Pointer

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4
bp	.ds 2
bp2	.ds 2

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1

FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.endif

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502.asm'

.print 'ZPAGE: ',fxptr,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	eif

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #0
	sta:rne VADR+VLEN-256,x+
	eli VLEN>0
	@fill #VADR #VLEN #0
	eif

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.endif

	mwa #PROGRAMSTACK psptr

	ldx #$0f					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_00EA

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
TVSYSTEM	= $D014
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

RTCLOK	= $12
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
SKSTAT	= $D20F
PORTB	= $D301
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

.local	READKEY						; FUNCTION | ASSEMBLER

; ---------------------  ASM Block 049  ---------------------

	txa:pha

	@GetKey

	sta Result

	pla:tax

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$000C

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$000B
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
BLUE	= $01
GREEN	= $02
CYAN	= $03
RED	= $04
MAGENTA	= $05
BROWN	= $06
LIGHTGRAY	= $07
DARKGRAY	= $08
LIGHTBLUE	= $09
LIGHTGREEN	= $0A
LIGHTCYAN	= $0B
LIGHTRED	= $0C
LIGHTMAGENTA	= $0D
YELLOW	= $0E
WHITE	= $0F
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	DOS						; UNIT

; ------------------------------------------------------------

PALNTSC	= $D014

.endl							; UNIT DOS

; ------------------------------------------------------------

.local	STRUTILS					; UNIT

; ------------------------------------------------------------

.endl							; UNIT STRUTILS

; ------------------------------------------------------------

.local	SYSUTILS					; UNIT

.local	INTTOSTR_014B					; FUNCTION | ASSEMBLER | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
; as Pointer
	mva :STACKORIGIN,x A
	mva :STACKORIGIN+STACKWIDTH,x A+1
	mva :STACKORIGIN+STACKWIDTH*2,x A+2
	mva :STACKORIGIN+STACKWIDTH*3,x A+3
	dex

; ---------------------  ASM Block 072  ---------------------

	txa:pha

	inx

	@ValueToStr #@printCARD

	ldx #$20
	mva:rpl @buf,x adr.Result,x-

	pla:tax

@exit

; ------------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x
	mva RESULT+1 :STACKORIGIN+STACKWIDTH,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= DATAORIGIN+$000D
adr.RESULT	= DATAORIGIN+$0011
.var RESULT	= adr.RESULT .word

@VarData	= A
@VarDataSize	= 37

	rts						; ret
.endl

.local	STRTOINT_0151					; FUNCTION | ASSEMBLER | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x S
	mva :STACKORIGIN+STACKWIDTH,x S+1
	dex

; ---------------------  ASM Block 074  ---------------------

	@StrToInt s

	mva edx Result
	mva edx+1 Result+1
	mva edx+2 Result+2
	mva edx+3 Result+3

@exit

; ------------------------------------------------------------

; Push CARDINAL / INTEGER / REAL / SINGLE
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x
	mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
	mva RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
	mva RESULT+3 :STACKORIGIN+STACKWIDTH*3,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

S	= DATAORIGIN+$0032
RESULT	= DATAORIGIN+$0034

@VarData	= S
@VarDataSize	= 6

	rts						; ret
.endl

; ------------------------------------------------------------

FAREADONLY	= $01
FAHIDDEN	= $02
FASYSFILE	= $04
FAVOLUMEID	= $08
FADIRECTORY	= $10
FAARCHIVE	= $20
FAANYFILE	= $3F

.endl							; UNIT SYSUTILS

; ------------------------------------------------------------

.local	CIO						; UNIT

.local	GET						; FUNCTION | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x CHN
	dex

; ---------------------  ASM Block 080  ---------------------

	txa:pha

	lda chn
	:4 asl @
	tax

	lda #7		;get char command
	sta iccmd,x

	lda #$00	;zero out the unused
	sta icbufl,x	;store in accumulator
	sta icbufh,x	;...after CIOV jump

	m@call	ciov

	sty MAIN.SYSTEM.IOResult

	sta Result

	pla:tax

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

CHN	= DATAORIGIN+$0038
RESULT	= DATAORIGIN+$0039

@VarData	= CHN
@VarDataSize	= 2

	rts						; ret
.endl

; ------------------------------------------------------------

.endl							; UNIT CIO

.local	MAINPROC					; PROCEDURE

; optimize FAIL (100, examples\strval.pas), line = 27
	@print #$7D

; optimize FAIL (100, examples\strval.pas), line = 28
	@printSTRING #CODEORIGIN+$000D
	@printEOL

; optimize FAIL (100, examples\strval.pas), line = 29
	@printSTRING #CODEORIGIN+$0020
	@printEOL

; optimize FAIL (100, examples\strval.pas), line = 30
	@printSTRING #CODEORIGIN+$0022
	@printEOL

; optimize FAIL (100, examples\strval.pas), line = 31
	@printSTRING #CODEORIGIN+$0045
	@printEOL

; optimize FAIL (100, examples\strval.pas), line = 32
	@printSTRING #CODEORIGIN+$001F
	@printEOL

; optimize FAIL ('SYSUTILS.INTTOSTR_014B', examples\strval.pas), line = 33
	inx
	mva #$E8 :STACKORIGIN,x
	mva #$FD :STACKORIGIN+STACKWIDTH,x
	jsr @expandToCARD.WORD
	jsr SYSUTILS.INTTOSTR_014B
	@moveSTRING STRNUM1
	dex

; optimize FAIL ('SYSUTILS.INTTOSTR_014B', examples\strval.pas), line = 34
	inx
	mva #$80 :STACKORIGIN,x
	mva #$0C :STACKORIGIN+STACKWIDTH,x
	jsr @expandToCARD.WORD
	jsr SYSUTILS.INTTOSTR_014B
	@moveSTRING STRNUM2
	dex

; optimize FAIL ('SYSUTILS.INTTOSTR_014B', examples\strval.pas), line = 35
	inx
	mva #$B2 :STACKORIGIN,x
	jsr @expandToCARD.BYTE
	jsr SYSUTILS.INTTOSTR_014B
	@moveSTRING STRNUM3
	dex

; optimize FAIL (100, examples\strval.pas), line = 36
	@printSTRING #CODEORIGIN+$0064

; optimize FAIL (100, examples\strval.pas), line = 37
	@printSTRING STRNUM1
	@printEOL

; optimize FAIL (100, examples\strval.pas), line = 38
	@printSTRING #CODEORIGIN+$006E

; optimize FAIL (100, examples\strval.pas), line = 39
	@printSTRING STRNUM2
	@printEOL

; optimize FAIL (100, examples\strval.pas), line = 40
	@printSTRING #CODEORIGIN+$0078

; optimize FAIL (100, examples\strval.pas), line = 41
	@printSTRING STRNUM3
	@printEOL

; optimize FAIL (100, examples\strval.pas), line = 42
	@printSTRING #CODEORIGIN+$001F
	@printEOL

; optimize FAIL (100, examples\strval.pas), line = 43
	@printSTRING #CODEORIGIN+$0082
	@printEOL

; optimize FAIL (100, examples\strval.pas), line = 44
	@printSTRING #CODEORIGIN+$00A8
	@printEOL

; optimize FAIL (100, examples\strval.pas), line = 45
	@printSTRING #CODEORIGIN+$001F
	@printEOL

; optimize FAIL ('SYSUTILS.STRTOINT_0151', examples\strval.pas), line = 46
	inx
	mva #$BC :STACKORIGIN,x
	mva #$20 :STACKORIGIN+STACKWIDTH,x
	jsr SYSUTILS.STRTOINT_0151
	mva :STACKORIGIN,x NUM1
	dex

; optimize FAIL (100, examples\strval.pas), line = 47
	@printSTRING #CODEORIGIN+$00C1

; optimize FAIL (100, examples\strval.pas), line = 48
	lda NUM1
	jsr @printBYTE._a
	@printEOL

; optimize FAIL ('SYSUTILS.STRTOINT_0151', examples\strval.pas), line = 49
	inx
	mva #$C8 :STACKORIGIN,x
	mva #$20 :STACKORIGIN+STACKWIDTH,x
	jsr SYSUTILS.STRTOINT_0151
	mva :STACKORIGIN,x NUM2
	mva :STACKORIGIN+STACKWIDTH,x NUM2+1
	mva :STACKORIGIN+STACKWIDTH*2,x NUM2+2
	mva :STACKORIGIN+STACKWIDTH*3,x NUM2+3
	dex

; optimize FAIL (100, examples\strval.pas), line = 50
	@printSTRING #CODEORIGIN+$00CE

; optimize FAIL (100, examples\strval.pas), line = 51
	inx
	mva NUM2 :STACKORIGIN,x
	mva NUM2+1 :STACKORIGIN+STACKWIDTH,x
	mva NUM2+2 :STACKORIGIN+STACKWIDTH*2,x
	mva NUM2+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @printINT
	dex
	@printEOL

; optimize FAIL ('SYSUTILS.STRTOINT_0151', examples\strval.pas), line = 52
	inx
	mva #$D5 :STACKORIGIN,x
	mva #$20 :STACKORIGIN+STACKWIDTH,x
	jsr SYSUTILS.STRTOINT_0151
	mva :STACKORIGIN,x NUM3
	mva :STACKORIGIN+STACKWIDTH,x NUM3+1
	dex

; optimize FAIL (100, examples\strval.pas), line = 53
	@printSTRING #CODEORIGIN+$00DC

; optimize FAIL (100, examples\strval.pas), line = 54
	lda NUM3
	ldy NUM3+1
	jsr @printWORD._ay
	@printEOL

; optimize FAIL ('CIO.GET', examples\strval.pas), line = 55
	inx
	mva #$07 :STACKORIGIN,x
	jsr CIO.GET
	mva :STACKORIGIN,x KEY
	dex

	jsr CRT.READKEY					; call Entry

	dex
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl
l_00EA

; optimize FAIL ('MAINPROC', examples\strval.pas), line = 60
	jsr MAINPROC

; ------------------------------------------------------------

adr.STRBUFFER	= DATAORIGIN+$003A
.var STRBUFFER	= adr.STRBUFFER .word
KEY	= DATAORIGIN+$013A
NUM1	= DATAORIGIN+$013B
NUM2	= DATAORIGIN+$013C
NUM3	= DATAORIGIN+$0140
adr.STRNUM1	= DATAORIGIN+$0142
.var STRNUM1	= adr.STRNUM1 .word
adr.STRNUM2	= DATAORIGIN+$0149
.var STRNUM2	= adr.STRNUM2 .word
adr.STRNUM3	= DATAORIGIN+$0150
.var STRNUM3	= adr.STRNUM3 .word
@exit

@halt	ldx #0
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.endif

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	eif

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	eif

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	eif

	.ifdef MAIN.DOS.@UnitInit
	jsr MAIN.DOS.@UnitInit
	eif

	.ifdef MAIN.STRUTILS.@UnitInit
	jsr MAIN.STRUTILS.@UnitInit
	eif

	.ifdef MAIN.SYSUTILS.@UnitInit
	jsr MAIN.SYSUTILS.@UnitInit
	eif

	.ifdef MAIN.CIO.@UnitInit
	jsr MAIN.CIO.@UnitInit
	eif
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.DOS) > 0
	.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
	eif

	ift .SIZEOF(MAIN.STRUTILS) > 0
	.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
	eif

	ift .SIZEOF(MAIN.SYSUTILS) > 0
	.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
	eif

	ift .SIZEOF(MAIN.CIO) > 0
	.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',*-1

; ------------------------------------------------------------

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 343

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $11 $45 $66  $66 $65 $63 $74 $75 $73 $20 $65
.by  $78 $61 $6D $70 $6C $65 $3A $00  $00 $00 $21 $4E $75 $6D $62 $65  $72 $20 $74 $6F $20 $73 $74 $72
.by  $69 $6E $67 $20 $63 $6F $6E $76  $65 $72 $73 $69 $6F $6E $20 $75  $73 $69 $6E $67 $00 $1D $53 $74
.by  $72 $42 $2C $53 $74 $72 $49 $20  $61 $6E $64 $20 $53 $74 $72 $43  $20 $70 $72 $6F $63 $65 $64 $75
.by  $72 $65 $73 $00 $08 $73 $74 $72  $6E $75 $6D $31 $3D $00 $08 $73  $74 $72 $6E $75 $6D $32 $3D $00
.by  $08 $73 $74 $72 $6E $75 $6D $33  $3D $00 $24 $53 $74 $72 $69 $6E  $67 $20 $74 $6F $20 $6E $75 $6D
.by  $62 $65 $72 $20 $63 $6F $6E $76  $65 $72 $73 $69 $6F $6E $20 $62  $79 $20 $75 $73 $69 $6E $67 $00
.by  $12 $56 $61 $6C $42 $2C $56 $61  $6C $49 $20 $61 $6E $64 $20 $56  $61 $6C $43 $00 $03 $31 $30 $30
.by  $00 $05 $6E $75 $6D $31 $3D $00  $04 $31 $35 $30 $30 $00 $05 $6E  $75 $6D $32 $3D $00 $05 $34 $34
.by  $36 $31 $31 $00 $05 $6E $75 $6D  $33 $3D $00
.endm

	end
