mads 2.1.0
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $2137..$218B
    97
    98 				; ------------------------------------------------------------
    99
   100 218B			START
   101 218B BA				tsx
   102 218C 8E 8B 23			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 0016			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 23B5			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 218F A2 EA			ldx #256-VLEN
   115 2191 A9 00			lda #0
   116 2193 9D CB 22 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   119 					eif
   120
   121 2199 A2 0F			ldx #$0f
   122 219B BD 40 03 9D 8E 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 21A4 E8				inx		; X = 0 !!!
   125 21A5 86 8E			stx bp		; lo BP = 0
   126
   127 21A7				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: sounds.a65]
   128
   129 21A7			.local	MAIN						; PROCEDURE
   130
   131 21A7 4C 87 23			jmp l_013E
   132
   133 				; ------------------------------------------------------------
   134
   135 21AA			.local	SYSTEM						; UNIT
   136
   137 21AA			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   138
   139 				; ------------------------------------------------------------
   140
   141 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   142 				; as Pointer
   143 21AA B5 98 85 8A			mva :STACKORIGIN,x VALUE
   144 21AE CA				dex						; sub bx, 1
   145
   146 				; ------------------------------------------------------------
   147
   148 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   149 				; as Pointer
   150 21AF B5 98 85 86			mva :STACKORIGIN,x A
   151 21B3 B5 A8 85 87			mva :STACKORIGIN+STACKWIDTH,x A+1
   152 21B7 CA				dex						; sub bx, 1
   153
   154 				; ---------------------  ASM Block 021  ---------------------
   155
   156 21B8 A0 00			ldy #0
   157 21BA A5 8A 91 86			mva value (edx),y
   158
   159
   160 				; ------------------------------------------------------------
   161
   162 = 0086			A	= edx
   163 = 008A			VALUE	= ecx
   164 21BE			@exit
   165 					.ifdef @new
   166 					@FreeMem #@VarData #@VarDataSize
   167 					eif
   168 21BE 60				rts						; ret
   169 				.endl
   170
   171 				; ------------------------------------------------------------
   172
   173 = 0648			M_PI_2	= $0648
   174 = 0192			D_PI_2	= $0192
   175 = 0004			D_PI_180	= $0004
   176 = 0000			MGTIA	= $0000
   177 = 0080			MVBXE	= $0080
   178 = 0000			VBXE_XDLADR	= $0000
   179 = 0100			VBXE_BCBADR	= $0100
   180 = 1000			VBXE_MAPADR	= $1000
   181 = 5000			VBXE_OVRADR	= $5000
   182 = B000			VBXE_WINDOW	= $B000
   183 = 0000			IDLI	= $0000
   184 = 0001			IVBL	= $0001
   185 = 00FE			CH_DELCHR	= $00FE
   186 = 009B			CH_ENTER	= $009B
   187 = 001B			CH_ESC	= $001B
   188 = 001C			CH_CURS_UP	= $001C
   189 = 001D			CH_CURS_DOWN	= $001D
   190 = 001E			CH_CURS_LEFT	= $001E
   191 = 001F			CH_CURS_RIGHT	= $001F
   192 = 007F			CH_TAB	= $007F
   193 = 009B			CH_EOL	= $009B
   194 = 007D			CH_CLR	= $007D
   195 = 00FD			CH_BELL	= $00FD
   196 = 007E			CH_DEL	= $007E
   197 = 009C			CH_DELLINE	= $009C
   198 = 009D			CH_INSLINE	= $009D
   199 = 0000			COLOR_BLACK	= $0000
   200 = 000E			COLOR_WHITE	= $000E
   201 = 0032			COLOR_RED	= $0032
   202 = 0096			COLOR_CYAN	= $0096
   203 = 0068			COLOR_VIOLET	= $0068
   204 = 00C4			COLOR_GREEN	= $00C4
   205 = 0074			COLOR_BLUE	= $0074
   206 = 00EE			COLOR_YELLOW	= $00EE
   207 = 0028			COLOR_ORANGE	= $0028
   208 = 00E4			COLOR_BROWN	= $00E4
   209 = 003C			COLOR_LIGHTRED	= $003C
   210 = 0004			COLOR_GRAY1	= $0004
   211 = 0006			COLOR_GRAY2	= $0006
   212 = 000A			COLOR_GRAY3	= $000A
   213 = 00CC			COLOR_LIGHTGREEN	= $00CC
   214 = 007C			COLOR_LIGHTBLUE	= $007C
   215 = 0004			FMOPENREAD	= $0004
   216 = 0008			FMOPENWRITE	= $0008
   217 = 0009			FMOPENAPPEND	= $0009
   218 = 000C			FMOPENREADWRITE	= $000C
   219 = 239E			SCREENWIDTH	= DATAORIGIN+$0000
   220 = 23A0			SCREENHEIGHT	= DATAORIGIN+$0002
   221 = 23A2			DATESEPARATOR	= DATAORIGIN+$0004
   222 = D014			TVSYSTEM	= $D014
   223 = 02C0			adr.PALETTE	= $02C0
   224 21BF			.var PALETTE	= adr.PALETTE .word
   225 = D012			adr.HPALETTE	= $D012
   226 21BF			.var HPALETTE	= adr.HPALETTE .word
   227 = 23A3			FILEMODE	= DATAORIGIN+$0005
   228 = 23A4			SCREENMODE	= DATAORIGIN+$0006
   229 = 23A5			IORESULT	= DATAORIGIN+$0007
   230 = 23A6			EOLN	= DATAORIGIN+$0008
   231 = 23A7			RNDSEED	= DATAORIGIN+$0009
   232
   233 = 21BF C0 02		PALETTE
   233 = 21C1 12 D0		HPALETTE
   233 				.endl							; UNIT SYSTEM
   234
   235 				; ------------------------------------------------------------
   236
   237 21C3			.local	DOS						; UNIT
   238
   239 				; ------------------------------------------------------------
   240
   241 = D014			PALNTSC	= $D014
   242
   243 				.endl							; UNIT DOS
   244
   245 				; ------------------------------------------------------------
   246
   247 21C3			.local	STRUTILS					; UNIT
   248
   249 				; ------------------------------------------------------------
   250
   251 				.endl							; UNIT STRUTILS
   252
   253 				; ------------------------------------------------------------
   254
   255 21C3			.local	SYSUTILS					; UNIT
   256
   257 				; ------------------------------------------------------------
   258
   259 = 0001			FAREADONLY	= $0001
   260 = 0002			FAHIDDEN	= $0002
   261 = 0004			FASYSFILE	= $0004
   262 = 0008			FAVOLUMEID	= $0008
   263 = 0010			FADIRECTORY	= $0010
   264 = 0020			FAARCHIVE	= $0020
   265 = 003F			FAANYFILE	= $003F
   266
   267 				.endl							; UNIT SYSUTILS
   268
   269 				; ------------------------------------------------------------
   270
   271 21C3			.local	ATARI						; UNIT
   272
   273 				; ------------------------------------------------------------
   274
   275 = 0012			RTCLOK	= $0012
   276 = 004D			ATRACT	= $004D
   277 = 0052			LMARGIN	= $0052
   278 = 0053			RMARGIN	= $0053
   279 = 0054			ROWCRS	= $0054
   280 = 0055			COLCRS	= $0055
   281 = 0057			DINDEX	= $0057
   282 = 0058			SAVMSC	= $0058
   283 = 006A			RAMTOP	= $006A
   284 = 0200			VDSLST	= $0200
   285 = 0230			SDLSTL	= $0230
   286 = 0290			TXTROW	= $0290
   287 = 0291			TXTCOL	= $0291
   288 = 0293			TINDEX	= $0293
   289 = 0294			TXTMSC	= $0294
   290 = 022F			SDMCTL	= $022F
   291 = 026F			GPRIOR	= $026F
   292 = 02F0			CRSINH	= $02F0
   293 = 02F3			CHACT	= $02F3
   294 = 02F4			CHBAS	= $02F4
   295 = 02FC			CH	= $02FC
   296 = 02C0			PCOLR0	= $02C0
   297 = 02C1			PCOLR1	= $02C1
   298 = 02C2			PCOLR2	= $02C2
   299 = 02C3			PCOLR3	= $02C3
   300 = 02C4			COLOR0	= $02C4
   301 = 02C5			COLOR1	= $02C5
   302 = 02C6			COLOR2	= $02C6
   303 = 02C7			COLOR3	= $02C7
   304 = 02C8			COLOR4	= $02C8
   305 = 02C8			COLBAKS	= $02C8
   306 = D000			HPOSP0	= $D000
   307 = D001			HPOSP1	= $D001
   308 = D002			HPOSP2	= $D002
   309 = D003			HPOSP3	= $D003
   310 = D004			HPOSM0	= $D004
   311 = D005			HPOSM1	= $D005
   312 = D006			HPOSM2	= $D006
   313 = D007			HPOSM3	= $D007
   314 = D008			SIZEP0	= $D008
   315 = D009			SIZEP1	= $D009
   316 = D00A			SIZEP2	= $D00A
   317 = D00B			SIZEP3	= $D00B
   318 = D00C			SIZEM	= $D00C
   319 = D00D			GRAFP0	= $D00D
   320 = D00E			GRAFP1	= $D00E
   321 = D00F			GRAFP2	= $D00F
   322 = D010			GRAFP3	= $D010
   323 = D011			GRAFM	= $D011
   324 = D004			P0PF	= $D004
   325 = D014			PAL	= $D014
   326 = D012			COLPM0	= $D012
   327 = D013			COLPM1	= $D013
   328 = D014			COLPM2	= $D014
   329 = D015			COLPM3	= $D015
   330 = D016			COLPF0	= $D016
   331 = D017			COLPF1	= $D017
   332 = D018			COLPF2	= $D018
   333 = D019			COLPF3	= $D019
   334 = D01A			COLBK	= $D01A
   335 = D01B			PRIOR	= $D01B
   336 = D01D			GRACTL	= $D01D
   337 = D01E			HITCLR	= $D01E
   338 = D200			AUDF1	= $D200
   339 = D201			AUDC1	= $D201
   340 = D202			AUDF2	= $D202
   341 = D203			AUDC2	= $D203
   342 = D204			AUDF3	= $D204
   343 = D205			AUDC3	= $D205
   344 = D206			AUDF4	= $D206
   345 = D207			AUDC4	= $D207
   346 = D208			AUDCTL	= $D208
   347 = D20F			SKSTAT	= $D20F
   348 = D301			PORTB	= $D301
   349 = D400			DMACTL	= $D400
   350 = D401			CHACTL	= $D401
   351 = D402			DLISTL	= $D402
   352 = D404			HSCROL	= $D404
   353 = D405			VSCROL	= $D405
   354 = D407			PMBASE	= $D407
   355 = D409			CHBASE	= $D409
   356 = D40A			WSYNC	= $D40A
   357 = D40B			VCOUNT	= $D40B
   358 = D40C			PENH	= $D40C
   359 = D40D			PENV	= $D40D
   360 = D40E			NMIEN	= $D40E
   361
   362 				.endl							; UNIT ATARI
   363
   364 				; ------------------------------------------------------------
   365
   366 21C3			.local	CRT						; UNIT
   367
   368 21C3			.local	SOUND						; PROCEDURE | ASSEMBLER
   369
   370 				; ------------------------------------------------------------
   371
   372 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   373 				; as Pointer
   374 21C3 B5 98 8D AD 23		mva :STACKORIGIN,x VOL
   375 21C8 CA				dex						; sub bx, 1
   376
   377 				; ------------------------------------------------------------
   378
   379 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   380 				; as Pointer
   381 21C9 B5 98 8D AC 23		mva :STACKORIGIN,x DIST
   382 21CE CA				dex						; sub bx, 1
   383
   384 				; ------------------------------------------------------------
   385
   386 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   387 				; as Pointer
   388 21CF B5 98 8D AB 23		mva :STACKORIGIN,x FREQ
   389 21D4 CA				dex						; sub bx, 1
   390
   391 				; ------------------------------------------------------------
   392
   393 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   394 				; as Pointer
   395 21D5 B5 98 8D AA 23		mva :STACKORIGIN,x CHAN
   396 21DA CA				dex						; sub bx, 1
   397
   398 				; ---------------------  ASM Block 072  ---------------------
   399
   400 21DB AD AA 23			lda Chan
   401 21DE 29 07			and #7
   402
   403 21E0 A0 10			ldy #$10
   404 21E2 C9 04			cmp #4
   405 21E4 B0 02			scs
   406 21E6 A0 00			ldy #$00
   407 21E8 8C F0 21			sty npokey
   408
   409 21EB 29 03			and #3
   410
   411 21ED 0A				asl @
   412 21EE 18 69 00			add #0
   413 = 21F0			npokey	equ *-1
   414 21F1 A8				tay
   415
   416 21F2 A9 00			lda #$00
   417 21F4 8D 08 D2			sta audctl
   418 21F7 A9 03			lda #$03
   419 21F9 8D 0F D2			sta skctl
   420
   421 21FC AD AB 23			lda Freq
   422 21FF 99 00 D2			sta audf1,y
   423
   424 2202 AD AD 23			lda Vol
   425 2205 29 0F			and #$0F
   426 2207 8D 12 22			sta _t
   427
   428 220A AD AC 23			lda Dist	; -> bit 7-6-5
   429 220D 0A 0A 0A 0A			:4 asl @
   430 2211 09 00			ora #0
   431 = 2212			_t	equ *-1
   432 2213 99 01 D2			sta audc1,y
   433
   434
   435 				; ------------------------------------------------------------
   436
   437 = 23AA			CHAN	= DATAORIGIN+$000C
   438 = 23AB			FREQ	= DATAORIGIN+$000D
   439 = 23AC			DIST	= DATAORIGIN+$000E
   440 = 23AD			VOL	= DATAORIGIN+$000F
   441
   442 = 23AA			@VarData	= CHAN
   443 = 0004			@VarDataSize	= 4
   444
   445 2216			@exit
   446 					.ifdef @new
   447 					@FreeMem #@VarData #@VarDataSize
   448 					eif
   449 2216 60				rts						; ret
   450 				.endl
   451
   452 				; ------------------------------------------------------------
   453
   454 = 23A9			TEXTATTR	= DATAORIGIN+$000B
   455 = D01F			CONSOL	= $D01F
   456 = 0000			CN_START_SELECT_OPTION	= $0000
   457 = 0001			CN_SELECT_OPTION	= $0001
   458 = 0002			CN_START_OPTION	= $0002
   459 = 0003			CN_OPTION	= $0003
   460 = 0004			CN_START_SELECT	= $0004
   461 = 0005			CN_SELECT	= $0005
   462 = 0006			CN_START	= $0006
   463 = 0007			CN_NONE	= $0007
   464 = 0000			BW40	= $0000
   465 = 0001			CO40	= $0001
   466 = 0002			BW80	= $0002
   467 = 0003			CO80	= $0003
   468 = 0007			MONO	= $0007
   469 = 0001			C40	= $0001
   470 = 0003			C80	= $0003
   471 = 0000			BLACK	= $0000
   472 = 0001			BLUE	= $0001
   473 = 0002			GREEN	= $0002
   474 = 0003			CYAN	= $0003
   475 = 0004			RED	= $0004
   476 = 0005			MAGENTA	= $0005
   477 = 0006			BROWN	= $0006
   478 = 0007			LIGHTGRAY	= $0007
   479 = 0008			DARKGRAY	= $0008
   480 = 0009			LIGHTBLUE	= $0009
   481 = 000A			LIGHTGREEN	= $000A
   482 = 000B			LIGHTCYAN	= $000B
   483 = 000C			LIGHTRED	= $000C
   484 = 000D			LIGHTMAGENTA	= $000D
   485 = 000E			YELLOW	= $000E
   486 = 000F			WHITE	= $000F
   487 = 0080			BLINK	= $0080
   488
   489 				.endl							; UNIT CRT
   490
   491 				; ------------------------------------------------------------
   492
   493 2217			.local	TYPES						; UNIT
   494
   495 				; ------------------------------------------------------------
   496
   497 				.endl							; UNIT TYPES
   498
   499 				; ------------------------------------------------------------
   500
   501 2217			.local	GRAPH						; UNIT
   502
   503 				; ------------------------------------------------------------
   504
   505 = FFFFFF80		CURRENTDRIVER	= $FFFFFF80
   506 = 0000			DETECT	= $0000
   507 = 0001			CGA	= $0001
   508 = 0002			MCGA	= $0002
   509 = 0003			EGA	= $0003
   510 = 0004			EGA64	= $0004
   511 = 0005			EGAMONO	= $0005
   512 = 0006			LOWRES	= $0006
   513 = 0007			HERCMONO	= $0007
   514 = 0009			VGA	= $0009
   515 = 000A			VESA	= $000A
   516 = 000B			D1BIT	= $000B
   517 = 000C			D2BIT	= $000C
   518 = 000D			D4BIT	= $000D
   519 = 000E			D6BIT	= $000E
   520 = 000F			D8BIT	= $000F
   521 = 0010			D12BIT	= $0010
   522 = 0018			M640X400	= $0018
   523 = 0018			M640X480	= $0018
   524 = 0000			GROK	= $0000
   525 = FFFFFFFF		GRNOINITGRAPH	= $FFFFFFFF
   526 = FFFFFFFE		GRNOTDETECTED	= $FFFFFFFE
   527 = FFFFFFFD		GRFILENOTFOUND	= $FFFFFFFD
   528 = FFFFFFFC		GRINVALIDDRIVER	= $FFFFFFFC
   529 = FFFFFFFB		GRNOLOADMEM	= $FFFFFFFB
   530 = FFFFFFFA		GRNOSCANMEM	= $FFFFFFFA
   531 = FFFFFFF9		GRNOFLOODMEM	= $FFFFFFF9
   532 = FFFFFFF8		GRFONTNOTFOUND	= $FFFFFFF8
   533 = FFFFFFF7		GRNOFONTMEM	= $FFFFFFF7
   534 = FFFFFFF6		GRINVALIDMODE	= $FFFFFFF6
   535 = FFFFFFF5		GRERROR	= $FFFFFFF5
   536 = FFFFFFF4		GRIOERROR	= $FFFFFFF4
   537 = FFFFFFF3		GRINVALIDFONT	= $FFFFFFF3
   538 = FFFFFFF2		GRINVALIDFONTNUM	= $FFFFFFF2
   539 = FFFFFFEE		GRINVALIDVERSION	= $FFFFFFEE
   540 = 0000			CGAC0	= $0000
   541 = 0001			CGAC1	= $0001
   542 = 0002			CGAC2	= $0002
   543 = 0003			CGAC3	= $0003
   544 = 0004			CGAHI	= $0004
   545 = 0000			MCGAC0	= $0000
   546 = 0001			MCGAC1	= $0001
   547 = 0002			MCGAC2	= $0002
   548 = 0003			MCGAC3	= $0003
   549 = 0004			MCGAMED	= $0004
   550 = 0005			MCGAHI	= $0005
   551 = 0000			EGALO	= $0000
   552 = 0001			EGAHI	= $0001
   553 = 0000			EGA64LO	= $0000
   554 = 0001			EGA64HI	= $0001
   555 = 0003			EGAMONOHI	= $0003
   556 = 000A			VGALO	= $000A
   557 = 001F			VGAMED	= $001F
   558 = 0018			VGAHI	= $0018
   559 = 23AE			WIN_LEFT	= DATAORIGIN+$0010
   560 = 23B0			WIN_RIGHT	= DATAORIGIN+$0012
   561 = 23B2			WIN_TOP	= DATAORIGIN+$0014
   562 = 23B4			WIN_BOTTOM	= DATAORIGIN+$0016
   563 = 23B6			GRAPHRESULT	= DATAORIGIN+$0018
   564 = 23B7			GETCOLOR	= DATAORIGIN+$0019
   565 = 23B8			adr.LASTARCCOORDS	= DATAORIGIN+$001A
   566 2217			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   567 = 23B8			LASTARCCOORDS.X	= DATAORIGIN+$001A
   568 = 23BA			LASTARCCOORDS.Y	= DATAORIGIN+$001C
   569 = 23BC			LASTARCCOORDS.XSTART	= DATAORIGIN+$001E
   570 = 23BE			LASTARCCOORDS.YSTART	= DATAORIGIN+$0020
   571 = 23C0			LASTARCCOORDS.XEND	= DATAORIGIN+$0022
   572 = 23C2			LASTARCCOORDS.YEND	= DATAORIGIN+$0024
   573 = 23C4			CURRENTX	= DATAORIGIN+$0026
   574 = 23C6			CURRENTY	= DATAORIGIN+$0028
   575 = 23C8			VIDEORAM	= DATAORIGIN+$002A
   576 = 23CA			SCANLINE_WIDTH	= DATAORIGIN+$002C
   577
   578 = 2217 B8 23		LASTARCCOORDS
   578 				.endl							; UNIT GRAPH
   579
   580 2219			.local	WAITFORKEYPROC					; PROCEDURE
   581
   582 				; optimize OK (examples\sounds.pas), line = 17
   583
   584 2219 A9 FF 8D FC 02		mva #$FF CH
   585
   586 				; --- WhileProlog
   587 221E			l_01E0
   588
   589 				; optimize OK (examples\sounds.pas), line = 18
   590
   591 221E AD FC 02			lda CH
   592 2221 C9 FF			cmp #$FF
   593 2223 D0 03			jne l_01EF
   594 2225 4C 1E 22			jmp l_01E0
   595 2228			l_01EF
   596
   597 				; optimize OK (examples\sounds.pas), line = 20
   598
   599 2228 A9 FF 8D FC 02		mva #$FF CH
   600 222D			@exit
   601 					.ifdef @new
   602 					@FreeMem #@VarData #@VarDataSize
   603 					eif
   604 222D 60				rts						; ret
   605 				.endl
   606
   607 222E			.local	SPACEKEYPROC					; PROCEDURE
   608
   609 				; --- WhileProlog
   610 222E			l_01F9
   611
   612 				; optimize OK (examples\sounds.pas), line = 25
   613
   614 222E AD FC 02			lda CH
   615 2231 C9 21			cmp #$21
   616 2233 F0 03			jeq l_0208
   617 2235 4C 2E 22			jmp l_01F9
   618 2238			l_0208
   619
   620 				; optimize OK (examples\sounds.pas), line = 27
   621
   622 2238 A9 FF 8D FC 02		mva #$FF CH
   623 223D			@exit
   624 					.ifdef @new
   625 					@FreeMem #@VarData #@VarDataSize
   626 					eif
   627 223D 60				rts						; ret
   628 				.endl
   629
   630 223E			.local	MAINPROC					; PROCEDURE
   631
   632 				; optimize FAIL (100, examples\sounds.pas), line = 32
   633 					@print #$7D
   633 				 LDY# $7D\ JSR @PRINT
   633 223E A0 7D		 LDY# $7D
   633 2240 20 3C 21		 JSR @PRINT
   634
   635 				; optimize OK (examples\sounds.pas), line = 33
   636
   637 2243 A9 00			lda #$00
   638 2245 85 52			sta $0052
   639
   640 				; optimize OK (examples\sounds.pas), line = 34
   641
   642 2247 A9 00			lda #$00
   643 2249 8D C6 02			sta $02C6
   644
   645 				; optimize FAIL (100, examples\sounds.pas), line = 35
   646 					@printSTRING #CODEORIGIN+$000D
   646 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   646 224C A0 20		 LDY> CODEORIGIN+$000D
   646 224E A9 0D		 LDA< CODEORIGIN+$000D
   646 2250 20 45 21		 JSR @PRINTSTRING
   647 2253 20 37 21			@printEOL
   648
   649 				; optimize FAIL (100, examples\sounds.pas), line = 36
   650 					@printSTRING #CODEORIGIN+$0020
   650 				 LDY> CODEORIGIN+$0020\ LDA< CODEORIGIN+$0020\ JSR @PRINTSTRING
   650 2256 A0 20		 LDY> CODEORIGIN+$0020
   650 2258 A9 20		 LDA< CODEORIGIN+$0020
   650 225A 20 45 21		 JSR @PRINTSTRING
   651 225D 20 37 21			@printEOL
   652
   653 				; optimize FAIL (100, examples\sounds.pas), line = 37
   654 					@printSTRING #CODEORIGIN+$0035
   654 				 LDY> CODEORIGIN+$0035\ LDA< CODEORIGIN+$0035\ JSR @PRINTSTRING
   654 2260 A0 20		 LDY> CODEORIGIN+$0035
   654 2262 A9 35		 LDA< CODEORIGIN+$0035
   654 2264 20 45 21		 JSR @PRINTSTRING
   655 2267 20 37 21			@printEOL
   656
   657 				; optimize FAIL (100, examples\sounds.pas), line = 38
   658 					@printSTRING #CODEORIGIN+$0037
   658 				 LDY> CODEORIGIN+$0037\ LDA< CODEORIGIN+$0037\ JSR @PRINTSTRING
   658 226A A0 20		 LDY> CODEORIGIN+$0037
   658 226C A9 37		 LDA< CODEORIGIN+$0037
   658 226E 20 45 21		 JSR @PRINTSTRING
   659 2271 20 37 21			@printEOL
   660
   661 				; optimize FAIL ('SPACEKEYPROC', examples\sounds.pas), line = 39
   662 2274 20 2E 22			jsr SPACEKEYPROC
   663
   664 				; optimize OK (examples\sounds.pas), line = 40
   665
   666 2277 A9 32 8D C6 02		mva #$32 COL
   667
   668 				; optimize FAIL ('CRT.SOUND', examples\sounds.pas), line = 41
   669 227C E8				inx
   670 227D A9 00 95 98			mva #$00 :STACKORIGIN,x
   671 2281 E8				inx
   672 2282 A9 64 95 98			mva #$64 :STACKORIGIN,x
   673 2286 E8				inx
   674 2287 A9 0A 95 98			mva #$0A :STACKORIGIN,x
   675 228B E8				inx
   676 228C 95 98			sta :STACKORIGIN,x
   677 228E 20 C3 21			jsr CRT.SOUND
   678
   679 				; optimize FAIL (100, examples\sounds.pas), line = 42
   680 					@printSTRING #CODEORIGIN+$005A
   680 				 LDY> CODEORIGIN+$005A\ LDA< CODEORIGIN+$005A\ JSR @PRINTSTRING
   680 2291 A0 20		 LDY> CODEORIGIN+$005A
   680 2293 A9 5A		 LDA< CODEORIGIN+$005A
   680 2295 20 45 21		 JSR @PRINTSTRING
   681 2298 20 37 21			@printEOL
   682
   683 				; optimize FAIL ('SPACEKEYPROC', examples\sounds.pas), line = 43
   684 229B 20 2E 22			jsr SPACEKEYPROC
   685
   686 				; optimize OK (examples\sounds.pas), line = 44
   687
   688 229E A9 64 8D C6 02		mva #$64 COL
   689
   690 				; optimize FAIL ('CRT.SOUND', examples\sounds.pas), line = 45
   691 22A3 E8				inx
   692 22A4 A9 01 95 98			mva #$01 :STACKORIGIN,x
   693 22A8 E8				inx
   694 22A9 A9 8C 95 98			mva #$8C :STACKORIGIN,x
   695 22AD E8				inx
   696 22AE A9 0C 95 98			mva #$0C :STACKORIGIN,x
   697 22B2 E8				inx
   698 22B3 95 98			sta :STACKORIGIN,x
   699 22B5 20 C3 21			jsr CRT.SOUND
   700
   701 				; optimize FAIL (100, examples\sounds.pas), line = 46
   702 					@printSTRING #CODEORIGIN+$007E
   702 				 LDY> CODEORIGIN+$007E\ LDA< CODEORIGIN+$007E\ JSR @PRINTSTRING
   702 22B8 A0 20		 LDY> CODEORIGIN+$007E
   702 22BA A9 7E		 LDA< CODEORIGIN+$007E
   702 22BC 20 45 21		 JSR @PRINTSTRING
   703 22BF 20 37 21			@printEOL
   704
   705 				; optimize FAIL ('SPACEKEYPROC', examples\sounds.pas), line = 47
   706 22C2 20 2E 22			jsr SPACEKEYPROC
   707
   708 				; optimize OK (examples\sounds.pas), line = 48
   709
   710 22C5 A9 96 8D C6 02		mva #$96 COL
   711
   712 				; optimize FAIL ('CRT.SOUND', examples\sounds.pas), line = 49
   713 22CA E8				inx
   714 22CB A9 02 95 98			mva #$02 :STACKORIGIN,x
   715 22CF E8				inx
   716 22D0 A9 C8 95 98			mva #$C8 :STACKORIGIN,x
   717 22D4 E8				inx
   718 22D5 A9 0E 95 98			mva #$0E :STACKORIGIN,x
   719 22D9 E8				inx
   720 22DA A9 06 95 98			mva #$06 :STACKORIGIN,x
   721 22DE 20 C3 21			jsr CRT.SOUND
   722
   723 				; optimize FAIL (100, examples\sounds.pas), line = 50
   724 					@printSTRING #CODEORIGIN+$00A1
   724 				 LDY> CODEORIGIN+$00A1\ LDA< CODEORIGIN+$00A1\ JSR @PRINTSTRING
   724 22E1 A0 20		 LDY> CODEORIGIN+$00A1
   724 22E3 A9 A1		 LDA< CODEORIGIN+$00A1
   724 22E5 20 45 21		 JSR @PRINTSTRING
   725 22E8 20 37 21			@printEOL
   726
   727 				; optimize FAIL ('SPACEKEYPROC', examples\sounds.pas), line = 51
   728 22EB 20 2E 22			jsr SPACEKEYPROC
   729
   730 				; optimize OK (examples\sounds.pas), line = 52
   731
   732 22EE A9 B4 8D C6 02		mva #$B4 COL
   733
   734 				; optimize FAIL ('CRT.SOUND', examples\sounds.pas), line = 53
   735 22F3 E8				inx
   736 22F4 A9 03 95 98			mva #$03 :STACKORIGIN,x
   737 22F8 E8				inx
   738 22F9 A9 46 95 98			mva #$46 :STACKORIGIN,x
   739 22FD E8				inx
   740 22FE A9 0A 95 98			mva #$0A :STACKORIGIN,x
   741 2302 E8				inx
   742 2303 A9 04 95 98			mva #$04 :STACKORIGIN,x
   743 2307 20 C3 21			jsr CRT.SOUND
   744
   745 				; optimize FAIL (100, examples\sounds.pas), line = 54
   746 					@printSTRING #CODEORIGIN+$0034
   746 				 LDY> CODEORIGIN+$0034\ LDA< CODEORIGIN+$0034\ JSR @PRINTSTRING
   746 230A A0 20		 LDY> CODEORIGIN+$0034
   746 230C A9 34		 LDA< CODEORIGIN+$0034
   746 230E 20 45 21		 JSR @PRINTSTRING
   747 2311 20 37 21			@printEOL
   748
   749 				; optimize FAIL (100, examples\sounds.pas), line = 55
   750 					@printSTRING #CODEORIGIN+$00C5
   750 				 LDY> CODEORIGIN+$00C5\ LDA< CODEORIGIN+$00C5\ JSR @PRINTSTRING
   750 2314 A0 20		 LDY> CODEORIGIN+$00C5
   750 2316 A9 C5		 LDA< CODEORIGIN+$00C5
   750 2318 20 45 21		 JSR @PRINTSTRING
   751 231B 20 37 21			@printEOL
   752
   753 				; optimize FAIL (100, examples\sounds.pas), line = 56
   754 					@printSTRING #CODEORIGIN+$00EB
   754 				 LDY> CODEORIGIN+$00EB\ LDA< CODEORIGIN+$00EB\ JSR @PRINTSTRING
   754 231E A0 20		 LDY> CODEORIGIN+$00EB
   754 2320 A9 EB		 LDA< CODEORIGIN+$00EB
   754 2322 20 45 21		 JSR @PRINTSTRING
   755 2325 20 37 21			@printEOL
   756
   757 				; optimize FAIL (100, examples\sounds.pas), line = 57
   758 					@printSTRING #CODEORIGIN+$0111
   758 				 LDY> CODEORIGIN+$0111\ LDA< CODEORIGIN+$0111\ JSR @PRINTSTRING
   758 2328 A0 21		 LDY> CODEORIGIN+$0111
   758 232A A9 11		 LDA< CODEORIGIN+$0111
   758 232C 20 45 21		 JSR @PRINTSTRING
   759 232F 20 37 21			@printEOL
   760
   761 				; optimize FAIL ('WAITFORKEYPROC', examples\sounds.pas), line = 58
   762 2332 20 19 22			jsr WAITFORKEYPROC
   763
   764 				; optimize OK (examples\sounds.pas), line = 59
   765
   766 2335 A9 F0 8D C6 02		mva #$F0 COL
   767
   768 				; optimize FAIL ('CRT.SOUND', examples\sounds.pas), line = 60
   769 233A E8				inx
   770 233B A9 00 95 98			mva #$00 :STACKORIGIN,x
   771 233F E8				inx
   772 2340 95 98			sta :STACKORIGIN,x
   773 2342 E8				inx
   774 2343 95 98			sta :STACKORIGIN,x
   775 2345 E8				inx
   776 2346 A9 00 95 98			mva #$00 :STACKORIGIN,x
   777 234A 20 C3 21			jsr CRT.SOUND
   778
   779 				; optimize FAIL ('CRT.SOUND', examples\sounds.pas), line = 61
   780 234D E8				inx
   781 234E A9 01 95 98			mva #$01 :STACKORIGIN,x
   782 2352 E8				inx
   783 2353 A9 00 95 98			mva #$00 :STACKORIGIN,x
   784 2357 E8				inx
   785 2358 95 98			sta :STACKORIGIN,x
   786 235A E8				inx
   787 235B 95 98			sta :STACKORIGIN,x
   788 235D 20 C3 21			jsr CRT.SOUND
   789
   790 				; optimize FAIL ('CRT.SOUND', examples\sounds.pas), line = 62
   791 2360 E8				inx
   792 2361 A9 02 95 98			mva #$02 :STACKORIGIN,x
   793 2365 E8				inx
   794 2366 A9 00 95 98			mva #$00 :STACKORIGIN,x
   795 236A E8				inx
   796 236B 95 98			sta :STACKORIGIN,x
   797 236D E8				inx
   798 236E 95 98			sta :STACKORIGIN,x
   799 2370 20 C3 21			jsr CRT.SOUND
   800
   801 				; optimize FAIL ('CRT.SOUND', examples\sounds.pas), line = 63
   802 2373 E8				inx
   803 2374 A9 03 95 98			mva #$03 :STACKORIGIN,x
   804 2378 E8				inx
   805 2379 A9 00 95 98			mva #$00 :STACKORIGIN,x
   806 237D E8				inx
   807 237E 95 98			sta :STACKORIGIN,x
   808 2380 E8				inx
   809 2381 95 98			sta :STACKORIGIN,x
   810 2383 20 C3 21			jsr CRT.SOUND
   811 2386			@exit
   812 					.ifdef @new
   813 					@FreeMem #@VarData #@VarDataSize
   814 					eif
   815 2386 60				rts						; ret
   816 				.endl
   817 2387			l_013E
   818
   819 				; optimize FAIL ('MAINPROC', examples\sounds.pas), line = 67
   820 2387 20 3E 22			jsr MAINPROC
   821
   822 				; ------------------------------------------------------------
   823
   824 = 02FC			CH	= $02FC
   825 = 02C6			COL	= $02C6
   826 238A			@exit
   827
   828 238A A2 00		@halt	ldx #0
   829 238C 9A				txs
   830
   831 238D 60				rts
   832
   833 				; ------------------------------------------------------------
   834
   835 238E 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   836
   837 				; ------------------------------------------------------------
   838
   839 239E			.local	@DEFINES
   840 239E			ATARI
   841 				.endl
   842
   843 				.endl							; MAIN
   844
   845 				; ------------------------------------------------------------
   846 				; ------------------------------------------------------------
   847
   848 				.macro	UNITINITIALIZATION
   849 				
   850 					.ifdef MAIN.SYSTEM.@UnitInit
   851 					jsr MAIN.SYSTEM.@UnitInit
   852 					eif
   853 				
   854 					.ifdef MAIN.DOS.@UnitInit
   855 					jsr MAIN.DOS.@UnitInit
   856 					eif
   857 				
   858 					.ifdef MAIN.STRUTILS.@UnitInit
   859 					jsr MAIN.STRUTILS.@UnitInit
   860 					eif
   861 				
   862 					.ifdef MAIN.SYSUTILS.@UnitInit
   863 					jsr MAIN.SYSUTILS.@UnitInit
   864 					eif
   865 				
   866 					.ifdef MAIN.ATARI.@UnitInit
   867 					jsr MAIN.ATARI.@UnitInit
   868 					eif
   869 				
   870 					.ifdef MAIN.CRT.@UnitInit
   871 					jsr MAIN.CRT.@UnitInit
   872 					eif
   873 				
   874 					.ifdef MAIN.TYPES.@UnitInit
   875 					jsr MAIN.TYPES.@UnitInit
   876 					eif
   877 				
   878 					.ifdef MAIN.GRAPH.@UnitInit
   879 					jsr MAIN.GRAPH.@UnitInit
   880 					eif
   881 				.endm
   882
   883 				; ------------------------------------------------------------
   884
   885 					ift .SIZEOF(MAIN.SYSTEM) > 0
   886 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   886 				SYSTEM: $21AA..$21C2
   887 					eif
   888
   889 					ift .SIZEOF(MAIN.DOS) > 0
   890 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   891 					eif
   892
   893 					ift .SIZEOF(MAIN.STRUTILS) > 0
   894 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   895 					eif
   896
   897 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   898 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   899 					eif
   900
   901 					ift .SIZEOF(MAIN.ATARI) > 0
   902 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   903 					eif
   904
   905 					ift .SIZEOF(MAIN.CRT) > 0
   906 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   906 				CRT: $21C3..$2216
   907 					eif
   908
   909 					ift .SIZEOF(MAIN.TYPES) > 0
   910 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
   911 					eif
   912
   913 					ift .SIZEOF(MAIN.GRAPH) > 0
   914 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
   914 				GRAPH: $2217..$2218
   915 					eif
   916
   917 					.print 'CODE: ',CODEORIGIN,'..',*-1
   917 				CODE: $2000..$239D
   918
   919 				; ------------------------------------------------------------
   920
   921 239E			DATAORIGIN
   922 239E 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $27 $00 $00 $00 $17
   923
   924 = 0017			VARINITSIZE	= *-DATAORIGIN
   925 = 002D			VARDATASIZE	= 45
   926
   927 = 23CB			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   928
   929 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   929 				DATA: $239E..$23CB
   930
   931 02E0-02E1> 8B 21			run START
   932
   933 				; ------------------------------------------------------------
   934
   935 				.macro	STATICDATA
   936 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $11 $45 $66  $66 $65 $63 $74 $75 $73 $20 $65
   937 				.by  $78 $61 $6D $70 $6C $65 $3A $00  $13 $53 $6F $75 $6E $64 $20 $64  $65 $6D $6F $6E $73 $74 $72 $61
   938 				.by  $74 $69 $6F $6E $00 $00 $00 $21  $50 $72 $65 $73 $73 $20 $73 $70  $61 $63 $65 $20 $66 $6F $72 $20
   939 				.by  $66 $69 $72 $73 $74 $20 $73 $2E  $20 $63 $68 $61 $6E $6E $65 $6C  $21 $00 $22 $50 $72 $65 $73 $73
   940 				.by  $20 $73 $70 $61 $63 $65 $20 $66  $6F $72 $20 $73 $65 $63 $6F $6E  $64 $20 $73 $2E $20 $63 $68 $61
   941 				.by  $6E $6E $65 $6C $21 $00 $21 $50  $72 $65 $73 $73 $20 $73 $70 $61  $63 $65 $20 $66 $6F $72 $20 $74
   942 				.by  $68 $69 $72 $64 $20 $73 $2E $20  $63 $68 $61 $6E $6E $65 $6C $21  $00 $22 $50 $72 $65 $73 $73 $20
   943 				.by  $73 $70 $61 $63 $65 $20 $66 $6F  $72 $20 $66 $6F $75 $72 $74 $68  $20 $73 $2E $20 $63 $68 $61 $6E
   944 				.by  $6E $65 $6C $21 $00 $24 $2A $2A  $2A $2A $2A $2A $2A $2A $2A $2A  $2A $2A $2A $2A $2B $2A $2A $2A
   945 				.by  $2A $2A $2A $2A $2A $2A $2A $2A  $2A $2A $2A $2A $2A $2A $2A $2A  $2A $2A $00 $24 $50 $72 $65 $73
   946 				.by  $73 $20 $61 $6E $79 $20 $6B $65  $79 $20 $74 $6F $20 $73 $68 $75  $74 $20 $6F $66 $66 $20 $74 $68
   947 				.by  $65 $20 $73 $6F $75 $6E $64 $21  $00 $24 $2A $2A $2A $2A $2A $2A  $2A $2A $2A $2A $2A $2A $2A $2A
   948 				.by  $2A $2B $2A $2A $2A $2A $2A $2A  $2A $2A $2A $2A $2A $2A $2A $2A  $2A $2A $2A $2A $2A $2A $00
   949 				.endm
   950
   951 					end
