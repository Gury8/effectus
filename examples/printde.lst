mads 2.1.0 build 4 (27 Oct 19)
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $205B..$24DD
    97
    98 				; ------------------------------------------------------------
    99
   100 24DD			START
   101 24DD BA				tsx
   102 24DE 8E 11 2A			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 032A			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 2A2E			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 					ldx #256-VLEN
   115 					lda #0
   116 					sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   118 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   118 24E1 A9 2E 85 86 A9 2A +  MWA #VADR @FILL.PTR1
   118 24E9 A9 2A 85 8A A9 03 +  MWA #VLEN @FILL.PTR3
   118 24F1 A9 00 85 82		 MVA #0 @FILL.PTR2
   118 24F5 20 42 24		 JSR @FILL
   119 					eif
   120
   121 24F8 A2 0F			ldx #$0f
   122 24FA BD 40 03 9D 14 2A + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 2503 E8				inx		; X = 0 !!!
   125 2504 86 8E			stx bp		; lo BP = 0
   126
   127 2506				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: printde.a65]
Source: printde.a65
   128
   129 2506			.local	MAIN						; PROCEDURE
   130
   131 2506 4C FF 29			jmp l_0062
   132
   133 				; ------------------------------------------------------------
   134
   135 2509			.local	SYSTEM						; UNIT
   136
   137 2509			.local	CONCAT_0088					; FUNCTION | ASSEMBLER | OVERLOAD
   138
   139 				; ------------------------------------------------------------
   140
   141 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   142 				; as Pointer
   143 2509 B5 98 8D 33 2B		mva :STACKORIGIN,x B
   144 250E CA				dex						; sub bx, 1
   145
   146 				; ------------------------------------------------------------
   147
   148 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   149 				; as Pointer
   150 250F B5 98 8D 70 25		mva :STACKORIGIN,x A
   151 2514 B5 A8 8D 71 25		mva :STACKORIGIN+STACKWIDTH,x A+1
   152 2519 CA				dex						; sub bx, 1
   153 					@move A #adr.A #256
   153 				 MWA A @MOVE.PTR1\ MWA #ADR.A @MOVE.PTR2\ MWA #256 @MOVE.PTR3\ JSR @MOVE
   153 251A AD 70 25 85 86 AD +  MWA A @MOVE.PTR1
   153 2524 A9 33 85 8A A9 2A +  MWA #ADR.A @MOVE.PTR2
   153 252C A9 00 85 82 A9 01 +  MWA #256 @MOVE.PTR3
   153 2534 20 ED 23		 JSR @MOVE
   154 2537 A9 33 8D 70 25 A9 + 	mwa #adr.A A
   155
   156 				; ---------------------  ASM Block 044  ---------------------
   157
   158 2541 A9 00 8D 00 04		mva #0 @buf
   159 					@addString #adr.a
   159 				 LDY> ADR.A\ LDA< ADR.A\ JSR @ADDSTRING
   159 2546 A0 2A		 LDY> ADR.A
   159 2548 A9 33		 LDA< ADR.A
   159 254A 20 8A 24		 JSR @ADDSTRING
   160 254D EE 00 04			inc @buf
   161 2550 AC 00 04			ldy @buf
   162 2553 AD 33 2B			lda b
   163 2556 99 00 04			sta @buf,y
   164 				;	@move #@buf #adr.Result #256
   165 2559 A0 00			ldy #0
   166 255B B9 00 04 99 34 2B + 	mva:rne @buf,y adr.Result,y+
   167
   168 2564			@exit
   169
   170 				; ------------------------------------------------------------
   171
   172 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   173 				; as Pointer
   174
   175 2564 E8				inx						; add bx, 1
   176 2565 AD 72 25 95 98		mva RESULT :STACKORIGIN,x
   177 256A AD 73 25 95 A8		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   178
   179 					.ifdef @new
   180 					@FreeMem #@VarData #@VarDataSize
   181 					eif
   182
   183 				; ------------------------------------------------------------
   184
   185 = 2A33			adr.A	= DATAORIGIN+$000B
   186 256F			.var A	= adr.A .word
   187 = 2B33			B	= DATAORIGIN+$010B
   188 = 2B34			adr.RESULT	= DATAORIGIN+$010C
   189 256F			.var RESULT	= adr.RESULT .word
   190
   191 = 2570			@VarData	= A
   192 = 0201			@VarDataSize	= 513
   193
   194 256F 60				rts						; ret
   195 = 2570 33 2A		A
   195 = 2572 34 2B		RESULT
   195 				.endl
   196
   197 				; ------------------------------------------------------------
   198
   199 = 0648			M_PI_2	= $0648
   200 = 0192			D_PI_2	= $0192
   201 = 0004			D_PI_180	= $0004
   202 = 0000			MGTIA	= $0000
   203 = 0080			MVBXE	= $0080
   204 = 0000			VBXE_XDLADR	= $0000
   205 = 0100			VBXE_BCBADR	= $0100
   206 = 1000			VBXE_MAPADR	= $1000
   207 = 5000			VBXE_OVRADR	= $5000
   208 = B000			VBXE_WINDOW	= $B000
   209 = 0000			IDLI	= $0000
   210 = 0001			IVBL	= $0001
   211 = 00FE			CH_DELCHR	= $00FE
   212 = 009B			CH_ENTER	= $009B
   213 = 001B			CH_ESC	= $001B
   214 = 001C			CH_CURS_UP	= $001C
   215 = 001D			CH_CURS_DOWN	= $001D
   216 = 001E			CH_CURS_LEFT	= $001E
   217 = 001F			CH_CURS_RIGHT	= $001F
   218 = 007F			CH_TAB	= $007F
   219 = 009B			CH_EOL	= $009B
   220 = 007D			CH_CLR	= $007D
   221 = 00FD			CH_BELL	= $00FD
   222 = 007E			CH_DEL	= $007E
   223 = 009C			CH_DELLINE	= $009C
   224 = 009D			CH_INSLINE	= $009D
   225 = 0000			COLOR_BLACK	= $0000
   226 = 000E			COLOR_WHITE	= $000E
   227 = 0032			COLOR_RED	= $0032
   228 = 0096			COLOR_CYAN	= $0096
   229 = 0068			COLOR_VIOLET	= $0068
   230 = 00C4			COLOR_GREEN	= $00C4
   231 = 0074			COLOR_BLUE	= $0074
   232 = 00EE			COLOR_YELLOW	= $00EE
   233 = 0028			COLOR_ORANGE	= $0028
   234 = 00E4			COLOR_BROWN	= $00E4
   235 = 003C			COLOR_LIGHTRED	= $003C
   236 = 0004			COLOR_GRAY1	= $0004
   237 = 0006			COLOR_GRAY2	= $0006
   238 = 000A			COLOR_GRAY3	= $000A
   239 = 00CC			COLOR_LIGHTGREEN	= $00CC
   240 = 007C			COLOR_LIGHTBLUE	= $007C
   241 = 0004			FMOPENREAD	= $0004
   242 = 0008			FMOPENWRITE	= $0008
   243 = 0009			FMOPENAPPEND	= $0009
   244 = 000C			FMOPENREADWRITE	= $000C
   245 = 2A28			SCREENWIDTH	= DATAORIGIN+$0000
   246 = 2A2A			SCREENHEIGHT	= DATAORIGIN+$0002
   247 = 2A2C			DATESEPARATOR	= DATAORIGIN+$0004
   248 = D014			TVSYSTEM	= $D014
   249 = 02C0			adr.PALETTE	= $02C0
   250 2574			.var PALETTE	= adr.PALETTE .word
   251 = D012			adr.HPALETTE	= $D012
   252 2574			.var HPALETTE	= adr.HPALETTE .word
   253 = 2A2D			FILEMODE	= DATAORIGIN+$0005
   254 = 2A2E			SCREENMODE	= DATAORIGIN+$0006
   255 = 2A2F			IORESULT	= DATAORIGIN+$0007
   256 = 2A30			EOLN	= DATAORIGIN+$0008
   257 = 2A31			RNDSEED	= DATAORIGIN+$0009
   258
   259 = 2574 C0 02		PALETTE
   259 = 2576 12 D0		HPALETTE
   259 				.endl							; UNIT SYSTEM
   260
   261 				; ------------------------------------------------------------
   262
   263 2578			.local	DOS						; UNIT
   264
   265 				; ------------------------------------------------------------
   266
   267 = D014			PALNTSC	= $D014
   268
   269 				.endl							; UNIT DOS
   270
   271 				; ------------------------------------------------------------
   272
   273 2578			.local	STRUTILS					; UNIT
   274
   275 				; ------------------------------------------------------------
   276
   277 				.endl							; UNIT STRUTILS
   278
   279 				; ------------------------------------------------------------
   280
   281 2578			.local	SYSUTILS					; UNIT
   282
   283 2578			.local	INTTOSTR					; FUNCTION | ASSEMBLER
   284
   285 				; ------------------------------------------------------------
   286
   287 				; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
   288 				; as Pointer
   289 2578 B5 98 8D 34 2C		mva :STACKORIGIN,x A
   290 257D B5 A8 8D 35 2C		mva :STACKORIGIN+STACKWIDTH,x A+1
   291 2582 B5 B8 8D 36 2C		mva :STACKORIGIN+STACKWIDTH*2,x A+2
   292 2587 B5 C8 8D 37 2C		mva :STACKORIGIN+STACKWIDTH*3,x A+3
   293 258C CA				dex						; sub bx, 1
   294
   295 				; ---------------------  ASM Block 057  ---------------------
   296
   297 258D 8A 48			txa:pha
   298
   299 258F E8				inx
   300
   301 					@ValueToStr #@printINT
   301 				 LDY> @PRINTINT\ LDA< @PRINTINT\ JSR @VALUETOSTR
   301 2590 A0 22		 LDY> @PRINTINT
   301 2592 A9 D9		 LDA< @PRINTINT
   301 2594 20 67 23		 JSR @VALUETOSTR
   302
   303 2597 A9 00 8D 38 2C A9 + 	mwa #@buf Result
   304
   305 25A1 68 AA			pla:tax
   306
   307 25A3			@exit
   308
   309 				; ------------------------------------------------------------
   310
   311 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   312 				; as Pointer
   313
   314 25A3 E8				inx						; add bx, 1
   315 25A4 AD 38 2C 95 98		mva RESULT :STACKORIGIN,x
   316 25A9 AD 39 2C 95 A8		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   317
   318 					.ifdef @new
   319 					@FreeMem #@VarData #@VarDataSize
   320 					eif
   321
   322 				; ------------------------------------------------------------
   323
   324 = 2C34			A	= DATAORIGIN+$020C
   325 = 2C38			RESULT	= DATAORIGIN+$0210
   326
   327 = 2C34			@VarData	= A
   328 = 0006			@VarDataSize	= 6
   329
   330 25AE 60				rts						; ret
   331 				.endl
   332
   333 				; ------------------------------------------------------------
   334
   335 = 0001			FAREADONLY	= $0001
   336 = 0002			FAHIDDEN	= $0002
   337 = 0004			FASYSFILE	= $0004
   338 = 0008			FAVOLUMEID	= $0008
   339 = 0010			FADIRECTORY	= $0010
   340 = 0020			FAARCHIVE	= $0020
   341 = 003F			FAANYFILE	= $003F
   342
   343 				.endl							; UNIT SYSUTILS
   344
   345 				; ------------------------------------------------------------
   346
   347 25AF			.local	ATARI						; UNIT
   348
   349 				; ------------------------------------------------------------
   350
   351 = 0012			RTCLOK	= $0012
   352 = 004D			ATRACT	= $004D
   353 = 0052			LMARGIN	= $0052
   354 = 0053			RMARGIN	= $0053
   355 = 0054			ROWCRS	= $0054
   356 = 0055			COLCRS	= $0055
   357 = 0057			DINDEX	= $0057
   358 = 0058			SAVMSC	= $0058
   359 = 006A			RAMTOP	= $006A
   360 = 0200			VDSLST	= $0200
   361 = 0230			SDLSTL	= $0230
   362 = 0290			TXTROW	= $0290
   363 = 0291			TXTCOL	= $0291
   364 = 0293			TINDEX	= $0293
   365 = 0294			TXTMSC	= $0294
   366 = 022F			SDMCTL	= $022F
   367 = 026F			GPRIOR	= $026F
   368 = 02F0			CRSINH	= $02F0
   369 = 02F3			CHACT	= $02F3
   370 = 02F4			CHBAS	= $02F4
   371 = 02FC			CH	= $02FC
   372 = 02C0			PCOLR0	= $02C0
   373 = 02C1			PCOLR1	= $02C1
   374 = 02C2			PCOLR2	= $02C2
   375 = 02C3			PCOLR3	= $02C3
   376 = 02C4			COLOR0	= $02C4
   377 = 02C5			COLOR1	= $02C5
   378 = 02C6			COLOR2	= $02C6
   379 = 02C7			COLOR3	= $02C7
   380 = 02C8			COLOR4	= $02C8
   381 = 02C8			COLBAKS	= $02C8
   382 = D000			HPOSP0	= $D000
   383 = D001			HPOSP1	= $D001
   384 = D002			HPOSP2	= $D002
   385 = D003			HPOSP3	= $D003
   386 = D004			HPOSM0	= $D004
   387 = D005			HPOSM1	= $D005
   388 = D006			HPOSM2	= $D006
   389 = D007			HPOSM3	= $D007
   390 = D008			SIZEP0	= $D008
   391 = D009			SIZEP1	= $D009
   392 = D00A			SIZEP2	= $D00A
   393 = D00B			SIZEP3	= $D00B
   394 = D00C			SIZEM	= $D00C
   395 = D00D			GRAFP0	= $D00D
   396 = D00E			GRAFP1	= $D00E
   397 = D00F			GRAFP2	= $D00F
   398 = D010			GRAFP3	= $D010
   399 = D011			GRAFM	= $D011
   400 = D004			P0PF	= $D004
   401 = D014			PAL	= $D014
   402 = D012			COLPM0	= $D012
   403 = D013			COLPM1	= $D013
   404 = D014			COLPM2	= $D014
   405 = D015			COLPM3	= $D015
   406 = D016			COLPF0	= $D016
   407 = D017			COLPF1	= $D017
   408 = D018			COLPF2	= $D018
   409 = D019			COLPF3	= $D019
   410 = D01A			COLBK	= $D01A
   411 = D01B			PRIOR	= $D01B
   412 = D01D			GRACTL	= $D01D
   413 = D01E			HITCLR	= $D01E
   414 = D200			AUDF1	= $D200
   415 = D201			AUDC1	= $D201
   416 = D202			AUDF2	= $D202
   417 = D203			AUDC2	= $D203
   418 = D204			AUDF3	= $D204
   419 = D205			AUDC3	= $D205
   420 = D206			AUDF4	= $D206
   421 = D207			AUDC4	= $D207
   422 = D208			AUDCTL	= $D208
   423 = D20F			SKSTAT	= $D20F
   424 = D301			PORTB	= $D301
   425 = D400			DMACTL	= $D400
   426 = D401			CHACTL	= $D401
   427 = D402			DLISTL	= $D402
   428 = D404			HSCROL	= $D404
   429 = D405			VSCROL	= $D405
   430 = D407			PMBASE	= $D407
   431 = D409			CHBASE	= $D409
   432 = D40A			WSYNC	= $D40A
   433 = D40B			VCOUNT	= $D40B
   434 = D40C			PENH	= $D40C
   435 = D40D			PENV	= $D40D
   436 = D40E			NMIEN	= $D40E
   437
   438 				.endl							; UNIT ATARI
   439
   440 				; ------------------------------------------------------------
   441
   442 25AF			.local	CRT						; UNIT
   443
   444 25AF			.local	READKEY						; FUNCTION | ASSEMBLER
   445
   446 				; ---------------------  ASM Block 063  ---------------------
   447
   448 25AF 8A 48			txa:pha
   449
   450 25B1 20 95 23			@GetKey
   451
   452 25B4 8D 3B 2C			sta Result
   453
   454 25B7 68 AA			pla:tax
   455
   456 25B9			@exit
   457
   458 				; ------------------------------------------------------------
   459
   460 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   461 				; as Pointer
   462
   463 25B9 E8				inx						; add bx, 1
   464 25BA AD 3B 2C 95 98		mva RESULT :STACKORIGIN,x
   465
   466 					.ifdef @new
   467 					@FreeMem #@VarData #@VarDataSize
   468 					eif
   469
   470 				; ------------------------------------------------------------
   471
   472 = 2C3B			RESULT	= DATAORIGIN+$0213
   473
   474 = 2C3B			@VarData	= RESULT
   475 = 0001			@VarDataSize	= 1
   476
   477 25BF 60				rts						; ret
   478 				.endl
   479
   480 				; ------------------------------------------------------------
   481
   482 = 2C3A			TEXTATTR	= DATAORIGIN+$0212
   483 = D01F			CONSOL	= $D01F
   484 = 0000			CN_START_SELECT_OPTION	= $0000
   485 = 0001			CN_SELECT_OPTION	= $0001
   486 = 0002			CN_START_OPTION	= $0002
   487 = 0003			CN_OPTION	= $0003
   488 = 0004			CN_START_SELECT	= $0004
   489 = 0005			CN_SELECT	= $0005
   490 = 0006			CN_START	= $0006
   491 = 0007			CN_NONE	= $0007
   492 = 0000			BW40	= $0000
   493 = 0001			CO40	= $0001
   494 = 0002			BW80	= $0002
   495 = 0003			CO80	= $0003
   496 = 0007			MONO	= $0007
   497 = 0001			C40	= $0001
   498 = 0003			C80	= $0003
   499 = 0000			BLACK	= $0000
   500 = 0001			BLUE	= $0001
   501 = 0002			GREEN	= $0002
   502 = 0003			CYAN	= $0003
   503 = 0004			RED	= $0004
   504 = 0005			MAGENTA	= $0005
   505 = 0006			BROWN	= $0006
   506 = 0007			LIGHTGRAY	= $0007
   507 = 0008			DARKGRAY	= $0008
   508 = 0009			LIGHTBLUE	= $0009
   509 = 000A			LIGHTGREEN	= $000A
   510 = 000B			LIGHTCYAN	= $000B
   511 = 000C			LIGHTRED	= $000C
   512 = 000D			LIGHTMAGENTA	= $000D
   513 = 000E			YELLOW	= $000E
   514 = 000F			WHITE	= $000F
   515 = 0080			BLINK	= $0080
   516
   517 				.endl							; UNIT CRT
   518
   519 25C0			.local	MAINPROC					; PROCEDURE
   520
   521 				; AssignFile
   522
   523 				; optimize OK (examples\printde.pas), line = 20
   524
   525 25C0 AD 24 2A 85 90 AD + 	mwa F :bp2
   526 25CA A0 00			ldy #s@file.pfname
   527 25CC A9 0D			lda #$0D
   528 25CE 91 90			sta (:bp2),y
   529 25D0 C8				iny
   530 25D1 A9 20			lda #$20
   531 25D3 91 90			sta (:bp2),y
   532
   533 				; optimize OK (examples\printde.pas), line = 20
   534
   535 25D5 A0 05			ldy #s@file.status
   536 25D7 A9 00			lda #$00
   537 25D9 91 90			sta (:bp2),y
   538 				; Rewrite
   539
   540 				; optimize OK (examples\printde.pas), line = 21
   541
   542 25DB A0 02			ldy #s@file.record
   543 25DD A9 01			lda #$01
   544 25DF 91 90			sta (:bp2),y
   545 25E1 C8				iny
   546 25E2 A9 00			lda #$00
   547 25E4 91 90			sta (:bp2),y
   548
   549 25E6 8A 48			txa:pha
   550 25E8 38				sec
   551 					@openfile F, #8
   551 				 LDY F+1\ LDA F\ LDX# 8\ JSR @OPENFILE
   551 25E9 AC 25 2A		 LDY F+1
   551 25EC AD 24 2A		 LDA F
   551 25EF A2 08		 LDX# 8
   551 25F1 20 92 20		 JSR @OPENFILE
   552 25F4 68 AA			pla:tax
   553
   554 				; optimize FAIL (100, examples\printde.pas), line = 22
   555 					@printSTRING #CODEORIGIN+$0011
   555 				 LDY> CODEORIGIN+$0011\ LDA< CODEORIGIN+$0011\ JSR @PRINTSTRING
   555 25F6 A0 20		 LDY> CODEORIGIN+$0011
   555 25F8 A9 11		 LDA< CODEORIGIN+$0011
   555 25FA 20 8D 22		 JSR @PRINTSTRING
   556 25FD 20 7F 22			@printEOL
   557
   558 				; optimize FAIL (100, examples\printde.pas), line = 23
   559 					@printSTRING #CODEORIGIN+$0036
   559 				 LDY> CODEORIGIN+$0036\ LDA< CODEORIGIN+$0036\ JSR @PRINTSTRING
   559 2600 A0 20		 LDY> CODEORIGIN+$0036
   559 2602 A9 36		 LDA< CODEORIGIN+$0036
   559 2604 20 8D 22		 JSR @PRINTSTRING
   560 2607 20 7F 22			@printEOL
   561
   562 				; optimize FAIL (100, examples\printde.pas), line = 24
   563 					@printSTRING #CODEORIGIN+$0044
   563 				 LDY> CODEORIGIN+$0044\ LDA< CODEORIGIN+$0044\ JSR @PRINTSTRING
   563 260A A0 20		 LDY> CODEORIGIN+$0044
   563 260C A9 44		 LDA< CODEORIGIN+$0044
   563 260E 20 8D 22		 JSR @PRINTSTRING
   564 2611 20 7F 22			@printEOL
   565
   566 				; optimize FAIL ('SYSTEM.CONCAT_0088', examples\printde.pas), line = 25
   567 2614 E8				inx
   568 2615 A9 46 95 98			mva #$46 :STACKORIGIN,x
   569 2619 A9 20 95 A8			mva #$20 :STACKORIGIN+STACKWIDTH,x
   570 261D E8				inx
   571 261E A9 9B 95 98			mva #$9B :STACKORIGIN,x
   572 2622 20 09 25			jsr SYSTEM.CONCAT_0088
   573 					@moveSTRING STRBUFFER
   573 				 LDY STRBUFFER+1\ LDA STRBUFFER\ JSR @MOVESTRING
   573 2625 AC 27 2A		 LDY STRBUFFER+1
   573 2628 AD 26 2A		 LDA STRBUFFER
   573 262B 20 A5 23		 JSR @MOVESTRING
   574 262E CA				dex						; sub bx, 1
   575 				; BlockWrite
   576
   577 				; optimize OK (examples\printde.pas), line = 26
   578
   579 262F AD 24 2A 85 90 AD + 	mwa F :bp2
   580 2639 A0 06			ldy #s@file.buffer
   581 263B AD 26 2A			lda STRBUFFER
   582 263E 18 69 01			add #$01
   583 2641 91 90			sta (:bp2),y
   584 2643 C8				iny
   585 2644 AD 27 2A			lda STRBUFFER+1
   586 2647 69 00			adc #$00
   587 2649 91 90			sta (:bp2),y
   588
   589 				; optimize OK (examples\printde.pas), line = 26
   590
   591 264B AD 26 2A 85 90 AD + 	mwa STRBUFFER :bp2
   592 2655 A0 00			ldy #0
   593 2657 B1 90			lda (:bp2),y
   594 2659 AC 24 2A 84 90 AC + 	mwy F :bp2
   595 2663 A0 08			ldy #s@file.nrecord
   596 2665 91 90			sta (:bp2),y
   597 2667 C8				iny
   598 2668 A9 00			lda #$00
   599 266A 91 90			sta (:bp2),y
   600
   601 266C 8A 48			txa:pha
   602 266E 38				sec
   603 					@readfile F, #11
   603 				 LDY F+1\ LDA F\ LDX# 11\ JSR @READFILE
   603 266F AC 25 2A		 LDY F+1
   603 2672 AD 24 2A		 LDA F
   603 2675 A2 0B		 LDX# 11
   603 2677 20 66 21		 JSR @READFILE
   604 267A 68 AA			pla:tax
   605
   606 267C A0 FA			ldy #256-6
   607 267E B9 53 1F 99 52 2C + 	mva:rne CODEORIGIN+$004D+6-256,y adr.TEXT_BUF+6-256,y+
   608
   609 				; optimize FAIL ('SYSTEM.CONCAT_0088', examples\printde.pas), line = 28
   610 2687 E8				inx
   611 2688 AD FD 29 95 98		mva TEXT_BUF :STACKORIGIN,x
   612 268D AD FE 29 95 A8		mva TEXT_BUF+1 :STACKORIGIN+STACKWIDTH,x
   613 2692 E8				inx
   614 2693 A9 9B 95 98			mva #$9B :STACKORIGIN,x
   615 2697 20 09 25			jsr SYSTEM.CONCAT_0088
   616 					@moveSTRING STRBUFFER
   616 				 LDY STRBUFFER+1\ LDA STRBUFFER\ JSR @MOVESTRING
   616 269A AC 27 2A		 LDY STRBUFFER+1
   616 269D AD 26 2A		 LDA STRBUFFER
   616 26A0 20 A5 23		 JSR @MOVESTRING
   617 26A3 CA				dex						; sub bx, 1
   618 				; BlockWrite
   619
   620 				; optimize OK (examples\printde.pas), line = 29
   621
   622 26A4 AD 24 2A 85 90 AD + 	mwa F :bp2
   623 26AE A0 06			ldy #s@file.buffer
   624 26B0 AD 26 2A			lda STRBUFFER
   625 26B3 18 69 01			add #$01
   626 26B6 91 90			sta (:bp2),y
   627 26B8 C8				iny
   628 26B9 AD 27 2A			lda STRBUFFER+1
   629 26BC 69 00			adc #$00
   630 26BE 91 90			sta (:bp2),y
   631
   632 				; optimize OK (examples\printde.pas), line = 29
   633
   634 26C0 AD 26 2A 85 90 AD + 	mwa STRBUFFER :bp2
   635 26CA A0 00			ldy #0
   636 26CC B1 90			lda (:bp2),y
   637 26CE AC 24 2A 84 90 AC + 	mwy F :bp2
   638 26D8 A0 08			ldy #s@file.nrecord
   639 26DA 91 90			sta (:bp2),y
   640 26DC C8				iny
   641 26DD A9 00			lda #$00
   642 26DF 91 90			sta (:bp2),y
   643
   644 26E1 8A 48			txa:pha
   645 26E3 38				sec
   646 					@readfile F, #11
   646 				 LDY F+1\ LDA F\ LDX# 11\ JSR @READFILE
   646 26E4 AC 25 2A		 LDY F+1
   646 26E7 AD 24 2A		 LDA F
   646 26EA A2 0B		 LDX# 11
   646 26EC 20 66 21		 JSR @READFILE
   647 26EF 68 AA			pla:tax
   648
   649 26F1 A0 FA			ldy #256-6
   650 26F3 B9 5A 1F 99 52 2B + 	mva:rne CODEORIGIN+$0054+6-256,y adr.STRBUFFER+6-256,y+
   651 				; BlockWrite
   652
   653 				; optimize OK (examples\printde.pas), line = 31
   654
   655 26FC AD 24 2A 85 90 AD + 	mwa F :bp2
   656 2706 A0 06			ldy #s@file.buffer
   657 2708 AD 26 2A			lda STRBUFFER
   658 270B 18 69 01			add #$01
   659 270E 91 90			sta (:bp2),y
   660 2710 C8				iny
   661 2711 AD 27 2A			lda STRBUFFER+1
   662 2714 69 00			adc #$00
   663 2716 91 90			sta (:bp2),y
   664
   665 				; optimize OK (examples\printde.pas), line = 31
   666
   667 2718 AD 26 2A 85 90 AD + 	mwa STRBUFFER :bp2
   668 2722 A0 00			ldy #0
   669 2724 B1 90			lda (:bp2),y
   670 2726 AC 24 2A 84 90 AC + 	mwy F :bp2
   671 2730 A0 08			ldy #s@file.nrecord
   672 2732 91 90			sta (:bp2),y
   673 2734 C8				iny
   674 2735 A9 00			lda #$00
   675 2737 91 90			sta (:bp2),y
   676
   677 2739 8A 48			txa:pha
   678 273B 38				sec
   679 					@readfile F, #11
   679 				 LDY F+1\ LDA F\ LDX# 11\ JSR @READFILE
   679 273C AC 25 2A		 LDY F+1
   679 273F AD 24 2A		 LDA F
   679 2742 A2 0B		 LDX# 11
   679 2744 20 66 21		 JSR @READFILE
   680 2747 68 AA			pla:tax
   681
   682 				; optimize FAIL ('SYSUTILS.INTTOSTR', examples\printde.pas), line = 32
   683 2749 E8				inx
   684 274A A9 0A 95 98			mva #$0A :STACKORIGIN,x
   685 274E 20 6F 20			jsr @expandToCARD.BYTE
   686 2751 20 78 25			jsr SYSUTILS.INTTOSTR
   687 					@moveSTRING STRBUFFER
   687 				 LDY STRBUFFER+1\ LDA STRBUFFER\ JSR @MOVESTRING
   687 2754 AC 27 2A		 LDY STRBUFFER+1
   687 2757 AD 26 2A		 LDA STRBUFFER
   687 275A 20 A5 23		 JSR @MOVESTRING
   688 275D CA				dex						; sub bx, 1
   689 				; BlockWrite
   690
   691 				; optimize OK (examples\printde.pas), line = 33
   692
   693 275E AD 24 2A 85 90 AD + 	mwa F :bp2
   694 2768 A0 06			ldy #s@file.buffer
   695 276A AD 26 2A			lda STRBUFFER
   696 276D 18 69 01			add #$01
   697 2770 91 90			sta (:bp2),y
   698 2772 C8				iny
   699 2773 AD 27 2A			lda STRBUFFER+1
   700 2776 69 00			adc #$00
   701 2778 91 90			sta (:bp2),y
   702
   703 				; optimize OK (examples\printde.pas), line = 33
   704
   705 277A AD 26 2A 85 90 AD + 	mwa STRBUFFER :bp2
   706 2784 A0 00			ldy #0
   707 2786 B1 90			lda (:bp2),y
   708 2788 AC 24 2A 84 90 AC + 	mwy F :bp2
   709 2792 A0 08			ldy #s@file.nrecord
   710 2794 91 90			sta (:bp2),y
   711 2796 C8				iny
   712 2797 A9 00			lda #$00
   713 2799 91 90			sta (:bp2),y
   714
   715 279B 8A 48			txa:pha
   716 279D 38				sec
   717 					@readfile F, #11
   717 				 LDY F+1\ LDA F\ LDX# 11\ JSR @READFILE
   717 279E AC 25 2A		 LDY F+1
   717 27A1 AD 24 2A		 LDA F
   717 27A4 A2 0B		 LDX# 11
   717 27A6 20 66 21		 JSR @READFILE
   718 27A9 68 AA			pla:tax
   719
   720 				; optimize FAIL (100, examples\printde.pas), line = 34
   721 					@printSTRING #CODEORIGIN+$0043
   721 				 LDY> CODEORIGIN+$0043\ LDA< CODEORIGIN+$0043\ JSR @PRINTSTRING
   721 27AB A0 20		 LDY> CODEORIGIN+$0043
   721 27AD A9 43		 LDA< CODEORIGIN+$0043
   721 27AF 20 8D 22		 JSR @PRINTSTRING
   722 27B2 20 7F 22			@printEOL
   723
   724 				; optimize FAIL ('SYSUTILS.INTTOSTR', examples\printde.pas), line = 35
   725 27B5 E8				inx
   726 27B6 A9 14 95 98			mva #$14 :STACKORIGIN,x
   727 27BA 20 6F 20			jsr @expandToCARD.BYTE
   728 27BD 20 78 25			jsr SYSUTILS.INTTOSTR
   729 27C0 E8				inx
   730 27C1 A9 9B 95 98			mva #$9B :STACKORIGIN,x
   731 27C5 20 09 25			jsr SYSTEM.CONCAT_0088
   732 					@moveSTRING STRBUFFER
   732 				 LDY STRBUFFER+1\ LDA STRBUFFER\ JSR @MOVESTRING
   732 27C8 AC 27 2A		 LDY STRBUFFER+1
   732 27CB AD 26 2A		 LDA STRBUFFER
   732 27CE 20 A5 23		 JSR @MOVESTRING
   733 27D1 CA				dex						; sub bx, 1
   734 				; BlockWrite
   735
   736 				; optimize OK (examples\printde.pas), line = 36
   737
   738 27D2 AD 24 2A 85 90 AD + 	mwa F :bp2
   739 27DC A0 06			ldy #s@file.buffer
   740 27DE AD 26 2A			lda STRBUFFER
   741 27E1 18 69 01			add #$01
   742 27E4 91 90			sta (:bp2),y
   743 27E6 C8				iny
   744 27E7 AD 27 2A			lda STRBUFFER+1
   745 27EA 69 00			adc #$00
   746 27EC 91 90			sta (:bp2),y
   747
   748 				; optimize OK (examples\printde.pas), line = 36
   749
   750 27EE AD 26 2A 85 90 AD + 	mwa STRBUFFER :bp2
   751 27F8 A0 00			ldy #0
   752 27FA B1 90			lda (:bp2),y
   753 27FC AC 24 2A 84 90 AC + 	mwy F :bp2
   754 2806 A0 08			ldy #s@file.nrecord
   755 2808 91 90			sta (:bp2),y
   756 280A C8				iny
   757 280B A9 00			lda #$00
   758 280D 91 90			sta (:bp2),y
   759
   760 280F 8A 48			txa:pha
   761 2811 38				sec
   762 					@readfile F, #11
   762 				 LDY F+1\ LDA F\ LDX# 11\ JSR @READFILE
   762 2812 AC 25 2A		 LDY F+1
   762 2815 AD 24 2A		 LDA F
   762 2818 A2 0B		 LDX# 11
   762 281A 20 66 21		 JSR @READFILE
   763 281D 68 AA			pla:tax
   764
   765 				; optimize FAIL ('SYSUTILS.INTTOSTR', examples\printde.pas), line = 37
   766 281F E8				inx
   767 2820 A9 D0 95 98			mva #$D0 :STACKORIGIN,x
   768 2824 A9 07 95 A8			mva #$07 :STACKORIGIN+STACKWIDTH,x
   769 2828 20 63 20			jsr @expandToCARD.WORD
   770 282B 20 78 25			jsr SYSUTILS.INTTOSTR
   771 					@moveSTRING STRBUFFER
   771 				 LDY STRBUFFER+1\ LDA STRBUFFER\ JSR @MOVESTRING
   771 282E AC 27 2A		 LDY STRBUFFER+1
   771 2831 AD 26 2A		 LDA STRBUFFER
   771 2834 20 A5 23		 JSR @MOVESTRING
   772 2837 CA				dex						; sub bx, 1
   773 				; BlockWrite
   774
   775 				; optimize OK (examples\printde.pas), line = 38
   776
   777 2838 AD 24 2A 85 90 AD + 	mwa F :bp2
   778 2842 A0 06			ldy #s@file.buffer
   779 2844 AD 26 2A			lda STRBUFFER
   780 2847 18 69 01			add #$01
   781 284A 91 90			sta (:bp2),y
   782 284C C8				iny
   783 284D AD 27 2A			lda STRBUFFER+1
   784 2850 69 00			adc #$00
   785 2852 91 90			sta (:bp2),y
   786
   787 				; optimize OK (examples\printde.pas), line = 38
   788
   789 2854 AD 26 2A 85 90 AD + 	mwa STRBUFFER :bp2
   790 285E A0 00			ldy #0
   791 2860 B1 90			lda (:bp2),y
   792 2862 AC 24 2A 84 90 AC + 	mwy F :bp2
   793 286C A0 08			ldy #s@file.nrecord
   794 286E 91 90			sta (:bp2),y
   795 2870 C8				iny
   796 2871 A9 00			lda #$00
   797 2873 91 90			sta (:bp2),y
   798
   799 2875 8A 48			txa:pha
   800 2877 38				sec
   801 					@readfile F, #11
   801 				 LDY F+1\ LDA F\ LDX# 11\ JSR @READFILE
   801 2878 AC 25 2A		 LDY F+1
   801 287B AD 24 2A		 LDA F
   801 287E A2 0B		 LDX# 11
   801 2880 20 66 21		 JSR @READFILE
   802 2883 68 AA			pla:tax
   803
   804 				; optimize FAIL (100, examples\printde.pas), line = 39
   805 					@printSTRING #CODEORIGIN+$0043
   805 				 LDY> CODEORIGIN+$0043\ LDA< CODEORIGIN+$0043\ JSR @PRINTSTRING
   805 2885 A0 20		 LDY> CODEORIGIN+$0043
   805 2887 A9 43		 LDA< CODEORIGIN+$0043
   805 2889 20 8D 22		 JSR @PRINTSTRING
   806 288C 20 7F 22			@printEOL
   807
   808 				; optimize FAIL ('SYSUTILS.INTTOSTR', examples\printde.pas), line = 40
   809 288F E8				inx
   810 2890 A9 10 95 98			mva #$10 :STACKORIGIN,x
   811 2894 A9 27 95 A8			mva #$27 :STACKORIGIN+STACKWIDTH,x
   812 2898 20 63 20			jsr @expandToCARD.WORD
   813 289B 20 78 25			jsr SYSUTILS.INTTOSTR
   814 289E E8				inx
   815 289F A9 9B 95 98			mva #$9B :STACKORIGIN,x
   816 28A3 20 09 25			jsr SYSTEM.CONCAT_0088
   817 					@moveSTRING STRBUFFER
   817 				 LDY STRBUFFER+1\ LDA STRBUFFER\ JSR @MOVESTRING
   817 28A6 AC 27 2A		 LDY STRBUFFER+1
   817 28A9 AD 26 2A		 LDA STRBUFFER
   817 28AC 20 A5 23		 JSR @MOVESTRING
   818 28AF CA				dex						; sub bx, 1
   819 				; BlockWrite
   820
   821 				; optimize OK (examples\printde.pas), line = 41
   822
   823 28B0 AD 24 2A 85 90 AD + 	mwa F :bp2
   824 28BA A0 06			ldy #s@file.buffer
   825 28BC AD 26 2A			lda STRBUFFER
   826 28BF 18 69 01			add #$01
   827 28C2 91 90			sta (:bp2),y
   828 28C4 C8				iny
   829 28C5 AD 27 2A			lda STRBUFFER+1
   830 28C8 69 00			adc #$00
   831 28CA 91 90			sta (:bp2),y
   832
   833 				; optimize OK (examples\printde.pas), line = 41
   834
   835 28CC AD 26 2A 85 90 AD + 	mwa STRBUFFER :bp2
   836 28D6 A0 00			ldy #0
   837 28D8 B1 90			lda (:bp2),y
   838 28DA AC 24 2A 84 90 AC + 	mwy F :bp2
   839 28E4 A0 08			ldy #s@file.nrecord
   840 28E6 91 90			sta (:bp2),y
   841 28E8 C8				iny
   842 28E9 A9 00			lda #$00
   843 28EB 91 90			sta (:bp2),y
   844
   845 28ED 8A 48			txa:pha
   846 28EF 38				sec
   847 					@readfile F, #11
   847 				 LDY F+1\ LDA F\ LDX# 11\ JSR @READFILE
   847 28F0 AC 25 2A		 LDY F+1
   847 28F3 AD 24 2A		 LDA F
   847 28F6 A2 0B		 LDX# 11
   847 28F8 20 66 21		 JSR @READFILE
   848 28FB 68 AA			pla:tax
   849
   850 				; optimize FAIL ('SYSUTILS.INTTOSTR', examples\printde.pas), line = 42
   851 28FD E8				inx
   852 28FE A9 56 95 98			mva #$56 :STACKORIGIN,x
   853 2902 A9 18 95 A8			mva #$18 :STACKORIGIN+STACKWIDTH,x
   854 2906 20 63 20			jsr @expandToCARD.WORD
   855 2909 20 78 25			jsr SYSUTILS.INTTOSTR
   856 					@moveSTRING STRBUFFER
   856 				 LDY STRBUFFER+1\ LDA STRBUFFER\ JSR @MOVESTRING
   856 290C AC 27 2A		 LDY STRBUFFER+1
   856 290F AD 26 2A		 LDA STRBUFFER
   856 2912 20 A5 23		 JSR @MOVESTRING
   857 2915 CA				dex						; sub bx, 1
   858 				; BlockWrite
   859
   860 				; optimize OK (examples\printde.pas), line = 43
   861
   862 2916 AD 24 2A 85 90 AD + 	mwa F :bp2
   863 2920 A0 06			ldy #s@file.buffer
   864 2922 AD 26 2A			lda STRBUFFER
   865 2925 18 69 01			add #$01
   866 2928 91 90			sta (:bp2),y
   867 292A C8				iny
   868 292B AD 27 2A			lda STRBUFFER+1
   869 292E 69 00			adc #$00
   870 2930 91 90			sta (:bp2),y
   871
   872 				; optimize OK (examples\printde.pas), line = 43
   873
   874 2932 AD 26 2A 85 90 AD + 	mwa STRBUFFER :bp2
   875 293C A0 00			ldy #0
   876 293E B1 90			lda (:bp2),y
   877 2940 AC 24 2A 84 90 AC + 	mwy F :bp2
   878 294A A0 08			ldy #s@file.nrecord
   879 294C 91 90			sta (:bp2),y
   880 294E C8				iny
   881 294F A9 00			lda #$00
   882 2951 91 90			sta (:bp2),y
   883
   884 2953 8A 48			txa:pha
   885 2955 38				sec
   886 					@readfile F, #11
   886 				 LDY F+1\ LDA F\ LDX# 11\ JSR @READFILE
   886 2956 AC 25 2A		 LDY F+1
   886 2959 AD 24 2A		 LDA F
   886 295C A2 0B		 LDX# 11
   886 295E 20 66 21		 JSR @READFILE
   887 2961 68 AA			pla:tax
   888
   889 				; optimize FAIL (100, examples\printde.pas), line = 44
   890 					@printSTRING #CODEORIGIN+$0043
   890 				 LDY> CODEORIGIN+$0043\ LDA< CODEORIGIN+$0043\ JSR @PRINTSTRING
   890 2963 A0 20		 LDY> CODEORIGIN+$0043
   890 2965 A9 43		 LDA< CODEORIGIN+$0043
   890 2967 20 8D 22		 JSR @PRINTSTRING
   891 296A 20 7F 22			@printEOL
   892
   893 				; optimize FAIL ('SYSUTILS.INTTOSTR', examples\printde.pas), line = 45
   894 296D E8				inx
   895 296E A9 36 95 98			mva #$36 :STACKORIGIN,x
   896 2972 A9 FF 95 A8			mva #$FF :STACKORIGIN+STACKWIDTH,x
   897 2976 20 63 20			jsr @expandToCARD.WORD
   898 2979 20 78 25			jsr SYSUTILS.INTTOSTR
   899 297C E8				inx
   900 297D A9 9B 95 98			mva #$9B :STACKORIGIN,x
   901 2981 20 09 25			jsr SYSTEM.CONCAT_0088
   902 					@moveSTRING STRBUFFER
   902 				 LDY STRBUFFER+1\ LDA STRBUFFER\ JSR @MOVESTRING
   902 2984 AC 27 2A		 LDY STRBUFFER+1
   902 2987 AD 26 2A		 LDA STRBUFFER
   902 298A 20 A5 23		 JSR @MOVESTRING
   903 298D CA				dex						; sub bx, 1
   904 				; BlockWrite
   905
   906 				; optimize OK (examples\printde.pas), line = 46
   907
   908 298E AD 24 2A 85 90 AD + 	mwa F :bp2
   909 2998 A0 06			ldy #s@file.buffer
   910 299A AD 26 2A			lda STRBUFFER
   911 299D 18 69 01			add #$01
   912 29A0 91 90			sta (:bp2),y
   913 29A2 C8				iny
   914 29A3 AD 27 2A			lda STRBUFFER+1
   915 29A6 69 00			adc #$00
   916 29A8 91 90			sta (:bp2),y
   917
   918 				; optimize OK (examples\printde.pas), line = 46
   919
   920 29AA AD 26 2A 85 90 AD + 	mwa STRBUFFER :bp2
   921 29B4 A0 00			ldy #0
   922 29B6 B1 90			lda (:bp2),y
   923 29B8 AC 24 2A 84 90 AC + 	mwy F :bp2
   924 29C2 A0 08			ldy #s@file.nrecord
   925 29C4 91 90			sta (:bp2),y
   926 29C6 C8				iny
   927 29C7 A9 00			lda #$00
   928 29C9 91 90			sta (:bp2),y
   929
   930 29CB 8A 48			txa:pha
   931 29CD 38				sec
   932 					@readfile F, #11
   932 				 LDY F+1\ LDA F\ LDX# 11\ JSR @READFILE
   932 29CE AC 25 2A		 LDY F+1
   932 29D1 AD 24 2A		 LDA F
   932 29D4 A2 0B		 LDX# 11
   932 29D6 20 66 21		 JSR @READFILE
   933 29D9 68 AA			pla:tax
   934
   935 				; optimize FAIL (100, examples\printde.pas), line = 47
   936 					@printSTRING #CODEORIGIN+$0043
   936 				 LDY> CODEORIGIN+$0043\ LDA< CODEORIGIN+$0043\ JSR @PRINTSTRING
   936 29DB A0 20		 LDY> CODEORIGIN+$0043
   936 29DD A9 43		 LDA< CODEORIGIN+$0043
   936 29DF 20 8D 22		 JSR @PRINTSTRING
   937 29E2 20 7F 22			@printEOL
   938 				; CloseFile
   939
   940 29E5 8A 48			txa:pha
   941 29E7 38				sec
   942 					@closefile F
   942 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
   942 29E8 AC 25 2A		 LDY F+1
   942 29EB AD 24 2A		 LDA F
   942 29EE 20 39 21		 JSR @CLOSEFILE
   943 29F1 68 AA			pla:tax
   944
   945 				; optimize FAIL ('CRT.READKEY', examples\printde.pas), line = 49
   946 29F3 20 AF 25			jsr CRT.READKEY
   947 29F6 B5 98 8D 57 2D		mva :STACKORIGIN,x KEY
   948 29FB CA				dex
   949
   950 				; ------------------------------------------------------------
   951
   952 = 2D4C			adr.TEXT_BUF	= DATAORIGIN+$0324
   953 29FC			.var TEXT_BUF	= adr.TEXT_BUF .word
   954 = 2D57			KEY	= DATAORIGIN+$032F
   955
   956 = 29FD			@VarData	= TEXT_BUF
   957 = 000C			@VarDataSize	= 12
   958
   959 29FC			@exit
   960 					.ifdef @new
   961 					@FreeMem #@VarData #@VarDataSize
   962 					eif
   963 29FC 60				rts						; ret
   964 = 29FD 4C 2D		TEXT_BUF
   964 				.endl
   965 29FF			l_0062
   966
   967 				; optimize FAIL ('MAINPROC', examples\printde.pas), line = 53
   968 29FF 20 C0 25			jsr MAINPROC
   969 				; CloseFile
   970
   971 2A02 8A 48			txa:pha
   972 2A04 38				sec
   973 					@closefile F
   973 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
   973 2A05 AC 25 2A		 LDY F+1
   973 2A08 AD 24 2A		 LDA F
   973 2A0B 20 39 21		 JSR @CLOSEFILE
   974 2A0E 68 AA			pla:tax
   975
   976 				; ------------------------------------------------------------
   977
   978 = 2C3C			INTVALUE	= DATAORIGIN+$0214
   979 2A10			.var F	= DATAORIGIN+$0218 .word
   980 = 2C4C			adr.STRBUFFER	= DATAORIGIN+$0224
   981 2A10			.var STRBUFFER	= adr.STRBUFFER .word
   982 2A10			@exit
   983
   984 2A10 A2 00		@halt	ldx #0
   985 2A12 9A				txs
   986
   987 2A13 60				rts
   988
   989 				; ------------------------------------------------------------
   990
   991 2A14 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   992
   993 				; ------------------------------------------------------------
   994
   995 2A24			.local	@DEFINES
   996 2A24			ATARI
   997 				.endl
   998
   999 = 2A24 40 2C		F
   999 = 2A26 4C 2C		STRBUFFER
   999 				.endl							; MAIN
  1000
  1001 				; ------------------------------------------------------------
  1002 				; ------------------------------------------------------------
  1003
  1004 				.macro	UNITINITIALIZATION
  1005 				
  1006 					.ifdef MAIN.SYSTEM.@UnitInit
  1007 					jsr MAIN.SYSTEM.@UnitInit
  1008 					eif
  1009 				
  1010 					.ifdef MAIN.DOS.@UnitInit
  1011 					jsr MAIN.DOS.@UnitInit
  1012 					eif
  1013 				
  1014 					.ifdef MAIN.STRUTILS.@UnitInit
  1015 					jsr MAIN.STRUTILS.@UnitInit
  1016 					eif
  1017 				
  1018 					.ifdef MAIN.SYSUTILS.@UnitInit
  1019 					jsr MAIN.SYSUTILS.@UnitInit
  1020 					eif
  1021 				
  1022 					.ifdef MAIN.ATARI.@UnitInit
  1023 					jsr MAIN.ATARI.@UnitInit
  1024 					eif
  1025 				
  1026 					.ifdef MAIN.CRT.@UnitInit
  1027 					jsr MAIN.CRT.@UnitInit
  1028 					eif
  1029 				.endm
  1030
  1031 				; ------------------------------------------------------------
  1032
  1033 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1034 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1034 				SYSTEM: $2509..$2577
  1035 					eif
  1036
  1037 					ift .SIZEOF(MAIN.DOS) > 0
  1038 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
  1039 					eif
  1040
  1041 					ift .SIZEOF(MAIN.STRUTILS) > 0
  1042 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
  1043 					eif
  1044
  1045 					ift .SIZEOF(MAIN.SYSUTILS) > 0
  1046 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
  1046 				SYSUTILS: $2578..$25AE
  1047 					eif
  1048
  1049 					ift .SIZEOF(MAIN.ATARI) > 0
  1050 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1051 					eif
  1052
  1053 					ift .SIZEOF(MAIN.CRT) > 0
  1054 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1054 				CRT: $25AF..$25BF
  1055 					eif
  1056
  1057 					.print 'CODE: ',CODEORIGIN,'..',*-1
  1057 				CODE: $2000..$2A27
  1058
  1059 				; ------------------------------------------------------------
  1060
  1061 2A28			DATAORIGIN
  1062 2A28 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  1063
  1064 = 0006			VARINITSIZE	= *-DATAORIGIN
  1065 = 0330			VARDATASIZE	= 816
  1066
  1067 = 2D58			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1068
  1069 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1069 				DATA: $2A28..$2D58
  1070
  1071 02E0-02E1> DD 24			run START
  1072
  1073 				; ------------------------------------------------------------
  1074
  1075 				.macro	STATICDATA
  1076 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $02 $53 $3A  $00 $23 $50 $52 $49 $4E $54 $49
  1077 				.by  $4E $47 $20 $53 $54 $52 $49 $4E  $47 $20 $56 $41 $4C $55 $45 $53  $20 $54 $4F $20 $43 $48 $41 $4E
  1078 				.by  $4E $45 $4C $20 $31 $00 $0C $4F  $4E $20 $53 $3A $20 $44 $45 $56  $49 $43 $45 $00 $00 $00 $05 $54
  1079 				.by  $45 $53 $54 $31 $00 $05 $54 $45  $53 $54 $32 $00 $05 $54 $45 $53  $54 $33 $00
  1080 				.endm
  1081
  1082 					end
