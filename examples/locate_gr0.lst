mads 2.1.0 build 8 (23 Dec 19)
   388 					opt l+
   101
   102 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   102 				ZPAGE: $0080..$00D7
   103
   104 				.print 'RTLIB: ',RTLIB,'..',*-1
   104 				RTLIB: $2041..$21FB
   105
   106 				; ------------------------------------------------------------
   107
   108 21FC			START
   109 21FC BA				tsx
   110 21FD 8E FA 23			stx MAIN.@halt+1
   111
   112 					.ifdef fmulinit
   113 					fmulinit
   114 					eif
   115
   116 = 0120			VLEN	= VARDATASIZE-VARINITSIZE
   117 = 2425			VADR	= DATAORIGIN+VARINITSIZE
   118
   119 					ift VADR > $BFFF
   120 					ert 'Invalid memory address range ',VADR
   121 					eli (VLEN>0) && (VLEN<=256)
   122 					ldx #256-VLEN
   123 					lda #0
   124 					sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>0
   126 					@fill #VADR #VLEN #0
   126 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   126 2200 A9 25 85 88 A9 24 +  MWA #VADR @FILL.PTR1
   126 2208 A9 20 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   126 2210 A9 00 85 84		 MVA #0 @FILL.PTR2
   126 2214 20 EA 20		 JSR @FILL
   127 					eif
   128
   129 					.ifdef MAIN.@DEFINES.ROMOFF
   130 					icl 'atari\romoff.asm'
   131 					.endif
   132
   133 2217 A9 45 85 82 A9 25 + 	mwa #PROGRAMSTACK psptr
   134
   135 221F A2 0F			ldx #$0f					; DOS II+/D ParamStr
   136 2221 BD 40 03 9D FD 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   137
   138 222A E8				inx						; X = 0
   139 222B 86 90			stx bp						; BP = 0
   140
   141 222D 8E 08 D2			stx audctl					; reset POKEY
   142 2230 A9 03			lda #3
   143 2232 8D 0F D2			sta skctl
   144
   145 2235 CA				dex						; X = 255
   146
   147 2236				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: locate_gr0.a65]
Source: locate_gr0.a65
   148
   149 2236			.local	MAIN						; PROCEDURE
   150
   151 2236 4C F6 23			jmp l_0048
   152
   153 				; ------------------------------------------------------------
   154
   155 2239			.local	SYSTEM						; UNIT
   156
   157 				; ------------------------------------------------------------
   158
   159 = 0101			__PORTB_BANKS	= $0101
   160 = 0648			M_PI_2	= $0648
   161 = 0192			D_PI_2	= $0192
   162 = 0004			D_PI_180	= $04
   163 = 0000			MGTIA	= $00
   164 = 0080			MVBXE	= $80
   165 = 0000			VBXE_XDLADR	= $00
   166 = 0100			VBXE_BCBADR	= $0100
   167 = 1000			VBXE_MAPADR	= $1000
   168 = 5000			VBXE_OVRADR	= $5000
   169 = B000			VBXE_WINDOW	= $B000
   170 = 0000			IDLI	= $00
   171 = 0001			IVBL	= $01
   172 = 00FE			CH_DELCHR	= $FE
   173 = 009B			CH_ENTER	= $9B
   174 = 001B			CH_ESC	= $1B
   175 = 001C			CH_CURS_UP	= $1C
   176 = 001D			CH_CURS_DOWN	= $1D
   177 = 001E			CH_CURS_LEFT	= $1E
   178 = 001F			CH_CURS_RIGHT	= $1F
   179 = 007F			CH_TAB	= $7F
   180 = 009B			CH_EOL	= $9B
   181 = 007D			CH_CLR	= $7D
   182 = 00FD			CH_BELL	= $FD
   183 = 007E			CH_DEL	= $7E
   184 = 009C			CH_DELLINE	= $9C
   185 = 009D			CH_INSLINE	= $9D
   186 = 0000			COLOR_BLACK	= $00
   187 = 000E			COLOR_WHITE	= $0E
   188 = 0032			COLOR_RED	= $32
   189 = 0096			COLOR_CYAN	= $96
   190 = 0068			COLOR_VIOLET	= $68
   191 = 00C4			COLOR_GREEN	= $C4
   192 = 0074			COLOR_BLUE	= $74
   193 = 00EE			COLOR_YELLOW	= $EE
   194 = 0028			COLOR_ORANGE	= $28
   195 = 00E4			COLOR_BROWN	= $E4
   196 = 003C			COLOR_LIGHTRED	= $3C
   197 = 0004			COLOR_GRAY1	= $04
   198 = 0006			COLOR_GRAY2	= $06
   199 = 000A			COLOR_GRAY3	= $0A
   200 = 00CC			COLOR_LIGHTGREEN	= $CC
   201 = 007C			COLOR_LIGHTBLUE	= $7C
   202 = 0004			FMOPENREAD	= $04
   203 = 0008			FMOPENWRITE	= $08
   204 = 0009			FMOPENAPPEND	= $09
   205 = 000C			FMOPENREADWRITE	= $0C
   206 = 240F			SCREENWIDTH	= DATAORIGIN+$0000
   207 = 2411			SCREENHEIGHT	= DATAORIGIN+$0002
   208 = 2413			DATESEPARATOR	= DATAORIGIN+$0004
   209 = D014			TVSYSTEM	= $D014
   210 = 02C0			adr.PALETTE	= $02C0
   211 2239			.var PALETTE	= adr.PALETTE .word
   212 = D012			adr.HPALETTE	= $D012
   213 2239			.var HPALETTE	= adr.HPALETTE .word
   214 = 2414			FILEMODE	= DATAORIGIN+$0005
   215 = 2415			GRAPHMODE	= DATAORIGIN+$0006
   216 = 2416			IORESULT	= DATAORIGIN+$0007
   217 = 2417			EOLN	= DATAORIGIN+$0008
   218 = 2418			RNDSEED	= DATAORIGIN+$0009
   219
   220 = 2239 C0 02		PALETTE
   220 = 223B 12 D0		HPALETTE
   220 				.endl							; UNIT SYSTEM
   221
   222 				; ------------------------------------------------------------
   223
   224 223D			.local	ATARI						; UNIT
   225
   226 				; ------------------------------------------------------------
   227
   228 = 0012			RTCLOK	= $12
   229 = 004D			ATRACT	= $4D
   230 = 0052			LMARGIN	= $52
   231 = 0053			RMARGIN	= $53
   232 = 0054			ROWCRS	= $54
   233 = 0055			COLCRS	= $55
   234 = 0057			DINDEX	= $57
   235 = 0058			SAVMSC	= $58
   236 = 0062			PALNTS	= $62
   237 = 006A			RAMTOP	= $6A
   238 = 0200			VDSLST	= $0200
   239 = 0230			SDLSTL	= $0230
   240 = 0290			TXTROW	= $0290
   241 = 0291			TXTCOL	= $0291
   242 = 0293			TINDEX	= $0293
   243 = 0294			TXTMSC	= $0294
   244 = 022F			SDMCTL	= $022F
   245 = 026F			GPRIOR	= $026F
   246 = 02F0			CRSINH	= $02F0
   247 = 02F3			CHACT	= $02F3
   248 = 02F4			CHBAS	= $02F4
   249 = 02FC			CH	= $02FC
   250 = 02C0			PCOLR0	= $02C0
   251 = 02C1			PCOLR1	= $02C1
   252 = 02C2			PCOLR2	= $02C2
   253 = 02C3			PCOLR3	= $02C3
   254 = 02C4			COLOR0	= $02C4
   255 = 02C5			COLOR1	= $02C5
   256 = 02C6			COLOR2	= $02C6
   257 = 02C7			COLOR3	= $02C7
   258 = 02C8			COLOR4	= $02C8
   259 = 02C8			COLBAKS	= $02C8
   260 = D000			HPOSP0	= $D000
   261 = D001			HPOSP1	= $D001
   262 = D002			HPOSP2	= $D002
   263 = D003			HPOSP3	= $D003
   264 = D004			HPOSM0	= $D004
   265 = D005			HPOSM1	= $D005
   266 = D006			HPOSM2	= $D006
   267 = D007			HPOSM3	= $D007
   268 = D008			SIZEP0	= $D008
   269 = D009			SIZEP1	= $D009
   270 = D00A			SIZEP2	= $D00A
   271 = D00B			SIZEP3	= $D00B
   272 = D00C			SIZEM	= $D00C
   273 = D00D			GRAFP0	= $D00D
   274 = D00E			GRAFP1	= $D00E
   275 = D00F			GRAFP2	= $D00F
   276 = D010			GRAFP3	= $D010
   277 = D011			GRAFM	= $D011
   278 = D004			P0PF	= $D004
   279 = D014			PAL	= $D014
   280 = D012			COLPM0	= $D012
   281 = D013			COLPM1	= $D013
   282 = D014			COLPM2	= $D014
   283 = D015			COLPM3	= $D015
   284 = D016			COLPF0	= $D016
   285 = D017			COLPF1	= $D017
   286 = D018			COLPF2	= $D018
   287 = D019			COLPF3	= $D019
   288 = D01A			COLBK	= $D01A
   289 = D01B			PRIOR	= $D01B
   290 = D01D			GRACTL	= $D01D
   291 = D01E			HITCLR	= $D01E
   292 = D200			AUDF1	= $D200
   293 = D201			AUDC1	= $D201
   294 = D202			AUDF2	= $D202
   295 = D203			AUDC2	= $D203
   296 = D204			AUDF3	= $D204
   297 = D205			AUDC3	= $D205
   298 = D206			AUDF4	= $D206
   299 = D207			AUDC4	= $D207
   300 = D208			AUDCTL	= $D208
   301 = D20F			SKSTAT	= $D20F
   302 = D301			PORTB	= $D301
   303 = D400			DMACTL	= $D400
   304 = D401			CHACTL	= $D401
   305 = D402			DLISTL	= $D402
   306 = D404			HSCROL	= $D404
   307 = D405			VSCROL	= $D405
   308 = D407			PMBASE	= $D407
   309 = D409			CHBASE	= $D409
   310 = D40A			WSYNC	= $D40A
   311 = D40B			VCOUNT	= $D40B
   312 = D40C			PENH	= $D40C
   313 = D40D			PENV	= $D40D
   314 = D40E			NMIEN	= $D40E
   315
   316 				.endl							; UNIT ATARI
   317
   318 				; ------------------------------------------------------------
   319
   320 223D			.local	CRT						; UNIT
   321
   322 223D			.local	READKEY						; FUNCTION | ASSEMBLER
   323
   324 				; ---------------------  ASM Block 049  ---------------------
   325
   326 223D 8A 48			txa:pha
   327
   328 223F 20 41 20			@GetKey
   329
   330 2242 8D 1B 24			sta Result
   331
   332 2245 68 AA			pla:tax
   333
   334 2247			@exit
   335
   336 				; ------------------------------------------------------------
   337
   338 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   339 				; as Pointer
   340
   341 2247 E8				inx
   342 2248 AD 1B 24 95 98		mva RESULT :STACKORIGIN,x
   343
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					eif
   351
   352 				; ------------------------------------------------------------
   353
   354 = 241B			RESULT	= DATAORIGIN+$000C
   355
   356 = 241B			@VarData	= RESULT
   357 = 0001			@VarDataSize	= 1
   358
   359 224D 60				rts						; ret
   360 				.endl
   361
   362 224E			.local	GOTOXY						; PROCEDURE | ASSEMBLER
   363
   364 				; ------------------------------------------------------------
   365
   366 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   367 				; as Pointer
   368 224E B5 98 8D 1D 24		mva :STACKORIGIN,x Y
   369 2253 CA				dex
   370
   371 				; ------------------------------------------------------------
   372
   373 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   374 				; as Pointer
   375 2254 B5 98 8D 1C 24		mva :STACKORIGIN,x X
   376 2259 CA				dex
   377
   378 				; ---------------------  ASM Block 054  ---------------------
   379
   380 225A AC 1C 24			ldy x
   381 225D F0 01			beq @+
   382
   383 225F 88				dey
   384
   385 2260 84 55		@	sty colcrs
   386 2262 A0 00 84 56			mvy #$00 colcrs+1
   387
   388 2266 AC 1D 24			ldy y
   389 2269 F0 01			beq @+
   390
   391 226B 88				dey
   392
   393 226C 84 54		@	sty rowcrs
   394
   395
   396 				; ------------------------------------------------------------
   397
   398 = 241C			X	= DATAORIGIN+$000D
   399 = 241D			Y	= DATAORIGIN+$000E
   400
   401 = 241C			@VarData	= X
   402 = 0002			@VarDataSize	= 2
   403
   404 226E			@exit
   405 					.ifdef @new
   406 					lda <@VarData
   407 					sta :ztmp
   408 					lda >@VarData
   409 					ldy #@VarDataSize-1
   410 					jmp @FreeMem
   411 					eif
   412 226E 60				rts						; ret
   413 				.endl
   414
   415 				; ------------------------------------------------------------
   416
   417 = 241A			TEXTATTR	= DATAORIGIN+$000B
   418 = D01F			CONSOL	= $D01F
   419 = 0000			CN_START_SELECT_OPTION	= $00
   420 = 0001			CN_SELECT_OPTION	= $01
   421 = 0002			CN_START_OPTION	= $02
   422 = 0003			CN_OPTION	= $03
   423 = 0004			CN_START_SELECT	= $04
   424 = 0005			CN_SELECT	= $05
   425 = 0006			CN_START	= $06
   426 = 0007			CN_NONE	= $07
   427 = 0000			BW40	= $00
   428 = 0001			CO40	= $01
   429 = 0002			BW80	= $02
   430 = 0003			CO80	= $03
   431 = 0007			MONO	= $07
   432 = 0001			C40	= $01
   433 = 0003			C80	= $03
   434 = 0000			BLACK	= $00
   435 = 0001			BLUE	= $01
   436 = 0002			GREEN	= $02
   437 = 0003			CYAN	= $03
   438 = 0004			RED	= $04
   439 = 0005			MAGENTA	= $05
   440 = 0006			BROWN	= $06
   441 = 0007			LIGHTGRAY	= $07
   442 = 0008			DARKGRAY	= $08
   443 = 0009			LIGHTBLUE	= $09
   444 = 000A			LIGHTGREEN	= $0A
   445 = 000B			LIGHTCYAN	= $0B
   446 = 000C			LIGHTRED	= $0C
   447 = 000D			LIGHTMAGENTA	= $0D
   448 = 000E			YELLOW	= $0E
   449 = 000F			WHITE	= $0F
   450 = 0080			BLINK	= $80
   451
   452 				.endl							; UNIT CRT
   453
   454 				; ------------------------------------------------------------
   455
   456 226F			.local	DOS						; UNIT
   457
   458 				; ------------------------------------------------------------
   459
   460 = D014			PALNTSC	= $D014
   461
   462 				.endl							; UNIT DOS
   463
   464 				; ------------------------------------------------------------
   465
   466 226F			.local	STRUTILS					; UNIT
   467
   468 				; ------------------------------------------------------------
   469
   470 				.endl							; UNIT STRUTILS
   471
   472 				; ------------------------------------------------------------
   473
   474 226F			.local	SYSUTILS					; UNIT
   475
   476 				; ------------------------------------------------------------
   477
   478 = 0001			FAREADONLY	= $01
   479 = 0002			FAHIDDEN	= $02
   480 = 0004			FASYSFILE	= $04
   481 = 0008			FAVOLUMEID	= $08
   482 = 0010			FADIRECTORY	= $10
   483 = 0020			FAARCHIVE	= $20
   484 = 003F			FAANYFILE	= $3F
   485
   486 				.endl							; UNIT SYSUTILS
   487
   488 				; ------------------------------------------------------------
   489
   490 226F			.local	TYPES						; UNIT
   491
   492 				; ------------------------------------------------------------
   493
   494 				.endl							; UNIT TYPES
   495
   496 				; ------------------------------------------------------------
   497
   498 226F			.local	GRAPH						; UNIT
   499
   500 226F			.local	INITGRAPH_00E1					; PROCEDURE | OVERLOAD
   501
   502 				; ------------------------------------------------------------
   503
   504 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   505 				; as Pointer
   506 226F B5 98 8D 3B 24		mva :STACKORIGIN,x MODE
   507 2274 CA				dex
   508
   509 				; ---------------------  ASM Block 078  ---------------------
   510
   511
   512 2275 8A 48			txa:pha
   513
   514 2277 AD 3B 24			lda mode
   515 227A 8D 15 24			sta MAIN.SYSTEM.GraphMode
   516 227D 29 0F			and #$0f
   517 227F A8				tay
   518
   519 2280 A2 60			ldx #$60		; 6*16
   520 2282 AD 3B 24			lda mode		; %00010000 with text window
   521 2285 29 10			and #$10
   522 2287 49 10			eor #$10
   523 2289 09 02			ora #2			; read
   524
   525 					.nowarn @GRAPHICS
   525 228B 20 82 20		 JSR @GRAPHICS
   526
   527 228E 8C 26 24			sty GraphResult
   528
   529
   530 					.ifdef MAIN.@DEFINES.ROMOFF
   531 					inc portb
   532 					.endif
   533
   534 = EE6D			tlshc	equ $ee6d
   535
   536 2291 A6 57			ldx dindex
   537 2293 BC 6D EE			ldy tlshc,x
   538 2296 A9 05			lda #5
   539 2298 0A			shift	asl @
   540 2299 88				dey
   541 229A D0 FC			bne shift
   542
   543 229C 8D 3A 24			sta SCANLINE_WIDTH
   544
   545 				; Fox/TQA
   546
   547 = 0057			dindex	equ $57
   548 = EE7D			tmccn	equ $ee7d
   549 = EE8D			tmrcn	equ $ee8d
   550
   551 229F A6 57			ldx dindex
   552 22A1 BD 7D EE			lda tmccn,x
   553 22A4 BC 8D EE			ldy tmrcn,x
   554 22A7 A2 00			ldx #0
   555 22A9 C9 40			cmp #<320
   556 22AB D0 01 E8			sne:inx
   557
   558 				; X:A = horizontal resolution
   559 				; Y = vertical resolution
   560
   561 22AE 20 BC 20			@SCREENSIZE
   562
   563 					.ifdef MAIN.@DEFINES.ROMOFF
   564 					dec portb
   565 					.endif
   566
   567 22B1 68 AA			pla:tax
   568
   569
   570 				; optimize OK (GRAPH), line = 132
   571
   572 22B3 A5 58 8D 38 24		mva ATARI.SAVMSC VIDEORAM
   573 22B8 A5 59 8D 39 24		mva ATARI.SAVMSC+1 VIDEORAM+1
   574
   575 				; ------------------------------------------------------------
   576
   577 = 243B			MODE	= DATAORIGIN+$002C
   578
   579 = 243B			@VarData	= MODE
   580 = 0001			@VarDataSize	= 1
   581
   582 22BD			@exit
   583 					.ifdef @new
   584 					lda <@VarData
   585 					sta :ztmp
   586 					lda >@VarData
   587 					ldy #@VarDataSize-1
   588 					jmp @FreeMem
   589 					eif
   590 22BD 60				rts						; ret
   591 				.endl
   592
   593 22BE			.local	GETPIXEL					; FUNCTION | ASSEMBLER
   594
   595 				; ------------------------------------------------------------
   596
   597 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   598 				; as Pointer
   599 22BE B5 98 8D 3E 24		mva :STACKORIGIN,x Y
   600 22C3 B5 A8 8D 3F 24		mva :STACKORIGIN+STACKWIDTH,x Y+1
   601 22C8 CA				dex
   602
   603 				; ------------------------------------------------------------
   604
   605 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   606 				; as Pointer
   607 22C9 B5 98 8D 3C 24		mva :STACKORIGIN,x X
   608 22CE B5 A8 8D 3D 24		mva :STACKORIGIN+STACKWIDTH,x X+1
   609 22D3 CA				dex
   610
   611 				; ---------------------  ASM Block 083  ---------------------
   612
   613 22D4 8A 48			txa:pha
   614
   615 22D6 A0 00			ldy #0
   616
   617 22D8 AD 3F 24			lda y+1
   618 22DB 30 34			bmi stop
   619 22DD CD 12 24			cmp MAIN.SYSTEM.ScreenHeight+1
   620 22E0 D0 06			bne sk0
   621 22E2 AD 3E 24			lda y
   622 22E5 CD 11 24			cmp MAIN.SYSTEM.ScreenHeight
   623 22E8			sk0
   624 22E8 B0 27			bcs stop
   625
   626 22EA AD 3D 24			lda x+1
   627 22ED 30 22			bmi stop
   628 22EF CD 10 24			cmp MAIN.SYSTEM.ScreenWidth+1
   629 22F2 D0 06			bne sk1
   630 22F4 AD 3C 24			lda x
   631 22F7 CD 0F 24			cmp MAIN.SYSTEM.ScreenWidth
   632 22FA			sk1
   633 22FA B0 15			bcs stop
   634
   635 22FC AD 3C 24 85 55 AD + 	mwa x colcrs
   636 2306 AD 3E 24 85 54		mva y rowcrs
   637
   638 230B A9 07			lda #@IDget
   639
   640 230D 20 64 20			jsr @COMMAND
   641 2310 A8				tay
   642
   643 2311 8C 40 24		stop	sty Result
   644
   645 2314 68 AA			pla:tax
   646
   647 2316			@exit
   648
   649 				; ------------------------------------------------------------
   650
   651 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   652 				; as Pointer
   653
   654 2316 E8				inx
   655 2317 AD 40 24 95 98		mva RESULT :STACKORIGIN,x
   656
   657 					.ifdef @new
   658 					lda <@VarData
   659 					sta :ztmp
   660 					lda >@VarData
   661 					ldy #@VarDataSize-1
   662 					jmp @FreeMem
   663 					eif
   664
   665 				; ------------------------------------------------------------
   666
   667 = 243C			X	= DATAORIGIN+$002D
   668 = 243E			Y	= DATAORIGIN+$002F
   669 = 2440			RESULT	= DATAORIGIN+$0031
   670
   671 = 243C			@VarData	= X
   672 = 0005			@VarDataSize	= 5
   673
   674 231C 60				rts						; ret
   675 				.endl
   676
   677 				; ------------------------------------------------------------
   678
   679 = 0080			CURRENTDRIVER	= $80
   680 = 0000			DETECT	= $00
   681 = 0001			CGA	= $01
   682 = 0002			MCGA	= $02
   683 = 0003			EGA	= $03
   684 = 0004			EGA64	= $04
   685 = 0005			EGAMONO	= $05
   686 = 0006			LOWRES	= $06
   687 = 0007			HERCMONO	= $07
   688 = 0009			VGA	= $09
   689 = 000A			VESA	= $0A
   690 = 000B			D1BIT	= $0B
   691 = 000C			D2BIT	= $0C
   692 = 000D			D4BIT	= $0D
   693 = 000E			D6BIT	= $0E
   694 = 000F			D8BIT	= $0F
   695 = 0010			D12BIT	= $10
   696 = 0018			M640X400	= $18
   697 = 0018			M640X480	= $18
   698 = 0001			GROK	= $01
   699 = 00FF			GRNOINITGRAPH	= $FF
   700 = 00FE			GRNOTDETECTED	= $FE
   701 = 00FD			GRFILENOTFOUND	= $FD
   702 = 00FC			GRINVALIDDRIVER	= $FC
   703 = 00FB			GRNOLOADMEM	= $FB
   704 = 00FA			GRNOSCANMEM	= $FA
   705 = 00F9			GRNOFLOODMEM	= $F9
   706 = 00F8			GRFONTNOTFOUND	= $F8
   707 = 00F7			GRNOFONTMEM	= $F7
   708 = 00F6			GRINVALIDMODE	= $F6
   709 = 00F5			GRERROR	= $F5
   710 = 00F4			GRIOERROR	= $F4
   711 = 00F3			GRINVALIDFONT	= $F3
   712 = 00F2			GRINVALIDFONTNUM	= $F2
   713 = 00EE			GRINVALIDVERSION	= $EE
   714 = 0000			CGAC0	= $00
   715 = 0001			CGAC1	= $01
   716 = 0002			CGAC2	= $02
   717 = 0003			CGAC3	= $03
   718 = 0004			CGAHI	= $04
   719 = 0000			MCGAC0	= $00
   720 = 0001			MCGAC1	= $01
   721 = 0002			MCGAC2	= $02
   722 = 0003			MCGAC3	= $03
   723 = 0004			MCGAMED	= $04
   724 = 0005			MCGAHI	= $05
   725 = 0000			EGALO	= $00
   726 = 0001			EGAHI	= $01
   727 = 0000			EGA64LO	= $00
   728 = 0001			EGA64HI	= $01
   729 = 0003			EGAMONOHI	= $03
   730 = 000A			VGALO	= $0A
   731 = 001F			VGAMED	= $1F
   732 = 0018			VGAHI	= $18
   733 = 241E			WIN_LEFT	= DATAORIGIN+$000F
   734 = 2420			WIN_RIGHT	= DATAORIGIN+$0011
   735 = 2422			WIN_TOP	= DATAORIGIN+$0013
   736 = 2424			WIN_BOTTOM	= DATAORIGIN+$0015
   737 = 2426			GRAPHRESULT	= DATAORIGIN+$0017
   738 = 2427			GETCOLOR	= DATAORIGIN+$0018
   739 = 2428			adr.LASTARCCOORDS	= DATAORIGIN+$0019
   740 231D			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   741 = 2428			LASTARCCOORDS.X	= DATAORIGIN+$0019
   742 = 242A			LASTARCCOORDS.Y	= DATAORIGIN+$001B
   743 = 242C			LASTARCCOORDS.XSTART	= DATAORIGIN+$001D
   744 = 242E			LASTARCCOORDS.YSTART	= DATAORIGIN+$001F
   745 = 2430			LASTARCCOORDS.XEND	= DATAORIGIN+$0021
   746 = 2432			LASTARCCOORDS.YEND	= DATAORIGIN+$0023
   747 = 2434			CURRENTX	= DATAORIGIN+$0025
   748 = 2436			CURRENTY	= DATAORIGIN+$0027
   749 = 2438			VIDEORAM	= DATAORIGIN+$0029
   750 = 243A			SCANLINE_WIDTH	= DATAORIGIN+$002B
   751
   752 = 231D 28 24		LASTARCCOORDS
   752 				.endl							; UNIT GRAPH
   753
   754 				; ------------------------------------------------------------
   755
   756 231F			.local	CIO						; UNIT
   757
   758 231F			.local	GET						; FUNCTION | ASSEMBLER
   759
   760 				; ------------------------------------------------------------
   761
   762 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   763 				; as Pointer
   764 231F B5 98 8D 41 24		mva :STACKORIGIN,x CHN
   765 2324 CA				dex
   766
   767 				; ---------------------  ASM Block 095  ---------------------
   768
   769 2325 8A 48			txa:pha
   770
   771 2327 AD 41 24			lda chn
   772 232A 0A 0A 0A 0A			:4 asl @
   773 232E AA				tax
   774
   775 232F A9 07			lda #7		;get char command
   776 2331 9D 42 03			sta iccmd,x
   777
   778 2334 A9 00			lda #$00	;zero out the unused
   779 2336 9D 48 03			sta icbufl,x	;store in accumulator
   780 2339 9D 49 03			sta icbufh,x	;...after CIOV jump
   781
   782 233C				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 233C 20 56 E4				jsr CIOV
Source: locate_gr0.a65
   783
   784 233F 8C 16 24			sty MAIN.SYSTEM.IOResult
   785
   786 2342 8D 42 24			sta Result
   787
   788 2345 68 AA			pla:tax
   789
   790 2347			@exit
   791
   792 				; ------------------------------------------------------------
   793
   794 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   795 				; as Pointer
   796
   797 2347 E8				inx
   798 2348 AD 42 24 95 98		mva RESULT :STACKORIGIN,x
   799
   800 					.ifdef @new
   801 					lda <@VarData
   802 					sta :ztmp
   803 					lda >@VarData
   804 					ldy #@VarDataSize-1
   805 					jmp @FreeMem
   806 					eif
   807
   808 				; ------------------------------------------------------------
   809
   810 = 2441			CHN	= DATAORIGIN+$0032
   811 = 2442			RESULT	= DATAORIGIN+$0033
   812
   813 = 2441			@VarData	= CHN
   814 = 0002			@VarDataSize	= 2
   815
   816 234D 60				rts						; ret
   817 				.endl
   818
   819 				; ------------------------------------------------------------
   820
   821 				.endl							; UNIT CIO
   822
   823 234E			.local	MAINPROC					; PROCEDURE
   824
   825 				; optimize FAIL ('GRAPH.INITGRAPH_00E1', examples\locate_gr0.pas), line = 18
   826 234E E8				inx
   827 234F A9 00 95 98			mva #$00 :STACKORIGIN,x
   828 2353 20 6F 22			jsr GRAPH.INITGRAPH_00E1
   829
   830 				; optimize FAIL ('CRT.GOTOXY', examples\locate_gr0.pas), line = 19
   831 2356 E8				inx
   832 2357 A9 04 95 98			mva #$04 :STACKORIGIN,x
   833 235B E8				inx
   834 235C 95 98			sta :STACKORIGIN,x
   835 235E 20 4E 22			jsr CRT.GOTOXY
   836
   837 				; optimize FAIL (100, examples\locate_gr0.pas), line = 20
   838 					@printSTRING #CODEORIGIN+$000D
   838 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   838 2361 A0 20		 LDY> CODEORIGIN+$000D
   838 2363 A9 0D		 LDA< CODEORIGIN+$000D
   838 2365 20 40 21		 JSR @PRINTSTRING
   839
   840 				; optimize FAIL ('CRT.GOTOXY', examples\locate_gr0.pas), line = 21
   841 2368 E8				inx
   842 2369 A9 04 95 98			mva #$04 :STACKORIGIN,x
   843 236D E8				inx
   844 236E A9 06 95 98			mva #$06 :STACKORIGIN,x
   845 2372 20 4E 22			jsr CRT.GOTOXY
   846
   847 				; optimize FAIL (100, examples\locate_gr0.pas), line = 22
   848 					@printSTRING #CODEORIGIN+$001C
   848 				 LDY> CODEORIGIN+$001C\ LDA< CODEORIGIN+$001C\ JSR @PRINTSTRING
   848 2375 A0 20		 LDY> CODEORIGIN+$001C
   848 2377 A9 1C		 LDA< CODEORIGIN+$001C
   848 2379 20 40 21		 JSR @PRINTSTRING
   849
   850 				; optimize FAIL (100, examples\locate_gr0.pas), line = 23
   851 					@printSTRING #CODEORIGIN+$0023
   851 				 LDY> CODEORIGIN+$0023\ LDA< CODEORIGIN+$0023\ JSR @PRINTSTRING
   851 237C A0 20		 LDY> CODEORIGIN+$0023
   851 237E A9 23		 LDA< CODEORIGIN+$0023
   851 2380 20 40 21		 JSR @PRINTSTRING
   852 					@print #$9B
   852 				 LDY# $9B\ JSR @PRINT
   852 2383 A0 9B		 LDY# $9B
   852 2385 20 37 21		 JSR @PRINT
   853 					@printSTRING #CODEORIGIN+$0022
   853 				 LDY> CODEORIGIN+$0022\ LDA< CODEORIGIN+$0022\ JSR @PRINTSTRING
   853 2388 A0 20		 LDY> CODEORIGIN+$0022
   853 238A A9 22		 LDA< CODEORIGIN+$0022
   853 238C 20 40 21		 JSR @PRINTSTRING
   854 					@print #$9B
   854 				 LDY# $9B\ JSR @PRINT
   854 238F A0 9B		 LDY# $9B
   854 2391 20 37 21		 JSR @PRINT
   855 					@printSTRING #CODEORIGIN+$0025
   855 				 LDY> CODEORIGIN+$0025\ LDA< CODEORIGIN+$0025\ JSR @PRINTSTRING
   855 2394 A0 20		 LDY> CODEORIGIN+$0025
   855 2396 A9 25		 LDA< CODEORIGIN+$0025
   855 2398 20 40 21		 JSR @PRINTSTRING
   856
   857 				; optimize FAIL ('CIO.GET', examples\locate_gr0.pas), line = 24
   858 239B E8				inx
   859 239C A9 07 95 98			mva #$07 :STACKORIGIN,x
   860 23A0 20 1F 23			jsr CIO.GET
   861 23A3 B5 98 8D 43 25		mva :STACKORIGIN,x KEY
   862 23A8 CA				dex
   863
   864 23A9 20 3D 22			jsr CRT.READKEY					; call Entry
   865
   866 23AC CA				dex
   867
   868 				; optimize FAIL ('GRAPH.GETPIXEL', examples\locate_gr0.pas), line = 26
   869 23AD E8				inx
   870 23AE A9 0B 95 98			mva #$0B :STACKORIGIN,x
   871 23B2 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   872 23B6 E8				inx
   873 23B7 A9 03 95 98			mva #$03 :STACKORIGIN,x
   874 23BB A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   875 23BF 20 BE 22			jsr GRAPH.GETPIXEL
   876 23C2 B5 98 8D 44 25		mva :STACKORIGIN,x LOC
   877 23C7 CA				dex
   878
   879 				; optimize FAIL (100, examples\locate_gr0.pas), line = 27
   880 23C8 AD 44 25			lda LOC
   881 23CB 20 71 21			jsr @printBYTE._a
   882
   883 				; optimize FAIL ('CRT.GOTOXY', examples\locate_gr0.pas), line = 28
   884 23CE E8				inx
   885 23CF A9 06 95 98			mva #$06 :STACKORIGIN,x
   886 23D3 E8				inx
   887 23D4 95 98			sta :STACKORIGIN,x
   888 23D6 20 4E 22			jsr CRT.GOTOXY
   889
   890 				; optimize FAIL (100, examples\locate_gr0.pas), line = 29
   891 23D9 E8				inx
   892 23DA AD 44 25 95 98		mva LOC :STACKORIGIN,x
   893 23DF 20 32 21			@printCHAR
   894 23E2 CA				dex
   895
   896 				; optimize FAIL ('CIO.GET', examples\locate_gr0.pas), line = 30
   897 23E3 E8				inx
   898 23E4 A9 07 95 98			mva #$07 :STACKORIGIN,x
   899 23E8 20 1F 23			jsr CIO.GET
   900 23EB B5 98 8D 43 25		mva :STACKORIGIN,x KEY
   901 23F0 CA				dex
   902
   903 23F1 20 3D 22			jsr CRT.READKEY					; call Entry
   904
   905 23F4 CA				dex
   906
   907 				; ------------------------------------------------------------
   908
   909 = 2543			KEY	= DATAORIGIN+$0134
   910 = 2544			LOC	= DATAORIGIN+$0135
   911
   912 = 2543			@VarData	= KEY
   913 = 0002			@VarDataSize	= 2
   914
   915 23F5			@exit
   916 					.ifdef @new
   917 					lda <@VarData
   918 					sta :ztmp
   919 					lda >@VarData
   920 					ldy #@VarDataSize-1
   921 					jmp @FreeMem
   922 					eif
   923 23F5 60				rts						; ret
   924 				.endl
   925 23F6			l_0048
   926
   927 				; optimize FAIL ('MAINPROC', examples\locate_gr0.pas), line = 35
   928 23F6 20 4E 23			jsr MAINPROC
   929
   930 				; ------------------------------------------------------------
   931
   932 = 2443			adr.STRBUFFER	= DATAORIGIN+$0034
   933 23F9			.var STRBUFFER	= adr.STRBUFFER .word
   934 23F9			@exit
   935
   936 23F9 A2 00		@halt	ldx #0
   937 23FB 9A				txs
   938 					.ifdef MAIN.@DEFINES.ROMOFF
   939 					inc portb
   940 					.endif
   941
   942 23FC 60				rts
   943
   944 				; ------------------------------------------------------------
   945
   946 23FD 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   947
   948 				; ------------------------------------------------------------
   949
   950 240D			.local	@DEFINES
   951 240D			ATARI
   952 				.endl
   953
   954 = 240D 43 24		STRBUFFER
   954 				.endl							; MAIN
   955
   956 				; ------------------------------------------------------------
   957 				; ------------------------------------------------------------
   958
   959 				.macro	UNITINITIALIZATION
   960 				
   961 					.ifdef MAIN.SYSTEM.@UnitInit
   962 					jsr MAIN.SYSTEM.@UnitInit
   963 					eif
   964 				
   965 					.ifdef MAIN.ATARI.@UnitInit
   966 					jsr MAIN.ATARI.@UnitInit
   967 					eif
   968 				
   969 					.ifdef MAIN.CRT.@UnitInit
   970 					jsr MAIN.CRT.@UnitInit
   971 					eif
   972 				
   973 					.ifdef MAIN.DOS.@UnitInit
   974 					jsr MAIN.DOS.@UnitInit
   975 					eif
   976 				
   977 					.ifdef MAIN.STRUTILS.@UnitInit
   978 					jsr MAIN.STRUTILS.@UnitInit
   979 					eif
   980 				
   981 					.ifdef MAIN.SYSUTILS.@UnitInit
   982 					jsr MAIN.SYSUTILS.@UnitInit
   983 					eif
   984 				
   985 					.ifdef MAIN.TYPES.@UnitInit
   986 					jsr MAIN.TYPES.@UnitInit
   987 					eif
   988 				
   989 					.ifdef MAIN.GRAPH.@UnitInit
   990 					jsr MAIN.GRAPH.@UnitInit
   991 					eif
   992 				
   993 					.ifdef MAIN.CIO.@UnitInit
   994 					jsr MAIN.CIO.@UnitInit
   995 					eif
   996 				.endm
   997
   998 				; ------------------------------------------------------------
   999
  1000 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1001 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1001 				SYSTEM: $2239..$223C
  1002 					eif
  1003
  1004 					ift .SIZEOF(MAIN.ATARI) > 0
  1005 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1006 					eif
  1007
  1008 					ift .SIZEOF(MAIN.CRT) > 0
  1009 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1009 				CRT: $223D..$226E
  1010 					eif
  1011
  1012 					ift .SIZEOF(MAIN.DOS) > 0
  1013 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
  1014 					eif
  1015
  1016 					ift .SIZEOF(MAIN.STRUTILS) > 0
  1017 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
  1018 					eif
  1019
  1020 					ift .SIZEOF(MAIN.SYSUTILS) > 0
  1021 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
  1022 					eif
  1023
  1024 					ift .SIZEOF(MAIN.TYPES) > 0
  1025 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
  1026 					eif
  1027
  1028 					ift .SIZEOF(MAIN.GRAPH) > 0
  1029 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
  1029 				GRAPH: $226F..$231E
  1030 					eif
  1031
  1032 					ift .SIZEOF(MAIN.CIO) > 0
  1033 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
  1033 				CIO: $231F..$234D
  1034 					eif
  1035
  1036 					.print 'CODE: ',CODEORIGIN,'..',*-1
  1036 				CODE: $2000..$240E
  1037
  1038 				; ------------------------------------------------------------
  1039
  1040 240F			DATAORIGIN
  1041 240F 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $27 $00 $00 $00 $17
  1042
  1043 = 0016			VARINITSIZE	= *-DATAORIGIN
  1044 = 0136			VARDATASIZE	= 310
  1045
  1046 = 2545			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1047
  1048 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1048 				DATA: $240F..$2545
  1049
  1050 02E0-02E1> FC 21			run START
  1051
  1052 				; ------------------------------------------------------------
  1053
  1054 				.macro	STATICDATA
  1055 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $0D $48 $45  $4C $4C $4F $2C $41 $54 $41 $52
  1056 				.by  $49 $41 $4E $00 $05 $41 $54 $20  $52 $49 $00 $00 $00 $1A $50 $52  $45 $53 $53 $20 $41 $4E $59 $20
  1057 				.by  $4B $45 $59 $20 $54 $4F $20 $43  $4F $4E $54 $49 $4E $55 $45 $21  $00
  1058 				.endm
  1059
  1060 					end
