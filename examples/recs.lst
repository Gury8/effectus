mads 2.1.0 build 4 (27 Oct 19)
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $20A2..$21DA
    97
    98 				; ------------------------------------------------------------
    99
   100 21DA			START
   101 21DA BA				tsx
   102 21DB 8E 2D 24			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 001A			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 2448			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 21DE A2 E6			ldx #256-VLEN
   115 21E0 A9 00			lda #0
   116 21E2 9D 62 23 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   119 					eif
   120
   121 21E8 A2 0F			ldx #$0f
   122 21EA BD 40 03 9D 30 24 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 21F3 E8				inx		; X = 0 !!!
   125 21F4 86 8E			stx bp		; lo BP = 0
   126
   127 21F6				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: recs.a65]
   128
   129 21F6			.local	MAIN						; PROCEDURE
   130
   131 21F6 4C 29 24			jmp l_00A9
   132
   133 				; ------------------------------------------------------------
   134
   135 21F9			.local	SYSTEM						; UNIT
   136
   137 				; ------------------------------------------------------------
   138
   139 = 0648			M_PI_2	= $0648
   140 = 0192			D_PI_2	= $0192
   141 = 0004			D_PI_180	= $0004
   142 = 0000			MGTIA	= $0000
   143 = 0080			MVBXE	= $0080
   144 = 0000			VBXE_XDLADR	= $0000
   145 = 0100			VBXE_BCBADR	= $0100
   146 = 1000			VBXE_MAPADR	= $1000
   147 = 5000			VBXE_OVRADR	= $5000
   148 = B000			VBXE_WINDOW	= $B000
   149 = 0000			IDLI	= $0000
   150 = 0001			IVBL	= $0001
   151 = 00FE			CH_DELCHR	= $00FE
   152 = 009B			CH_ENTER	= $009B
   153 = 001B			CH_ESC	= $001B
   154 = 001C			CH_CURS_UP	= $001C
   155 = 001D			CH_CURS_DOWN	= $001D
   156 = 001E			CH_CURS_LEFT	= $001E
   157 = 001F			CH_CURS_RIGHT	= $001F
   158 = 007F			CH_TAB	= $007F
   159 = 009B			CH_EOL	= $009B
   160 = 007D			CH_CLR	= $007D
   161 = 00FD			CH_BELL	= $00FD
   162 = 007E			CH_DEL	= $007E
   163 = 009C			CH_DELLINE	= $009C
   164 = 009D			CH_INSLINE	= $009D
   165 = 0000			COLOR_BLACK	= $0000
   166 = 000E			COLOR_WHITE	= $000E
   167 = 0032			COLOR_RED	= $0032
   168 = 0096			COLOR_CYAN	= $0096
   169 = 0068			COLOR_VIOLET	= $0068
   170 = 00C4			COLOR_GREEN	= $00C4
   171 = 0074			COLOR_BLUE	= $0074
   172 = 00EE			COLOR_YELLOW	= $00EE
   173 = 0028			COLOR_ORANGE	= $0028
   174 = 00E4			COLOR_BROWN	= $00E4
   175 = 003C			COLOR_LIGHTRED	= $003C
   176 = 0004			COLOR_GRAY1	= $0004
   177 = 0006			COLOR_GRAY2	= $0006
   178 = 000A			COLOR_GRAY3	= $000A
   179 = 00CC			COLOR_LIGHTGREEN	= $00CC
   180 = 007C			COLOR_LIGHTBLUE	= $007C
   181 = 0004			FMOPENREAD	= $0004
   182 = 0008			FMOPENWRITE	= $0008
   183 = 0009			FMOPENAPPEND	= $0009
   184 = 000C			FMOPENREADWRITE	= $000C
   185 = 2442			SCREENWIDTH	= DATAORIGIN+$0000
   186 = 2444			SCREENHEIGHT	= DATAORIGIN+$0002
   187 = 2446			DATESEPARATOR	= DATAORIGIN+$0004
   188 = D014			TVSYSTEM	= $D014
   189 = 02C0			adr.PALETTE	= $02C0
   190 21F9			.var PALETTE	= adr.PALETTE .word
   191 = D012			adr.HPALETTE	= $D012
   192 21F9			.var HPALETTE	= adr.HPALETTE .word
   193 = 2447			FILEMODE	= DATAORIGIN+$0005
   194 = 2448			SCREENMODE	= DATAORIGIN+$0006
   195 = 2449			IORESULT	= DATAORIGIN+$0007
   196 = 244A			EOLN	= DATAORIGIN+$0008
   197 = 244B			RNDSEED	= DATAORIGIN+$0009
   198
   199 = 21F9 C0 02		PALETTE
   199 = 21FB 12 D0		HPALETTE
   199 				.endl							; UNIT SYSTEM
   200
   201 				; ------------------------------------------------------------
   202
   203 21FD			.local	DOS						; UNIT
   204
   205 				; ------------------------------------------------------------
   206
   207 = D014			PALNTSC	= $D014
   208
   209 				.endl							; UNIT DOS
   210
   211 				; ------------------------------------------------------------
   212
   213 21FD			.local	STRUTILS					; UNIT
   214
   215 				; ------------------------------------------------------------
   216
   217 				.endl							; UNIT STRUTILS
   218
   219 				; ------------------------------------------------------------
   220
   221 21FD			.local	SYSUTILS					; UNIT
   222
   223 				; ------------------------------------------------------------
   224
   225 = 0001			FAREADONLY	= $0001
   226 = 0002			FAHIDDEN	= $0002
   227 = 0004			FASYSFILE	= $0004
   228 = 0008			FAVOLUMEID	= $0008
   229 = 0010			FADIRECTORY	= $0010
   230 = 0020			FAARCHIVE	= $0020
   231 = 003F			FAANYFILE	= $003F
   232
   233 				.endl							; UNIT SYSUTILS
   234
   235 				; ------------------------------------------------------------
   236
   237 21FD			.local	ATARI						; UNIT
   238
   239 				; ------------------------------------------------------------
   240
   241 = 0012			RTCLOK	= $0012
   242 = 004D			ATRACT	= $004D
   243 = 0052			LMARGIN	= $0052
   244 = 0053			RMARGIN	= $0053
   245 = 0054			ROWCRS	= $0054
   246 = 0055			COLCRS	= $0055
   247 = 0057			DINDEX	= $0057
   248 = 0058			SAVMSC	= $0058
   249 = 006A			RAMTOP	= $006A
   250 = 0200			VDSLST	= $0200
   251 = 0230			SDLSTL	= $0230
   252 = 0290			TXTROW	= $0290
   253 = 0291			TXTCOL	= $0291
   254 = 0293			TINDEX	= $0293
   255 = 0294			TXTMSC	= $0294
   256 = 022F			SDMCTL	= $022F
   257 = 026F			GPRIOR	= $026F
   258 = 02F0			CRSINH	= $02F0
   259 = 02F3			CHACT	= $02F3
   260 = 02F4			CHBAS	= $02F4
   261 = 02FC			CH	= $02FC
   262 = 02C0			PCOLR0	= $02C0
   263 = 02C1			PCOLR1	= $02C1
   264 = 02C2			PCOLR2	= $02C2
   265 = 02C3			PCOLR3	= $02C3
   266 = 02C4			COLOR0	= $02C4
   267 = 02C5			COLOR1	= $02C5
   268 = 02C6			COLOR2	= $02C6
   269 = 02C7			COLOR3	= $02C7
   270 = 02C8			COLOR4	= $02C8
   271 = 02C8			COLBAKS	= $02C8
   272 = D000			HPOSP0	= $D000
   273 = D001			HPOSP1	= $D001
   274 = D002			HPOSP2	= $D002
   275 = D003			HPOSP3	= $D003
   276 = D004			HPOSM0	= $D004
   277 = D005			HPOSM1	= $D005
   278 = D006			HPOSM2	= $D006
   279 = D007			HPOSM3	= $D007
   280 = D008			SIZEP0	= $D008
   281 = D009			SIZEP1	= $D009
   282 = D00A			SIZEP2	= $D00A
   283 = D00B			SIZEP3	= $D00B
   284 = D00C			SIZEM	= $D00C
   285 = D00D			GRAFP0	= $D00D
   286 = D00E			GRAFP1	= $D00E
   287 = D00F			GRAFP2	= $D00F
   288 = D010			GRAFP3	= $D010
   289 = D011			GRAFM	= $D011
   290 = D004			P0PF	= $D004
   291 = D014			PAL	= $D014
   292 = D012			COLPM0	= $D012
   293 = D013			COLPM1	= $D013
   294 = D014			COLPM2	= $D014
   295 = D015			COLPM3	= $D015
   296 = D016			COLPF0	= $D016
   297 = D017			COLPF1	= $D017
   298 = D018			COLPF2	= $D018
   299 = D019			COLPF3	= $D019
   300 = D01A			COLBK	= $D01A
   301 = D01B			PRIOR	= $D01B
   302 = D01D			GRACTL	= $D01D
   303 = D01E			HITCLR	= $D01E
   304 = D200			AUDF1	= $D200
   305 = D201			AUDC1	= $D201
   306 = D202			AUDF2	= $D202
   307 = D203			AUDC2	= $D203
   308 = D204			AUDF3	= $D204
   309 = D205			AUDC3	= $D205
   310 = D206			AUDF4	= $D206
   311 = D207			AUDC4	= $D207
   312 = D208			AUDCTL	= $D208
   313 = D20F			SKSTAT	= $D20F
   314 = D301			PORTB	= $D301
   315 = D400			DMACTL	= $D400
   316 = D401			CHACTL	= $D401
   317 = D402			DLISTL	= $D402
   318 = D404			HSCROL	= $D404
   319 = D405			VSCROL	= $D405
   320 = D407			PMBASE	= $D407
   321 = D409			CHBASE	= $D409
   322 = D40A			WSYNC	= $D40A
   323 = D40B			VCOUNT	= $D40B
   324 = D40C			PENH	= $D40C
   325 = D40D			PENV	= $D40D
   326 = D40E			NMIEN	= $D40E
   327
   328 				.endl							; UNIT ATARI
   329
   330 				; ------------------------------------------------------------
   331
   332 21FD			.local	CRT						; UNIT
   333
   334 21FD			.local	READKEY						; FUNCTION | ASSEMBLER
   335
   336 				; ---------------------  ASM Block 063  ---------------------
   337
   338 21FD 8A 48			txa:pha
   339
   340 21FF 20 CA 21			@GetKey
   341
   342 2202 8D 4E 24			sta Result
   343
   344 2205 68 AA			pla:tax
   345
   346 2207			@exit
   347
   348 				; ------------------------------------------------------------
   349
   350 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   351 				; as Pointer
   352
   353 2207 E8				inx						; add bx, 1
   354 2208 AD 4E 24 95 98		mva RESULT :STACKORIGIN,x
   355
   356 					.ifdef @new
   357 					@FreeMem #@VarData #@VarDataSize
   358 					eif
   359
   360 				; ------------------------------------------------------------
   361
   362 = 244E			RESULT	= DATAORIGIN+$000C
   363
   364 = 244E			@VarData	= RESULT
   365 = 0001			@VarDataSize	= 1
   366
   367 220D 60				rts						; ret
   368 				.endl
   369
   370 				; ------------------------------------------------------------
   371
   372 = 244D			TEXTATTR	= DATAORIGIN+$000B
   373 = D01F			CONSOL	= $D01F
   374 = 0000			CN_START_SELECT_OPTION	= $0000
   375 = 0001			CN_SELECT_OPTION	= $0001
   376 = 0002			CN_START_OPTION	= $0002
   377 = 0003			CN_OPTION	= $0003
   378 = 0004			CN_START_SELECT	= $0004
   379 = 0005			CN_SELECT	= $0005
   380 = 0006			CN_START	= $0006
   381 = 0007			CN_NONE	= $0007
   382 = 0000			BW40	= $0000
   383 = 0001			CO40	= $0001
   384 = 0002			BW80	= $0002
   385 = 0003			CO80	= $0003
   386 = 0007			MONO	= $0007
   387 = 0001			C40	= $0001
   388 = 0003			C80	= $0003
   389 = 0000			BLACK	= $0000
   390 = 0001			BLUE	= $0001
   391 = 0002			GREEN	= $0002
   392 = 0003			CYAN	= $0003
   393 = 0004			RED	= $0004
   394 = 0005			MAGENTA	= $0005
   395 = 0006			BROWN	= $0006
   396 = 0007			LIGHTGRAY	= $0007
   397 = 0008			DARKGRAY	= $0008
   398 = 0009			LIGHTBLUE	= $0009
   399 = 000A			LIGHTGREEN	= $000A
   400 = 000B			LIGHTCYAN	= $000B
   401 = 000C			LIGHTRED	= $000C
   402 = 000D			LIGHTMAGENTA	= $000D
   403 = 000E			YELLOW	= $000E
   404 = 000F			WHITE	= $000F
   405 = 0080			BLINK	= $0080
   406
   407 				.endl							; UNIT CRT
   408
   409 220E			.local	MAINPROC					; PROCEDURE
   410
   411 				; optimize FAIL (100, examples\recs.pas), line = 22
   412 					@print #$7D
   412 				 LDY# $7D\ JSR @PRINT
   412 220E A0 7D		 LDY# $7D
   412 2210 20 C1 20		 JSR @PRINT
   413
   414 				; optimize FAIL (100, examples\recs.pas), line = 23
   415 					@printSTRING #CODEORIGIN+$000D
   415 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   415 2213 A0 20		 LDY> CODEORIGIN+$000D
   415 2215 A9 0D		 LDA< CODEORIGIN+$000D
   415 2217 20 CA 20		 JSR @PRINTSTRING
   416 221A 20 BC 20			@printEOL
   417
   418 				; optimize FAIL (100, examples\recs.pas), line = 24
   419 					@printSTRING #CODEORIGIN+$0020
   419 				 LDY> CODEORIGIN+$0020\ LDA< CODEORIGIN+$0020\ JSR @PRINTSTRING
   419 221D A0 20		 LDY> CODEORIGIN+$0020
   419 221F A9 20		 LDA< CODEORIGIN+$0020
   419 2221 20 CA 20		 JSR @PRINTSTRING
   420 2224 20 BC 20			@printEOL
   421
   422 				; optimize FAIL (100, examples\recs.pas), line = 25
   423 					@printSTRING #CODEORIGIN+$003C
   423 				 LDY> CODEORIGIN+$003C\ LDA< CODEORIGIN+$003C\ JSR @PRINTSTRING
   423 2227 A0 20		 LDY> CODEORIGIN+$003C
   423 2229 A9 3C		 LDA< CODEORIGIN+$003C
   423 222B 20 CA 20		 JSR @PRINTSTRING
   424 222E 20 BC 20			@printEOL
   425
   426 				; optimize OK (examples\recs.pas), line = 26
   427
   428 2231 AD 40 24 8D 5F 24		mva DATA ENTRY
   429 2237 AD 41 24 8D 60 24		mva DATA+1 ENTRY+1
   430
   431 				; optimize OK (examples\recs.pas), line = 27
   432
   433 				; optimize OK (examples\recs.pas), line = 29
   434
   435 223D AD 60 24 85 8F		mva ENTRY+1 :bp+1
   436 2242 AC 5F 24			ldy ENTRY
   437 2245 A9 0A			lda #$0A
   438 2247 91 8E			sta (:bp),y
   439
   440 				; optimize OK (examples\recs.pas), line = 30
   441
   442 2249 AD 5F 24 85 90 AD + 	mwa ENTRY :bp2
   443 2253 A0 01			ldy #$01
   444 2255 A9 64			lda #$64
   445 2257 91 90			sta (:bp2),y
   446 2259 C8				iny
   447 225A A9 00			lda #$00
   448 225C 91 90			sta (:bp2),y
   449 225E C8				iny
   450 225F 91 90			sta (:bp2),y
   451 2261 C8				iny
   452 2262 91 90			sta (:bp2),y
   453
   454 				; optimize OK (examples\recs.pas), line = 31
   455
   456 2264 AD 5F 24 85 90 AD + 	mwa ENTRY :bp2
   457 226E A0 05			ldy #$05
   458 2270 A9 E8			lda #$E8
   459 2272 91 90			sta (:bp2),y
   460 2274 C8				iny
   461 2275 A9 03			lda #$03
   462 2277 91 90			sta (:bp2),y
   463 2279 C8				iny
   464 227A A9 00			lda #$00
   465 227C 91 90			sta (:bp2),y
   466 227E C8				iny
   467 227F 91 90			sta (:bp2),y
   468
   469 				; optimize OK (examples\recs.pas), line = 32
   470
   471 2281 AD 40 24 8D 5F 24		mva DATA ENTRY
   472 2287 AD 41 24 8D 60 24		mva DATA+1 ENTRY+1
   473
   474 				; optimize OK (examples\recs.pas), line = 33
   475
   476 228D AD 5F 24			lda ENTRY
   477 2290 18 69 2D			add #$2D
   478 2293 8D 5F 24			sta ENTRY
   479 2296 90 03			scc
   480 2298 EE 60 24			inc ENTRY+1
   481
   482 				; optimize OK (examples\recs.pas), line = 34
   483
   484 229B AD 60 24 85 8F		mva ENTRY+1 :bp+1
   485 22A0 AC 5F 24			ldy ENTRY
   486 22A3 A9 14			lda #$14
   487 22A5 91 8E			sta (:bp),y
   488
   489 				; optimize OK (examples\recs.pas), line = 35
   490
   491 22A7 AD 5F 24 85 90 AD + 	mwa ENTRY :bp2
   492 22B1 A0 01			ldy #$01
   493 22B3 A9 C8			lda #$C8
   494 22B5 91 90			sta (:bp2),y
   495 22B7 C8				iny
   496 22B8 A9 00			lda #$00
   497 22BA 91 90			sta (:bp2),y
   498 22BC C8				iny
   499 22BD 91 90			sta (:bp2),y
   500 22BF C8				iny
   501 22C0 91 90			sta (:bp2),y
   502
   503 				; optimize OK (examples\recs.pas), line = 36
   504
   505 22C2 AD 5F 24 85 90 AD + 	mwa ENTRY :bp2
   506 22CC A0 05			ldy #$05
   507 22CE A9 D0			lda #$D0
   508 22D0 91 90			sta (:bp2),y
   509 22D2 C8				iny
   510 22D3 A9 07			lda #$07
   511 22D5 91 90			sta (:bp2),y
   512 22D7 C8				iny
   513 22D8 A9 00			lda #$00
   514 22DA 91 90			sta (:bp2),y
   515 22DC C8				iny
   516 22DD 91 90			sta (:bp2),y
   517
   518 				; optimize OK (examples\recs.pas), line = 37
   519
   520 22DF AD 40 24 8D 5F 24		mva DATA ENTRY
   521 22E5 AD 41 24 8D 60 24		mva DATA+1 ENTRY+1
   522
   523 				; optimize OK (examples\recs.pas), line = 38
   524
   525 22EB AD 5F 24			lda ENTRY
   526 22EE 18 69 5A			add #$5A
   527 22F1 8D 5F 24			sta ENTRY
   528 22F4 90 03			scc
   529 22F6 EE 60 24			inc ENTRY+1
   530
   531 				; optimize OK (examples\recs.pas), line = 39
   532
   533 22F9 AD 60 24 85 8F		mva ENTRY+1 :bp+1
   534 22FE AC 5F 24			ldy ENTRY
   535 2301 A9 1E			lda #$1E
   536 2303 91 8E			sta (:bp),y
   537
   538 				; optimize OK (examples\recs.pas), line = 40
   539
   540 2305 AD 5F 24 85 90 AD + 	mwa ENTRY :bp2
   541 230F A0 01			ldy #$01
   542 2311 A9 C8			lda #$C8
   543 2313 91 90			sta (:bp2),y
   544 2315 C8				iny
   545 2316 A9 00			lda #$00
   546 2318 91 90			sta (:bp2),y
   547 231A C8				iny
   548 231B 91 90			sta (:bp2),y
   549 231D C8				iny
   550 231E 91 90			sta (:bp2),y
   551
   552 				; optimize OK (examples\recs.pas), line = 41
   553
   554 2320 AD 5F 24 85 90 AD + 	mwa ENTRY :bp2
   555 232A A0 05			ldy #$05
   556 232C A9 B8			lda #$B8
   557 232E 91 90			sta (:bp2),y
   558 2330 C8				iny
   559 2331 A9 0B			lda #$0B
   560 2333 91 90			sta (:bp2),y
   561 2335 C8				iny
   562 2336 A9 00			lda #$00
   563 2338 91 90			sta (:bp2),y
   564 233A C8				iny
   565 233B 91 90			sta (:bp2),y
   566
   567 				; optimize FAIL (100, examples\recs.pas), line = 42
   568 					@printSTRING #CODEORIGIN+$003E
   568 				 LDY> CODEORIGIN+$003E\ LDA< CODEORIGIN+$003E\ JSR @PRINTSTRING
   568 233D A0 20		 LDY> CODEORIGIN+$003E
   568 233F A9 3E		 LDA< CODEORIGIN+$003E
   568 2341 20 CA 20		 JSR @PRINTSTRING
   569 2344 20 BC 20			@printEOL
   570
   571 				; optimize FAIL (100, examples\recs.pas), line = 43
   572 					@printSTRING #CODEORIGIN+$003B
   572 				 LDY> CODEORIGIN+$003B\ LDA< CODEORIGIN+$003B\ JSR @PRINTSTRING
   572 2347 A0 20		 LDY> CODEORIGIN+$003B
   572 2349 A9 3B		 LDA< CODEORIGIN+$003B
   572 234B 20 CA 20		 JSR @PRINTSTRING
   573 234E 20 BC 20			@printEOL
   574
   575 				; optimize OK (examples\recs.pas), line = 44
   576
   577 2351 AD 40 24 8D 5F 24		mva DATA ENTRY
   578 2357 AD 41 24 8D 60 24		mva DATA+1 ENTRY+1
   579
   580 				; optimize OK (examples\recs.pas), line = 45
   581
   582 				; optimize FAIL (100, examples\recs.pas), line = 46
   583 					@printSTRING #CODEORIGIN+$0064
   583 				 LDY> CODEORIGIN+$0064\ LDA< CODEORIGIN+$0064\ JSR @PRINTSTRING
   583 235D A0 20		 LDY> CODEORIGIN+$0064
   583 235F A9 64		 LDA< CODEORIGIN+$0064
   583 2361 20 CA 20		 JSR @PRINTSTRING
   584
   585 				; optimize FAIL (100, examples\recs.pas), line = 47
   586 2364 E8				inx
   587 2365 AD 5F 24 85 90 AD + 	mwa ENTRY :bp2
   588 236F A0 00			ldy #ENTRY.NUM1-DATAORIGIN
   589 2371 B1 90 95 98			mva (:bp2),y :STACKORIGIN,x
   590 2375 20 33 21			jsr @printBYTE
   591 2378 CA				dex
   592 2379 20 BC 20			@printEOL
   593
   594 				; optimize OK (examples\recs.pas), line = 48
   595
   596 237C AD 40 24 8D 5F 24		mva DATA ENTRY
   597 2382 AD 41 24 8D 60 24		mva DATA+1 ENTRY+1
   598
   599 				; optimize OK (examples\recs.pas), line = 49
   600
   601 2388 AD 5F 24			lda ENTRY
   602 238B 18 69 2D			add #$2D
   603 238E 8D 5F 24			sta ENTRY
   604 2391 90 03			scc
   605 2393 EE 60 24			inc ENTRY+1
   606
   607 				; optimize FAIL (100, examples\recs.pas), line = 50
   608 					@printSTRING #CODEORIGIN+$0071
   608 				 LDY> CODEORIGIN+$0071\ LDA< CODEORIGIN+$0071\ JSR @PRINTSTRING
   608 2396 A0 20		 LDY> CODEORIGIN+$0071
   608 2398 A9 71		 LDA< CODEORIGIN+$0071
   608 239A 20 CA 20		 JSR @PRINTSTRING
   609
   610 				; optimize FAIL (100, examples\recs.pas), line = 51
   611 239D E8				inx
   612 239E AD 5F 24 85 90 AD + 	mwa ENTRY :bp2
   613 23A8 A0 01			ldy #ENTRY.NUM2-DATAORIGIN
   614 23AA B1 90 95 98			mva (:bp2),y :STACKORIGIN,x
   615 23AE C8				iny
   616 23AF B1 90 95 A8			mva (:bp2),y :STACKORIGIN+STACKWIDTH,x
   617 23B3 C8				iny
   618 23B4 B1 90 95 B8			mva (:bp2),y :STACKORIGIN+STACKWIDTH*2,x
   619 23B8 C8				iny
   620 23B9 B1 90 95 C8			mva (:bp2),y :STACKORIGIN+STACKWIDTH*3,x
   621 23BD 20 23 21			jsr @printINT
   622 23C0 CA				dex
   623 23C1 20 BC 20			@printEOL
   624
   625 				; optimize OK (examples\recs.pas), line = 52
   626
   627 23C4 AD 40 24 8D 5F 24		mva DATA ENTRY
   628 23CA AD 41 24 8D 60 24		mva DATA+1 ENTRY+1
   629
   630 				; optimize OK (examples\recs.pas), line = 53
   631
   632 23D0 AD 5F 24			lda ENTRY
   633 23D3 18 69 5A			add #$5A
   634 23D6 8D 5F 24			sta ENTRY
   635 23D9 90 03			scc
   636 23DB EE 60 24			inc ENTRY+1
   637
   638 				; optimize FAIL (100, examples\recs.pas), line = 54
   639 					@printSTRING #CODEORIGIN+$007E
   639 				 LDY> CODEORIGIN+$007E\ LDA< CODEORIGIN+$007E\ JSR @PRINTSTRING
   639 23DE A0 20		 LDY> CODEORIGIN+$007E
   639 23E0 A9 7E		 LDA< CODEORIGIN+$007E
   639 23E2 20 CA 20		 JSR @PRINTSTRING
   640
   641 				; optimize FAIL (100, examples\recs.pas), line = 55
   642 23E5 E8				inx
   643 23E6 AD 5F 24 85 90 AD + 	mwa ENTRY :bp2
   644 23F0 A0 05			ldy #ENTRY.NUM3-DATAORIGIN
   645 23F2 B1 90 95 98			mva (:bp2),y :STACKORIGIN,x
   646 23F6 C8				iny
   647 23F7 B1 90 95 A8			mva (:bp2),y :STACKORIGIN+STACKWIDTH,x
   648 23FB C8				iny
   649 23FC B1 90 95 B8			mva (:bp2),y :STACKORIGIN+STACKWIDTH*2,x
   650 2400 C8				iny
   651 2401 B1 90 95 C8			mva (:bp2),y :STACKORIGIN+STACKWIDTH*3,x
   652 2405 20 23 21			jsr @printINT
   653 2408 CA				dex
   654 2409 20 BC 20			@printEOL
   655
   656 				; optimize FAIL (100, examples\recs.pas), line = 56
   657 					@printSTRING #CODEORIGIN+$003B
   657 				 LDY> CODEORIGIN+$003B\ LDA< CODEORIGIN+$003B\ JSR @PRINTSTRING
   657 240C A0 20		 LDY> CODEORIGIN+$003B
   657 240E A9 3B		 LDA< CODEORIGIN+$003B
   657 2410 20 CA 20		 JSR @PRINTSTRING
   658 					@print #$9B
   658 				 LDY# $9B\ JSR @PRINT
   658 2413 A0 9B		 LDY# $9B
   658 2415 20 C1 20		 JSR @PRINT
   659 					@printSTRING #CODEORIGIN+$008B
   659 				 LDY> CODEORIGIN+$008B\ LDA< CODEORIGIN+$008B\ JSR @PRINTSTRING
   659 2418 A0 20		 LDY> CODEORIGIN+$008B
   659 241A A9 8B		 LDA< CODEORIGIN+$008B
   659 241C 20 CA 20		 JSR @PRINTSTRING
   660
   661 				; optimize FAIL ('CRT.READKEY', examples\recs.pas), line = 57
   662 241F 20 FD 21			jsr CRT.READKEY
   663 2422 B5 98 8D 61 24		mva :STACKORIGIN,x KEY
   664 2427 CA				dex
   665 2428			@exit
   666 					.ifdef @new
   667 					@FreeMem #@VarData #@VarDataSize
   668 					eif
   669 2428 60				rts						; ret
   670 				.endl
   671 2429			l_00A9
   672
   673 				; optimize FAIL ('MAINPROC', examples\recs.pas), line = 61
   674 2429 20 0E 22			jsr MAINPROC
   675
   676 				; ------------------------------------------------------------
   677
   678 = 244F			adr.DATA	= DATAORIGIN+$000D
   679 242C			.var DATA	= adr.DATA .word
   680 = 245F			ENTRY	= DATAORIGIN+$001D
   681 = 2442			ENTRY.NUM1	= DATAORIGIN+$0000
   682 = 2443			ENTRY.NUM2	= DATAORIGIN+$0001
   683 = 2447			ENTRY.NUM3	= DATAORIGIN+$0005
   684 = 2461			KEY	= DATAORIGIN+$001F
   685 242C			@exit
   686
   687 242C A2 00		@halt	ldx #0
   688 242E 9A				txs
   689
   690 242F 60				rts
   691
   692 				; ------------------------------------------------------------
   693
   694 2430 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   695
   696 				; ------------------------------------------------------------
   697
   698 2440			.local	@DEFINES
   699 2440			ATARI
   700 				.endl
   701
   702 = 2440 4F 24		DATA
   702 				.endl							; MAIN
   703
   704 				; ------------------------------------------------------------
   705 				; ------------------------------------------------------------
   706
   707 				.macro	UNITINITIALIZATION
   708 				
   709 					.ifdef MAIN.SYSTEM.@UnitInit
   710 					jsr MAIN.SYSTEM.@UnitInit
   711 					eif
   712 				
   713 					.ifdef MAIN.DOS.@UnitInit
   714 					jsr MAIN.DOS.@UnitInit
   715 					eif
   716 				
   717 					.ifdef MAIN.STRUTILS.@UnitInit
   718 					jsr MAIN.STRUTILS.@UnitInit
   719 					eif
   720 				
   721 					.ifdef MAIN.SYSUTILS.@UnitInit
   722 					jsr MAIN.SYSUTILS.@UnitInit
   723 					eif
   724 				
   725 					.ifdef MAIN.ATARI.@UnitInit
   726 					jsr MAIN.ATARI.@UnitInit
   727 					eif
   728 				
   729 					.ifdef MAIN.CRT.@UnitInit
   730 					jsr MAIN.CRT.@UnitInit
   731 					eif
   732 				.endm
   733
   734 				; ------------------------------------------------------------
   735
   736 					ift .SIZEOF(MAIN.SYSTEM) > 0
   737 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   737 				SYSTEM: $21F9..$21FC
   738 					eif
   739
   740 					ift .SIZEOF(MAIN.DOS) > 0
   741 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   742 					eif
   743
   744 					ift .SIZEOF(MAIN.STRUTILS) > 0
   745 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   746 					eif
   747
   748 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   749 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   750 					eif
   751
   752 					ift .SIZEOF(MAIN.ATARI) > 0
   753 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   754 					eif
   755
   756 					ift .SIZEOF(MAIN.CRT) > 0
   757 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   757 				CRT: $21FD..$220D
   758 					eif
   759
   760 					.print 'CODE: ',CODEORIGIN,'..',*-1
   760 				CODE: $2000..$2441
   761
   762 				; ------------------------------------------------------------
   763
   764 2442			DATAORIGIN
   765 2442 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   766
   767 = 0006			VARINITSIZE	= *-DATAORIGIN
   768 = 0020			VARDATASIZE	= 32
   769
   770 = 2462			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   771
   772 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   772 				DATA: $2442..$2462
   773
   774 02E0-02E1> DA 21			run START
   775
   776 				; ------------------------------------------------------------
   777
   778 				.macro	STATICDATA
   779 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $11 $45 $66  $66 $65 $63 $74 $75 $73 $20 $65
   780 				.by  $78 $61 $6D $70 $6C $65 $3A $00  $1A $52 $65 $63 $6F $72 $64 $20  $41 $52 $52 $41 $59 $20 $64 $65
   781 				.by  $6D $6F $6E $73 $74 $72 $61 $74  $69 $6F $6E $00 $00 $00 $24 $53  $6F $6D $65 $20 $64 $61 $74 $61
   782 				.by  $20 $72 $65 $74 $72 $69 $65 $76  $65 $64 $20 $66 $72 $6F $6D $20  $74 $68 $65 $20 $72 $65 $63 $6F
   783 				.by  $72 $64 $73 $00 $0B $65 $6E $74  $72 $79 $2E $6E $75 $6D $31 $3D  $00 $0B $65 $6E $74 $72 $79 $2E
   784 				.by  $6E $75 $6D $32 $3D $00 $0B $65  $6E $74 $72 $79 $2E $6E $75 $6D  $33 $3D $00 $15 $2D $2D $2D $2D
   785 				.by  $2D $2D $2D $2D $2D $2D $2D $2D  $2D $2D $2D $2D $2D $2D $2D $2D  $2D $00
   786 				.endm
   787
   788 					end
