mads 2.1.0 build 4 (27 Oct 19)
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $2083..$24D8
    97
    98 				; ------------------------------------------------------------
    99
   100 24D8			START
   101 24D8 BA				tsx
   102 24D9 8E 7E 26			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 011F			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 269B			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 					ldx #256-VLEN
   115 					lda #0
   116 					sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   118 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   118 24DC A9 9B 85 86 A9 26 +  MWA #VADR @FILL.PTR1
   118 24E4 A9 1F 85 8A A9 01 +  MWA #VLEN @FILL.PTR3
   118 24EC A9 00 85 82		 MVA #0 @FILL.PTR2
   118 24F0 20 6A 24		 JSR @FILL
   119 					eif
   120
   121 24F3 A2 0F			ldx #$0f
   122 24F5 BD 40 03 9D 81 26 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 24FE E8				inx		; X = 0 !!!
   125 24FF 86 8E			stx bp		; lo BP = 0
   126
   127 2501				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: writenum.a65]
Source: writenum.a65
   128
   129 2501			.local	MAIN						; PROCEDURE
   130
   131 2501 4C 6C 26			jmp l_008A
   132
   133 				; ------------------------------------------------------------
   134
   135 2504			.local	SYSTEM						; UNIT
   136
   137 				; ------------------------------------------------------------
   138
   139 = 0648			M_PI_2	= $0648
   140 = 0192			D_PI_2	= $0192
   141 = 0004			D_PI_180	= $0004
   142 = 0000			MGTIA	= $0000
   143 = 0080			MVBXE	= $0080
   144 = 0000			VBXE_XDLADR	= $0000
   145 = 0100			VBXE_BCBADR	= $0100
   146 = 1000			VBXE_MAPADR	= $1000
   147 = 5000			VBXE_OVRADR	= $5000
   148 = B000			VBXE_WINDOW	= $B000
   149 = 0000			IDLI	= $0000
   150 = 0001			IVBL	= $0001
   151 = 00FE			CH_DELCHR	= $00FE
   152 = 009B			CH_ENTER	= $009B
   153 = 001B			CH_ESC	= $001B
   154 = 001C			CH_CURS_UP	= $001C
   155 = 001D			CH_CURS_DOWN	= $001D
   156 = 001E			CH_CURS_LEFT	= $001E
   157 = 001F			CH_CURS_RIGHT	= $001F
   158 = 007F			CH_TAB	= $007F
   159 = 009B			CH_EOL	= $009B
   160 = 007D			CH_CLR	= $007D
   161 = 00FD			CH_BELL	= $00FD
   162 = 007E			CH_DEL	= $007E
   163 = 009C			CH_DELLINE	= $009C
   164 = 009D			CH_INSLINE	= $009D
   165 = 0000			COLOR_BLACK	= $0000
   166 = 000E			COLOR_WHITE	= $000E
   167 = 0032			COLOR_RED	= $0032
   168 = 0096			COLOR_CYAN	= $0096
   169 = 0068			COLOR_VIOLET	= $0068
   170 = 00C4			COLOR_GREEN	= $00C4
   171 = 0074			COLOR_BLUE	= $0074
   172 = 00EE			COLOR_YELLOW	= $00EE
   173 = 0028			COLOR_ORANGE	= $0028
   174 = 00E4			COLOR_BROWN	= $00E4
   175 = 003C			COLOR_LIGHTRED	= $003C
   176 = 0004			COLOR_GRAY1	= $0004
   177 = 0006			COLOR_GRAY2	= $0006
   178 = 000A			COLOR_GRAY3	= $000A
   179 = 00CC			COLOR_LIGHTGREEN	= $00CC
   180 = 007C			COLOR_LIGHTBLUE	= $007C
   181 = 0004			FMOPENREAD	= $0004
   182 = 0008			FMOPENWRITE	= $0008
   183 = 0009			FMOPENAPPEND	= $0009
   184 = 000C			FMOPENREADWRITE	= $000C
   185 = 2695			SCREENWIDTH	= DATAORIGIN+$0000
   186 = 2697			SCREENHEIGHT	= DATAORIGIN+$0002
   187 = 2699			DATESEPARATOR	= DATAORIGIN+$0004
   188 = D014			TVSYSTEM	= $D014
   189 = 02C0			adr.PALETTE	= $02C0
   190 2504			.var PALETTE	= adr.PALETTE .word
   191 = D012			adr.HPALETTE	= $D012
   192 2504			.var HPALETTE	= adr.HPALETTE .word
   193 = 269A			FILEMODE	= DATAORIGIN+$0005
   194 = 269B			SCREENMODE	= DATAORIGIN+$0006
   195 = 269C			IORESULT	= DATAORIGIN+$0007
   196 = 269D			EOLN	= DATAORIGIN+$0008
   197 = 269E			RNDSEED	= DATAORIGIN+$0009
   198
   199 = 2504 C0 02		PALETTE
   199 = 2506 12 D0		HPALETTE
   199 				.endl							; UNIT SYSTEM
   200
   201 				; ------------------------------------------------------------
   202
   203 2508			.local	DOS						; UNIT
   204
   205 				; ------------------------------------------------------------
   206
   207 = D014			PALNTSC	= $D014
   208
   209 				.endl							; UNIT DOS
   210
   211 				; ------------------------------------------------------------
   212
   213 2508			.local	STRUTILS					; UNIT
   214
   215 				; ------------------------------------------------------------
   216
   217 				.endl							; UNIT STRUTILS
   218
   219 				; ------------------------------------------------------------
   220
   221 2508			.local	SYSUTILS					; UNIT
   222
   223 2508			.local	INTTOSTR					; FUNCTION | ASSEMBLER
   224
   225 				; ------------------------------------------------------------
   226
   227 				; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
   228 				; as Pointer
   229 2508 B5 98 8D A0 26		mva :STACKORIGIN,x A
   230 250D B5 A8 8D A1 26		mva :STACKORIGIN+STACKWIDTH,x A+1
   231 2512 B5 B8 8D A2 26		mva :STACKORIGIN+STACKWIDTH*2,x A+2
   232 2517 B5 C8 8D A3 26		mva :STACKORIGIN+STACKWIDTH*3,x A+3
   233 251C CA				dex						; sub bx, 1
   234
   235 				; ---------------------  ASM Block 057  ---------------------
   236
   237 251D 8A 48			txa:pha
   238
   239 251F E8				inx
   240
   241 					@ValueToStr #@printINT
   241 				 LDY> @PRINTINT\ LDA< @PRINTINT\ JSR @VALUETOSTR
   241 2520 A0 23		 LDY> @PRINTINT
   241 2522 A9 01		 LDA< @PRINTINT
   241 2524 20 8F 23		 JSR @VALUETOSTR
   242
   243 2527 A9 00 8D A4 26 A9 + 	mwa #@buf Result
   244
   245 2531 68 AA			pla:tax
   246
   247 2533			@exit
   248
   249 				; ------------------------------------------------------------
   250
   251 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   252 				; as Pointer
   253
   254 2533 E8				inx						; add bx, 1
   255 2534 AD A4 26 95 98		mva RESULT :STACKORIGIN,x
   256 2539 AD A5 26 95 A8		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   257
   258 					.ifdef @new
   259 					@FreeMem #@VarData #@VarDataSize
   260 					eif
   261
   262 				; ------------------------------------------------------------
   263
   264 = 26A0			A	= DATAORIGIN+$000B
   265 = 26A4			RESULT	= DATAORIGIN+$000F
   266
   267 = 26A0			@VarData	= A
   268 = 0006			@VarDataSize	= 6
   269
   270 253E 60				rts						; ret
   271 				.endl
   272
   273 				; ------------------------------------------------------------
   274
   275 = 0001			FAREADONLY	= $0001
   276 = 0002			FAHIDDEN	= $0002
   277 = 0004			FASYSFILE	= $0004
   278 = 0008			FAVOLUMEID	= $0008
   279 = 0010			FADIRECTORY	= $0010
   280 = 0020			FAARCHIVE	= $0020
   281 = 003F			FAANYFILE	= $003F
   282
   283 				.endl							; UNIT SYSUTILS
   284
   285 				; ------------------------------------------------------------
   286
   287 253F			.local	ATARI						; UNIT
   288
   289 				; ------------------------------------------------------------
   290
   291 = 0012			RTCLOK	= $0012
   292 = 004D			ATRACT	= $004D
   293 = 0052			LMARGIN	= $0052
   294 = 0053			RMARGIN	= $0053
   295 = 0054			ROWCRS	= $0054
   296 = 0055			COLCRS	= $0055
   297 = 0057			DINDEX	= $0057
   298 = 0058			SAVMSC	= $0058
   299 = 006A			RAMTOP	= $006A
   300 = 0200			VDSLST	= $0200
   301 = 0230			SDLSTL	= $0230
   302 = 0290			TXTROW	= $0290
   303 = 0291			TXTCOL	= $0291
   304 = 0293			TINDEX	= $0293
   305 = 0294			TXTMSC	= $0294
   306 = 022F			SDMCTL	= $022F
   307 = 026F			GPRIOR	= $026F
   308 = 02F0			CRSINH	= $02F0
   309 = 02F3			CHACT	= $02F3
   310 = 02F4			CHBAS	= $02F4
   311 = 02FC			CH	= $02FC
   312 = 02C0			PCOLR0	= $02C0
   313 = 02C1			PCOLR1	= $02C1
   314 = 02C2			PCOLR2	= $02C2
   315 = 02C3			PCOLR3	= $02C3
   316 = 02C4			COLOR0	= $02C4
   317 = 02C5			COLOR1	= $02C5
   318 = 02C6			COLOR2	= $02C6
   319 = 02C7			COLOR3	= $02C7
   320 = 02C8			COLOR4	= $02C8
   321 = 02C8			COLBAKS	= $02C8
   322 = D000			HPOSP0	= $D000
   323 = D001			HPOSP1	= $D001
   324 = D002			HPOSP2	= $D002
   325 = D003			HPOSP3	= $D003
   326 = D004			HPOSM0	= $D004
   327 = D005			HPOSM1	= $D005
   328 = D006			HPOSM2	= $D006
   329 = D007			HPOSM3	= $D007
   330 = D008			SIZEP0	= $D008
   331 = D009			SIZEP1	= $D009
   332 = D00A			SIZEP2	= $D00A
   333 = D00B			SIZEP3	= $D00B
   334 = D00C			SIZEM	= $D00C
   335 = D00D			GRAFP0	= $D00D
   336 = D00E			GRAFP1	= $D00E
   337 = D00F			GRAFP2	= $D00F
   338 = D010			GRAFP3	= $D010
   339 = D011			GRAFM	= $D011
   340 = D004			P0PF	= $D004
   341 = D014			PAL	= $D014
   342 = D012			COLPM0	= $D012
   343 = D013			COLPM1	= $D013
   344 = D014			COLPM2	= $D014
   345 = D015			COLPM3	= $D015
   346 = D016			COLPF0	= $D016
   347 = D017			COLPF1	= $D017
   348 = D018			COLPF2	= $D018
   349 = D019			COLPF3	= $D019
   350 = D01A			COLBK	= $D01A
   351 = D01B			PRIOR	= $D01B
   352 = D01D			GRACTL	= $D01D
   353 = D01E			HITCLR	= $D01E
   354 = D200			AUDF1	= $D200
   355 = D201			AUDC1	= $D201
   356 = D202			AUDF2	= $D202
   357 = D203			AUDC2	= $D203
   358 = D204			AUDF3	= $D204
   359 = D205			AUDC3	= $D205
   360 = D206			AUDF4	= $D206
   361 = D207			AUDC4	= $D207
   362 = D208			AUDCTL	= $D208
   363 = D20F			SKSTAT	= $D20F
   364 = D301			PORTB	= $D301
   365 = D400			DMACTL	= $D400
   366 = D401			CHACTL	= $D401
   367 = D402			DLISTL	= $D402
   368 = D404			HSCROL	= $D404
   369 = D405			VSCROL	= $D405
   370 = D407			PMBASE	= $D407
   371 = D409			CHBASE	= $D409
   372 = D40A			WSYNC	= $D40A
   373 = D40B			VCOUNT	= $D40B
   374 = D40C			PENH	= $D40C
   375 = D40D			PENV	= $D40D
   376 = D40E			NMIEN	= $D40E
   377
   378 				.endl							; UNIT ATARI
   379
   380 				; ------------------------------------------------------------
   381
   382 253F			.local	CRT						; UNIT
   383
   384 253F			.local	READKEY						; FUNCTION | ASSEMBLER
   385
   386 				; ---------------------  ASM Block 063  ---------------------
   387
   388 253F 8A 48			txa:pha
   389
   390 2541 20 BD 23			@GetKey
   391
   392 2544 8D A7 26			sta Result
   393
   394 2547 68 AA			pla:tax
   395
   396 2549			@exit
   397
   398 				; ------------------------------------------------------------
   399
   400 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   401 				; as Pointer
   402
   403 2549 E8				inx						; add bx, 1
   404 254A AD A7 26 95 98		mva RESULT :STACKORIGIN,x
   405
   406 					.ifdef @new
   407 					@FreeMem #@VarData #@VarDataSize
   408 					eif
   409
   410 				; ------------------------------------------------------------
   411
   412 = 26A7			RESULT	= DATAORIGIN+$0012
   413
   414 = 26A7			@VarData	= RESULT
   415 = 0001			@VarDataSize	= 1
   416
   417 254F 60				rts						; ret
   418 				.endl
   419
   420 				; ------------------------------------------------------------
   421
   422 = 26A6			TEXTATTR	= DATAORIGIN+$0011
   423 = D01F			CONSOL	= $D01F
   424 = 0000			CN_START_SELECT_OPTION	= $0000
   425 = 0001			CN_SELECT_OPTION	= $0001
   426 = 0002			CN_START_OPTION	= $0002
   427 = 0003			CN_OPTION	= $0003
   428 = 0004			CN_START_SELECT	= $0004
   429 = 0005			CN_SELECT	= $0005
   430 = 0006			CN_START	= $0006
   431 = 0007			CN_NONE	= $0007
   432 = 0000			BW40	= $0000
   433 = 0001			CO40	= $0001
   434 = 0002			BW80	= $0002
   435 = 0003			CO80	= $0003
   436 = 0007			MONO	= $0007
   437 = 0001			C40	= $0001
   438 = 0003			C80	= $0003
   439 = 0000			BLACK	= $0000
   440 = 0001			BLUE	= $0001
   441 = 0002			GREEN	= $0002
   442 = 0003			CYAN	= $0003
   443 = 0004			RED	= $0004
   444 = 0005			MAGENTA	= $0005
   445 = 0006			BROWN	= $0006
   446 = 0007			LIGHTGRAY	= $0007
   447 = 0008			DARKGRAY	= $0008
   448 = 0009			LIGHTBLUE	= $0009
   449 = 000A			LIGHTGREEN	= $000A
   450 = 000B			LIGHTCYAN	= $000B
   451 = 000C			LIGHTRED	= $000C
   452 = 000D			LIGHTMAGENTA	= $000D
   453 = 000E			YELLOW	= $000E
   454 = 000F			WHITE	= $000F
   455 = 0080			BLINK	= $0080
   456
   457 				.endl							; UNIT CRT
   458
   459 2550			.local	MAINPROC					; PROCEDURE
   460
   461 				; optimize FAIL (100, examples\writenum.pas), line = 22
   462 					@print #$7D
   462 				 LDY# $7D\ JSR @PRINT
   462 2550 A0 7D		 LDY# $7D
   462 2552 20 AC 22		 JSR @PRINT
   463
   464 				; optimize FAIL (100, examples\writenum.pas), line = 23
   465 					@printSTRING #CODEORIGIN+$000D
   465 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   465 2555 A0 20		 LDY> CODEORIGIN+$000D
   465 2557 A9 0D		 LDA< CODEORIGIN+$000D
   465 2559 20 B5 22		 JSR @PRINTSTRING
   466 					@print #$9B
   466 				 LDY# $9B\ JSR @PRINT
   466 255C A0 9B		 LDY# $9B
   466 255E 20 AC 22		 JSR @PRINT
   467 					@printSTRING #CODEORIGIN+$001E
   467 				 LDY> CODEORIGIN+$001E\ LDA< CODEORIGIN+$001E\ JSR @PRINTSTRING
   467 2561 A0 20		 LDY> CODEORIGIN+$001E
   467 2563 A9 1E		 LDA< CODEORIGIN+$001E
   467 2565 20 B5 22		 JSR @PRINTSTRING
   468 					@print #$9B
   468 				 LDY# $9B\ JSR @PRINT
   468 2568 A0 9B		 LDY# $9B
   468 256A 20 AC 22		 JSR @PRINT
   469 					@printSTRING #CODEORIGIN+$001D
   469 				 LDY> CODEORIGIN+$001D\ LDA< CODEORIGIN+$001D\ JSR @PRINTSTRING
   469 256D A0 20		 LDY> CODEORIGIN+$001D
   469 256F A9 1D		 LDA< CODEORIGIN+$001D
   469 2571 20 B5 22		 JSR @PRINTSTRING
   470 				; AssignFile
   471
   472 				; optimize OK (examples\writenum.pas), line = 24
   473
   474 2574 AD 91 26 85 90 AD + 	mwa F :bp2
   475 257E A0 00			ldy #s@file.pfname
   476 2580 A9 20			lda #$20
   477 2582 91 90			sta (:bp2),y
   478 2584 C8				iny
   479 2585 91 90			sta (:bp2),y
   480
   481 				; optimize OK (examples\writenum.pas), line = 24
   482
   483 2587 A0 05			ldy #s@file.status
   484 2589 A9 00			lda #$00
   485 258B 91 90			sta (:bp2),y
   486 				; Rewrite
   487
   488 				; optimize OK (examples\writenum.pas), line = 25
   489
   490 258D A0 02			ldy #s@file.record
   491 258F A9 01			lda #$01
   492 2591 91 90			sta (:bp2),y
   493 2593 C8				iny
   494 2594 A9 00			lda #$00
   495 2596 91 90			sta (:bp2),y
   496
   497 2598 8A 48			txa:pha
   498 259A 38				sec
   499 					@openfile F, #8
   499 				 LDY F+1\ LDA F\ LDX# 8\ JSR @OPENFILE
   499 259B AC 92 26		 LDY F+1
   499 259E AD 91 26		 LDA F
   499 25A1 A2 08		 LDX# 8
   499 25A3 20 BA 20		 JSR @OPENFILE
   500 25A6 68 AA			pla:tax
   501
   502 				; optimize FAIL (100, examples\writenum.pas), line = 26
   503 					@printSTRING #CODEORIGIN+$0030
   503 				 LDY> CODEORIGIN+$0030\ LDA< CODEORIGIN+$0030\ JSR @PRINTSTRING
   503 25A8 A0 20		 LDY> CODEORIGIN+$0030
   503 25AA A9 30		 LDA< CODEORIGIN+$0030
   503 25AC 20 B5 22		 JSR @PRINTSTRING
   504 25AF 20 A7 22			@printEOL
   505
   506 				; optimize OK (examples\writenum.pas), line = 27
   507
   508 25B2 A9 01 8D B8 27		mva #$01 I
   509 				; --- For
   510
   511 				; optimize OK (examples\writenum.pas), line = 28
   512
   513 25B7 8D B8 27			sta I
   514
   515 				; optimize OK (examples\writenum.pas), line = 28
   516
   517 				; --- To
   518 25BA			l_010C
   519
   520 				; --- ForToDoCondition
   521
   522 				; optimize OK (examples\writenum.pas), line = 28
   523
   524 25BA AD B8 27			lda I
   525 25BD C9 0C			cmp #$0C
   526 25BF 90 02			scc
   527 25C1 D0 68			jne l_011A
   528
   529 				; optimize FAIL ('SYSUTILS.INTTOSTR', examples\writenum.pas), line = 29
   530 25C3 E8				inx
   531 25C4 AD B8 27 95 98		mva I :STACKORIGIN,x
   532 25C9 20 97 20			jsr @expandToCARD.BYTE
   533 25CC 20 08 25			jsr SYSUTILS.INTTOSTR
   534 					@moveSTRING STRBUFFER
   534 				 LDY STRBUFFER+1\ LDA STRBUFFER\ JSR @MOVESTRING
   534 25CF AC 94 26		 LDY STRBUFFER+1
   534 25D2 AD 93 26		 LDA STRBUFFER
   534 25D5 20 CD 23		 JSR @MOVESTRING
   535 25D8 CA				dex						; sub bx, 1
   536 				; BlockWrite
   537
   538 				; optimize OK (examples\writenum.pas), line = 30
   539
   540 25D9 AD 91 26 85 90 AD + 	mwa F :bp2
   541 25E3 A0 06			ldy #s@file.buffer
   542 25E5 AD 93 26			lda STRBUFFER
   543 25E8 18 69 01			add #$01
   544 25EB 91 90			sta (:bp2),y
   545 25ED C8				iny
   546 25EE AD 94 26			lda STRBUFFER+1
   547 25F1 69 00			adc #$00
   548 25F3 91 90			sta (:bp2),y
   549
   550 				; optimize OK (examples\writenum.pas), line = 30
   551
   552 25F5 AD 93 26 85 90 AD + 	mwa STRBUFFER :bp2
   553 25FF A0 00			ldy #0
   554 2601 B1 90			lda (:bp2),y
   555 2603 AC 91 26 84 90 AC + 	mwy F :bp2
   556 260D A0 08			ldy #s@file.nrecord
   557 260F 91 90			sta (:bp2),y
   558 2611 C8				iny
   559 2612 A9 00			lda #$00
   560 2614 91 90			sta (:bp2),y
   561
   562 2616 8A 48			txa:pha
   563 2618 38				sec
   564 					@readfile F, #11
   564 				 LDY F+1\ LDA F\ LDX# 11\ JSR @READFILE
   564 2619 AC 92 26		 LDY F+1
   564 261C AD 91 26		 LDA F
   564 261F A2 0B		 LDX# 11
   564 2621 20 8E 21		 JSR @READFILE
   565 2624 68 AA			pla:tax
   566
   567 				; --- ForToDoEpilog
   568 2626 EE B8 27			inc I						; inc ptr byte [CounterAddress]
   569
   570 2629 D0 8F			jne l_010C
   571
   572 262B			l_011A
   573 				; CloseFile
   574
   575 262B 8A 48			txa:pha
   576 262D 38				sec
   577 					@closefile F
   577 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
   577 262E AC 92 26		 LDY F+1
   577 2631 AD 91 26		 LDA F
   577 2634 20 61 21		 JSR @CLOSEFILE
   578 2637 68 AA			pla:tax
   579
   580 				; optimize FAIL (100, examples\writenum.pas), line = 33
   581 					@printSTRING #CODEORIGIN+$004A
   581 				 LDY> CODEORIGIN+$004A\ LDA< CODEORIGIN+$004A\ JSR @PRINTSTRING
   581 2639 A0 20		 LDY> CODEORIGIN+$004A
   581 263B A9 4A		 LDA< CODEORIGIN+$004A
   581 263D 20 B5 22		 JSR @PRINTSTRING
   582 2640 20 A7 22			@printEOL
   583
   584 				; optimize FAIL (100, examples\writenum.pas), line = 34
   585 					@printSTRING #CODEORIGIN+$001D
   585 				 LDY> CODEORIGIN+$001D\ LDA< CODEORIGIN+$001D\ JSR @PRINTSTRING
   585 2643 A0 20		 LDY> CODEORIGIN+$001D
   585 2645 A9 1D		 LDA< CODEORIGIN+$001D
   585 2647 20 B5 22		 JSR @PRINTSTRING
   586 					@print #$9B
   586 				 LDY# $9B\ JSR @PRINT
   586 264A A0 9B		 LDY# $9B
   586 264C 20 AC 22		 JSR @PRINT
   587 					@printSTRING #CODEORIGIN+$001D
   587 				 LDY> CODEORIGIN+$001D\ LDA< CODEORIGIN+$001D\ JSR @PRINTSTRING
   587 264F A0 20		 LDY> CODEORIGIN+$001D
   587 2651 A9 1D		 LDA< CODEORIGIN+$001D
   587 2653 20 B5 22		 JSR @PRINTSTRING
   588 					@print #$9B
   588 				 LDY# $9B\ JSR @PRINT
   588 2656 A0 9B		 LDY# $9B
   588 2658 20 AC 22		 JSR @PRINT
   589 					@printSTRING #CODEORIGIN+$0067
   589 				 LDY> CODEORIGIN+$0067\ LDA< CODEORIGIN+$0067\ JSR @PRINTSTRING
   589 265B A0 20		 LDY> CODEORIGIN+$0067
   589 265D A9 67		 LDA< CODEORIGIN+$0067
   589 265F 20 B5 22		 JSR @PRINTSTRING
   590
   591 				; optimize FAIL ('CRT.READKEY', examples\writenum.pas), line = 35
   592 2662 20 3F 25			jsr CRT.READKEY
   593 2665 B5 98 8D B9 27		mva :STACKORIGIN,x KEY
   594 266A CA				dex
   595
   596 				; ------------------------------------------------------------
   597
   598 = 27B8			I	= DATAORIGIN+$0123
   599 = 27B9			KEY	= DATAORIGIN+$0124
   600 = 000C			@FORTMP_0109	= $000C
   601
   602 = 27B8			@VarData	= I
   603 = 0002			@VarDataSize	= 2
   604
   605 266B			@exit
   606 					.ifdef @new
   607 					@FreeMem #@VarData #@VarDataSize
   608 					eif
   609 266B 60				rts						; ret
   610 				.endl
   611 266C			l_008A
   612
   613 				; optimize FAIL ('MAINPROC', examples\writenum.pas), line = 39
   614 266C 20 50 25			jsr MAINPROC
   615 				; CloseFile
   616
   617 266F 8A 48			txa:pha
   618 2671 38				sec
   619 					@closefile F
   619 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
   619 2672 AC 92 26		 LDY F+1
   619 2675 AD 91 26		 LDA F
   619 2678 20 61 21		 JSR @CLOSEFILE
   620 267B 68 AA			pla:tax
   621
   622 				; ------------------------------------------------------------
   623
   624 = 26A8			INTVALUE	= DATAORIGIN+$0013
   625 267D			.var F	= DATAORIGIN+$0017 .word
   626 = 26B8			adr.STRBUFFER	= DATAORIGIN+$0023
   627 267D			.var STRBUFFER	= adr.STRBUFFER .word
   628 267D			@exit
   629
   630 267D A2 00		@halt	ldx #0
   631 267F 9A				txs
   632
   633 2680 60				rts
   634
   635 				; ------------------------------------------------------------
   636
   637 2681 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   638
   639 				; ------------------------------------------------------------
   640
   641 2691			.local	@DEFINES
   642 2691			ATARI
   643 				.endl
   644
   645 = 2691 AC 26		F
   645 = 2693 B8 26		STRBUFFER
   645 				.endl							; MAIN
   646
   647 				; ------------------------------------------------------------
   648 				; ------------------------------------------------------------
   649
   650 				.macro	UNITINITIALIZATION
   651 				
   652 					.ifdef MAIN.SYSTEM.@UnitInit
   653 					jsr MAIN.SYSTEM.@UnitInit
   654 					eif
   655 				
   656 					.ifdef MAIN.DOS.@UnitInit
   657 					jsr MAIN.DOS.@UnitInit
   658 					eif
   659 				
   660 					.ifdef MAIN.STRUTILS.@UnitInit
   661 					jsr MAIN.STRUTILS.@UnitInit
   662 					eif
   663 				
   664 					.ifdef MAIN.SYSUTILS.@UnitInit
   665 					jsr MAIN.SYSUTILS.@UnitInit
   666 					eif
   667 				
   668 					.ifdef MAIN.ATARI.@UnitInit
   669 					jsr MAIN.ATARI.@UnitInit
   670 					eif
   671 				
   672 					.ifdef MAIN.CRT.@UnitInit
   673 					jsr MAIN.CRT.@UnitInit
   674 					eif
   675 				.endm
   676
   677 				; ------------------------------------------------------------
   678
   679 					ift .SIZEOF(MAIN.SYSTEM) > 0
   680 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   680 				SYSTEM: $2504..$2507
   681 					eif
   682
   683 					ift .SIZEOF(MAIN.DOS) > 0
   684 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   685 					eif
   686
   687 					ift .SIZEOF(MAIN.STRUTILS) > 0
   688 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   689 					eif
   690
   691 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   692 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   692 				SYSUTILS: $2508..$253E
   693 					eif
   694
   695 					ift .SIZEOF(MAIN.ATARI) > 0
   696 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   697 					eif
   698
   699 					ift .SIZEOF(MAIN.CRT) > 0
   700 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   700 				CRT: $253F..$254F
   701 					eif
   702
   703 					.print 'CODE: ',CODEORIGIN,'..',*-1
   703 				CODE: $2000..$2694
   704
   705 				; ------------------------------------------------------------
   706
   707 2695			DATAORIGIN
   708 2695 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   709
   710 = 0006			VARINITSIZE	= *-DATAORIGIN
   711 = 0125			VARDATASIZE	= 293
   712
   713 = 27BA			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   714
   715 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   715 				DATA: $2695..$27BA
   716
   717 02E0-02E1> D8 24			run START
   718
   719 				; ------------------------------------------------------------
   720
   721 				.macro	STATICDATA
   722 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $0F $50 $72  $69 $6E $74 $42 $44 $20 $65 $78
   723 				.by  $61 $6D $70 $6C $65 $00 $00 $00  $0E $48 $31 $3A $54 $45 $53 $54  $4E $55 $4D $2E $54 $58 $54 $00
   724 				.by  $18 $57 $72 $69 $74 $65 $20 $6E  $75 $6D $62 $65 $72 $73 $20 $74  $6F $20 $64 $69 $73 $6B $2E $2E
   725 				.by  $2E $00 $1B $44 $6F $6E $65 $21  $20 $28 $66 $69 $6C $65 $20 $48  $31 $3A $54 $45 $53 $54 $4E $55
   726 				.by  $4D $2E $54 $58 $54 $29 $00 $1A  $50 $72 $65 $73 $73 $20 $61 $6E  $79 $20 $6B $65 $79 $20 $74 $6F
   727 				.by  $20 $63 $6F $6E $74 $69 $6E $75  $65 $21 $00
   728 				.endm
   729
   730 					end
