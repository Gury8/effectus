mads 2.1.0 build 8 (23 Dec 19)
   388 					opt l+
   101
   102 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   102 				ZPAGE: $0080..$00D7
   103
   104 				.print 'RTLIB: ',RTLIB,'..',*-1
   104 				RTLIB: $2048..$217C
   105
   106 				; ------------------------------------------------------------
   107
   108 217D			START
   109 217D BA				tsx
   110 217E 8E A3 22			stx MAIN.@halt+1
   111
   112 					.ifdef fmulinit
   113 					fmulinit
   114 					eif
   115
   116 = 010B			VLEN	= VARDATASIZE-VARINITSIZE
   117 = 22BE			VADR	= DATAORIGIN+VARINITSIZE
   118
   119 					ift VADR > $BFFF
   120 					ert 'Invalid memory address range ',VADR
   121 					eli (VLEN>0) && (VLEN<=256)
   122 					ldx #256-VLEN
   123 					lda #0
   124 					sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>0
   126 					@fill #VADR #VLEN #0
   126 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   126 2181 A9 BE 85 88 A9 22 +  MWA #VADR @FILL.PTR1
   126 2189 A9 0B 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   126 2191 A9 00 85 84		 MVA #0 @FILL.PTR2
   126 2195 20 6B 20		 JSR @FILL
   127 					eif
   128
   129 					.ifdef MAIN.@DEFINES.ROMOFF
   130 					icl 'atari\romoff.asm'
   131 					.endif
   132
   133 2198 A9 C9 85 82 A9 23 + 	mwa #PROGRAMSTACK psptr
   134
   135 21A0 A2 0F			ldx #$0f					; DOS II+/D ParamStr
   136 21A2 BD 40 03 9D A6 22 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   137
   138 21AB E8				inx						; X = 0
   139 21AC 86 90			stx bp						; BP = 0
   140
   141 21AE 8E 08 D2			stx audctl					; reset POKEY
   142 21B1 A9 03			lda #3
   143 21B3 8D 0F D2			sta skctl
   144
   145 21B6 CA				dex						; X = 255
   146
   147 21B7				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: define.a65]
Source: define.a65
   148
   149 21B7			.local	MAIN						; PROCEDURE
   150
   151 21B7 4C 9F 22			jmp l_004F
   152
   153 				; ------------------------------------------------------------
   154
   155 21BA			.local	SYSTEM						; UNIT
   156
   157 21BA			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   158
   159 				; ------------------------------------------------------------
   160
   161 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   162 				; as Pointer
   163 21BA B5 98 85 8C			mva :STACKORIGIN,x VALUE
   164 21BE CA				dex
   165
   166 				; ------------------------------------------------------------
   167
   168 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   169 				; as Pointer
   170 21BF B5 98 85 88			mva :STACKORIGIN,x A
   171 21C3 B5 A8 85 89			mva :STACKORIGIN+STACKWIDTH,x A+1
   172 21C7 CA				dex
   173
   174 				; ---------------------  ASM Block 021  ---------------------
   175
   176 21C8 A0 00			ldy #0
   177 21CA A5 8C 91 88			mva value (edx),y
   178
   179
   180 				; ------------------------------------------------------------
   181
   182 = 0088			A	= edx
   183 = 008C			VALUE	= ecx
   184 21CE			@exit
   185 					.ifdef @new
   186 					lda <@VarData
   187 					sta :ztmp
   188 					lda >@VarData
   189 					ldy #@VarDataSize-1
   190 					jmp @FreeMem
   191 					eif
   192 21CE 60				rts						; ret
   193 				.endl
   194
   195 				; ------------------------------------------------------------
   196
   197 = 0101			__PORTB_BANKS	= $0101
   198 = 0648			M_PI_2	= $0648
   199 = 0192			D_PI_2	= $0192
   200 = 0004			D_PI_180	= $04
   201 = 0000			MGTIA	= $00
   202 = 0080			MVBXE	= $80
   203 = 0000			VBXE_XDLADR	= $00
   204 = 0100			VBXE_BCBADR	= $0100
   205 = 1000			VBXE_MAPADR	= $1000
   206 = 5000			VBXE_OVRADR	= $5000
   207 = B000			VBXE_WINDOW	= $B000
   208 = 0000			IDLI	= $00
   209 = 0001			IVBL	= $01
   210 = 00FE			CH_DELCHR	= $FE
   211 = 009B			CH_ENTER	= $9B
   212 = 001B			CH_ESC	= $1B
   213 = 001C			CH_CURS_UP	= $1C
   214 = 001D			CH_CURS_DOWN	= $1D
   215 = 001E			CH_CURS_LEFT	= $1E
   216 = 001F			CH_CURS_RIGHT	= $1F
   217 = 007F			CH_TAB	= $7F
   218 = 009B			CH_EOL	= $9B
   219 = 007D			CH_CLR	= $7D
   220 = 00FD			CH_BELL	= $FD
   221 = 007E			CH_DEL	= $7E
   222 = 009C			CH_DELLINE	= $9C
   223 = 009D			CH_INSLINE	= $9D
   224 = 0000			COLOR_BLACK	= $00
   225 = 000E			COLOR_WHITE	= $0E
   226 = 0032			COLOR_RED	= $32
   227 = 0096			COLOR_CYAN	= $96
   228 = 0068			COLOR_VIOLET	= $68
   229 = 00C4			COLOR_GREEN	= $C4
   230 = 0074			COLOR_BLUE	= $74
   231 = 00EE			COLOR_YELLOW	= $EE
   232 = 0028			COLOR_ORANGE	= $28
   233 = 00E4			COLOR_BROWN	= $E4
   234 = 003C			COLOR_LIGHTRED	= $3C
   235 = 0004			COLOR_GRAY1	= $04
   236 = 0006			COLOR_GRAY2	= $06
   237 = 000A			COLOR_GRAY3	= $0A
   238 = 00CC			COLOR_LIGHTGREEN	= $CC
   239 = 007C			COLOR_LIGHTBLUE	= $7C
   240 = 0004			FMOPENREAD	= $04
   241 = 0008			FMOPENWRITE	= $08
   242 = 0009			FMOPENAPPEND	= $09
   243 = 000C			FMOPENREADWRITE	= $0C
   244 = 22B8			SCREENWIDTH	= DATAORIGIN+$0000
   245 = 22BA			SCREENHEIGHT	= DATAORIGIN+$0002
   246 = 22BC			DATESEPARATOR	= DATAORIGIN+$0004
   247 = D014			TVSYSTEM	= $D014
   248 = 02C0			adr.PALETTE	= $02C0
   249 21CF			.var PALETTE	= adr.PALETTE .word
   250 = D012			adr.HPALETTE	= $D012
   251 21CF			.var HPALETTE	= adr.HPALETTE .word
   252 = 22BD			FILEMODE	= DATAORIGIN+$0005
   253 = 22BE			GRAPHMODE	= DATAORIGIN+$0006
   254 = 22BF			IORESULT	= DATAORIGIN+$0007
   255 = 22C0			EOLN	= DATAORIGIN+$0008
   256 = 22C1			RNDSEED	= DATAORIGIN+$0009
   257
   258 = 21CF C0 02		PALETTE
   258 = 21D1 12 D0		HPALETTE
   258 				.endl							; UNIT SYSTEM
   259
   260 				; ------------------------------------------------------------
   261
   262 21D3			.local	ATARI						; UNIT
   263
   264 				; ------------------------------------------------------------
   265
   266 = 0012			RTCLOK	= $12
   267 = 004D			ATRACT	= $4D
   268 = 0052			LMARGIN	= $52
   269 = 0053			RMARGIN	= $53
   270 = 0054			ROWCRS	= $54
   271 = 0055			COLCRS	= $55
   272 = 0057			DINDEX	= $57
   273 = 0058			SAVMSC	= $58
   274 = 0062			PALNTS	= $62
   275 = 006A			RAMTOP	= $6A
   276 = 0200			VDSLST	= $0200
   277 = 0230			SDLSTL	= $0230
   278 = 0290			TXTROW	= $0290
   279 = 0291			TXTCOL	= $0291
   280 = 0293			TINDEX	= $0293
   281 = 0294			TXTMSC	= $0294
   282 = 022F			SDMCTL	= $022F
   283 = 026F			GPRIOR	= $026F
   284 = 02F0			CRSINH	= $02F0
   285 = 02F3			CHACT	= $02F3
   286 = 02F4			CHBAS	= $02F4
   287 = 02FC			CH	= $02FC
   288 = 02C0			PCOLR0	= $02C0
   289 = 02C1			PCOLR1	= $02C1
   290 = 02C2			PCOLR2	= $02C2
   291 = 02C3			PCOLR3	= $02C3
   292 = 02C4			COLOR0	= $02C4
   293 = 02C5			COLOR1	= $02C5
   294 = 02C6			COLOR2	= $02C6
   295 = 02C7			COLOR3	= $02C7
   296 = 02C8			COLOR4	= $02C8
   297 = 02C8			COLBAKS	= $02C8
   298 = D000			HPOSP0	= $D000
   299 = D001			HPOSP1	= $D001
   300 = D002			HPOSP2	= $D002
   301 = D003			HPOSP3	= $D003
   302 = D004			HPOSM0	= $D004
   303 = D005			HPOSM1	= $D005
   304 = D006			HPOSM2	= $D006
   305 = D007			HPOSM3	= $D007
   306 = D008			SIZEP0	= $D008
   307 = D009			SIZEP1	= $D009
   308 = D00A			SIZEP2	= $D00A
   309 = D00B			SIZEP3	= $D00B
   310 = D00C			SIZEM	= $D00C
   311 = D00D			GRAFP0	= $D00D
   312 = D00E			GRAFP1	= $D00E
   313 = D00F			GRAFP2	= $D00F
   314 = D010			GRAFP3	= $D010
   315 = D011			GRAFM	= $D011
   316 = D004			P0PF	= $D004
   317 = D014			PAL	= $D014
   318 = D012			COLPM0	= $D012
   319 = D013			COLPM1	= $D013
   320 = D014			COLPM2	= $D014
   321 = D015			COLPM3	= $D015
   322 = D016			COLPF0	= $D016
   323 = D017			COLPF1	= $D017
   324 = D018			COLPF2	= $D018
   325 = D019			COLPF3	= $D019
   326 = D01A			COLBK	= $D01A
   327 = D01B			PRIOR	= $D01B
   328 = D01D			GRACTL	= $D01D
   329 = D01E			HITCLR	= $D01E
   330 = D200			AUDF1	= $D200
   331 = D201			AUDC1	= $D201
   332 = D202			AUDF2	= $D202
   333 = D203			AUDC2	= $D203
   334 = D204			AUDF3	= $D204
   335 = D205			AUDC3	= $D205
   336 = D206			AUDF4	= $D206
   337 = D207			AUDC4	= $D207
   338 = D208			AUDCTL	= $D208
   339 = D20F			SKSTAT	= $D20F
   340 = D301			PORTB	= $D301
   341 = D400			DMACTL	= $D400
   342 = D401			CHACTL	= $D401
   343 = D402			DLISTL	= $D402
   344 = D404			HSCROL	= $D404
   345 = D405			VSCROL	= $D405
   346 = D407			PMBASE	= $D407
   347 = D409			CHBASE	= $D409
   348 = D40A			WSYNC	= $D40A
   349 = D40B			VCOUNT	= $D40B
   350 = D40C			PENH	= $D40C
   351 = D40D			PENV	= $D40D
   352 = D40E			NMIEN	= $D40E
   353
   354 				.endl							; UNIT ATARI
   355
   356 				; ------------------------------------------------------------
   357
   358 21D3			.local	CRT						; UNIT
   359
   360 21D3			.local	READKEY						; FUNCTION | ASSEMBLER
   361
   362 				; ---------------------  ASM Block 049  ---------------------
   363
   364 21D3 8A 48			txa:pha
   365
   366 21D5 20 48 20			@GetKey
   367
   368 21D8 8D C4 22			sta Result
   369
   370 21DB 68 AA			pla:tax
   371
   372 21DD			@exit
   373
   374 				; ------------------------------------------------------------
   375
   376 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   377 				; as Pointer
   378
   379 21DD E8				inx
   380 21DE AD C4 22 95 98		mva RESULT :STACKORIGIN,x
   381
   382 					.ifdef @new
   383 					lda <@VarData
   384 					sta :ztmp
   385 					lda >@VarData
   386 					ldy #@VarDataSize-1
   387 					jmp @FreeMem
   388 					eif
   389
   390 				; ------------------------------------------------------------
   391
   392 = 22C4			RESULT	= DATAORIGIN+$000C
   393
   394 = 22C4			@VarData	= RESULT
   395 = 0001			@VarDataSize	= 1
   396
   397 21E3 60				rts						; ret
   398 				.endl
   399
   400 				; ------------------------------------------------------------
   401
   402 = 22C3			TEXTATTR	= DATAORIGIN+$000B
   403 = D01F			CONSOL	= $D01F
   404 = 0000			CN_START_SELECT_OPTION	= $00
   405 = 0001			CN_SELECT_OPTION	= $01
   406 = 0002			CN_START_OPTION	= $02
   407 = 0003			CN_OPTION	= $03
   408 = 0004			CN_START_SELECT	= $04
   409 = 0005			CN_SELECT	= $05
   410 = 0006			CN_START	= $06
   411 = 0007			CN_NONE	= $07
   412 = 0000			BW40	= $00
   413 = 0001			CO40	= $01
   414 = 0002			BW80	= $02
   415 = 0003			CO80	= $03
   416 = 0007			MONO	= $07
   417 = 0001			C40	= $01
   418 = 0003			C80	= $03
   419 = 0000			BLACK	= $00
   420 = 0001			BLUE	= $01
   421 = 0002			GREEN	= $02
   422 = 0003			CYAN	= $03
   423 = 0004			RED	= $04
   424 = 0005			MAGENTA	= $05
   425 = 0006			BROWN	= $06
   426 = 0007			LIGHTGRAY	= $07
   427 = 0008			DARKGRAY	= $08
   428 = 0009			LIGHTBLUE	= $09
   429 = 000A			LIGHTGREEN	= $0A
   430 = 000B			LIGHTCYAN	= $0B
   431 = 000C			LIGHTRED	= $0C
   432 = 000D			LIGHTMAGENTA	= $0D
   433 = 000E			YELLOW	= $0E
   434 = 000F			WHITE	= $0F
   435 = 0080			BLINK	= $80
   436
   437 				.endl							; UNIT CRT
   438
   439 				; ------------------------------------------------------------
   440
   441 21E4			.local	DOS						; UNIT
   442
   443 				; ------------------------------------------------------------
   444
   445 = D014			PALNTSC	= $D014
   446
   447 				.endl							; UNIT DOS
   448
   449 				; ------------------------------------------------------------
   450
   451 21E4			.local	STRUTILS					; UNIT
   452
   453 				; ------------------------------------------------------------
   454
   455 				.endl							; UNIT STRUTILS
   456
   457 				; ------------------------------------------------------------
   458
   459 21E4			.local	SYSUTILS					; UNIT
   460
   461 				; ------------------------------------------------------------
   462
   463 = 0001			FAREADONLY	= $01
   464 = 0002			FAHIDDEN	= $02
   465 = 0004			FASYSFILE	= $04
   466 = 0008			FAVOLUMEID	= $08
   467 = 0010			FADIRECTORY	= $10
   468 = 0020			FAARCHIVE	= $20
   469 = 003F			FAANYFILE	= $3F
   470
   471 				.endl							; UNIT SYSUTILS
   472
   473 				; ------------------------------------------------------------
   474
   475 21E4			.local	CIO						; UNIT
   476
   477 21E4			.local	GET						; FUNCTION | ASSEMBLER
   478
   479 				; ------------------------------------------------------------
   480
   481 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   482 				; as Pointer
   483 21E4 B5 98 8D C5 22		mva :STACKORIGIN,x CHN
   484 21E9 CA				dex
   485
   486 				; ---------------------  ASM Block 080  ---------------------
   487
   488 21EA 8A 48			txa:pha
   489
   490 21EC AD C5 22			lda chn
   491 21EF 0A 0A 0A 0A			:4 asl @
   492 21F3 AA				tax
   493
   494 21F4 A9 07			lda #7		;get char command
   495 21F6 9D 42 03			sta iccmd,x
   496
   497 21F9 A9 00			lda #$00	;zero out the unused
   498 21FB 9D 48 03			sta icbufl,x	;store in accumulator
   499 21FE 9D 49 03			sta icbufh,x	;...after CIOV jump
   500
   501 2201				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 2201 20 56 E4				jsr CIOV
Source: define.a65
   502
   503 2204 8C BF 22			sty MAIN.SYSTEM.IOResult
   504
   505 2207 8D C6 22			sta Result
   506
   507 220A 68 AA			pla:tax
   508
   509 220C			@exit
   510
   511 				; ------------------------------------------------------------
   512
   513 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   514 				; as Pointer
   515
   516 220C E8				inx
   517 220D AD C6 22 95 98		mva RESULT :STACKORIGIN,x
   518
   519 					.ifdef @new
   520 					lda <@VarData
   521 					sta :ztmp
   522 					lda >@VarData
   523 					ldy #@VarDataSize-1
   524 					jmp @FreeMem
   525 					eif
   526
   527 				; ------------------------------------------------------------
   528
   529 = 22C5			CHN	= DATAORIGIN+$000D
   530 = 22C6			RESULT	= DATAORIGIN+$000E
   531
   532 = 22C5			@VarData	= CHN
   533 = 0002			@VarDataSize	= 2
   534
   535 2212 60				rts						; ret
   536 				.endl
   537
   538 				; ------------------------------------------------------------
   539
   540 				.endl							; UNIT CIO
   541
   542 2213			.local	DEFINE_TESTPROC					; PROCEDURE
   543
   544 				; optimize FAIL (100, examples\define.pas), line = 18
   545 					@print #$7D
   545 				 LDY# $7D\ JSR @PRINT
   545 2213 A0 7D		 LDY# $7D
   545 2215 20 B8 20		 JSR @PRINT
   546
   547 				; optimize OK (examples\define.pas), line = 19
   548
   549 2218 A9 00			lda #$00
   550 221A 8D C6 02			sta $02C6
   551
   552 				; optimize OK (examples\define.pas), line = 20
   553
   554 221D A9 3C			lda #$3C
   555 221F 8D C8 02			sta $02C8
   556
   557 				; optimize FAIL (100, examples\define.pas), line = 21
   558 					@printSTRING #CODEORIGIN+$000D
   558 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   558 2222 A0 20		 LDY> CODEORIGIN+$000D
   558 2224 A9 0D		 LDA< CODEORIGIN+$000D
   558 2226 20 C1 20		 JSR @PRINTSTRING
   559 2229 20 B3 20			@printEOL
   560
   561 				; optimize FAIL (100, examples\define.pas), line = 22
   562 					@printSTRING #CODEORIGIN+$000C
   562 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   562 222C A0 20		 LDY> CODEORIGIN+$000C
   562 222E A9 0C		 LDA< CODEORIGIN+$000C
   562 2230 20 C1 20		 JSR @PRINTSTRING
   563 2233 20 B3 20			@printEOL
   564
   565 				; optimize FAIL (100, examples\define.pas), line = 23
   566 					@printSTRING #CODEORIGIN+$000F
   566 				 LDY> CODEORIGIN+$000F\ LDA< CODEORIGIN+$000F\ JSR @PRINTSTRING
   566 2236 A0 20		 LDY> CODEORIGIN+$000F
   566 2238 A9 0F		 LDA< CODEORIGIN+$000F
   566 223A 20 C1 20		 JSR @PRINTSTRING
   567 223D 20 B3 20			@printEOL
   568
   569 				; optimize FAIL (100, examples\define.pas), line = 24
   570 					@printSTRING #CODEORIGIN+$000C
   570 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   570 2240 A0 20		 LDY> CODEORIGIN+$000C
   570 2242 A9 0C		 LDA< CODEORIGIN+$000C
   570 2244 20 C1 20		 JSR @PRINTSTRING
   571 2247 20 B3 20			@printEOL
   572
   573 				; optimize FAIL (100, examples\define.pas), line = 25
   574 					@printSTRING #CODEORIGIN+$000C
   574 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   574 224A A0 20		 LDY> CODEORIGIN+$000C
   574 224C A9 0C		 LDA< CODEORIGIN+$000C
   574 224E 20 C1 20		 JSR @PRINTSTRING
   575 2251 20 B3 20			@printEOL
   576
   577 				; optimize FAIL (100, examples\define.pas), line = 26
   578 					@printSTRING #CODEORIGIN+$0026
   578 				 LDY> CODEORIGIN+$0026\ LDA< CODEORIGIN+$0026\ JSR @PRINTSTRING
   578 2254 A0 20		 LDY> CODEORIGIN+$0026
   578 2256 A9 26		 LDA< CODEORIGIN+$0026
   578 2258 20 C1 20		 JSR @PRINTSTRING
   579 225B 20 B3 20			@printEOL
   580
   581 				; optimize FAIL (100, examples\define.pas), line = 27
   582 					@printSTRING #CODEORIGIN+$000C
   582 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   582 225E A0 20		 LDY> CODEORIGIN+$000C
   582 2260 A9 0C		 LDA< CODEORIGIN+$000C
   582 2262 20 C1 20		 JSR @PRINTSTRING
   583 2265 20 B3 20			@printEOL
   584
   585 				; optimize FAIL (100, examples\define.pas), line = 28
   586 					@printSTRING #CODEORIGIN+$0033
   586 				 LDY> CODEORIGIN+$0033\ LDA< CODEORIGIN+$0033\ JSR @PRINTSTRING
   586 2268 A0 20		 LDY> CODEORIGIN+$0033
   586 226A A9 33		 LDA< CODEORIGIN+$0033
   586 226C 20 C1 20		 JSR @PRINTSTRING
   587 226F 20 B3 20			@printEOL
   588 				; --- For
   589
   590 				; optimize OK (examples\define.pas), line = 29
   591
   592 2272 A9 01 8D C8 23		mva #$01 N
   593
   594 				; optimize OK (examples\define.pas), line = 29
   595
   596 2277			l_010D
   597 				; --- ForToDoCondition
   598
   599 				; optimize OK (examples\define.pas), line = 29
   600
   601 2277 AD C8 23			lda N
   602 227A C9 04			cmp #$04
   603 227C B0 0E			jcs l_011B
   604
   605 				; optimize FAIL (100, examples\define.pas), line = 30
   606 227E AD C8 23			lda N
   607 2281 20 F2 20			jsr @printBYTE._a
   608 2284 20 B3 20			@printEOL
   609
   610 				; --- ForToDoEpilog
   611 2287 EE C8 23			inc N						; inc ptr byte [CounterAddress]
   612 228A D0 EB			jne l_010D
   613 228C			l_011B
   614
   615 				; optimize FAIL ('CIO.GET', examples\define.pas), line = 32
   616 228C E8				inx
   617 228D A9 07 95 98			mva #$07 :STACKORIGIN,x
   618 2291 20 E4 21			jsr CIO.GET
   619 2294 B5 98 8D C7 23		mva :STACKORIGIN,x KEY
   620 2299 CA				dex
   621
   622 229A 20 D3 21			jsr CRT.READKEY					; call Entry
   623
   624 229D CA				dex
   625
   626 				; ------------------------------------------------------------
   627
   628 = 23C8			N	= DATAORIGIN+$0110
   629 = 0003			@FORTMP_010A	= $03
   630
   631 = 23C8			@VarData	= N
   632 = 0001			@VarDataSize	= 1
   633
   634 229E			@exit
   635 					.ifdef @new
   636 					lda <@VarData
   637 					sta :ztmp
   638 					lda >@VarData
   639 					ldy #@VarDataSize-1
   640 					jmp @FreeMem
   641 					eif
   642 229E 60				rts						; ret
   643 				.endl
   644 229F			l_004F
   645
   646 				; optimize FAIL ('DEFINE_TESTPROC', examples\define.pas), line = 37
   647 229F 20 13 22			jsr DEFINE_TESTPROC
   648
   649 				; ------------------------------------------------------------
   650
   651 = 22C7			adr.STRBUFFER	= DATAORIGIN+$000F
   652 22A2			.var STRBUFFER	= adr.STRBUFFER .word
   653 = 23C7			KEY	= DATAORIGIN+$010F
   654 22A2			@exit
   655
   656 22A2 A2 00		@halt	ldx #0
   657 22A4 9A				txs
   658 					.ifdef MAIN.@DEFINES.ROMOFF
   659 					inc portb
   660 					.endif
   661
   662 22A5 60				rts
   663
   664 				; ------------------------------------------------------------
   665
   666 22A6 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   667
   668 				; ------------------------------------------------------------
   669
   670 22B6			.local	@DEFINES
   671 22B6			ATARI
   672 				.endl
   673
   674 = 22B6 C7 22		STRBUFFER
   674 				.endl							; MAIN
   675
   676 				; ------------------------------------------------------------
   677 				; ------------------------------------------------------------
   678
   679 				.macro	UNITINITIALIZATION
   680 				
   681 					.ifdef MAIN.SYSTEM.@UnitInit
   682 					jsr MAIN.SYSTEM.@UnitInit
   683 					eif
   684 				
   685 					.ifdef MAIN.ATARI.@UnitInit
   686 					jsr MAIN.ATARI.@UnitInit
   687 					eif
   688 				
   689 					.ifdef MAIN.CRT.@UnitInit
   690 					jsr MAIN.CRT.@UnitInit
   691 					eif
   692 				
   693 					.ifdef MAIN.DOS.@UnitInit
   694 					jsr MAIN.DOS.@UnitInit
   695 					eif
   696 				
   697 					.ifdef MAIN.STRUTILS.@UnitInit
   698 					jsr MAIN.STRUTILS.@UnitInit
   699 					eif
   700 				
   701 					.ifdef MAIN.SYSUTILS.@UnitInit
   702 					jsr MAIN.SYSUTILS.@UnitInit
   703 					eif
   704 				
   705 					.ifdef MAIN.CIO.@UnitInit
   706 					jsr MAIN.CIO.@UnitInit
   707 					eif
   708 				.endm
   709
   710 				; ------------------------------------------------------------
   711
   712 					ift .SIZEOF(MAIN.SYSTEM) > 0
   713 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   713 				SYSTEM: $21BA..$21D2
   714 					eif
   715
   716 					ift .SIZEOF(MAIN.ATARI) > 0
   717 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   718 					eif
   719
   720 					ift .SIZEOF(MAIN.CRT) > 0
   721 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   721 				CRT: $21D3..$21E3
   722 					eif
   723
   724 					ift .SIZEOF(MAIN.DOS) > 0
   725 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   726 					eif
   727
   728 					ift .SIZEOF(MAIN.STRUTILS) > 0
   729 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   730 					eif
   731
   732 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   733 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   734 					eif
   735
   736 					ift .SIZEOF(MAIN.CIO) > 0
   737 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
   737 				CIO: $21E4..$2212
   738 					eif
   739
   740 					.print 'CODE: ',CODEORIGIN,'..',*-1
   740 				CODE: $2000..$22B7
   741
   742 				; ------------------------------------------------------------
   743
   744 22B8			DATAORIGIN
   745 22B8 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   746
   747 = 0006			VARINITSIZE	= *-DATAORIGIN
   748 = 0111			VARDATASIZE	= 273
   749
   750 = 23C9			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   751
   752 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   752 				DATA: $22B8..$23C9
   753
   754 02E0-02E1> 7D 21			run START
   755
   756 				; ------------------------------------------------------------
   757
   758 				.macro	STATICDATA
   759 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $00 $00 $15  $44 $45 $46 $49 $4E $45 $20 $73
   760 				.by  $74 $61 $74 $65 $6D $65 $6E $74  $20 $74 $65 $73 $74 $00 $0B $43  $6C $73 $2C $4E $65 $77 $6C $69
   761 				.by  $6E $65 $00 $13 $43 $6F $75 $6E  $74 $20 $66 $72 $6F $6D $20 $31  $20 $74 $6F $20 $6D $61 $78 $00
   762 				.endm
   763
   764 					end
