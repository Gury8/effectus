mads 2.1.0
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $20CD..$2131
    97
    98 				; ------------------------------------------------------------
    99
   100 2131			START
   101 2131 BA				tsx
   102 2132 8E 07 22			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 0017			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 222E			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 2135 A2 E9			ldx #256-VLEN
   115 2137 A9 00			lda #0
   116 2139 9D 45 21 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   119 					eif
   120
   121 213F A2 0F			ldx #$0f
   122 2141 BD 40 03 9D 0A 22 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 214A E8				inx		; X = 0 !!!
   125 214B 86 8E			stx bp		; lo BP = 0
   126
   127 214D				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: inline_asm.a65]
   128
   129 214D			.local	MAIN						; PROCEDURE
   130
   131 214D 4C 03 22			jmp l_00D4
   132
   133 				; ------------------------------------------------------------
   134
   135 2150			.local	SYSTEM						; UNIT
   136
   137 				; ------------------------------------------------------------
   138
   139 = 0648			M_PI_2	= $0648
   140 = 0192			D_PI_2	= $0192
   141 = 0004			D_PI_180	= $0004
   142 = 0000			MGTIA	= $0000
   143 = 0080			MVBXE	= $0080
   144 = 0000			VBXE_XDLADR	= $0000
   145 = 0100			VBXE_BCBADR	= $0100
   146 = 1000			VBXE_MAPADR	= $1000
   147 = 5000			VBXE_OVRADR	= $5000
   148 = B000			VBXE_WINDOW	= $B000
   149 = 0000			IDLI	= $0000
   150 = 0001			IVBL	= $0001
   151 = 00FE			CH_DELCHR	= $00FE
   152 = 009B			CH_ENTER	= $009B
   153 = 001B			CH_ESC	= $001B
   154 = 001C			CH_CURS_UP	= $001C
   155 = 001D			CH_CURS_DOWN	= $001D
   156 = 001E			CH_CURS_LEFT	= $001E
   157 = 001F			CH_CURS_RIGHT	= $001F
   158 = 007F			CH_TAB	= $007F
   159 = 009B			CH_EOL	= $009B
   160 = 007D			CH_CLR	= $007D
   161 = 00FD			CH_BELL	= $00FD
   162 = 007E			CH_DEL	= $007E
   163 = 009C			CH_DELLINE	= $009C
   164 = 009D			CH_INSLINE	= $009D
   165 = 0000			COLOR_BLACK	= $0000
   166 = 000E			COLOR_WHITE	= $000E
   167 = 0032			COLOR_RED	= $0032
   168 = 0096			COLOR_CYAN	= $0096
   169 = 0068			COLOR_VIOLET	= $0068
   170 = 00C4			COLOR_GREEN	= $00C4
   171 = 0074			COLOR_BLUE	= $0074
   172 = 00EE			COLOR_YELLOW	= $00EE
   173 = 0028			COLOR_ORANGE	= $0028
   174 = 00E4			COLOR_BROWN	= $00E4
   175 = 003C			COLOR_LIGHTRED	= $003C
   176 = 0004			COLOR_GRAY1	= $0004
   177 = 0006			COLOR_GRAY2	= $0006
   178 = 000A			COLOR_GRAY3	= $000A
   179 = 00CC			COLOR_LIGHTGREEN	= $00CC
   180 = 007C			COLOR_LIGHTBLUE	= $007C
   181 = 0004			FMOPENREAD	= $0004
   182 = 0008			FMOPENWRITE	= $0008
   183 = 0009			FMOPENAPPEND	= $0009
   184 = 000C			FMOPENREADWRITE	= $000C
   185 = 221A			SCREENWIDTH	= DATAORIGIN+$0000
   186 = 221C			SCREENHEIGHT	= DATAORIGIN+$0002
   187 = 221E			DATESEPARATOR	= DATAORIGIN+$0004
   188 = D014			TVSYSTEM	= $D014
   189 = 02C0			adr.PALETTE	= $02C0
   190 2150			.var PALETTE	= adr.PALETTE .word
   191 = D012			adr.HPALETTE	= $D012
   192 2150			.var HPALETTE	= adr.HPALETTE .word
   193 = 221F			FILEMODE	= DATAORIGIN+$0005
   194 = 2220			SCREENMODE	= DATAORIGIN+$0006
   195 = 2221			IORESULT	= DATAORIGIN+$0007
   196 = 2222			EOLN	= DATAORIGIN+$0008
   197 = 2223			RNDSEED	= DATAORIGIN+$0009
   198
   199 = 2150 C0 02		PALETTE
   199 = 2152 12 D0		HPALETTE
   199 				.endl							; UNIT SYSTEM
   200
   201 				; ------------------------------------------------------------
   202
   203 2154			.local	DOS						; UNIT
   204
   205 				; ------------------------------------------------------------
   206
   207 = D014			PALNTSC	= $D014
   208
   209 				.endl							; UNIT DOS
   210
   211 				; ------------------------------------------------------------
   212
   213 2154			.local	STRUTILS					; UNIT
   214
   215 				; ------------------------------------------------------------
   216
   217 				.endl							; UNIT STRUTILS
   218
   219 				; ------------------------------------------------------------
   220
   221 2154			.local	SYSUTILS					; UNIT
   222
   223 				; ------------------------------------------------------------
   224
   225 = 0001			FAREADONLY	= $0001
   226 = 0002			FAHIDDEN	= $0002
   227 = 0004			FASYSFILE	= $0004
   228 = 0008			FAVOLUMEID	= $0008
   229 = 0010			FADIRECTORY	= $0010
   230 = 0020			FAARCHIVE	= $0020
   231 = 003F			FAANYFILE	= $003F
   232
   233 				.endl							; UNIT SYSUTILS
   234
   235 				; ------------------------------------------------------------
   236
   237 2154			.local	ATARI						; UNIT
   238
   239 				; ------------------------------------------------------------
   240
   241 = 0012			RTCLOK	= $0012
   242 = 004D			ATRACT	= $004D
   243 = 0052			LMARGIN	= $0052
   244 = 0053			RMARGIN	= $0053
   245 = 0054			ROWCRS	= $0054
   246 = 0055			COLCRS	= $0055
   247 = 0057			DINDEX	= $0057
   248 = 0058			SAVMSC	= $0058
   249 = 006A			RAMTOP	= $006A
   250 = 0200			VDSLST	= $0200
   251 = 0230			SDLSTL	= $0230
   252 = 0290			TXTROW	= $0290
   253 = 0291			TXTCOL	= $0291
   254 = 0293			TINDEX	= $0293
   255 = 0294			TXTMSC	= $0294
   256 = 022F			SDMCTL	= $022F
   257 = 026F			GPRIOR	= $026F
   258 = 02F0			CRSINH	= $02F0
   259 = 02F3			CHACT	= $02F3
   260 = 02F4			CHBAS	= $02F4
   261 = 02FC			CH	= $02FC
   262 = 02C0			PCOLR0	= $02C0
   263 = 02C1			PCOLR1	= $02C1
   264 = 02C2			PCOLR2	= $02C2
   265 = 02C3			PCOLR3	= $02C3
   266 = 02C4			COLOR0	= $02C4
   267 = 02C5			COLOR1	= $02C5
   268 = 02C6			COLOR2	= $02C6
   269 = 02C7			COLOR3	= $02C7
   270 = 02C8			COLOR4	= $02C8
   271 = 02C8			COLBAKS	= $02C8
   272 = D000			HPOSP0	= $D000
   273 = D001			HPOSP1	= $D001
   274 = D002			HPOSP2	= $D002
   275 = D003			HPOSP3	= $D003
   276 = D004			HPOSM0	= $D004
   277 = D005			HPOSM1	= $D005
   278 = D006			HPOSM2	= $D006
   279 = D007			HPOSM3	= $D007
   280 = D008			SIZEP0	= $D008
   281 = D009			SIZEP1	= $D009
   282 = D00A			SIZEP2	= $D00A
   283 = D00B			SIZEP3	= $D00B
   284 = D00C			SIZEM	= $D00C
   285 = D00D			GRAFP0	= $D00D
   286 = D00E			GRAFP1	= $D00E
   287 = D00F			GRAFP2	= $D00F
   288 = D010			GRAFP3	= $D010
   289 = D011			GRAFM	= $D011
   290 = D004			P0PF	= $D004
   291 = D014			PAL	= $D014
   292 = D012			COLPM0	= $D012
   293 = D013			COLPM1	= $D013
   294 = D014			COLPM2	= $D014
   295 = D015			COLPM3	= $D015
   296 = D016			COLPF0	= $D016
   297 = D017			COLPF1	= $D017
   298 = D018			COLPF2	= $D018
   299 = D019			COLPF3	= $D019
   300 = D01A			COLBK	= $D01A
   301 = D01B			PRIOR	= $D01B
   302 = D01D			GRACTL	= $D01D
   303 = D01E			HITCLR	= $D01E
   304 = D200			AUDF1	= $D200
   305 = D201			AUDC1	= $D201
   306 = D202			AUDF2	= $D202
   307 = D203			AUDC2	= $D203
   308 = D204			AUDF3	= $D204
   309 = D205			AUDC3	= $D205
   310 = D206			AUDF4	= $D206
   311 = D207			AUDC4	= $D207
   312 = D208			AUDCTL	= $D208
   313 = D20F			SKSTAT	= $D20F
   314 = D301			PORTB	= $D301
   315 = D400			DMACTL	= $D400
   316 = D401			CHACTL	= $D401
   317 = D402			DLISTL	= $D402
   318 = D404			HSCROL	= $D404
   319 = D405			VSCROL	= $D405
   320 = D407			PMBASE	= $D407
   321 = D409			CHBASE	= $D409
   322 = D40A			WSYNC	= $D40A
   323 = D40B			VCOUNT	= $D40B
   324 = D40C			PENH	= $D40C
   325 = D40D			PENV	= $D40D
   326 = D40E			NMIEN	= $D40E
   327
   328 				.endl							; UNIT ATARI
   329
   330 				; ------------------------------------------------------------
   331
   332 2154			.local	CRT						; UNIT
   333
   334 2154			.local	READKEY						; FUNCTION | ASSEMBLER
   335
   336 				; ---------------------  ASM Block 063  ---------------------
   337
   338 2154 8A 48			txa:pha
   339
   340 2156 20 21 21			@GetKey
   341
   342 2159 8D 26 22			sta Result
   343
   344 215C 68 AA			pla:tax
   345
   346 215E			@exit
   347
   348 				; ------------------------------------------------------------
   349
   350 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   351 				; as Pointer
   352
   353 215E E8				inx						; add bx, 1
   354 215F AD 26 22 95 98		mva RESULT :STACKORIGIN,x
   355
   356 					.ifdef @new
   357 					@FreeMem #@VarData #@VarDataSize
   358 					eif
   359
   360 				; ------------------------------------------------------------
   361
   362 = 2226			RESULT	= DATAORIGIN+$000C
   363
   364 = 2226			@VarData	= RESULT
   365 = 0001			@VarDataSize	= 1
   366
   367 2164 60				rts						; ret
   368 				.endl
   369
   370 				; ------------------------------------------------------------
   371
   372 = 2225			TEXTATTR	= DATAORIGIN+$000B
   373 = D01F			CONSOL	= $D01F
   374 = 0000			CN_START_SELECT_OPTION	= $0000
   375 = 0001			CN_SELECT_OPTION	= $0001
   376 = 0002			CN_START_OPTION	= $0002
   377 = 0003			CN_OPTION	= $0003
   378 = 0004			CN_START_SELECT	= $0004
   379 = 0005			CN_SELECT	= $0005
   380 = 0006			CN_START	= $0006
   381 = 0007			CN_NONE	= $0007
   382 = 0000			BW40	= $0000
   383 = 0001			CO40	= $0001
   384 = 0002			BW80	= $0002
   385 = 0003			CO80	= $0003
   386 = 0007			MONO	= $0007
   387 = 0001			C40	= $0001
   388 = 0003			C80	= $0003
   389 = 0000			BLACK	= $0000
   390 = 0001			BLUE	= $0001
   391 = 0002			GREEN	= $0002
   392 = 0003			CYAN	= $0003
   393 = 0004			RED	= $0004
   394 = 0005			MAGENTA	= $0005
   395 = 0006			BROWN	= $0006
   396 = 0007			LIGHTGRAY	= $0007
   397 = 0008			DARKGRAY	= $0008
   398 = 0009			LIGHTBLUE	= $0009
   399 = 000A			LIGHTGREEN	= $000A
   400 = 000B			LIGHTCYAN	= $000B
   401 = 000C			LIGHTRED	= $000C
   402 = 000D			LIGHTMAGENTA	= $000D
   403 = 000E			YELLOW	= $000E
   404 = 000F			WHITE	= $000F
   405 = 0080			BLINK	= $0080
   406
   407 				.endl							; UNIT CRT
   408
   409 				; ------------------------------------------------------------
   410
   411 2165			.local	TYPES						; UNIT
   412
   413 				; ------------------------------------------------------------
   414
   415 				.endl							; UNIT TYPES
   416
   417 				; ------------------------------------------------------------
   418
   419 2165			.local	GRAPH						; UNIT
   420
   421 				; ------------------------------------------------------------
   422
   423 = FFFFFF80		CURRENTDRIVER	= $FFFFFF80
   424 = 0000			DETECT	= $0000
   425 = 0001			CGA	= $0001
   426 = 0002			MCGA	= $0002
   427 = 0003			EGA	= $0003
   428 = 0004			EGA64	= $0004
   429 = 0005			EGAMONO	= $0005
   430 = 0006			LOWRES	= $0006
   431 = 0007			HERCMONO	= $0007
   432 = 0009			VGA	= $0009
   433 = 000A			VESA	= $000A
   434 = 000B			D1BIT	= $000B
   435 = 000C			D2BIT	= $000C
   436 = 000D			D4BIT	= $000D
   437 = 000E			D6BIT	= $000E
   438 = 000F			D8BIT	= $000F
   439 = 0010			D12BIT	= $0010
   440 = 0018			M640X400	= $0018
   441 = 0018			M640X480	= $0018
   442 = 0000			GROK	= $0000
   443 = FFFFFFFF		GRNOINITGRAPH	= $FFFFFFFF
   444 = FFFFFFFE		GRNOTDETECTED	= $FFFFFFFE
   445 = FFFFFFFD		GRFILENOTFOUND	= $FFFFFFFD
   446 = FFFFFFFC		GRINVALIDDRIVER	= $FFFFFFFC
   447 = FFFFFFFB		GRNOLOADMEM	= $FFFFFFFB
   448 = FFFFFFFA		GRNOSCANMEM	= $FFFFFFFA
   449 = FFFFFFF9		GRNOFLOODMEM	= $FFFFFFF9
   450 = FFFFFFF8		GRFONTNOTFOUND	= $FFFFFFF8
   451 = FFFFFFF7		GRNOFONTMEM	= $FFFFFFF7
   452 = FFFFFFF6		GRINVALIDMODE	= $FFFFFFF6
   453 = FFFFFFF5		GRERROR	= $FFFFFFF5
   454 = FFFFFFF4		GRIOERROR	= $FFFFFFF4
   455 = FFFFFFF3		GRINVALIDFONT	= $FFFFFFF3
   456 = FFFFFFF2		GRINVALIDFONTNUM	= $FFFFFFF2
   457 = FFFFFFEE		GRINVALIDVERSION	= $FFFFFFEE
   458 = 0000			CGAC0	= $0000
   459 = 0001			CGAC1	= $0001
   460 = 0002			CGAC2	= $0002
   461 = 0003			CGAC3	= $0003
   462 = 0004			CGAHI	= $0004
   463 = 0000			MCGAC0	= $0000
   464 = 0001			MCGAC1	= $0001
   465 = 0002			MCGAC2	= $0002
   466 = 0003			MCGAC3	= $0003
   467 = 0004			MCGAMED	= $0004
   468 = 0005			MCGAHI	= $0005
   469 = 0000			EGALO	= $0000
   470 = 0001			EGAHI	= $0001
   471 = 0000			EGA64LO	= $0000
   472 = 0001			EGA64HI	= $0001
   473 = 0003			EGAMONOHI	= $0003
   474 = 000A			VGALO	= $000A
   475 = 001F			VGAMED	= $001F
   476 = 0018			VGAHI	= $0018
   477 = 2227			WIN_LEFT	= DATAORIGIN+$000D
   478 = 2229			WIN_RIGHT	= DATAORIGIN+$000F
   479 = 222B			WIN_TOP	= DATAORIGIN+$0011
   480 = 222D			WIN_BOTTOM	= DATAORIGIN+$0013
   481 = 222F			GRAPHRESULT	= DATAORIGIN+$0015
   482 = 2230			GETCOLOR	= DATAORIGIN+$0016
   483 = 2231			adr.LASTARCCOORDS	= DATAORIGIN+$0017
   484 2165			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   485 = 2231			LASTARCCOORDS.X	= DATAORIGIN+$0017
   486 = 2233			LASTARCCOORDS.Y	= DATAORIGIN+$0019
   487 = 2235			LASTARCCOORDS.XSTART	= DATAORIGIN+$001B
   488 = 2237			LASTARCCOORDS.YSTART	= DATAORIGIN+$001D
   489 = 2239			LASTARCCOORDS.XEND	= DATAORIGIN+$001F
   490 = 223B			LASTARCCOORDS.YEND	= DATAORIGIN+$0021
   491 = 223D			CURRENTX	= DATAORIGIN+$0023
   492 = 223F			CURRENTY	= DATAORIGIN+$0025
   493 = 2241			VIDEORAM	= DATAORIGIN+$0027
   494 = 2243			SCANLINE_WIDTH	= DATAORIGIN+$0029
   495
   496 = 2165 31 22		LASTARCCOORDS
   496 				.endl							; UNIT GRAPH
   497
   498 2167			.local	MAINPROC					; PROCEDURE
   499
   500 				; optimize FAIL (100, examples\inline_asm.pas), line = 15
   501 					@print #$7D
   501 				 LDY# $7D\ JSR @PRINT
   501 2167 A0 7D		 LDY# $7D
   501 2169 20 D2 20		 JSR @PRINT
   502
   503 				; optimize FAIL (100, examples\inline_asm.pas), line = 16
   504 					@printSTRING #CODEORIGIN+$000D
   504 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   504 216C A0 20		 LDY> CODEORIGIN+$000D
   504 216E A9 0D		 LDA< CODEORIGIN+$000D
   504 2170 20 DB 20		 JSR @PRINTSTRING
   505 2173 20 CD 20			@printEOL
   506
   507 				; optimize FAIL (100, examples\inline_asm.pas), line = 17
   508 					@printSTRING #CODEORIGIN+$0020
   508 				 LDY> CODEORIGIN+$0020\ LDA< CODEORIGIN+$0020\ JSR @PRINTSTRING
   508 2176 A0 20		 LDY> CODEORIGIN+$0020
   508 2178 A9 20		 LDA< CODEORIGIN+$0020
   508 217A 20 DB 20		 JSR @PRINTSTRING
   509 217D 20 CD 20			@printEOL
   510
   511 				; optimize FAIL (100, examples\inline_asm.pas), line = 18
   512 					@printSTRING #CODEORIGIN+$003F
   512 				 LDY> CODEORIGIN+$003F\ LDA< CODEORIGIN+$003F\ JSR @PRINTSTRING
   512 2180 A0 20		 LDY> CODEORIGIN+$003F
   512 2182 A9 3F		 LDA< CODEORIGIN+$003F
   512 2184 20 DB 20		 JSR @PRINTSTRING
   513 2187 20 CD 20			@printEOL
   514
   515 				; ---------------------  ASM Block 089  ---------------------
   516
   517
   518 218A A9 21 8D C6 02 00 +     .by $A9 $21 $8D $C6 $02 $00 $60 
   519 				  
   520
   521 				; optimize FAIL (100, examples\inline_asm.pas), line = 23
   522 					@printSTRING #CODEORIGIN+$0041
   522 				 LDY> CODEORIGIN+$0041\ LDA< CODEORIGIN+$0041\ JSR @PRINTSTRING
   522 2191 A0 20		 LDY> CODEORIGIN+$0041
   522 2193 A9 41		 LDA< CODEORIGIN+$0041
   522 2195 20 DB 20		 JSR @PRINTSTRING
   523 2198 20 CD 20			@printEOL
   524
   525 				; optimize FAIL ('CRT.READKEY', examples\inline_asm.pas), line = 24
   526 219B 20 54 21			jsr CRT.READKEY
   527 219E B5 98 8D 44 22		mva :STACKORIGIN,x KEY
   528 21A3 CA				dex
   529
   530 				; ---------------------  ASM Block 090  ---------------------
   531
   532
   533 21A4 A9 90 3E C6 02 00 +     .by $A9 $90 $3E $C6 $02 $0 $60 
   534 				  
   535
   536 				; optimize FAIL (100, examples\inline_asm.pas), line = 29
   537 					@printSTRING #CODEORIGIN+$0064
   537 				 LDY> CODEORIGIN+$0064\ LDA< CODEORIGIN+$0064\ JSR @PRINTSTRING
   537 21AB A0 20		 LDY> CODEORIGIN+$0064
   537 21AD A9 64		 LDA< CODEORIGIN+$0064
   537 21AF 20 DB 20		 JSR @PRINTSTRING
   538 21B2 20 CD 20			@printEOL
   539
   540 				; optimize FAIL ('CRT.READKEY', examples\inline_asm.pas), line = 30
   541 21B5 20 54 21			jsr CRT.READKEY
   542 21B8 B5 98 8D 44 22		mva :STACKORIGIN,x KEY
   543 21BD CA				dex
   544
   545 				; ---------------------  ASM Block 091  ---------------------
   546
   547
   548 21BE A9 60 8D C6 02 00 +     .by $A9 $60 $8D $C6 $02 $0 $60 
   549 				  
   550
   551 				; optimize FAIL (100, examples\inline_asm.pas), line = 35
   552 					@printSTRING #CODEORIGIN+$0087
   552 				 LDY> CODEORIGIN+$0087\ LDA< CODEORIGIN+$0087\ JSR @PRINTSTRING
   552 21C5 A0 20		 LDY> CODEORIGIN+$0087
   552 21C7 A9 87		 LDA< CODEORIGIN+$0087
   552 21C9 20 DB 20		 JSR @PRINTSTRING
   553 21CC 20 CD 20			@printEOL
   554
   555 				; optimize FAIL ('CRT.READKEY', examples\inline_asm.pas), line = 36
   556 21CF 20 54 21			jsr CRT.READKEY
   557 21D2 B5 98 8D 44 22		mva :STACKORIGIN,x KEY
   558 21D7 CA				dex
   559
   560 				; ---------------------  ASM Block 092  ---------------------
   561
   562
   563 21D8 A9 76 8D C6 02 00 +     .by $A9 $76 $8D $C6 $02 $0 $60 
   564 				  
   565
   566 				; optimize FAIL (100, examples\inline_asm.pas), line = 41
   567 					@printSTRING #CODEORIGIN+$00AA
   567 				 LDY> CODEORIGIN+$00AA\ LDA< CODEORIGIN+$00AA\ JSR @PRINTSTRING
   567 21DF A0 20		 LDY> CODEORIGIN+$00AA
   567 21E1 A9 AA		 LDA< CODEORIGIN+$00AA
   567 21E3 20 DB 20		 JSR @PRINTSTRING
   568 21E6 20 CD 20			@printEOL
   569
   570 				; optimize FAIL ('CRT.READKEY', examples\inline_asm.pas), line = 42
   571 21E9 20 54 21			jsr CRT.READKEY
   572 21EC B5 98 8D 44 22		mva :STACKORIGIN,x KEY
   573 21F1 CA				dex
   574
   575 				; ---------------------  ASM Block 093  ---------------------
   576
   577
   578 21F2 A9 13 8D C6 02 00 +     .by $A9 $13 $8D $C6 $02 $0 $60 
   579 				  
   580
   581 				; optimize FAIL ('CRT.READKEY', examples\inline_asm.pas), line = 47
   582 21F9 20 54 21			jsr CRT.READKEY
   583 21FC B5 98 8D 44 22		mva :STACKORIGIN,x KEY
   584 2201 CA				dex
   585
   586 				; ------------------------------------------------------------
   587
   588 = 2244			KEY	= DATAORIGIN+$002A
   589
   590 = 2244			@VarData	= KEY
   591 = 0001			@VarDataSize	= 1
   592
   593 2202			@exit
   594 					.ifdef @new
   595 					@FreeMem #@VarData #@VarDataSize
   596 					eif
   597 2202 60				rts						; ret
   598 				.endl
   599 2203			l_00D4
   600
   601 				; optimize FAIL ('MAINPROC', examples\inline_asm.pas), line = 51
   602 2203 20 67 21			jsr MAINPROC
   603
   604 				; ------------------------------------------------------------
   605
   606 2206			@exit
   607
   608 2206 A2 00		@halt	ldx #0
   609 2208 9A				txs
   610
   611 2209 60				rts
   612
   613 				; ------------------------------------------------------------
   614
   615 220A 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   616
   617 				; ------------------------------------------------------------
   618
   619 221A			.local	@DEFINES
   620 221A			ATARI
   621 				.endl
   622
   623 				.endl							; MAIN
   624
   625 				; ------------------------------------------------------------
   626 				; ------------------------------------------------------------
   627
   628 				.macro	UNITINITIALIZATION
   629 				
   630 					.ifdef MAIN.SYSTEM.@UnitInit
   631 					jsr MAIN.SYSTEM.@UnitInit
   632 					eif
   633 				
   634 					.ifdef MAIN.DOS.@UnitInit
   635 					jsr MAIN.DOS.@UnitInit
   636 					eif
   637 				
   638 					.ifdef MAIN.STRUTILS.@UnitInit
   639 					jsr MAIN.STRUTILS.@UnitInit
   640 					eif
   641 				
   642 					.ifdef MAIN.SYSUTILS.@UnitInit
   643 					jsr MAIN.SYSUTILS.@UnitInit
   644 					eif
   645 				
   646 					.ifdef MAIN.ATARI.@UnitInit
   647 					jsr MAIN.ATARI.@UnitInit
   648 					eif
   649 				
   650 					.ifdef MAIN.CRT.@UnitInit
   651 					jsr MAIN.CRT.@UnitInit
   652 					eif
   653 				
   654 					.ifdef MAIN.TYPES.@UnitInit
   655 					jsr MAIN.TYPES.@UnitInit
   656 					eif
   657 				
   658 					.ifdef MAIN.GRAPH.@UnitInit
   659 					jsr MAIN.GRAPH.@UnitInit
   660 					eif
   661 				.endm
   662
   663 				; ------------------------------------------------------------
   664
   665 					ift .SIZEOF(MAIN.SYSTEM) > 0
   666 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   666 				SYSTEM: $2150..$2153
   667 					eif
   668
   669 					ift .SIZEOF(MAIN.DOS) > 0
   670 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   671 					eif
   672
   673 					ift .SIZEOF(MAIN.STRUTILS) > 0
   674 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   675 					eif
   676
   677 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   678 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   679 					eif
   680
   681 					ift .SIZEOF(MAIN.ATARI) > 0
   682 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   683 					eif
   684
   685 					ift .SIZEOF(MAIN.CRT) > 0
   686 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   686 				CRT: $2154..$2164
   687 					eif
   688
   689 					ift .SIZEOF(MAIN.TYPES) > 0
   690 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
   691 					eif
   692
   693 					ift .SIZEOF(MAIN.GRAPH) > 0
   694 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
   694 				GRAPH: $2165..$2166
   695 					eif
   696
   697 					.print 'CODE: ',CODEORIGIN,'..',*-1
   697 				CODE: $2000..$2219
   698
   699 				; ------------------------------------------------------------
   700
   701 221A			DATAORIGIN
   702 221A 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $27  $00 $00 $00 $17
   703
   704 = 0014			VARINITSIZE	= *-DATAORIGIN
   705 = 002B			VARDATASIZE	= 43
   706
   707 = 2245			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   708
   709 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   709 				DATA: $221A..$2245
   710
   711 02E0-02E1> 31 21			run START
   712
   713 				; ------------------------------------------------------------
   714
   715 				.macro	STATICDATA
   716 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $11 $45 $66  $66 $65 $63 $74 $75 $73 $20 $65
   717 				.by  $78 $61 $6D $70 $6C $65 $3A $00  $1D $55 $73 $69 $6E $67 $20 $69  $6E $6C $69 $6E $65 $20 $6D $61
   718 				.by  $63 $68 $69 $6E $65 $20 $6C $61  $6E $67 $75 $61 $67 $65 $00 $00  $00 $21 $50 $72 $65 $73 $73 $20
   719 				.by  $61 $6E $79 $20 $6B $65 $79 $20  $74 $6F $20 $63 $68 $61 $6E $67  $65 $20 $63 $6F $6C $6F $72 $21
   720 				.by  $28 $31 $29 $00 $21 $50 $72 $65  $73 $73 $20 $61 $6E $79 $20 $6B  $65 $79 $20 $74 $6F $20 $63 $68
   721 				.by  $61 $6E $67 $65 $20 $63 $6F $6C  $6F $72 $21 $28 $32 $29 $00 $21  $50 $72 $65 $73 $73 $20 $61 $6E
   722 				.by  $79 $20 $6B $65 $79 $20 $74 $6F  $20 $63 $68 $61 $6E $67 $65 $20  $63 $6F $6C $6F $72 $21 $28 $33
   723 				.by  $29 $00 $21 $50 $72 $65 $73 $73  $20 $61 $6E $79 $20 $6B $65 $79  $20 $74 $6F $20 $63 $68 $61 $6E
   724 				.by  $67 $65 $20 $63 $6F $6C $6F $72  $21 $28 $34 $29 $00
   725 				.endm
   726
   727 					end
