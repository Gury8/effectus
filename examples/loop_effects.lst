mads 2.1.0
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $2011..$24A0
    97
    98 				; ------------------------------------------------------------
    99
   100 24A0			START
   101 24A0 BA				tsx
   102 24A1 8E B0 26			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 0124			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 26E4			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 					ldx #256-VLEN
   115 					lda #0
   116 					sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   118 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   118 24A4 A9 E4 85 86 A9 26 +  MWA #VADR @FILL.PTR1
   118 24AC A9 24 85 8A A9 01 +  MWA #VLEN @FILL.PTR3
   118 24B4 A9 00 85 82		 MVA #0 @FILL.PTR2
   118 24B8 20 32 24		 JSR @FILL
   119 					eif
   120
   121 24BB A2 0F			ldx #$0f
   122 24BD BD 40 03 9D B3 26 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 24C6 E8				inx		; X = 0 !!!
   125 24C7 86 8E			stx bp		; lo BP = 0
   126
   127 24C9				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: loop_effects.a65]
Source: loop_effects.a65
   128
   129 24C9			.local	MAIN						; PROCEDURE
   130
   131 24C9 4C 9E 26			jmp l_0018
   132
   133 				; ------------------------------------------------------------
   134
   135 24CC			.local	SYSTEM						; UNIT
   136
   137 24CC			.local	RANDOM_0018					; FUNCTION | ASSEMBLER | OVERLOAD
   138
   139 				; ------------------------------------------------------------
   140
   141 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   142 				; as Pointer
   143 24CC B5 98 8D D2 26		mva :STACKORIGIN,x RANGE
   144 24D1 CA				dex						; sub bx, 1
   145
   146 				; ---------------------  ASM Block 009  ---------------------
   147
   148
   149 				;BYTE FUNC Rand(BYTE range)
   150 				; returns random number between 0 and
   151 				; range-1.  If range=0, then a random
   152 				; number between 0 and 255 is returned
   153
   154 24D2 AC 0A D2			ldy	$d20a		; RANDOM
   155
   156 24D5 AD D2 26			lda	range
   157 24D8 F0 08			beq	stop
   158
   159 24DA 85 8A			sta	ecx
   160 24DC 84 82			sty	eax
   161
   162 24DE 20 E3 21			jsr	imulCL
   163 24E1 A8				tay
   164
   165 24E2 8C D3 26		stop	sty	Result
   166
   167 24E5			@exit
   168
   169 				; ------------------------------------------------------------
   170
   171 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   172 				; as Pointer
   173
   174 24E5 E8				inx						; add bx, 1
   175 24E6 AD D3 26 95 98		mva RESULT :STACKORIGIN,x
   176
   177 					.ifdef @new
   178 					@FreeMem #@VarData #@VarDataSize
   179 					eif
   180
   181 				; ------------------------------------------------------------
   182
   183 = 26D2			RANGE	= DATAORIGIN+$000B
   184 = 26D3			RESULT	= DATAORIGIN+$000C
   185
   186 = 26D2			@VarData	= RANGE
   187 = 0002			@VarDataSize	= 2
   188
   189 24EB 60				rts						; ret
   190 				.endl
   191
   192 24EC			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   193
   194 				; ------------------------------------------------------------
   195
   196 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   197 				; as Pointer
   198 24EC B5 98 85 8A			mva :STACKORIGIN,x VALUE
   199 24F0 CA				dex						; sub bx, 1
   200
   201 				; ------------------------------------------------------------
   202
   203 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   204 				; as Pointer
   205 24F1 B5 98 85 86			mva :STACKORIGIN,x A
   206 24F5 B5 A8 85 87			mva :STACKORIGIN+STACKWIDTH,x A+1
   207 24F9 CA				dex						; sub bx, 1
   208
   209 				; ---------------------  ASM Block 021  ---------------------
   210
   211 24FA A0 00			ldy #0
   212 24FC A5 8A 91 86			mva value (edx),y
   213
   214
   215 				; ------------------------------------------------------------
   216
   217 = 0086			A	= edx
   218 = 008A			VALUE	= ecx
   219 2500			@exit
   220 					.ifdef @new
   221 					@FreeMem #@VarData #@VarDataSize
   222 					eif
   223 2500 60				rts						; ret
   224 				.endl
   225
   226 				; ------------------------------------------------------------
   227
   228 = 0648			M_PI_2	= $0648
   229 = 0192			D_PI_2	= $0192
   230 = 0004			D_PI_180	= $0004
   231 = 0000			MGTIA	= $0000
   232 = 0080			MVBXE	= $0080
   233 = 0000			VBXE_XDLADR	= $0000
   234 = 0100			VBXE_BCBADR	= $0100
   235 = 1000			VBXE_MAPADR	= $1000
   236 = 5000			VBXE_OVRADR	= $5000
   237 = B000			VBXE_WINDOW	= $B000
   238 = 0000			IDLI	= $0000
   239 = 0001			IVBL	= $0001
   240 = 00FE			CH_DELCHR	= $00FE
   241 = 009B			CH_ENTER	= $009B
   242 = 001B			CH_ESC	= $001B
   243 = 001C			CH_CURS_UP	= $001C
   244 = 001D			CH_CURS_DOWN	= $001D
   245 = 001E			CH_CURS_LEFT	= $001E
   246 = 001F			CH_CURS_RIGHT	= $001F
   247 = 007F			CH_TAB	= $007F
   248 = 009B			CH_EOL	= $009B
   249 = 007D			CH_CLR	= $007D
   250 = 00FD			CH_BELL	= $00FD
   251 = 007E			CH_DEL	= $007E
   252 = 009C			CH_DELLINE	= $009C
   253 = 009D			CH_INSLINE	= $009D
   254 = 0000			COLOR_BLACK	= $0000
   255 = 000E			COLOR_WHITE	= $000E
   256 = 0032			COLOR_RED	= $0032
   257 = 0096			COLOR_CYAN	= $0096
   258 = 0068			COLOR_VIOLET	= $0068
   259 = 00C4			COLOR_GREEN	= $00C4
   260 = 0074			COLOR_BLUE	= $0074
   261 = 00EE			COLOR_YELLOW	= $00EE
   262 = 0028			COLOR_ORANGE	= $0028
   263 = 00E4			COLOR_BROWN	= $00E4
   264 = 003C			COLOR_LIGHTRED	= $003C
   265 = 0004			COLOR_GRAY1	= $0004
   266 = 0006			COLOR_GRAY2	= $0006
   267 = 000A			COLOR_GRAY3	= $000A
   268 = 00CC			COLOR_LIGHTGREEN	= $00CC
   269 = 007C			COLOR_LIGHTBLUE	= $007C
   270 = 0004			FMOPENREAD	= $0004
   271 = 0008			FMOPENWRITE	= $0008
   272 = 0009			FMOPENAPPEND	= $0009
   273 = 000C			FMOPENREADWRITE	= $000C
   274 = 26C7			SCREENWIDTH	= DATAORIGIN+$0000
   275 = 26C9			SCREENHEIGHT	= DATAORIGIN+$0002
   276 = 26CB			DATESEPARATOR	= DATAORIGIN+$0004
   277 = D014			TVSYSTEM	= $D014
   278 = 02C0			adr.PALETTE	= $02C0
   279 2501			.var PALETTE	= adr.PALETTE .word
   280 = D012			adr.HPALETTE	= $D012
   281 2501			.var HPALETTE	= adr.HPALETTE .word
   282 = 26CC			FILEMODE	= DATAORIGIN+$0005
   283 = 26CD			SCREENMODE	= DATAORIGIN+$0006
   284 = 26CE			IORESULT	= DATAORIGIN+$0007
   285 = 26CF			EOLN	= DATAORIGIN+$0008
   286 = 26D0			RNDSEED	= DATAORIGIN+$0009
   287
   288 = 2501 C0 02		PALETTE
   288 = 2503 12 D0		HPALETTE
   288 				.endl							; UNIT SYSTEM
   289
   290 				; ------------------------------------------------------------
   291
   292 2505			.local	DOS						; UNIT
   293
   294 				; ------------------------------------------------------------
   295
   296 = D014			PALNTSC	= $D014
   297
   298 				.endl							; UNIT DOS
   299
   300 				; ------------------------------------------------------------
   301
   302 2505			.local	STRUTILS					; UNIT
   303
   304 				; ------------------------------------------------------------
   305
   306 				.endl							; UNIT STRUTILS
   307
   308 				; ------------------------------------------------------------
   309
   310 2505			.local	SYSUTILS					; UNIT
   311
   312 2505			.local	INTTOSTR					; FUNCTION | ASSEMBLER
   313
   314 				; ------------------------------------------------------------
   315
   316 				; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
   317 				; as Pointer
   318 2505 B5 98 8D D4 26		mva :STACKORIGIN,x A
   319 250A B5 A8 8D D5 26		mva :STACKORIGIN+STACKWIDTH,x A+1
   320 250F B5 B8 8D D6 26		mva :STACKORIGIN+STACKWIDTH*2,x A+2
   321 2514 B5 C8 8D D7 26		mva :STACKORIGIN+STACKWIDTH*3,x A+3
   322 2519 CA				dex						; sub bx, 1
   323
   324 				; ---------------------  ASM Block 057  ---------------------
   325
   326 251A 8A 48			txa:pha
   327
   328 251C E8				inx
   329
   330 					@ValueToStr #@printINT
   330 				 LDY> @PRINTINT\ LDA< @PRINTINT\ JSR @VALUETOSTR
   330 251D A0 22		 LDY> @PRINTINT
   330 251F A9 9D		 LDA< @PRINTINT
   330 2521 20 2B 23		 JSR @VALUETOSTR
   331
   332 2524 A9 00 8D D8 26 A9 + 	mwa #@buf Result
   333
   334 252E 68 AA			pla:tax
   335
   336 2530			@exit
   337
   338 				; ------------------------------------------------------------
   339
   340 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   341 				; as Pointer
   342
   343 2530 E8				inx						; add bx, 1
   344 2531 AD D8 26 95 98		mva RESULT :STACKORIGIN,x
   345 2536 AD D9 26 95 A8		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   346
   347 					.ifdef @new
   348 					@FreeMem #@VarData #@VarDataSize
   349 					eif
   350
   351 				; ------------------------------------------------------------
   352
   353 = 26D4			A	= DATAORIGIN+$000D
   354 = 26D8			RESULT	= DATAORIGIN+$0011
   355
   356 = 26D4			@VarData	= A
   357 = 0006			@VarDataSize	= 6
   358
   359 253B 60				rts						; ret
   360 				.endl
   361
   362 				; ------------------------------------------------------------
   363
   364 = 0001			FAREADONLY	= $0001
   365 = 0002			FAHIDDEN	= $0002
   366 = 0004			FASYSFILE	= $0004
   367 = 0008			FAVOLUMEID	= $0008
   368 = 0010			FADIRECTORY	= $0010
   369 = 0020			FAARCHIVE	= $0020
   370 = 003F			FAANYFILE	= $003F
   371
   372 				.endl							; UNIT SYSUTILS
   373
   374 				; ------------------------------------------------------------
   375
   376 253C			.local	ATARI						; UNIT
   377
   378 				; ------------------------------------------------------------
   379
   380 = 0012			RTCLOK	= $0012
   381 = 004D			ATRACT	= $004D
   382 = 0052			LMARGIN	= $0052
   383 = 0053			RMARGIN	= $0053
   384 = 0054			ROWCRS	= $0054
   385 = 0055			COLCRS	= $0055
   386 = 0057			DINDEX	= $0057
   387 = 0058			SAVMSC	= $0058
   388 = 006A			RAMTOP	= $006A
   389 = 0200			VDSLST	= $0200
   390 = 0230			SDLSTL	= $0230
   391 = 0290			TXTROW	= $0290
   392 = 0291			TXTCOL	= $0291
   393 = 0293			TINDEX	= $0293
   394 = 0294			TXTMSC	= $0294
   395 = 022F			SDMCTL	= $022F
   396 = 026F			GPRIOR	= $026F
   397 = 02F0			CRSINH	= $02F0
   398 = 02F3			CHACT	= $02F3
   399 = 02F4			CHBAS	= $02F4
   400 = 02FC			CH	= $02FC
   401 = 02C0			PCOLR0	= $02C0
   402 = 02C1			PCOLR1	= $02C1
   403 = 02C2			PCOLR2	= $02C2
   404 = 02C3			PCOLR3	= $02C3
   405 = 02C4			COLOR0	= $02C4
   406 = 02C5			COLOR1	= $02C5
   407 = 02C6			COLOR2	= $02C6
   408 = 02C7			COLOR3	= $02C7
   409 = 02C8			COLOR4	= $02C8
   410 = 02C8			COLBAKS	= $02C8
   411 = D000			HPOSP0	= $D000
   412 = D001			HPOSP1	= $D001
   413 = D002			HPOSP2	= $D002
   414 = D003			HPOSP3	= $D003
   415 = D004			HPOSM0	= $D004
   416 = D005			HPOSM1	= $D005
   417 = D006			HPOSM2	= $D006
   418 = D007			HPOSM3	= $D007
   419 = D008			SIZEP0	= $D008
   420 = D009			SIZEP1	= $D009
   421 = D00A			SIZEP2	= $D00A
   422 = D00B			SIZEP3	= $D00B
   423 = D00C			SIZEM	= $D00C
   424 = D00D			GRAFP0	= $D00D
   425 = D00E			GRAFP1	= $D00E
   426 = D00F			GRAFP2	= $D00F
   427 = D010			GRAFP3	= $D010
   428 = D011			GRAFM	= $D011
   429 = D004			P0PF	= $D004
   430 = D014			PAL	= $D014
   431 = D012			COLPM0	= $D012
   432 = D013			COLPM1	= $D013
   433 = D014			COLPM2	= $D014
   434 = D015			COLPM3	= $D015
   435 = D016			COLPF0	= $D016
   436 = D017			COLPF1	= $D017
   437 = D018			COLPF2	= $D018
   438 = D019			COLPF3	= $D019
   439 = D01A			COLBK	= $D01A
   440 = D01B			PRIOR	= $D01B
   441 = D01D			GRACTL	= $D01D
   442 = D01E			HITCLR	= $D01E
   443 = D200			AUDF1	= $D200
   444 = D201			AUDC1	= $D201
   445 = D202			AUDF2	= $D202
   446 = D203			AUDC2	= $D203
   447 = D204			AUDF3	= $D204
   448 = D205			AUDC3	= $D205
   449 = D206			AUDF4	= $D206
   450 = D207			AUDC4	= $D207
   451 = D208			AUDCTL	= $D208
   452 = D20F			SKSTAT	= $D20F
   453 = D301			PORTB	= $D301
   454 = D400			DMACTL	= $D400
   455 = D401			CHACTL	= $D401
   456 = D402			DLISTL	= $D402
   457 = D404			HSCROL	= $D404
   458 = D405			VSCROL	= $D405
   459 = D407			PMBASE	= $D407
   460 = D409			CHBASE	= $D409
   461 = D40A			WSYNC	= $D40A
   462 = D40B			VCOUNT	= $D40B
   463 = D40C			PENH	= $D40C
   464 = D40D			PENV	= $D40D
   465 = D40E			NMIEN	= $D40E
   466
   467 				.endl							; UNIT ATARI
   468
   469 				; ------------------------------------------------------------
   470
   471 253C			.local	CRT						; UNIT
   472
   473 253C			.local	GOTOXY						; PROCEDURE | ASSEMBLER
   474
   475 				; ------------------------------------------------------------
   476
   477 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   478 				; as Pointer
   479 253C B5 98 8D DC 26		mva :STACKORIGIN,x Y
   480 2541 CA				dex						; sub bx, 1
   481
   482 				; ------------------------------------------------------------
   483
   484 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   485 				; as Pointer
   486 2542 B5 98 8D DB 26		mva :STACKORIGIN,x X
   487 2547 CA				dex						; sub bx, 1
   488
   489 				; ---------------------  ASM Block 068  ---------------------
   490
   491 2548 AC DB 26			ldy x
   492 254B F0 03			beq @+
   493 254D 88				dey
   494 254E 84 55			sty colcrs
   495
   496 2550 AC DC 26		@	ldy y
   497 2553 F0 03			beq @+
   498 2555 88				dey
   499 2556 84 54			sty rowcrs
   500 2558			@
   501
   502
   503 				; ------------------------------------------------------------
   504
   505 = 26DB			X	= DATAORIGIN+$0014
   506 = 26DC			Y	= DATAORIGIN+$0015
   507
   508 = 26DB			@VarData	= X
   509 = 0002			@VarDataSize	= 2
   510
   511 2558			@exit
   512 					.ifdef @new
   513 					@FreeMem #@VarData #@VarDataSize
   514 					eif
   515 2558 60				rts						; ret
   516 				.endl
   517
   518 				; ------------------------------------------------------------
   519
   520 = 26DA			TEXTATTR	= DATAORIGIN+$0013
   521 = D01F			CONSOL	= $D01F
   522 = 0000			CN_START_SELECT_OPTION	= $0000
   523 = 0001			CN_SELECT_OPTION	= $0001
   524 = 0002			CN_START_OPTION	= $0002
   525 = 0003			CN_OPTION	= $0003
   526 = 0004			CN_START_SELECT	= $0004
   527 = 0005			CN_SELECT	= $0005
   528 = 0006			CN_START	= $0006
   529 = 0007			CN_NONE	= $0007
   530 = 0000			BW40	= $0000
   531 = 0001			CO40	= $0001
   532 = 0002			BW80	= $0002
   533 = 0003			CO80	= $0003
   534 = 0007			MONO	= $0007
   535 = 0001			C40	= $0001
   536 = 0003			C80	= $0003
   537 = 0000			BLACK	= $0000
   538 = 0001			BLUE	= $0001
   539 = 0002			GREEN	= $0002
   540 = 0003			CYAN	= $0003
   541 = 0004			RED	= $0004
   542 = 0005			MAGENTA	= $0005
   543 = 0006			BROWN	= $0006
   544 = 0007			LIGHTGRAY	= $0007
   545 = 0008			DARKGRAY	= $0008
   546 = 0009			LIGHTBLUE	= $0009
   547 = 000A			LIGHTGREEN	= $000A
   548 = 000B			LIGHTCYAN	= $000B
   549 = 000C			LIGHTRED	= $000C
   550 = 000D			LIGHTMAGENTA	= $000D
   551 = 000E			YELLOW	= $000E
   552 = 000F			WHITE	= $000F
   553 = 0080			BLINK	= $0080
   554
   555 				.endl							; UNIT CRT
   556
   557 				; ------------------------------------------------------------
   558
   559 2559			.local	TYPES						; UNIT
   560
   561 				; ------------------------------------------------------------
   562
   563 				.endl							; UNIT TYPES
   564
   565 				; ------------------------------------------------------------
   566
   567 2559			.local	GRAPH						; UNIT
   568
   569 2559			.local	INITGRAPH_0083					; PROCEDURE | OVERLOAD
   570
   571 				; ------------------------------------------------------------
   572
   573 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   574 				; as Pointer
   575 2559 B5 98 8D FA 26		mva :STACKORIGIN,x MODE
   576 255E CA				dex						; sub bx, 1
   577
   578 				; optimize OK (GRAPH), line = 73
   579
   580 255F A9 00 8D E5 26		mva #$00 GRAPHRESULT
   581
   582 				; optimize OK (GRAPH), line = 75
   583
   584 2564 AD FA 26 8D CD 26		mva MODE SYSTEM.SCREENMODE
   585
   586 				; ---------------------  ASM Block 074  ---------------------
   587
   588
   589 256A 8A 48			txa:pha
   590
   591 256C A9 2C 8D 82 23		mva #$2c @putchar.vbxe
   592
   593 2571 AD FA 26			lda mode
   594 2574 29 0F			and #$0f
   595 2576 A8				tay
   596
   597 2577 A2 60			ldx #$60	; 6*16
   598 2579 AD FA 26			lda mode	; %00010000 with text window
   599 257C 29 10			and #$10
   600 257E 49 10			eor #$10
   601 2580 09 02			ora #2		; read
   602
   603 					.nowarn @graphics
   603 2582 20 53 23		 JSR @GRAPHICS
   604 					
   605 					
   606 = EE6D			tlshc	equ $ee6d
   607
   608 2585 A6 57			ldx dindex
   609 2587 BC 6D EE			ldy tlshc,x
   610 258A A9 05			lda #5
   611 258C 0A			shift	asl @
   612 258D 88				dey
   613 258E D0 FC			bne shift
   614
   615 2590 8D F9 26			sta SCANLINE_WIDTH
   616 					
   617
   618 				; Fox/TQA
   619
   620 = 0057			dindex	equ $57
   621 = EE7D			tmccn	equ $ee7d
   622 = EE8D			tmrcn	equ $ee8d
   623
   624 2593 A6 57			ldx dindex
   625 2595 BD 7D EE			lda tmccn,x
   626 2598 BC 8D EE			ldy tmrcn,x
   627 259B A2 00			ldx #0
   628 259D C9 40			cmp #<320
   629 259F D0 01 E8			sne:inx
   630 				    
   631 				; X:A = horizontal resolution
   632 				; Y = vertical resolution
   633
   634 25A2 8D C7 26			sta MAIN.SYSTEM.ScreenWidth
   635 25A5 8E C8 26			stx MAIN.SYSTEM.ScreenWidth+1
   636 					
   637 25A8 38 E9 01			sub #1
   638 25AB 8D DF 26			sta WIN_RIGHT
   639 25AE 8A				txa
   640 25AF E9 00			sbc #0
   641 25B1 8D E0 26			sta WIN_RIGHT+1
   642 					
   643 25B4 8C C9 26			sty MAIN.SYSTEM.ScreenHeight
   644 25B7 A9 00			lda #0
   645 25B9 8D CA 26			sta MAIN.SYSTEM.ScreenHeight+1
   646 					
   647 25BC 8D DD 26			sta WIN_LEFT
   648 25BF 8D DE 26			sta WIN_LEFT+1
   649 25C2 8D E1 26			sta WIN_TOP
   650 25C5 8D E2 26			sta WIN_TOP+1
   651
   652 25C8 8D E4 26			sta WIN_BOTTOM+1	
   653 25CB 88				dey
   654 25CC 8C E3 26			sty WIN_BOTTOM
   655
   656 25CF 68 AA			pla:tax
   657
   658
   659 				; ------------------------------------------------------------
   660
   661 = 26FA			MODE	= DATAORIGIN+$0033
   662
   663 = 26FA			@VarData	= MODE
   664 = 0001			@VarDataSize	= 1
   665
   666 25D1			@exit
   667 					.ifdef @new
   668 					@FreeMem #@VarData #@VarDataSize
   669 					eif
   670 25D1 60				rts						; ret
   671 				.endl
   672
   673 				; ------------------------------------------------------------
   674
   675 = FFFFFF80		CURRENTDRIVER	= $FFFFFF80
   676 = 0000			DETECT	= $0000
   677 = 0001			CGA	= $0001
   678 = 0002			MCGA	= $0002
   679 = 0003			EGA	= $0003
   680 = 0004			EGA64	= $0004
   681 = 0005			EGAMONO	= $0005
   682 = 0006			LOWRES	= $0006
   683 = 0007			HERCMONO	= $0007
   684 = 0009			VGA	= $0009
   685 = 000A			VESA	= $000A
   686 = 000B			D1BIT	= $000B
   687 = 000C			D2BIT	= $000C
   688 = 000D			D4BIT	= $000D
   689 = 000E			D6BIT	= $000E
   690 = 000F			D8BIT	= $000F
   691 = 0010			D12BIT	= $0010
   692 = 0018			M640X400	= $0018
   693 = 0018			M640X480	= $0018
   694 = 0000			GROK	= $0000
   695 = FFFFFFFF		GRNOINITGRAPH	= $FFFFFFFF
   696 = FFFFFFFE		GRNOTDETECTED	= $FFFFFFFE
   697 = FFFFFFFD		GRFILENOTFOUND	= $FFFFFFFD
   698 = FFFFFFFC		GRINVALIDDRIVER	= $FFFFFFFC
   699 = FFFFFFFB		GRNOLOADMEM	= $FFFFFFFB
   700 = FFFFFFFA		GRNOSCANMEM	= $FFFFFFFA
   701 = FFFFFFF9		GRNOFLOODMEM	= $FFFFFFF9
   702 = FFFFFFF8		GRFONTNOTFOUND	= $FFFFFFF8
   703 = FFFFFFF7		GRNOFONTMEM	= $FFFFFFF7
   704 = FFFFFFF6		GRINVALIDMODE	= $FFFFFFF6
   705 = FFFFFFF5		GRERROR	= $FFFFFFF5
   706 = FFFFFFF4		GRIOERROR	= $FFFFFFF4
   707 = FFFFFFF3		GRINVALIDFONT	= $FFFFFFF3
   708 = FFFFFFF2		GRINVALIDFONTNUM	= $FFFFFFF2
   709 = FFFFFFEE		GRINVALIDVERSION	= $FFFFFFEE
   710 = 0000			CGAC0	= $0000
   711 = 0001			CGAC1	= $0001
   712 = 0002			CGAC2	= $0002
   713 = 0003			CGAC3	= $0003
   714 = 0004			CGAHI	= $0004
   715 = 0000			MCGAC0	= $0000
   716 = 0001			MCGAC1	= $0001
   717 = 0002			MCGAC2	= $0002
   718 = 0003			MCGAC3	= $0003
   719 = 0004			MCGAMED	= $0004
   720 = 0005			MCGAHI	= $0005
   721 = 0000			EGALO	= $0000
   722 = 0001			EGAHI	= $0001
   723 = 0000			EGA64LO	= $0000
   724 = 0001			EGA64HI	= $0001
   725 = 0003			EGAMONOHI	= $0003
   726 = 000A			VGALO	= $000A
   727 = 001F			VGAMED	= $001F
   728 = 0018			VGAHI	= $0018
   729 = 26DD			WIN_LEFT	= DATAORIGIN+$0016
   730 = 26DF			WIN_RIGHT	= DATAORIGIN+$0018
   731 = 26E1			WIN_TOP	= DATAORIGIN+$001A
   732 = 26E3			WIN_BOTTOM	= DATAORIGIN+$001C
   733 = 26E5			GRAPHRESULT	= DATAORIGIN+$001E
   734 = 26E6			GETCOLOR	= DATAORIGIN+$001F
   735 = 26E7			adr.LASTARCCOORDS	= DATAORIGIN+$0020
   736 25D2			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   737 = 26E7			LASTARCCOORDS.X	= DATAORIGIN+$0020
   738 = 26E9			LASTARCCOORDS.Y	= DATAORIGIN+$0022
   739 = 26EB			LASTARCCOORDS.XSTART	= DATAORIGIN+$0024
   740 = 26ED			LASTARCCOORDS.YSTART	= DATAORIGIN+$0026
   741 = 26EF			LASTARCCOORDS.XEND	= DATAORIGIN+$0028
   742 = 26F1			LASTARCCOORDS.YEND	= DATAORIGIN+$002A
   743 = 26F3			CURRENTX	= DATAORIGIN+$002C
   744 = 26F5			CURRENTY	= DATAORIGIN+$002E
   745 = 26F7			VIDEORAM	= DATAORIGIN+$0030
   746 = 26F9			SCANLINE_WIDTH	= DATAORIGIN+$0032
   747
   748 = 25D2 E7 26		LASTARCCOORDS
   748 				.endl							; UNIT GRAPH
   749
   750 25D4			.local	MAINPROC					; PROCEDURE
   751
   752 				; AssignFile
   753
   754 				; optimize OK (examples\loop_effects.pas), line = 21
   755
   756 25D4 AD C3 26 85 90 AD + 	mwa F :bp2
   757 25DE A0 00			ldy #s@file.pfname
   758 25E0 A9 0D			lda #$0D
   759 25E2 91 90			sta (:bp2),y
   760 25E4 C8				iny
   761 25E5 A9 20			lda #$20
   762 25E7 91 90			sta (:bp2),y
   763
   764 				; optimize OK (examples\loop_effects.pas), line = 21
   765
   766 25E9 A0 05			ldy #s@file.status
   767 25EB A9 00			lda #$00
   768 25ED 91 90			sta (:bp2),y
   769 				; Rewrite
   770
   771 				; optimize OK (examples\loop_effects.pas), line = 21
   772
   773 25EF A0 02			ldy #s@file.record
   774 25F1 A9 01			lda #$01
   775 25F3 91 90			sta (:bp2),y
   776 25F5 C8				iny
   777 25F6 A9 00			lda #$00
   778 25F8 91 90			sta (:bp2),y
   779
   780 25FA 8A 48			txa:pha
   781 25FC 38				sec
   782 					@openfile F, #8
   782 				 LDY F+1\ LDA F\ LDX# 8\ JSR @OPENFILE
   782 25FD AC C4 26		 LDY F+1
   782 2600 AD C3 26		 LDA F
   782 2603 A2 08		 LDX# 8
   782 2605 20 48 20		 JSR @OPENFILE
   783 2608 68 AA			pla:tax
   784
   785 				; optimize FAIL ('GRAPH.INITGRAPH_0083', examples\loop_effects.pas), line = 22
   786 260A E8				inx
   787 260B A9 02 95 98			mva #$02 :STACKORIGIN,x
   788 260F 20 59 25			jsr GRAPH.INITGRAPH_0083
   789
   790 				; --- RepeatUntilProlog
   791 2612			l_00DC
   792
   793 				; optimize FAIL ('CRT.GOTOXY', examples\loop_effects.pas), line = 24
   794 2612 E8				inx
   795 2613 A9 08 95 98			mva #$08 :STACKORIGIN,x
   796 2617 E8				inx
   797 2618 A9 06 95 98			mva #$06 :STACKORIGIN,x
   798 261C 20 3C 25			jsr CRT.GOTOXY
   799
   800 				; optimize FAIL ('SYSTEM.RANDOM_0018', examples\loop_effects.pas), line = 25
   801 261F E8				inx
   802 2620 A9 FF 95 98			mva #$FF :STACKORIGIN,x
   803 2624 20 CC 24			jsr SYSTEM.RANDOM_0018
   804 2627 B5 98 8D 07 28		mva :STACKORIGIN,x I
   805 262C CA				dex
   806
   807 				; optimize FAIL ('SYSUTILS.INTTOSTR', examples\loop_effects.pas), line = 26
   808 262D E8				inx
   809 262E AD 07 28 95 98		mva I :STACKORIGIN,x
   810 2633 20 25 20			jsr @expandToCARD.BYTE
   811 2636 20 05 25			jsr SYSUTILS.INTTOSTR
   812 					@moveSTRING STRBUFFER
   812 				 LDY STRBUFFER+1\ LDA STRBUFFER\ JSR @MOVESTRING
   812 2639 AC C6 26		 LDY STRBUFFER+1
   812 263C AD C5 26		 LDA STRBUFFER
   812 263F 20 95 23		 JSR @MOVESTRING
   813 2642 CA				dex						; sub bx, 1
   814 				; BlockWrite
   815
   816 				; optimize OK (examples\loop_effects.pas), line = 27
   817
   818 2643 AD C3 26 85 90 AD + 	mwa F :bp2
   819 264D A0 06			ldy #s@file.buffer
   820 264F AD C5 26			lda STRBUFFER
   821 2652 18 69 01			add #$01
   822 2655 91 90			sta (:bp2),y
   823 2657 C8				iny
   824 2658 AD C6 26			lda STRBUFFER+1
   825 265B 69 00			adc #$00
   826 265D 91 90			sta (:bp2),y
   827
   828 				; optimize OK (examples\loop_effects.pas), line = 27
   829
   830 265F AD C5 26 85 90 AD + 	mwa STRBUFFER :bp2
   831 2669 A0 00			ldy #0
   832 266B B1 90			lda (:bp2),y
   833 266D AC C3 26 84 90 AC + 	mwy F :bp2
   834 2677 A0 08			ldy #s@file.nrecord
   835 2679 91 90			sta (:bp2),y
   836 267B C8				iny
   837 267C A9 00			lda #$00
   838 267E 91 90			sta (:bp2),y
   839
   840 2680 8A 48			txa:pha
   841 2682 38				sec
   842 					@readfile F, #11
   842 				 LDY F+1\ LDA F\ LDX# 11\ JSR @READFILE
   842 2683 AC C4 26		 LDY F+1
   842 2686 AD C3 26		 LDA F
   842 2689 A2 0B		 LDX# 11
   842 268B 20 1C 21		 JSR @READFILE
   843 268E 68 AA			pla:tax
   844
   845 				; optimize OK (examples\loop_effects.pas), line = 28
   846
   847 2690 AD 07 28			lda I
   848 2693 8D C6 02			sta $02C6
   849
   850 				; optimize OK (examples\loop_effects.pas), line = 29
   851
   852 2696 A9 00			lda #$00
   853 2698 D0 03 4C 12 26		jeq l_00DC
   854
   855 				; ------------------------------------------------------------
   856
   857 = 2807			I	= DATAORIGIN+$0140
   858
   859 = 2807			@VarData	= I
   860 = 0001			@VarDataSize	= 1
   861
   862 269D			@exit
   863 					.ifdef @new
   864 					@FreeMem #@VarData #@VarDataSize
   865 					eif
   866 269D 60				rts						; ret
   867 				.endl
   868 269E			l_0018
   869
   870 				; optimize FAIL ('MAINPROC', examples\loop_effects.pas), line = 33
   871 269E 20 D4 25			jsr MAINPROC
   872 				; CloseFile
   873
   874 26A1 8A 48			txa:pha
   875 26A3 38				sec
   876 					@closefile F
   876 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
   876 26A4 AC C4 26		 LDY F+1
   876 26A7 AD C3 26		 LDA F
   876 26AA 20 EF 20		 JSR @CLOSEFILE
   877 26AD 68 AA			pla:tax
   878
   879 				; ------------------------------------------------------------
   880
   881 26AF			.var F	= DATAORIGIN+$0034 .word
   882 = 2707			adr.STRBUFFER	= DATAORIGIN+$0040
   883 26AF			.var STRBUFFER	= adr.STRBUFFER .word
   884 26AF			@exit
   885
   886 26AF A2 00		@halt	ldx #0
   887 26B1 9A				txs
   888
   889 26B2 60				rts
   890
   891 				; ------------------------------------------------------------
   892
   893 26B3 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   894
   895 				; ------------------------------------------------------------
   896
   897 26C3			.local	@DEFINES
   898 26C3			ATARI
   899 				.endl
   900
   901 = 26C3 FB 26		F
   901 = 26C5 07 27		STRBUFFER
   901 				.endl							; MAIN
   902
   903 				; ------------------------------------------------------------
   904 				; ------------------------------------------------------------
   905
   906 				.macro	UNITINITIALIZATION
   907 				
   908 					.ifdef MAIN.SYSTEM.@UnitInit
   909 					jsr MAIN.SYSTEM.@UnitInit
   910 					eif
   911 				
   912 					.ifdef MAIN.DOS.@UnitInit
   913 					jsr MAIN.DOS.@UnitInit
   914 					eif
   915 				
   916 					.ifdef MAIN.STRUTILS.@UnitInit
   917 					jsr MAIN.STRUTILS.@UnitInit
   918 					eif
   919 				
   920 					.ifdef MAIN.SYSUTILS.@UnitInit
   921 					jsr MAIN.SYSUTILS.@UnitInit
   922 					eif
   923 				
   924 					.ifdef MAIN.ATARI.@UnitInit
   925 					jsr MAIN.ATARI.@UnitInit
   926 					eif
   927 				
   928 					.ifdef MAIN.CRT.@UnitInit
   929 					jsr MAIN.CRT.@UnitInit
   930 					eif
   931 				
   932 					.ifdef MAIN.TYPES.@UnitInit
   933 					jsr MAIN.TYPES.@UnitInit
   934 					eif
   935 				
   936 					.ifdef MAIN.GRAPH.@UnitInit
   937 					jsr MAIN.GRAPH.@UnitInit
   938 					eif
   939 				.endm
   940
   941 				; ------------------------------------------------------------
   942
   943 					ift .SIZEOF(MAIN.SYSTEM) > 0
   944 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   944 				SYSTEM: $24CC..$2504
   945 					eif
   946
   947 					ift .SIZEOF(MAIN.DOS) > 0
   948 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   949 					eif
   950
   951 					ift .SIZEOF(MAIN.STRUTILS) > 0
   952 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   953 					eif
   954
   955 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   956 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   956 				SYSUTILS: $2505..$253B
   957 					eif
   958
   959 					ift .SIZEOF(MAIN.ATARI) > 0
   960 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   961 					eif
   962
   963 					ift .SIZEOF(MAIN.CRT) > 0
   964 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   964 				CRT: $253C..$2558
   965 					eif
   966
   967 					ift .SIZEOF(MAIN.TYPES) > 0
   968 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
   969 					eif
   970
   971 					ift .SIZEOF(MAIN.GRAPH) > 0
   972 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
   972 				GRAPH: $2559..$25D3
   973 					eif
   974
   975 					.print 'CODE: ',CODEORIGIN,'..',*-1
   975 				CODE: $2000..$26C6
   976
   977 				; ------------------------------------------------------------
   978
   979 26C7			DATAORIGIN
   980 26C7 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   981 26DF 27 00 00 00 17	.by  $27 $00 $00 $00 $17
   982
   983 = 001D			VARINITSIZE	= *-DATAORIGIN
   984 = 0141			VARDATASIZE	= 321
   985
   986 = 2808			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   987
   988 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   988 				DATA: $26C7..$2808
   989
   990 02E0-02E1> A0 24			run START
   991
   992 				; ------------------------------------------------------------
   993
   994 				.macro	STATICDATA
   995 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $02 $53 $3A  $00
   996 				.endm
   997
   998 					end
