mads 2.1.0 build 8 (23 Dec 19)
   388 					opt l+
   101
   102 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   102 				ZPAGE: $0080..$00D7
   103
   104 				.print 'RTLIB: ',RTLIB,'..',*-1
   104 				RTLIB: $20A1..$2148
   105
   106 				; ------------------------------------------------------------
   107
   108 2149			START
   109 2149 BA				tsx
   110 214A 8E A9 23			stx MAIN.@halt+1
   111
   112 					.ifdef fmulinit
   113 					fmulinit
   114 					eif
   115
   116 = 0210			VLEN	= VARDATASIZE-VARINITSIZE
   117 = 23C6			VADR	= DATAORIGIN+VARINITSIZE
   118
   119 					ift VADR > $BFFF
   120 					ert 'Invalid memory address range ',VADR
   121 					eli (VLEN>0) && (VLEN<=256)
   122 					ldx #256-VLEN
   123 					lda #0
   124 					sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>0
   126 					@fill #VADR #VLEN #0
   126 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   126 214D A9 C6 85 88 A9 23 +  MWA #VADR @FILL.PTR1
   126 2155 A9 10 85 8C A9 02 +  MWA #VLEN @FILL.PTR3
   126 215D A9 00 85 84		 MVA #0 @FILL.PTR2
   126 2161 20 C4 20		 JSR @FILL
   127 					eif
   128
   129 					.ifdef MAIN.@DEFINES.ROMOFF
   130 					icl 'atari\romoff.asm'
   131 					.endif
   132
   133 2164 A9 D6 85 82 A9 25 + 	mwa #PROGRAMSTACK psptr
   134
   135 216C A2 0F			ldx #$0f					; DOS II+/D ParamStr
   136 216E BD 40 03 9D AC 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   137
   138 2177 E8				inx						; X = 0
   139 2178 86 90			stx bp						; BP = 0
   140
   141 217A 8E 08 D2			stx audctl					; reset POKEY
   142 217D A9 03			lda #3
   143 217F 8D 0F D2			sta skctl
   144
   145 2182 CA				dex						; X = 255
   146
   147 2183				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: inputsd.a65]
Source: inputsd.a65
   148
   149 2183			.local	MAIN						; PROCEDURE
   150
   151 2183 4C A5 23			jmp l_00A8
   152
   153 				; ------------------------------------------------------------
   154
   155 2186			.local	SYSTEM						; UNIT
   156
   157 				; ------------------------------------------------------------
   158
   159 = 0101			__PORTB_BANKS	= $0101
   160 = 0648			M_PI_2	= $0648
   161 = 0192			D_PI_2	= $0192
   162 = 0004			D_PI_180	= $04
   163 = 0000			MGTIA	= $00
   164 = 0080			MVBXE	= $80
   165 = 0000			VBXE_XDLADR	= $00
   166 = 0100			VBXE_BCBADR	= $0100
   167 = 1000			VBXE_MAPADR	= $1000
   168 = 5000			VBXE_OVRADR	= $5000
   169 = B000			VBXE_WINDOW	= $B000
   170 = 0000			IDLI	= $00
   171 = 0001			IVBL	= $01
   172 = 00FE			CH_DELCHR	= $FE
   173 = 009B			CH_ENTER	= $9B
   174 = 001B			CH_ESC	= $1B
   175 = 001C			CH_CURS_UP	= $1C
   176 = 001D			CH_CURS_DOWN	= $1D
   177 = 001E			CH_CURS_LEFT	= $1E
   178 = 001F			CH_CURS_RIGHT	= $1F
   179 = 007F			CH_TAB	= $7F
   180 = 009B			CH_EOL	= $9B
   181 = 007D			CH_CLR	= $7D
   182 = 00FD			CH_BELL	= $FD
   183 = 007E			CH_DEL	= $7E
   184 = 009C			CH_DELLINE	= $9C
   185 = 009D			CH_INSLINE	= $9D
   186 = 0000			COLOR_BLACK	= $00
   187 = 000E			COLOR_WHITE	= $0E
   188 = 0032			COLOR_RED	= $32
   189 = 0096			COLOR_CYAN	= $96
   190 = 0068			COLOR_VIOLET	= $68
   191 = 00C4			COLOR_GREEN	= $C4
   192 = 0074			COLOR_BLUE	= $74
   193 = 00EE			COLOR_YELLOW	= $EE
   194 = 0028			COLOR_ORANGE	= $28
   195 = 00E4			COLOR_BROWN	= $E4
   196 = 003C			COLOR_LIGHTRED	= $3C
   197 = 0004			COLOR_GRAY1	= $04
   198 = 0006			COLOR_GRAY2	= $06
   199 = 000A			COLOR_GRAY3	= $0A
   200 = 00CC			COLOR_LIGHTGREEN	= $CC
   201 = 007C			COLOR_LIGHTBLUE	= $7C
   202 = 0004			FMOPENREAD	= $04
   203 = 0008			FMOPENWRITE	= $08
   204 = 0009			FMOPENAPPEND	= $09
   205 = 000C			FMOPENREADWRITE	= $0C
   206 = 23C0			SCREENWIDTH	= DATAORIGIN+$0000
   207 = 23C2			SCREENHEIGHT	= DATAORIGIN+$0002
   208 = 23C4			DATESEPARATOR	= DATAORIGIN+$0004
   209 = D014			TVSYSTEM	= $D014
   210 = 02C0			adr.PALETTE	= $02C0
   211 2186			.var PALETTE	= adr.PALETTE .word
   212 = D012			adr.HPALETTE	= $D012
   213 2186			.var HPALETTE	= adr.HPALETTE .word
   214 = 23C5			FILEMODE	= DATAORIGIN+$0005
   215 = 23C6			GRAPHMODE	= DATAORIGIN+$0006
   216 = 23C7			IORESULT	= DATAORIGIN+$0007
   217 = 23C8			EOLN	= DATAORIGIN+$0008
   218 = 23C9			RNDSEED	= DATAORIGIN+$0009
   219
   220 = 2186 C0 02		PALETTE
   220 = 2188 12 D0		HPALETTE
   220 				.endl							; UNIT SYSTEM
   221
   222 				; ------------------------------------------------------------
   223
   224 218A			.local	ATARI						; UNIT
   225
   226 				; ------------------------------------------------------------
   227
   228 = 0012			RTCLOK	= $12
   229 = 004D			ATRACT	= $4D
   230 = 0052			LMARGIN	= $52
   231 = 0053			RMARGIN	= $53
   232 = 0054			ROWCRS	= $54
   233 = 0055			COLCRS	= $55
   234 = 0057			DINDEX	= $57
   235 = 0058			SAVMSC	= $58
   236 = 0062			PALNTS	= $62
   237 = 006A			RAMTOP	= $6A
   238 = 0200			VDSLST	= $0200
   239 = 0230			SDLSTL	= $0230
   240 = 0290			TXTROW	= $0290
   241 = 0291			TXTCOL	= $0291
   242 = 0293			TINDEX	= $0293
   243 = 0294			TXTMSC	= $0294
   244 = 022F			SDMCTL	= $022F
   245 = 026F			GPRIOR	= $026F
   246 = 02F0			CRSINH	= $02F0
   247 = 02F3			CHACT	= $02F3
   248 = 02F4			CHBAS	= $02F4
   249 = 02FC			CH	= $02FC
   250 = 02C0			PCOLR0	= $02C0
   251 = 02C1			PCOLR1	= $02C1
   252 = 02C2			PCOLR2	= $02C2
   253 = 02C3			PCOLR3	= $02C3
   254 = 02C4			COLOR0	= $02C4
   255 = 02C5			COLOR1	= $02C5
   256 = 02C6			COLOR2	= $02C6
   257 = 02C7			COLOR3	= $02C7
   258 = 02C8			COLOR4	= $02C8
   259 = 02C8			COLBAKS	= $02C8
   260 = D000			HPOSP0	= $D000
   261 = D001			HPOSP1	= $D001
   262 = D002			HPOSP2	= $D002
   263 = D003			HPOSP3	= $D003
   264 = D004			HPOSM0	= $D004
   265 = D005			HPOSM1	= $D005
   266 = D006			HPOSM2	= $D006
   267 = D007			HPOSM3	= $D007
   268 = D008			SIZEP0	= $D008
   269 = D009			SIZEP1	= $D009
   270 = D00A			SIZEP2	= $D00A
   271 = D00B			SIZEP3	= $D00B
   272 = D00C			SIZEM	= $D00C
   273 = D00D			GRAFP0	= $D00D
   274 = D00E			GRAFP1	= $D00E
   275 = D00F			GRAFP2	= $D00F
   276 = D010			GRAFP3	= $D010
   277 = D011			GRAFM	= $D011
   278 = D004			P0PF	= $D004
   279 = D014			PAL	= $D014
   280 = D012			COLPM0	= $D012
   281 = D013			COLPM1	= $D013
   282 = D014			COLPM2	= $D014
   283 = D015			COLPM3	= $D015
   284 = D016			COLPF0	= $D016
   285 = D017			COLPF1	= $D017
   286 = D018			COLPF2	= $D018
   287 = D019			COLPF3	= $D019
   288 = D01A			COLBK	= $D01A
   289 = D01B			PRIOR	= $D01B
   290 = D01D			GRACTL	= $D01D
   291 = D01E			HITCLR	= $D01E
   292 = D200			AUDF1	= $D200
   293 = D201			AUDC1	= $D201
   294 = D202			AUDF2	= $D202
   295 = D203			AUDC2	= $D203
   296 = D204			AUDF3	= $D204
   297 = D205			AUDC3	= $D205
   298 = D206			AUDF4	= $D206
   299 = D207			AUDC4	= $D207
   300 = D208			AUDCTL	= $D208
   301 = D20F			SKSTAT	= $D20F
   302 = D301			PORTB	= $D301
   303 = D400			DMACTL	= $D400
   304 = D401			CHACTL	= $D401
   305 = D402			DLISTL	= $D402
   306 = D404			HSCROL	= $D404
   307 = D405			VSCROL	= $D405
   308 = D407			PMBASE	= $D407
   309 = D409			CHBASE	= $D409
   310 = D40A			WSYNC	= $D40A
   311 = D40B			VCOUNT	= $D40B
   312 = D40C			PENH	= $D40C
   313 = D40D			PENV	= $D40D
   314 = D40E			NMIEN	= $D40E
   315
   316 				.endl							; UNIT ATARI
   317
   318 				; ------------------------------------------------------------
   319
   320 218A			.local	CRT						; UNIT
   321
   322 218A			.local	READKEY						; FUNCTION | ASSEMBLER
   323
   324 				; ---------------------  ASM Block 049  ---------------------
   325
   326 218A 8A 48			txa:pha
   327
   328 218C 20 A1 20			@GetKey
   329
   330 218F 8D CC 23			sta Result
   331
   332 2192 68 AA			pla:tax
   333
   334 2194			@exit
   335
   336 				; ------------------------------------------------------------
   337
   338 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   339 				; as Pointer
   340
   341 2194 E8				inx
   342 2195 AD CC 23 95 98		mva RESULT :STACKORIGIN,x
   343
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					eif
   351
   352 				; ------------------------------------------------------------
   353
   354 = 23CC			RESULT	= DATAORIGIN+$000C
   355
   356 = 23CC			@VarData	= RESULT
   357 = 0001			@VarDataSize	= 1
   358
   359 219A 60				rts						; ret
   360 				.endl
   361
   362 				; ------------------------------------------------------------
   363
   364 = 23CB			TEXTATTR	= DATAORIGIN+$000B
   365 = D01F			CONSOL	= $D01F
   366 = 0000			CN_START_SELECT_OPTION	= $00
   367 = 0001			CN_SELECT_OPTION	= $01
   368 = 0002			CN_START_OPTION	= $02
   369 = 0003			CN_OPTION	= $03
   370 = 0004			CN_START_SELECT	= $04
   371 = 0005			CN_SELECT	= $05
   372 = 0006			CN_START	= $06
   373 = 0007			CN_NONE	= $07
   374 = 0000			BW40	= $00
   375 = 0001			CO40	= $01
   376 = 0002			BW80	= $02
   377 = 0003			CO80	= $03
   378 = 0007			MONO	= $07
   379 = 0001			C40	= $01
   380 = 0003			C80	= $03
   381 = 0000			BLACK	= $00
   382 = 0001			BLUE	= $01
   383 = 0002			GREEN	= $02
   384 = 0003			CYAN	= $03
   385 = 0004			RED	= $04
   386 = 0005			MAGENTA	= $05
   387 = 0006			BROWN	= $06
   388 = 0007			LIGHTGRAY	= $07
   389 = 0008			DARKGRAY	= $08
   390 = 0009			LIGHTBLUE	= $09
   391 = 000A			LIGHTGREEN	= $0A
   392 = 000B			LIGHTCYAN	= $0B
   393 = 000C			LIGHTRED	= $0C
   394 = 000D			LIGHTMAGENTA	= $0D
   395 = 000E			YELLOW	= $0E
   396 = 000F			WHITE	= $0F
   397 = 0080			BLINK	= $80
   398
   399 				.endl							; UNIT CRT
   400
   401 				; ------------------------------------------------------------
   402
   403 219B			.local	DOS						; UNIT
   404
   405 				; ------------------------------------------------------------
   406
   407 = D014			PALNTSC	= $D014
   408
   409 				.endl							; UNIT DOS
   410
   411 				; ------------------------------------------------------------
   412
   413 219B			.local	STRUTILS					; UNIT
   414
   415 				; ------------------------------------------------------------
   416
   417 				.endl							; UNIT STRUTILS
   418
   419 				; ------------------------------------------------------------
   420
   421 219B			.local	SYSUTILS					; UNIT
   422
   423 				; ------------------------------------------------------------
   424
   425 = 0001			FAREADONLY	= $01
   426 = 0002			FAHIDDEN	= $02
   427 = 0004			FASYSFILE	= $04
   428 = 0008			FAVOLUMEID	= $08
   429 = 0010			FADIRECTORY	= $10
   430 = 0020			FAARCHIVE	= $20
   431 = 003F			FAANYFILE	= $3F
   432
   433 				.endl							; UNIT SYSUTILS
   434
   435 				; ------------------------------------------------------------
   436
   437 219B			.local	CIO						; UNIT
   438
   439 219B			.local	OPN						; PROCEDURE | ASSEMBLER
   440
   441 				; ------------------------------------------------------------
   442
   443 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   444 				; as Pointer
   445 219B B5 98 8D D0 23		mva :STACKORIGIN,x DEVICE
   446 21A0 B5 A8 8D D1 23		mva :STACKORIGIN+STACKWIDTH,x DEVICE+1
   447 21A5 CA				dex
   448
   449 				; ------------------------------------------------------------
   450
   451 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   452 				; as Pointer
   453 21A6 B5 98 8D CF 23		mva :STACKORIGIN,x AX2
   454 21AB CA				dex
   455
   456 				; ------------------------------------------------------------
   457
   458 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   459 				; as Pointer
   460 21AC B5 98 8D CE 23		mva :STACKORIGIN,x AX1
   461 21B1 CA				dex
   462
   463 				; ------------------------------------------------------------
   464
   465 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   466 				; as Pointer
   467 21B2 B5 98 8D CD 23		mva :STACKORIGIN,x CHN
   468 21B7 CA				dex
   469
   470 				; ---------------------  ASM Block 078  ---------------------
   471
   472 21B8 8A 48			txa:pha
   473
   474 21BA AD CD 23			lda chn
   475 21BD 0A 0A 0A 0A			:4 asl @
   476 21C1 AA				tax
   477
   478 21C2 A9 03			lda #$03		;komenda: OPEN
   479 21C4 9D 42 03			sta iccmd,x
   480
   481 21C7 EE D0 23 D0 03 EE + 	inw device		;omin bajt z dlugoscia STRING-a
   482
   483 21CF AD D0 23			lda device		;adres nazwy pliku
   484 21D2 9D 44 03			sta icbufa,x
   485 21D5 AD D1 23			lda device+1
   486 21D8 9D 45 03			sta icbufa+1,x
   487
   488 21DB AD CE 23			lda ax1			;kod dostepu: $04 odczyt, $08 zapis, $09 dopisywanie, $0c odczyt/zapis, $0d odczyt/dopisywanie
   489 21DE 9D 4A 03			sta icax1,x
   490
   491 21E1 AD CF 23			lda ax2			;dodatkowy parametr, $00 jest zawsze dobre
   492 21E4 9D 4B 03			sta icax2,x
   493
   494 21E7				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 21E7 20 56 E4				jsr CIOV
Source: inputsd.a65
   495
   496 21EA 8C C7 23			sty MAIN.SYSTEM.IOResult
   497
   498 21ED 68 AA			pla:tax
   499
   500
   501 				; ------------------------------------------------------------
   502
   503 = 23CD			CHN	= DATAORIGIN+$000D
   504 = 23CE			AX1	= DATAORIGIN+$000E
   505 = 23CF			AX2	= DATAORIGIN+$000F
   506 = 23D0			DEVICE	= DATAORIGIN+$0010
   507
   508 = 23CD			@VarData	= CHN
   509 = 0005			@VarDataSize	= 5
   510
   511 21EF			@exit
   512 					.ifdef @new
   513 					lda <@VarData
   514 					sta :ztmp
   515 					lda >@VarData
   516 					ldy #@VarDataSize-1
   517 					jmp @FreeMem
   518 					eif
   519 21EF 60				rts						; ret
   520 				.endl
   521
   522 21F0			.local	CLS						; PROCEDURE | ASSEMBLER
   523
   524 				; ------------------------------------------------------------
   525
   526 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   527 				; as Pointer
   528 21F0 B5 98 8D D2 23		mva :STACKORIGIN,x CHN
   529 21F5 CA				dex
   530
   531 				; ---------------------  ASM Block 079  ---------------------
   532
   533 21F6 8A 48			txa:pha
   534
   535 21F8 AD D2 23			lda chn
   536 21FB 0A 0A 0A 0A			:4 asl @
   537 21FF AA				tax
   538
   539 2200 A9 0C			lda #$0c		;komenda: CLOSE
   540 2202 9D 42 03			sta iccmd,x
   541
   542 2205				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 2205 20 56 E4				jsr CIOV
Source: inputsd.a65
   543
   544 2208 8C C7 23			sty MAIN.SYSTEM.IOResult
   545
   546 220B 68 AA			pla:tax
   547
   548
   549 				; ------------------------------------------------------------
   550
   551 = 23D2			CHN	= DATAORIGIN+$0012
   552
   553 = 23D2			@VarData	= CHN
   554 = 0001			@VarDataSize	= 1
   555
   556 220D			@exit
   557 					.ifdef @new
   558 					lda <@VarData
   559 					sta :ztmp
   560 					lda >@VarData
   561 					ldy #@VarDataSize-1
   562 					jmp @FreeMem
   563 					eif
   564 220D 60				rts						; ret
   565 				.endl
   566
   567 220E			.local	GET						; FUNCTION | ASSEMBLER
   568
   569 				; ------------------------------------------------------------
   570
   571 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   572 				; as Pointer
   573 220E B5 98 8D D3 23		mva :STACKORIGIN,x CHN
   574 2213 CA				dex
   575
   576 				; ---------------------  ASM Block 080  ---------------------
   577
   578 2214 8A 48			txa:pha
   579
   580 2216 AD D3 23			lda chn
   581 2219 0A 0A 0A 0A			:4 asl @
   582 221D AA				tax
   583
   584 221E A9 07			lda #7		;get char command
   585 2220 9D 42 03			sta iccmd,x
   586
   587 2223 A9 00			lda #$00	;zero out the unused
   588 2225 9D 48 03			sta icbufl,x	;store in accumulator
   589 2228 9D 49 03			sta icbufh,x	;...after CIOV jump
   590
   591 222B				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 222B 20 56 E4				jsr CIOV
Source: inputsd.a65
   592
   593 222E 8C C7 23			sty MAIN.SYSTEM.IOResult
   594
   595 2231 8D D4 23			sta Result
   596
   597 2234 68 AA			pla:tax
   598
   599 2236			@exit
   600
   601 				; ------------------------------------------------------------
   602
   603 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   604 				; as Pointer
   605
   606 2236 E8				inx
   607 2237 AD D4 23 95 98		mva RESULT :STACKORIGIN,x
   608
   609 					.ifdef @new
   610 					lda <@VarData
   611 					sta :ztmp
   612 					lda >@VarData
   613 					ldy #@VarDataSize-1
   614 					jmp @FreeMem
   615 					eif
   616
   617 				; ------------------------------------------------------------
   618
   619 = 23D3			CHN	= DATAORIGIN+$0013
   620 = 23D4			RESULT	= DATAORIGIN+$0014
   621
   622 = 23D3			@VarData	= CHN
   623 = 0002			@VarDataSize	= 2
   624
   625 223C 60				rts						; ret
   626 				.endl
   627
   628 223D			.local	BGET						; PROCEDURE | ASSEMBLER | REGISTER
   629
   630 				; ------------------------------------------------------------
   631
   632 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   633 				; as Pointer
   634 223D B5 98 85 84			mva :STACKORIGIN,x CNT
   635 2241 B5 A8 85 85			mva :STACKORIGIN+STACKWIDTH,x CNT+1
   636 2245 CA				dex
   637
   638 				; ------------------------------------------------------------
   639
   640 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   641 				; as Pointer
   642 2246 B5 98 85 8C			mva :STACKORIGIN,x BUF
   643 224A B5 A8 85 8D			mva :STACKORIGIN+STACKWIDTH,x BUF+1
   644 224E CA				dex
   645
   646 				; ------------------------------------------------------------
   647
   648 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   649 				; as Pointer
   650 224F B5 98 85 88			mva :STACKORIGIN,x CHN
   651 2253 CA				dex
   652
   653 				; ---------------------  ASM Block 081  ---------------------
   654
   655 2254 8A 48			txa:pha
   656
   657 2256 A5 88			lda chn
   658 2258 0A 0A 0A 0A			:4 asl @
   659 225C AA				tax
   660
   661 225D A9 07			lda #7		;get char/s command
   662 225F 9D 42 03			sta iccmd,x
   663
   664 2262 A5 8C			lda buf
   665 2264 9D 44 03			sta icbufa,x
   666 2267 A5 8D			lda buf+1
   667 2269 9D 45 03			sta icbufa+1,x
   668
   669 226C A5 84			lda cnt
   670 226E 9D 48 03			sta icbufl,x
   671 2271 A5 85			lda cnt+1
   672 2273 9D 49 03			sta icbufh,x
   673
   674 2276				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 2276 20 56 E4				jsr CIOV
Source: inputsd.a65
   675
   676 2279 8C C7 23			sty MAIN.SYSTEM.IOResult
   677
   678 227C 68 AA			pla:tax
   679
   680
   681 				; ------------------------------------------------------------
   682
   683 = 0088			CHN	= edx
   684 = 008C			BUF	= ecx
   685 = 0084			CNT	= eax
   686 227E			@exit
   687 					.ifdef @new
   688 					lda <@VarData
   689 					sta :ztmp
   690 					lda >@VarData
   691 					ldy #@VarDataSize-1
   692 					jmp @FreeMem
   693 					eif
   694 227E 60				rts						; ret
   695 				.endl
   696
   697 				; ------------------------------------------------------------
   698
   699 				.endl							; UNIT CIO
   700
   701 227F			.local	MAINPROC					; PROCEDURE
   702
   703 				; optimize FAIL (100, examples\inputsd.pas), line = 21
   704 					@print #$7D
   704 				 LDY# $7D\ JSR @PRINT
   704 227F A0 7D		 LDY# $7D
   704 2281 20 11 21		 JSR @PRINT
   705
   706 				; optimize FAIL (100, examples\inputsd.pas), line = 22
   707 					@printSTRING #CODEORIGIN+$000D
   707 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   707 2284 A0 20		 LDY> CODEORIGIN+$000D
   707 2286 A9 0D		 LDA< CODEORIGIN+$000D
   707 2288 20 1A 21		 JSR @PRINTSTRING
   708 228B 20 0C 21			@printEOL
   709
   710 				; optimize FAIL (100, examples\inputsd.pas), line = 23
   711 					@printSTRING #CODEORIGIN+$001E
   711 				 LDY> CODEORIGIN+$001E\ LDA< CODEORIGIN+$001E\ JSR @PRINTSTRING
   711 228E A0 20		 LDY> CODEORIGIN+$001E
   711 2290 A9 1E		 LDA< CODEORIGIN+$001E
   711 2292 20 1A 21		 JSR @PRINTSTRING
   712 2295 20 0C 21			@printEOL
   713
   714 				; optimize FAIL (100, examples\inputsd.pas), line = 24
   715 					@printSTRING #CODEORIGIN+$0044
   715 				 LDY> CODEORIGIN+$0044\ LDA< CODEORIGIN+$0044\ JSR @PRINTSTRING
   715 2298 A0 20		 LDY> CODEORIGIN+$0044
   715 229A A9 44		 LDA< CODEORIGIN+$0044
   715 229C 20 1A 21		 JSR @PRINTSTRING
   716 229F 20 0C 21			@printEOL
   717
   718 				; optimize FAIL (100, examples\inputsd.pas), line = 25
   719 					@printSTRING #CODEORIGIN+$0057
   719 				 LDY> CODEORIGIN+$0057\ LDA< CODEORIGIN+$0057\ JSR @PRINTSTRING
   719 22A2 A0 20		 LDY> CODEORIGIN+$0057
   719 22A4 A9 57		 LDA< CODEORIGIN+$0057
   719 22A6 20 1A 21		 JSR @PRINTSTRING
   720 22A9 20 0C 21			@printEOL
   721
   722 				; optimize FAIL (100, examples\inputsd.pas), line = 26
   723 					@printSTRING #CODEORIGIN+$0059
   723 				 LDY> CODEORIGIN+$0059\ LDA< CODEORIGIN+$0059\ JSR @PRINTSTRING
   723 22AC A0 20		 LDY> CODEORIGIN+$0059
   723 22AE A9 59		 LDA< CODEORIGIN+$0059
   723 22B0 20 1A 21		 JSR @PRINTSTRING
   724 22B3 20 0C 21			@printEOL
   725
   726 				; optimize FAIL ('CIO.CLS', examples\inputsd.pas), line = 27
   727 22B6 E8				inx
   728 22B7 A9 01 95 98			mva #$01 :STACKORIGIN,x
   729 22BB 20 F0 21			jsr CIO.CLS
   730
   731 				; optimize FAIL ('CIO.OPN', examples\inputsd.pas), line = 28
   732 22BE E8				inx
   733 22BF A9 01 95 98			mva #$01 :STACKORIGIN,x
   734 22C3 E8				inx
   735 22C4 A9 04 95 98			mva #$04 :STACKORIGIN,x
   736 22C8 E8				inx
   737 22C9 A9 00 95 98			mva #$00 :STACKORIGIN,x
   738 22CD E8				inx
   739 22CE A9 70 95 98			mva #$70 :STACKORIGIN,x
   740 22D2 A9 20 95 A8			mva #$20 :STACKORIGIN+STACKWIDTH,x
   741 22D6 20 9B 21			jsr CIO.OPN
   742
   743 				; optimize FAIL (100, examples\inputsd.pas), line = 29
   744 					@printSTRING #CODEORIGIN+$0056
   744 				 LDY> CODEORIGIN+$0056\ LDA< CODEORIGIN+$0056\ JSR @PRINTSTRING
   744 22D9 A0 20		 LDY> CODEORIGIN+$0056
   744 22DB A9 56		 LDA< CODEORIGIN+$0056
   744 22DD 20 1A 21		 JSR @PRINTSTRING
   745 					@print #$9B
   745 				 LDY# $9B\ JSR @PRINT
   745 22E0 A0 9B		 LDY# $9B
   745 22E2 20 11 21		 JSR @PRINT
   746 					@printSTRING #CODEORIGIN+$007D
   746 				 LDY> CODEORIGIN+$007D\ LDA< CODEORIGIN+$007D\ JSR @PRINTSTRING
   746 22E5 A0 20		 LDY> CODEORIGIN+$007D
   746 22E7 A9 7D		 LDA< CODEORIGIN+$007D
   746 22E9 20 1A 21		 JSR @PRINTSTRING
   747 					@print #$9B
   747 				 LDY# $9B\ JSR @PRINT
   747 22EC A0 9B		 LDY# $9B
   747 22EE 20 11 21		 JSR @PRINT
   748 					@printSTRING #CODEORIGIN+$0056
   748 				 LDY> CODEORIGIN+$0056\ LDA< CODEORIGIN+$0056\ JSR @PRINTSTRING
   748 22F1 A0 20		 LDY> CODEORIGIN+$0056
   748 22F3 A9 56		 LDA< CODEORIGIN+$0056
   748 22F5 20 1A 21		 JSR @PRINTSTRING
   749
   750 				; optimize FAIL ('CIO.BGET', examples\inputsd.pas), line = 30
   751 22F8 E8				inx
   752 22F9 A9 01 95 98			mva #$01 :STACKORIGIN,x
   753 22FD E8				inx
   754 22FE AD BE 23 95 98		mva STR_BUFFER1 :STACKORIGIN,x
   755 2303 AD BF 23 95 A8		mva STR_BUFFER1+1 :STACKORIGIN+STACKWIDTH,x
   756 2308 E8				inx
   757 2309 A9 00 95 98			mva #$00 :STACKORIGIN,x
   758 230D A9 01 95 A8			mva #$01 :STACKORIGIN+STACKWIDTH,x
   759 2311 20 3D 22			jsr CIO.BGET
   760
   761 				; optimize FAIL (100, examples\inputsd.pas), line = 31
   762 					@printSTRING STR_BUFFER1
   762 				 LDY STR_BUFFER1+1\ LDA STR_BUFFER1\ JSR @PRINTSTRING
   762 2314 AC BF 23		 LDY STR_BUFFER1+1
   762 2317 AD BE 23		 LDA STR_BUFFER1
   762 231A 20 1A 21		 JSR @PRINTSTRING
   763 231D 20 0C 21			@printEOL
   764
   765 				; optimize FAIL ('CIO.CLS', examples\inputsd.pas), line = 32
   766 2320 E8				inx
   767 2321 A9 01 95 98			mva #$01 :STACKORIGIN,x
   768 2325 20 F0 21			jsr CIO.CLS
   769
   770 				; optimize FAIL ('CIO.OPN', examples\inputsd.pas), line = 33
   771 2328 E8				inx
   772 2329 A9 01 95 98			mva #$01 :STACKORIGIN,x
   773 232D E8				inx
   774 232E A9 04 95 98			mva #$04 :STACKORIGIN,x
   775 2332 E8				inx
   776 2333 A9 00 95 98			mva #$00 :STACKORIGIN,x
   777 2337 E8				inx
   778 2338 A9 70 95 98			mva #$70 :STACKORIGIN,x
   779 233C A9 20 95 A8			mva #$20 :STACKORIGIN+STACKWIDTH,x
   780 2340 20 9B 21			jsr CIO.OPN
   781
   782 				; optimize FAIL (100, examples\inputsd.pas), line = 34
   783 					@printSTRING #CODEORIGIN+$0056
   783 				 LDY> CODEORIGIN+$0056\ LDA< CODEORIGIN+$0056\ JSR @PRINTSTRING
   783 2343 A0 20		 LDY> CODEORIGIN+$0056
   783 2345 A9 56		 LDA< CODEORIGIN+$0056
   783 2347 20 1A 21		 JSR @PRINTSTRING
   784 					@print #$9B
   784 				 LDY# $9B\ JSR @PRINT
   784 234A A0 9B		 LDY# $9B
   784 234C 20 11 21		 JSR @PRINT
   785 					@printSTRING #CODEORIGIN+$008F
   785 				 LDY> CODEORIGIN+$008F\ LDA< CODEORIGIN+$008F\ JSR @PRINTSTRING
   785 234F A0 20		 LDY> CODEORIGIN+$008F
   785 2351 A9 8F		 LDA< CODEORIGIN+$008F
   785 2353 20 1A 21		 JSR @PRINTSTRING
   786 					@print #$9B
   786 				 LDY# $9B\ JSR @PRINT
   786 2356 A0 9B		 LDY# $9B
   786 2358 20 11 21		 JSR @PRINT
   787 					@printSTRING #CODEORIGIN+$0056
   787 				 LDY> CODEORIGIN+$0056\ LDA< CODEORIGIN+$0056\ JSR @PRINTSTRING
   787 235B A0 20		 LDY> CODEORIGIN+$0056
   787 235D A9 56		 LDA< CODEORIGIN+$0056
   787 235F 20 1A 21		 JSR @PRINTSTRING
   788
   789 				; optimize FAIL ('CIO.BGET', examples\inputsd.pas), line = 35
   790 2362 E8				inx
   791 2363 A9 01 95 98			mva #$01 :STACKORIGIN,x
   792 2367 E8				inx
   793 2368 AD BE 23 95 98		mva STR_BUFFER1 :STACKORIGIN,x
   794 236D AD BF 23 95 A8		mva STR_BUFFER1+1 :STACKORIGIN+STACKWIDTH,x
   795 2372 E8				inx
   796 2373 A9 FF 95 98			mva #$FF :STACKORIGIN,x
   797 2377 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   798 237B 20 3D 22			jsr CIO.BGET
   799
   800 				; optimize FAIL (100, examples\inputsd.pas), line = 36
   801 					@printSTRING STR_BUFFER1
   801 				 LDY STR_BUFFER1+1\ LDA STR_BUFFER1\ JSR @PRINTSTRING
   801 237E AC BF 23		 LDY STR_BUFFER1+1
   801 2381 AD BE 23		 LDA STR_BUFFER1
   801 2384 20 1A 21		 JSR @PRINTSTRING
   802 2387 20 0C 21			@printEOL
   803
   804 				; optimize FAIL ('CIO.CLS', examples\inputsd.pas), line = 37
   805 238A E8				inx
   806 238B A9 01 95 98			mva #$01 :STACKORIGIN,x
   807 238F 20 F0 21			jsr CIO.CLS
   808
   809 				; optimize FAIL ('CIO.GET', examples\inputsd.pas), line = 38
   810 2392 E8				inx
   811 2393 A9 07 95 98			mva #$07 :STACKORIGIN,x
   812 2397 20 0E 22			jsr CIO.GET
   813 239A B5 98 8D D5 24		mva :STACKORIGIN,x KEY
   814 239F CA				dex
   815
   816 23A0 20 8A 21			jsr CRT.READKEY					; call Entry
   817
   818 23A3 CA				dex
   819 23A4			@exit
   820 					.ifdef @new
   821 					lda <@VarData
   822 					sta :ztmp
   823 					lda >@VarData
   824 					ldy #@VarDataSize-1
   825 					jmp @FreeMem
   826 					eif
   827 23A4 60				rts						; ret
   828 				.endl
   829 23A5			l_00A8
   830
   831 				; optimize FAIL ('MAINPROC', examples\inputsd.pas), line = 43
   832 23A5 20 7F 22			jsr MAINPROC
   833
   834 				; ------------------------------------------------------------
   835
   836 = 23D5			adr.STRBUFFER	= DATAORIGIN+$0015
   837 23A8			.var STRBUFFER	= adr.STRBUFFER .word
   838 = 24D5			KEY	= DATAORIGIN+$0115
   839 = 24D6			adr.STR_BUFFER1	= DATAORIGIN+$0116
   840 23A8			.var STR_BUFFER1	= adr.STR_BUFFER1 .word
   841 23A8			@exit
   842
   843 23A8 A2 00		@halt	ldx #0
   844 23AA 9A				txs
   845 					.ifdef MAIN.@DEFINES.ROMOFF
   846 					inc portb
   847 					.endif
   848
   849 23AB 60				rts
   850
   851 				; ------------------------------------------------------------
   852
   853 23AC 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   854
   855 				; ------------------------------------------------------------
   856
   857 23BC			.local	@DEFINES
   858 23BC			ATARI
   859 				.endl
   860
   861 = 23BC D5 23		STRBUFFER
   861 = 23BE D6 24		STR_BUFFER1
   861 				.endl							; MAIN
   862
   863 				; ------------------------------------------------------------
   864 				; ------------------------------------------------------------
   865
   866 				.macro	UNITINITIALIZATION
   867 				
   868 					.ifdef MAIN.SYSTEM.@UnitInit
   869 					jsr MAIN.SYSTEM.@UnitInit
   870 					eif
   871 				
   872 					.ifdef MAIN.ATARI.@UnitInit
   873 					jsr MAIN.ATARI.@UnitInit
   874 					eif
   875 				
   876 					.ifdef MAIN.CRT.@UnitInit
   877 					jsr MAIN.CRT.@UnitInit
   878 					eif
   879 				
   880 					.ifdef MAIN.DOS.@UnitInit
   881 					jsr MAIN.DOS.@UnitInit
   882 					eif
   883 				
   884 					.ifdef MAIN.STRUTILS.@UnitInit
   885 					jsr MAIN.STRUTILS.@UnitInit
   886 					eif
   887 				
   888 					.ifdef MAIN.SYSUTILS.@UnitInit
   889 					jsr MAIN.SYSUTILS.@UnitInit
   890 					eif
   891 				
   892 					.ifdef MAIN.CIO.@UnitInit
   893 					jsr MAIN.CIO.@UnitInit
   894 					eif
   895 				.endm
   896
   897 				; ------------------------------------------------------------
   898
   899 					ift .SIZEOF(MAIN.SYSTEM) > 0
   900 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   900 				SYSTEM: $2186..$2189
   901 					eif
   902
   903 					ift .SIZEOF(MAIN.ATARI) > 0
   904 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   905 					eif
   906
   907 					ift .SIZEOF(MAIN.CRT) > 0
   908 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   908 				CRT: $218A..$219A
   909 					eif
   910
   911 					ift .SIZEOF(MAIN.DOS) > 0
   912 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   913 					eif
   914
   915 					ift .SIZEOF(MAIN.STRUTILS) > 0
   916 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   917 					eif
   918
   919 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   920 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   921 					eif
   922
   923 					ift .SIZEOF(MAIN.CIO) > 0
   924 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
   924 				CIO: $219B..$227E
   925 					eif
   926
   927 					.print 'CODE: ',CODEORIGIN,'..',*-1
   927 				CODE: $2000..$23BF
   928
   929 				; ------------------------------------------------------------
   930
   931 23C0			DATAORIGIN
   932 23C0 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   933
   934 = 0006			VARINITSIZE	= *-DATAORIGIN
   935 = 0216			VARDATASIZE	= 534
   936
   937 = 25D6			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   938
   939 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   939 				DATA: $23C0..$25D6
   940
   941 02E0-02E1> 49 21			run START
   942
   943 				; ------------------------------------------------------------
   944
   945 				.macro	STATICDATA
   946 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $0F $44 $65  $76 $69 $63 $65 $20 $49 $2F $4F
   947 				.by  $20 $64 $65 $6D $6F $00 $24 $75  $73 $69 $6E $67 $20 $49 $6E $70  $75 $74 $53 $44 $20 $61 $6E $64
   948 				.by  $20 $49 $6E $70 $75 $74 $4D $44  $20 $70 $72 $6F $63 $65 $64 $75  $72 $65 $73 $00 $11 $74 $6F $20
   949 				.by  $72 $65 $61 $64 $20 $74 $65 $78  $74 $20 $66 $69 $6C $65 $00 $00  $00 $15 $53 $61 $6D $70 $6C $65
   950 				.by  $20 $66 $69 $6C $65 $3A $20 $54  $45 $53 $54 $2E $54 $58 $54 $00  $0B $48 $31 $3A $54 $45 $53 $54
   951 				.by  $2E $54 $58 $54 $00 $10 $49 $6E  $70 $75 $74 $53 $44 $20 $65 $78  $61 $6D $70 $6C $65 $3A $00 $10
   952 				.by  $49 $6E $70 $75 $74 $4D $44 $20  $65 $78 $61 $6D $70 $6C $65 $3A  $00
   953 				.endm
   954
   955 					end
