mads 2.1.0
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $2033..$2476
    97
    98 				; ------------------------------------------------------------
    99
   100 2476			START
   101 2476 BA				tsx
   102 2477 8E E8 26			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 012C			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 2916			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 					ldx #256-VLEN
   115 					lda #0
   116 					sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   118 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   118 247A A9 16 85 86 A9 29 +  MWA #VADR @FILL.PTR1
   118 2482 A9 2C 85 8A A9 01 +  MWA #VLEN @FILL.PTR3
   118 248A A9 00 85 82		 MVA #0 @FILL.PTR2
   118 248E 20 DB 23		 JSR @FILL
   119 					eif
   120
   121 2491 A2 0F			ldx #$0f
   122 2493 BD 40 03 9D EB 26 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 249C E8				inx		; X = 0 !!!
   125 249D 86 8E			stx bp		; lo BP = 0
   126
   127 249F				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: hi_atariage.a65]
Source: hi_atariage.a65
   128
   129 249F			.local	MAIN						; PROCEDURE
   130
   131 249F 4C D6 26			jmp l_003A
   132
   133 				; ------------------------------------------------------------
   134
   135 24A2			.local	SYSTEM						; UNIT
   136
   137 24A2			.local	CONCAT_0060					; FUNCTION | ASSEMBLER | OVERLOAD
   138
   139 				; ------------------------------------------------------------
   140
   141 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   142 				; as Pointer
   143 24A2 B5 98 8D 0A 28		mva :STACKORIGIN,x B
   144 24A7 CA				dex						; sub bx, 1
   145
   146 				; ------------------------------------------------------------
   147
   148 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   149 				; as Pointer
   150 24A8 B5 98 8D 09 25		mva :STACKORIGIN,x A
   151 24AD B5 A8 8D 0A 25		mva :STACKORIGIN+STACKWIDTH,x A+1
   152 24B2 CA				dex						; sub bx, 1
   153 					@move A #adr.A #256
   153 				 MWA A @MOVE.PTR1\ MWA #ADR.A @MOVE.PTR2\ MWA #256 @MOVE.PTR3\ JSR @MOVE
   153 24B3 AD 09 25 85 86 AD +  MWA A @MOVE.PTR1
   153 24BD A9 0A 85 8A A9 27 +  MWA #ADR.A @MOVE.PTR2
   153 24C5 A9 00 85 82 A9 01 +  MWA #256 @MOVE.PTR3
   153 24CD 20 86 23		 JSR @MOVE
   154 24D0 A9 0A 8D 09 25 A9 + 	mwa #adr.A A
   155
   156 				; ---------------------  ASM Block 044  ---------------------
   157
   158 24DA A9 00 8D 00 04		mva #0 @buf
   159 					@addString #adr.a
   159 				 LDY> ADR.A\ LDA< ADR.A\ JSR @ADDSTRING
   159 24DF A0 27		 LDY> ADR.A
   159 24E1 A9 0A		 LDA< ADR.A
   159 24E3 20 23 24		 JSR @ADDSTRING
   160 24E6 EE 00 04			inc @buf
   161 24E9 AC 00 04			ldy @buf
   162 24EC AD 0A 28			lda b
   163 24EF 99 00 04			sta @buf,y
   164 				;	@move #@buf #adr.Result #256
   165 24F2 A0 00			ldy #0
   166 24F4 B9 00 04 99 0B 28 + 	mva:rne @buf,y adr.Result,y+
   167
   168 24FD			@exit
   169
   170 				; ------------------------------------------------------------
   171
   172 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   173 				; as Pointer
   174
   175 24FD E8				inx						; add bx, 1
   176 24FE AD 0B 25 95 98		mva RESULT :STACKORIGIN,x
   177 2503 AD 0C 25 95 A8		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   178
   179 					.ifdef @new
   180 					@FreeMem #@VarData #@VarDataSize
   181 					eif
   182
   183 				; ------------------------------------------------------------
   184
   185 = 270A			adr.A	= DATAORIGIN+$000B
   186 2508			.var A	= adr.A .word
   187 = 280A			B	= DATAORIGIN+$010B
   188 = 280B			adr.RESULT	= DATAORIGIN+$010C
   189 2508			.var RESULT	= adr.RESULT .word
   190
   191 = 2509			@VarData	= A
   192 = 0201			@VarDataSize	= 513
   193
   194 2508 60				rts						; ret
   195 = 2509 0A 27		A
   195 = 250B 0B 28		RESULT
   195 				.endl
   196
   197 				; ------------------------------------------------------------
   198
   199 = 0648			M_PI_2	= $0648
   200 = 0192			D_PI_2	= $0192
   201 = 0004			D_PI_180	= $0004
   202 = 0000			MGTIA	= $0000
   203 = 0080			MVBXE	= $0080
   204 = 0000			VBXE_XDLADR	= $0000
   205 = 0100			VBXE_BCBADR	= $0100
   206 = 1000			VBXE_MAPADR	= $1000
   207 = 5000			VBXE_OVRADR	= $5000
   208 = B000			VBXE_WINDOW	= $B000
   209 = 0000			IDLI	= $0000
   210 = 0001			IVBL	= $0001
   211 = 00FE			CH_DELCHR	= $00FE
   212 = 009B			CH_ENTER	= $009B
   213 = 001B			CH_ESC	= $001B
   214 = 001C			CH_CURS_UP	= $001C
   215 = 001D			CH_CURS_DOWN	= $001D
   216 = 001E			CH_CURS_LEFT	= $001E
   217 = 001F			CH_CURS_RIGHT	= $001F
   218 = 007F			CH_TAB	= $007F
   219 = 009B			CH_EOL	= $009B
   220 = 007D			CH_CLR	= $007D
   221 = 00FD			CH_BELL	= $00FD
   222 = 007E			CH_DEL	= $007E
   223 = 009C			CH_DELLINE	= $009C
   224 = 009D			CH_INSLINE	= $009D
   225 = 0000			COLOR_BLACK	= $0000
   226 = 000E			COLOR_WHITE	= $000E
   227 = 0032			COLOR_RED	= $0032
   228 = 0096			COLOR_CYAN	= $0096
   229 = 0068			COLOR_VIOLET	= $0068
   230 = 00C4			COLOR_GREEN	= $00C4
   231 = 0074			COLOR_BLUE	= $0074
   232 = 00EE			COLOR_YELLOW	= $00EE
   233 = 0028			COLOR_ORANGE	= $0028
   234 = 00E4			COLOR_BROWN	= $00E4
   235 = 003C			COLOR_LIGHTRED	= $003C
   236 = 0004			COLOR_GRAY1	= $0004
   237 = 0006			COLOR_GRAY2	= $0006
   238 = 000A			COLOR_GRAY3	= $000A
   239 = 00CC			COLOR_LIGHTGREEN	= $00CC
   240 = 007C			COLOR_LIGHTBLUE	= $007C
   241 = 0004			FMOPENREAD	= $0004
   242 = 0008			FMOPENWRITE	= $0008
   243 = 0009			FMOPENAPPEND	= $0009
   244 = 000C			FMOPENREADWRITE	= $000C
   245 = 26FF			SCREENWIDTH	= DATAORIGIN+$0000
   246 = 2701			SCREENHEIGHT	= DATAORIGIN+$0002
   247 = 2703			DATESEPARATOR	= DATAORIGIN+$0004
   248 = D014			TVSYSTEM	= $D014
   249 = 02C0			adr.PALETTE	= $02C0
   250 250D			.var PALETTE	= adr.PALETTE .word
   251 = D012			adr.HPALETTE	= $D012
   252 250D			.var HPALETTE	= adr.HPALETTE .word
   253 = 2704			FILEMODE	= DATAORIGIN+$0005
   254 = 2705			SCREENMODE	= DATAORIGIN+$0006
   255 = 2706			IORESULT	= DATAORIGIN+$0007
   256 = 2707			EOLN	= DATAORIGIN+$0008
   257 = 2708			RNDSEED	= DATAORIGIN+$0009
   258
   259 = 250D C0 02		PALETTE
   259 = 250F 12 D0		HPALETTE
   259 				.endl							; UNIT SYSTEM
   260
   261 				; ------------------------------------------------------------
   262
   263 2511			.local	DOS						; UNIT
   264
   265 				; ------------------------------------------------------------
   266
   267 = D014			PALNTSC	= $D014
   268
   269 				.endl							; UNIT DOS
   270
   271 				; ------------------------------------------------------------
   272
   273 2511			.local	STRUTILS					; UNIT
   274
   275 				; ------------------------------------------------------------
   276
   277 				.endl							; UNIT STRUTILS
   278
   279 				; ------------------------------------------------------------
   280
   281 2511			.local	SYSUTILS					; UNIT
   282
   283 				; ------------------------------------------------------------
   284
   285 = 0001			FAREADONLY	= $0001
   286 = 0002			FAHIDDEN	= $0002
   287 = 0004			FASYSFILE	= $0004
   288 = 0008			FAVOLUMEID	= $0008
   289 = 0010			FADIRECTORY	= $0010
   290 = 0020			FAARCHIVE	= $0020
   291 = 003F			FAANYFILE	= $003F
   292
   293 				.endl							; UNIT SYSUTILS
   294
   295 				; ------------------------------------------------------------
   296
   297 2511			.local	ATARI						; UNIT
   298
   299 				; ------------------------------------------------------------
   300
   301 = 0012			RTCLOK	= $0012
   302 = 004D			ATRACT	= $004D
   303 = 0052			LMARGIN	= $0052
   304 = 0053			RMARGIN	= $0053
   305 = 0054			ROWCRS	= $0054
   306 = 0055			COLCRS	= $0055
   307 = 0057			DINDEX	= $0057
   308 = 0058			SAVMSC	= $0058
   309 = 006A			RAMTOP	= $006A
   310 = 0200			VDSLST	= $0200
   311 = 0230			SDLSTL	= $0230
   312 = 0290			TXTROW	= $0290
   313 = 0291			TXTCOL	= $0291
   314 = 0293			TINDEX	= $0293
   315 = 0294			TXTMSC	= $0294
   316 = 022F			SDMCTL	= $022F
   317 = 026F			GPRIOR	= $026F
   318 = 02F0			CRSINH	= $02F0
   319 = 02F3			CHACT	= $02F3
   320 = 02F4			CHBAS	= $02F4
   321 = 02FC			CH	= $02FC
   322 = 02C0			PCOLR0	= $02C0
   323 = 02C1			PCOLR1	= $02C1
   324 = 02C2			PCOLR2	= $02C2
   325 = 02C3			PCOLR3	= $02C3
   326 = 02C4			COLOR0	= $02C4
   327 = 02C5			COLOR1	= $02C5
   328 = 02C6			COLOR2	= $02C6
   329 = 02C7			COLOR3	= $02C7
   330 = 02C8			COLOR4	= $02C8
   331 = 02C8			COLBAKS	= $02C8
   332 = D000			HPOSP0	= $D000
   333 = D001			HPOSP1	= $D001
   334 = D002			HPOSP2	= $D002
   335 = D003			HPOSP3	= $D003
   336 = D004			HPOSM0	= $D004
   337 = D005			HPOSM1	= $D005
   338 = D006			HPOSM2	= $D006
   339 = D007			HPOSM3	= $D007
   340 = D008			SIZEP0	= $D008
   341 = D009			SIZEP1	= $D009
   342 = D00A			SIZEP2	= $D00A
   343 = D00B			SIZEP3	= $D00B
   344 = D00C			SIZEM	= $D00C
   345 = D00D			GRAFP0	= $D00D
   346 = D00E			GRAFP1	= $D00E
   347 = D00F			GRAFP2	= $D00F
   348 = D010			GRAFP3	= $D010
   349 = D011			GRAFM	= $D011
   350 = D004			P0PF	= $D004
   351 = D014			PAL	= $D014
   352 = D012			COLPM0	= $D012
   353 = D013			COLPM1	= $D013
   354 = D014			COLPM2	= $D014
   355 = D015			COLPM3	= $D015
   356 = D016			COLPF0	= $D016
   357 = D017			COLPF1	= $D017
   358 = D018			COLPF2	= $D018
   359 = D019			COLPF3	= $D019
   360 = D01A			COLBK	= $D01A
   361 = D01B			PRIOR	= $D01B
   362 = D01D			GRACTL	= $D01D
   363 = D01E			HITCLR	= $D01E
   364 = D200			AUDF1	= $D200
   365 = D201			AUDC1	= $D201
   366 = D202			AUDF2	= $D202
   367 = D203			AUDC2	= $D203
   368 = D204			AUDF3	= $D204
   369 = D205			AUDC3	= $D205
   370 = D206			AUDF4	= $D206
   371 = D207			AUDC4	= $D207
   372 = D208			AUDCTL	= $D208
   373 = D20F			SKSTAT	= $D20F
   374 = D301			PORTB	= $D301
   375 = D400			DMACTL	= $D400
   376 = D401			CHACTL	= $D401
   377 = D402			DLISTL	= $D402
   378 = D404			HSCROL	= $D404
   379 = D405			VSCROL	= $D405
   380 = D407			PMBASE	= $D407
   381 = D409			CHBASE	= $D409
   382 = D40A			WSYNC	= $D40A
   383 = D40B			VCOUNT	= $D40B
   384 = D40C			PENH	= $D40C
   385 = D40D			PENV	= $D40D
   386 = D40E			NMIEN	= $D40E
   387
   388 				.endl							; UNIT ATARI
   389
   390 				; ------------------------------------------------------------
   391
   392 2511			.local	CRT						; UNIT
   393
   394 2511			.local	READKEY						; FUNCTION | ASSEMBLER
   395
   396 				; ---------------------  ASM Block 063  ---------------------
   397
   398 2511 8A 48			txa:pha
   399
   400 2513 20 2E 23			@GetKey
   401
   402 2516 8D 0C 29			sta Result
   403
   404 2519 68 AA			pla:tax
   405
   406 251B			@exit
   407
   408 				; ------------------------------------------------------------
   409
   410 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   411 				; as Pointer
   412
   413 251B E8				inx						; add bx, 1
   414 251C AD 0C 29 95 98		mva RESULT :STACKORIGIN,x
   415
   416 					.ifdef @new
   417 					@FreeMem #@VarData #@VarDataSize
   418 					eif
   419
   420 				; ------------------------------------------------------------
   421
   422 = 290C			RESULT	= DATAORIGIN+$020D
   423
   424 = 290C			@VarData	= RESULT
   425 = 0001			@VarDataSize	= 1
   426
   427 2521 60				rts						; ret
   428 				.endl
   429
   430 2522			.local	GOTOXY						; PROCEDURE | ASSEMBLER
   431
   432 				; ------------------------------------------------------------
   433
   434 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   435 				; as Pointer
   436 2522 B5 98 8D 0E 29		mva :STACKORIGIN,x Y
   437 2527 CA				dex						; sub bx, 1
   438
   439 				; ------------------------------------------------------------
   440
   441 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   442 				; as Pointer
   443 2528 B5 98 8D 0D 29		mva :STACKORIGIN,x X
   444 252D CA				dex						; sub bx, 1
   445
   446 				; ---------------------  ASM Block 068  ---------------------
   447
   448 252E AC 0D 29			ldy x
   449 2531 F0 03			beq @+
   450 2533 88				dey
   451 2534 84 55			sty colcrs
   452
   453 2536 AC 0E 29		@	ldy y
   454 2539 F0 03			beq @+
   455 253B 88				dey
   456 253C 84 54			sty rowcrs
   457 253E			@
   458
   459
   460 				; ------------------------------------------------------------
   461
   462 = 290D			X	= DATAORIGIN+$020E
   463 = 290E			Y	= DATAORIGIN+$020F
   464
   465 = 290D			@VarData	= X
   466 = 0002			@VarDataSize	= 2
   467
   468 253E			@exit
   469 					.ifdef @new
   470 					@FreeMem #@VarData #@VarDataSize
   471 					eif
   472 253E 60				rts						; ret
   473 				.endl
   474
   475 				; ------------------------------------------------------------
   476
   477 = 290B			TEXTATTR	= DATAORIGIN+$020C
   478 = D01F			CONSOL	= $D01F
   479 = 0000			CN_START_SELECT_OPTION	= $0000
   480 = 0001			CN_SELECT_OPTION	= $0001
   481 = 0002			CN_START_OPTION	= $0002
   482 = 0003			CN_OPTION	= $0003
   483 = 0004			CN_START_SELECT	= $0004
   484 = 0005			CN_SELECT	= $0005
   485 = 0006			CN_START	= $0006
   486 = 0007			CN_NONE	= $0007
   487 = 0000			BW40	= $0000
   488 = 0001			CO40	= $0001
   489 = 0002			BW80	= $0002
   490 = 0003			CO80	= $0003
   491 = 0007			MONO	= $0007
   492 = 0001			C40	= $0001
   493 = 0003			C80	= $0003
   494 = 0000			BLACK	= $0000
   495 = 0001			BLUE	= $0001
   496 = 0002			GREEN	= $0002
   497 = 0003			CYAN	= $0003
   498 = 0004			RED	= $0004
   499 = 0005			MAGENTA	= $0005
   500 = 0006			BROWN	= $0006
   501 = 0007			LIGHTGRAY	= $0007
   502 = 0008			DARKGRAY	= $0008
   503 = 0009			LIGHTBLUE	= $0009
   504 = 000A			LIGHTGREEN	= $000A
   505 = 000B			LIGHTCYAN	= $000B
   506 = 000C			LIGHTRED	= $000C
   507 = 000D			LIGHTMAGENTA	= $000D
   508 = 000E			YELLOW	= $000E
   509 = 000F			WHITE	= $000F
   510 = 0080			BLINK	= $0080
   511
   512 				.endl							; UNIT CRT
   513
   514 				; ------------------------------------------------------------
   515
   516 253F			.local	TYPES						; UNIT
   517
   518 				; ------------------------------------------------------------
   519
   520 				.endl							; UNIT TYPES
   521
   522 				; ------------------------------------------------------------
   523
   524 253F			.local	GRAPH						; UNIT
   525
   526 253F			.local	INITGRAPH_009E					; PROCEDURE | OVERLOAD
   527
   528 				; ------------------------------------------------------------
   529
   530 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   531 				; as Pointer
   532 253F B5 98 8D 2C 29		mva :STACKORIGIN,x MODE
   533 2544 CA				dex						; sub bx, 1
   534
   535 				; optimize OK (GRAPH), line = 73
   536
   537 2545 A9 00 8D 17 29		mva #$00 GRAPHRESULT
   538
   539 				; optimize OK (GRAPH), line = 75
   540
   541 254A AD 2C 29 8D 05 27		mva MODE SYSTEM.SCREENMODE
   542
   543 				; ---------------------  ASM Block 074  ---------------------
   544
   545
   546 2550 8A 48			txa:pha
   547
   548 2552 A9 2C 8D 1B 23		mva #$2c @putchar.vbxe
   549
   550 2557 AD 2C 29			lda mode
   551 255A 29 0F			and #$0f
   552 255C A8				tay
   553
   554 255D A2 60			ldx #$60	; 6*16
   555 255F AD 2C 29			lda mode	; %00010000 with text window
   556 2562 29 10			and #$10
   557 2564 49 10			eor #$10
   558 2566 09 02			ora #2		; read
   559
   560 					.nowarn @graphics
   560 2568 20 EC 22		 JSR @GRAPHICS
   561 					
   562 					
   563 = EE6D			tlshc	equ $ee6d
   564
   565 256B A6 57			ldx dindex
   566 256D BC 6D EE			ldy tlshc,x
   567 2570 A9 05			lda #5
   568 2572 0A			shift	asl @
   569 2573 88				dey
   570 2574 D0 FC			bne shift
   571
   572 2576 8D 2B 29			sta SCANLINE_WIDTH
   573 					
   574
   575 				; Fox/TQA
   576
   577 = 0057			dindex	equ $57
   578 = EE7D			tmccn	equ $ee7d
   579 = EE8D			tmrcn	equ $ee8d
   580
   581 2579 A6 57			ldx dindex
   582 257B BD 7D EE			lda tmccn,x
   583 257E BC 8D EE			ldy tmrcn,x
   584 2581 A2 00			ldx #0
   585 2583 C9 40			cmp #<320
   586 2585 D0 01 E8			sne:inx
   587 				    
   588 				; X:A = horizontal resolution
   589 				; Y = vertical resolution
   590
   591 2588 8D FF 26			sta MAIN.SYSTEM.ScreenWidth
   592 258B 8E 00 27			stx MAIN.SYSTEM.ScreenWidth+1
   593 					
   594 258E 38 E9 01			sub #1
   595 2591 8D 11 29			sta WIN_RIGHT
   596 2594 8A				txa
   597 2595 E9 00			sbc #0
   598 2597 8D 12 29			sta WIN_RIGHT+1
   599 					
   600 259A 8C 01 27			sty MAIN.SYSTEM.ScreenHeight
   601 259D A9 00			lda #0
   602 259F 8D 02 27			sta MAIN.SYSTEM.ScreenHeight+1
   603 					
   604 25A2 8D 0F 29			sta WIN_LEFT
   605 25A5 8D 10 29			sta WIN_LEFT+1
   606 25A8 8D 13 29			sta WIN_TOP
   607 25AB 8D 14 29			sta WIN_TOP+1
   608
   609 25AE 8D 16 29			sta WIN_BOTTOM+1	
   610 25B1 88				dey
   611 25B2 8C 15 29			sty WIN_BOTTOM
   612
   613 25B5 68 AA			pla:tax
   614
   615
   616 				; ------------------------------------------------------------
   617
   618 = 292C			MODE	= DATAORIGIN+$022D
   619
   620 = 292C			@VarData	= MODE
   621 = 0001			@VarDataSize	= 1
   622
   623 25B7			@exit
   624 					.ifdef @new
   625 					@FreeMem #@VarData #@VarDataSize
   626 					eif
   627 25B7 60				rts						; ret
   628 				.endl
   629
   630 				; ------------------------------------------------------------
   631
   632 = FFFFFF80		CURRENTDRIVER	= $FFFFFF80
   633 = 0000			DETECT	= $0000
   634 = 0001			CGA	= $0001
   635 = 0002			MCGA	= $0002
   636 = 0003			EGA	= $0003
   637 = 0004			EGA64	= $0004
   638 = 0005			EGAMONO	= $0005
   639 = 0006			LOWRES	= $0006
   640 = 0007			HERCMONO	= $0007
   641 = 0009			VGA	= $0009
   642 = 000A			VESA	= $000A
   643 = 000B			D1BIT	= $000B
   644 = 000C			D2BIT	= $000C
   645 = 000D			D4BIT	= $000D
   646 = 000E			D6BIT	= $000E
   647 = 000F			D8BIT	= $000F
   648 = 0010			D12BIT	= $0010
   649 = 0018			M640X400	= $0018
   650 = 0018			M640X480	= $0018
   651 = 0000			GROK	= $0000
   652 = FFFFFFFF		GRNOINITGRAPH	= $FFFFFFFF
   653 = FFFFFFFE		GRNOTDETECTED	= $FFFFFFFE
   654 = FFFFFFFD		GRFILENOTFOUND	= $FFFFFFFD
   655 = FFFFFFFC		GRINVALIDDRIVER	= $FFFFFFFC
   656 = FFFFFFFB		GRNOLOADMEM	= $FFFFFFFB
   657 = FFFFFFFA		GRNOSCANMEM	= $FFFFFFFA
   658 = FFFFFFF9		GRNOFLOODMEM	= $FFFFFFF9
   659 = FFFFFFF8		GRFONTNOTFOUND	= $FFFFFFF8
   660 = FFFFFFF7		GRNOFONTMEM	= $FFFFFFF7
   661 = FFFFFFF6		GRINVALIDMODE	= $FFFFFFF6
   662 = FFFFFFF5		GRERROR	= $FFFFFFF5
   663 = FFFFFFF4		GRIOERROR	= $FFFFFFF4
   664 = FFFFFFF3		GRINVALIDFONT	= $FFFFFFF3
   665 = FFFFFFF2		GRINVALIDFONTNUM	= $FFFFFFF2
   666 = FFFFFFEE		GRINVALIDVERSION	= $FFFFFFEE
   667 = 0000			CGAC0	= $0000
   668 = 0001			CGAC1	= $0001
   669 = 0002			CGAC2	= $0002
   670 = 0003			CGAC3	= $0003
   671 = 0004			CGAHI	= $0004
   672 = 0000			MCGAC0	= $0000
   673 = 0001			MCGAC1	= $0001
   674 = 0002			MCGAC2	= $0002
   675 = 0003			MCGAC3	= $0003
   676 = 0004			MCGAMED	= $0004
   677 = 0005			MCGAHI	= $0005
   678 = 0000			EGALO	= $0000
   679 = 0001			EGAHI	= $0001
   680 = 0000			EGA64LO	= $0000
   681 = 0001			EGA64HI	= $0001
   682 = 0003			EGAMONOHI	= $0003
   683 = 000A			VGALO	= $000A
   684 = 001F			VGAMED	= $001F
   685 = 0018			VGAHI	= $0018
   686 = 290F			WIN_LEFT	= DATAORIGIN+$0210
   687 = 2911			WIN_RIGHT	= DATAORIGIN+$0212
   688 = 2913			WIN_TOP	= DATAORIGIN+$0214
   689 = 2915			WIN_BOTTOM	= DATAORIGIN+$0216
   690 = 2917			GRAPHRESULT	= DATAORIGIN+$0218
   691 = 2918			GETCOLOR	= DATAORIGIN+$0219
   692 = 2919			adr.LASTARCCOORDS	= DATAORIGIN+$021A
   693 25B8			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   694 = 2919			LASTARCCOORDS.X	= DATAORIGIN+$021A
   695 = 291B			LASTARCCOORDS.Y	= DATAORIGIN+$021C
   696 = 291D			LASTARCCOORDS.XSTART	= DATAORIGIN+$021E
   697 = 291F			LASTARCCOORDS.YSTART	= DATAORIGIN+$0220
   698 = 2921			LASTARCCOORDS.XEND	= DATAORIGIN+$0222
   699 = 2923			LASTARCCOORDS.YEND	= DATAORIGIN+$0224
   700 = 2925			CURRENTX	= DATAORIGIN+$0226
   701 = 2927			CURRENTY	= DATAORIGIN+$0228
   702 = 2929			VIDEORAM	= DATAORIGIN+$022A
   703 = 292B			SCANLINE_WIDTH	= DATAORIGIN+$022C
   704
   705 = 25B8 19 29		LASTARCCOORDS
   705 				.endl							; UNIT GRAPH
   706
   707 25BA			.local	MAINPROC					; PROCEDURE
   708
   709 				; AssignFile
   710
   711 				; optimize OK (examples\hi_atariage.pas), line = 28
   712
   713 25BA AD FB 26 85 90 AD + 	mwa F :bp2
   714 25C4 A0 00			ldy #s@file.pfname
   715 25C6 A9 0D			lda #$0D
   716 25C8 91 90			sta (:bp2),y
   717 25CA C8				iny
   718 25CB A9 20			lda #$20
   719 25CD 91 90			sta (:bp2),y
   720
   721 				; optimize OK (examples\hi_atariage.pas), line = 28
   722
   723 25CF A0 05			ldy #s@file.status
   724 25D1 A9 00			lda #$00
   725 25D3 91 90			sta (:bp2),y
   726 				; Rewrite
   727
   728 				; optimize OK (examples\hi_atariage.pas), line = 28
   729
   730 25D5 A0 02			ldy #s@file.record
   731 25D7 A9 01			lda #$01
   732 25D9 91 90			sta (:bp2),y
   733 25DB C8				iny
   734 25DC A9 00			lda #$00
   735 25DE 91 90			sta (:bp2),y
   736
   737 25E0 8A 48			txa:pha
   738 25E2 38				sec
   739 					@openfile F, #8
   739 				 LDY F+1\ LDA F\ LDX# 8\ JSR @OPENFILE
   739 25E3 AC FC 26		 LDY F+1
   739 25E6 AD FB 26		 LDA F
   739 25E9 A2 08		 LDX# 8
   739 25EB 20 33 20		 JSR @OPENFILE
   740 25EE 68 AA			pla:tax
   741
   742 				; optimize FAIL ('GRAPH.INITGRAPH_009E', examples\hi_atariage.pas), line = 29
   743 25F0 E8				inx
   744 25F1 A9 02 95 98			mva #$02 :STACKORIGIN,x
   745 25F5 20 3F 25			jsr GRAPH.INITGRAPH_009E
   746
   747 				; optimize FAIL ('CRT.GOTOXY', examples\hi_atariage.pas), line = 30
   748 25F8 E8				inx
   749 25F9 A9 06 95 98			mva #$06 :STACKORIGIN,x
   750 25FD E8				inx
   751 25FE 95 98			sta :STACKORIGIN,x
   752 2600 20 22 25			jsr CRT.GOTOXY
   753
   754 				; optimize FAIL ('SYSTEM.CONCAT_0060', examples\hi_atariage.pas), line = 31
   755 2603 E8				inx
   756 2604 A9 11 95 98			mva #$11 :STACKORIGIN,x
   757 2608 A9 20 95 A8			mva #$20 :STACKORIGIN+STACKWIDTH,x
   758 260C E8				inx
   759 260D A9 9B 95 98			mva #$9B :STACKORIGIN,x
   760 2611 20 A2 24			jsr SYSTEM.CONCAT_0060
   761 					@moveSTRING STRBUFFER
   761 				 LDY STRBUFFER+1\ LDA STRBUFFER\ JSR @MOVESTRING
   761 2614 AC FE 26		 LDY STRBUFFER+1
   761 2617 AD FD 26		 LDA STRBUFFER
   761 261A 20 3E 23		 JSR @MOVESTRING
   762 261D CA				dex						; sub bx, 1
   763 				; BlockWrite
   764
   765 				; optimize OK (examples\hi_atariage.pas), line = 32
   766
   767 261E AD FB 26 85 90 AD + 	mwa F :bp2
   768 2628 A0 06			ldy #s@file.buffer
   769 262A AD FD 26			lda STRBUFFER
   770 262D 18 69 01			add #$01
   771 2630 91 90			sta (:bp2),y
   772 2632 C8				iny
   773 2633 AD FE 26			lda STRBUFFER+1
   774 2636 69 00			adc #$00
   775 2638 91 90			sta (:bp2),y
   776
   777 				; optimize OK (examples\hi_atariage.pas), line = 32
   778
   779 263A AD FD 26 85 90 AD + 	mwa STRBUFFER :bp2
   780 2644 A0 00			ldy #0
   781 2646 B1 90			lda (:bp2),y
   782 2648 AC FB 26 84 90 AC + 	mwy F :bp2
   783 2652 A0 08			ldy #s@file.nrecord
   784 2654 91 90			sta (:bp2),y
   785 2656 C8				iny
   786 2657 A9 00			lda #$00
   787 2659 91 90			sta (:bp2),y
   788
   789 265B 8A 48			txa:pha
   790 265D 38				sec
   791 					@readfile F, #11
   791 				 LDY F+1\ LDA F\ LDX# 11\ JSR @READFILE
   791 265E AC FC 26		 LDY F+1
   791 2661 AD FB 26		 LDA F
   791 2664 A2 0B		 LDX# 11
   791 2666 20 07 21		 JSR @READFILE
   792 2669 68 AA			pla:tax
   793
   794 				; --- For
   795
   796 				; optimize OK (examples\hi_atariage.pas), line = 33
   797
   798 266B A9 00 8D 3E 2A		mva #$00 I
   799 2670 8D 3F 2A			sta I+1
   800 2673 8D 40 2A			sta I+2
   801 2676 8D 41 2A			sta I+3
   802
   803 				; optimize OK (examples\hi_atariage.pas), line = 33
   804
   805 				; --- To
   806 2679			l_010C
   807
   808 				; --- ForToDoCondition
   809
   810 				; optimize OK (examples\hi_atariage.pas), line = 33
   811
   812 2679				.LOCAL
   813 2679 AD 41 2A			lda I+3
   814 267C B8 38			clv:sec
   815 267E E9 00			sbc #$00
   816 2680 D0 21			bne L4
   817 2682 AD 40 2A			lda I+2
   818 2685 C9 00			cmp #$00
   819 2687 D0 0C			bne L1
   820 2689 AD 3F 2A			lda I+1
   821 268C C9 00			cmp #$00
   822 268E D0 05			bne L1
   823 2690 AD 3E 2A			lda I
   824 2693 C9 02			cmp #$02
   825 2695 F0 12		L1	beq L5
   826 2697 B0 05			bcs L3
   827 2699 A9 FF			lda #$FF
   828 269B 4C A9 26			jmp L5
   829 269E A9 01		L3	lda #$01
   830 26A0 4C A9 26			jmp L5
   831 26A3 50 04		L4	bvc L5
   832 26A5 49 FF			eor #$FF
   833 26A7 09 01			ora #$01
   834 26A9			L5
   835 					.ENDL
   836 26A9 30 02			smi
   837 26AB D0 1F			jne l_0116
   838
   839 				; optimize FAIL (100, examples\hi_atariage.pas), line = 34
   840 					@printSTRING #CODEORIGIN+$001E
   840 				 LDY> CODEORIGIN+$001E\ LDA< CODEORIGIN+$001E\ JSR @PRINTSTRING
   840 26AD A0 20		 LDY> CODEORIGIN+$001E
   840 26AF A9 1E		 LDA< CODEORIGIN+$001E
   840 26B1 20 2E 22		 JSR @PRINTSTRING
   841 26B4 20 20 22			@printEOL
   842
   843 				; --- ForToDoEpilog
   844 26B7 EE 3E 2A D0 0D EE + 	ind I						; inc ptr dword [CounterAddress]
   845 26C9 4C 79 26			jmp l_010C
   846 26CC			l_0116
   847
   848 				; optimize FAIL ('CRT.READKEY', examples\hi_atariage.pas), line = 36
   849 26CC 20 11 25			jsr CRT.READKEY
   850 26CF B5 98 8D 3D 2A		mva :STACKORIGIN,x KEY
   851 26D4 CA				dex
   852
   853 				; ------------------------------------------------------------
   854
   855 = 2A3E			I	= DATAORIGIN+$033F
   856 = 0002			@FORTMP_0109	= $0002
   857
   858 = 2A3E			@VarData	= I
   859 = 0004			@VarDataSize	= 4
   860
   861 26D5			@exit
   862 					.ifdef @new
   863 					@FreeMem #@VarData #@VarDataSize
   864 					eif
   865 26D5 60				rts						; ret
   866 				.endl
   867 26D6			l_003A
   868
   869 				; optimize FAIL ('MAINPROC', examples\hi_atariage.pas), line = 40
   870 26D6 20 BA 25			jsr MAINPROC
   871 				; CloseFile
   872
   873 26D9 8A 48			txa:pha
   874 26DB 38				sec
   875 					@closefile F
   875 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
   875 26DC AC FC 26		 LDY F+1
   875 26DF AD FB 26		 LDA F
   875 26E2 20 DA 20		 JSR @CLOSEFILE
   876 26E5 68 AA			pla:tax
   877
   878 				; ------------------------------------------------------------
   879
   880 = 292D			INTVALUE	= DATAORIGIN+$022E
   881 26E7			.var F	= DATAORIGIN+$0232 .word
   882 = 293D			adr.STRBUFFER	= DATAORIGIN+$023E
   883 26E7			.var STRBUFFER	= adr.STRBUFFER .word
   884 = 2A3D			KEY	= DATAORIGIN+$033E
   885 26E7			@exit
   886
   887 26E7 A2 00		@halt	ldx #0
   888 26E9 9A				txs
   889
   890 26EA 60				rts
   891
   892 				; ------------------------------------------------------------
   893
   894 26EB 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   895
   896 				; ------------------------------------------------------------
   897
   898 26FB			.local	@DEFINES
   899 26FB			ATARI
   900 				.endl
   901
   902 = 26FB 31 29		F
   902 = 26FD 3D 29		STRBUFFER
   902 				.endl							; MAIN
   903
   904 				; ------------------------------------------------------------
   905 				; ------------------------------------------------------------
   906
   907 				.macro	UNITINITIALIZATION
   908 				
   909 					.ifdef MAIN.SYSTEM.@UnitInit
   910 					jsr MAIN.SYSTEM.@UnitInit
   911 					eif
   912 				
   913 					.ifdef MAIN.DOS.@UnitInit
   914 					jsr MAIN.DOS.@UnitInit
   915 					eif
   916 				
   917 					.ifdef MAIN.STRUTILS.@UnitInit
   918 					jsr MAIN.STRUTILS.@UnitInit
   919 					eif
   920 				
   921 					.ifdef MAIN.SYSUTILS.@UnitInit
   922 					jsr MAIN.SYSUTILS.@UnitInit
   923 					eif
   924 				
   925 					.ifdef MAIN.ATARI.@UnitInit
   926 					jsr MAIN.ATARI.@UnitInit
   927 					eif
   928 				
   929 					.ifdef MAIN.CRT.@UnitInit
   930 					jsr MAIN.CRT.@UnitInit
   931 					eif
   932 				
   933 					.ifdef MAIN.TYPES.@UnitInit
   934 					jsr MAIN.TYPES.@UnitInit
   935 					eif
   936 				
   937 					.ifdef MAIN.GRAPH.@UnitInit
   938 					jsr MAIN.GRAPH.@UnitInit
   939 					eif
   940 				.endm
   941
   942 				; ------------------------------------------------------------
   943
   944 					ift .SIZEOF(MAIN.SYSTEM) > 0
   945 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   945 				SYSTEM: $24A2..$2510
   946 					eif
   947
   948 					ift .SIZEOF(MAIN.DOS) > 0
   949 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   950 					eif
   951
   952 					ift .SIZEOF(MAIN.STRUTILS) > 0
   953 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   954 					eif
   955
   956 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   957 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   958 					eif
   959
   960 					ift .SIZEOF(MAIN.ATARI) > 0
   961 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   962 					eif
   963
   964 					ift .SIZEOF(MAIN.CRT) > 0
   965 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   965 				CRT: $2511..$253E
   966 					eif
   967
   968 					ift .SIZEOF(MAIN.TYPES) > 0
   969 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
   970 					eif
   971
   972 					ift .SIZEOF(MAIN.GRAPH) > 0
   973 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
   973 				GRAPH: $253F..$25B9
   974 					eif
   975
   976 					.print 'CODE: ',CODEORIGIN,'..',*-1
   976 				CODE: $2000..$26FE
   977
   978 				; ------------------------------------------------------------
   979
   980 26FF			DATAORIGIN
   981 26FF 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   982 2717 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   983 272F 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   984 2747 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   985 275F 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   986 2777 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   987 278F 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   988 27A7 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   989 27BF 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   990 27D7 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   991 27EF 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   992 2807 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   993 281F 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   994 2837 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   995 284F 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   996 2867 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   997 287F 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   998 2897 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   999 28AF 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1000 28C7 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1001 28DF 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1002 28F7 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1003 290F 00 00 27 00 00 00 + .by  $00 $00 $27 $00 $00 $00 $17
  1004
  1005 = 0217			VARINITSIZE	= *-DATAORIGIN
  1006 = 0343			VARDATASIZE	= 835
  1007
  1008 = 2A42			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1009
  1010 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1010 				DATA: $26FF..$2A42
  1011
  1012 02E0-02E1> 76 24			run START
  1013
  1014 				; ------------------------------------------------------------
  1015
  1016 				.macro	STATICDATA
  1017 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $02 $53 $3A  $00 $0B $68 $69 $20 $61 $74 $61
  1018 				.by  $72 $69 $61 $67 $65 $00 $13 $68  $69 $2C $41 $74 $61 $72 $69 $41  $67 $65 $2E $2E $2E $2E $2E $2E
  1019 				.by  $2E $2E $00
  1020 				.endm
  1021
  1022 					end
