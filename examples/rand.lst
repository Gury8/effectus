mads 2.1.0
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $20E7..$21EF
    97
    98 				; ------------------------------------------------------------
    99
   100 21EF			START
   101 21EF BA				tsx
   102 21F0 8E 1E 23			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 000B			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 2337			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 21F3 A2 F5			ldx #256-VLEN
   115 21F5 A9 00			lda #0
   116 21F7 9D 42 22 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   119 					eif
   120
   121 21FD A2 0F			ldx #$0f
   122 21FF BD 40 03 9D 21 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 2208 E8				inx		; X = 0 !!!
   125 2209 86 8E			stx bp		; lo BP = 0
   126
   127 220B				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: rand.a65]
   128
   129 220B			.local	MAIN						; PROCEDURE
   130
   131 220B 4C 1A 23			jmp l_00EE
   132
   133 				; ------------------------------------------------------------
   134
   135 220E			.local	SYSTEM						; UNIT
   136
   137 220E			.local	RANDOM_00EE					; FUNCTION | ASSEMBLER | OVERLOAD
   138
   139 				; ------------------------------------------------------------
   140
   141 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   142 				; as Pointer
   143 220E B5 98 8D 3C 23		mva :STACKORIGIN,x RANGE
   144 2213 CA				dex						; sub bx, 1
   145
   146 				; ---------------------  ASM Block 009  ---------------------
   147
   148
   149 				;BYTE FUNC Rand(BYTE range)
   150 				; returns random number between 0 and
   151 				; range-1.  If range=0, then a random
   152 				; number between 0 and 255 is returned
   153
   154 2214 AC 0A D2			ldy	$d20a		; RANDOM
   155
   156 2217 AD 3C 23			lda	range
   157 221A F0 08			beq	stop
   158
   159 221C 85 8A			sta	ecx
   160 221E 84 82			sty	eax
   161
   162 2220 20 E7 20			jsr	imulCL
   163 2223 A8				tay
   164
   165 2224 8C 3D 23		stop	sty	Result
   166
   167 2227			@exit
   168
   169 				; ------------------------------------------------------------
   170
   171 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   172 				; as Pointer
   173
   174 2227 E8				inx						; add bx, 1
   175 2228 AD 3D 23 95 98		mva RESULT :STACKORIGIN,x
   176
   177 					.ifdef @new
   178 					@FreeMem #@VarData #@VarDataSize
   179 					eif
   180
   181 				; ------------------------------------------------------------
   182
   183 = 233C			RANGE	= DATAORIGIN+$000B
   184 = 233D			RESULT	= DATAORIGIN+$000C
   185
   186 = 233C			@VarData	= RANGE
   187 = 0002			@VarDataSize	= 2
   188
   189 222D 60				rts						; ret
   190 				.endl
   191
   192 				; ------------------------------------------------------------
   193
   194 = 0648			M_PI_2	= $0648
   195 = 0192			D_PI_2	= $0192
   196 = 0004			D_PI_180	= $0004
   197 = 0000			MGTIA	= $0000
   198 = 0080			MVBXE	= $0080
   199 = 0000			VBXE_XDLADR	= $0000
   200 = 0100			VBXE_BCBADR	= $0100
   201 = 1000			VBXE_MAPADR	= $1000
   202 = 5000			VBXE_OVRADR	= $5000
   203 = B000			VBXE_WINDOW	= $B000
   204 = 0000			IDLI	= $0000
   205 = 0001			IVBL	= $0001
   206 = 00FE			CH_DELCHR	= $00FE
   207 = 009B			CH_ENTER	= $009B
   208 = 001B			CH_ESC	= $001B
   209 = 001C			CH_CURS_UP	= $001C
   210 = 001D			CH_CURS_DOWN	= $001D
   211 = 001E			CH_CURS_LEFT	= $001E
   212 = 001F			CH_CURS_RIGHT	= $001F
   213 = 007F			CH_TAB	= $007F
   214 = 009B			CH_EOL	= $009B
   215 = 007D			CH_CLR	= $007D
   216 = 00FD			CH_BELL	= $00FD
   217 = 007E			CH_DEL	= $007E
   218 = 009C			CH_DELLINE	= $009C
   219 = 009D			CH_INSLINE	= $009D
   220 = 0000			COLOR_BLACK	= $0000
   221 = 000E			COLOR_WHITE	= $000E
   222 = 0032			COLOR_RED	= $0032
   223 = 0096			COLOR_CYAN	= $0096
   224 = 0068			COLOR_VIOLET	= $0068
   225 = 00C4			COLOR_GREEN	= $00C4
   226 = 0074			COLOR_BLUE	= $0074
   227 = 00EE			COLOR_YELLOW	= $00EE
   228 = 0028			COLOR_ORANGE	= $0028
   229 = 00E4			COLOR_BROWN	= $00E4
   230 = 003C			COLOR_LIGHTRED	= $003C
   231 = 0004			COLOR_GRAY1	= $0004
   232 = 0006			COLOR_GRAY2	= $0006
   233 = 000A			COLOR_GRAY3	= $000A
   234 = 00CC			COLOR_LIGHTGREEN	= $00CC
   235 = 007C			COLOR_LIGHTBLUE	= $007C
   236 = 0004			FMOPENREAD	= $0004
   237 = 0008			FMOPENWRITE	= $0008
   238 = 0009			FMOPENAPPEND	= $0009
   239 = 000C			FMOPENREADWRITE	= $000C
   240 = 2331			SCREENWIDTH	= DATAORIGIN+$0000
   241 = 2333			SCREENHEIGHT	= DATAORIGIN+$0002
   242 = 2335			DATESEPARATOR	= DATAORIGIN+$0004
   243 = D014			TVSYSTEM	= $D014
   244 = 02C0			adr.PALETTE	= $02C0
   245 222E			.var PALETTE	= adr.PALETTE .word
   246 = D012			adr.HPALETTE	= $D012
   247 222E			.var HPALETTE	= adr.HPALETTE .word
   248 = 2336			FILEMODE	= DATAORIGIN+$0005
   249 = 2337			SCREENMODE	= DATAORIGIN+$0006
   250 = 2338			IORESULT	= DATAORIGIN+$0007
   251 = 2339			EOLN	= DATAORIGIN+$0008
   252 = 233A			RNDSEED	= DATAORIGIN+$0009
   253
   254 = 222E C0 02		PALETTE
   254 = 2230 12 D0		HPALETTE
   254 				.endl							; UNIT SYSTEM
   255
   256 				; ------------------------------------------------------------
   257
   258 2232			.local	DOS						; UNIT
   259
   260 				; ------------------------------------------------------------
   261
   262 = D014			PALNTSC	= $D014
   263
   264 				.endl							; UNIT DOS
   265
   266 				; ------------------------------------------------------------
   267
   268 2232			.local	STRUTILS					; UNIT
   269
   270 				; ------------------------------------------------------------
   271
   272 				.endl							; UNIT STRUTILS
   273
   274 				; ------------------------------------------------------------
   275
   276 2232			.local	SYSUTILS					; UNIT
   277
   278 				; ------------------------------------------------------------
   279
   280 = 0001			FAREADONLY	= $0001
   281 = 0002			FAHIDDEN	= $0002
   282 = 0004			FASYSFILE	= $0004
   283 = 0008			FAVOLUMEID	= $0008
   284 = 0010			FADIRECTORY	= $0010
   285 = 0020			FAARCHIVE	= $0020
   286 = 003F			FAANYFILE	= $003F
   287
   288 				.endl							; UNIT SYSUTILS
   289
   290 				; ------------------------------------------------------------
   291
   292 2232			.local	ATARI						; UNIT
   293
   294 				; ------------------------------------------------------------
   295
   296 = 0012			RTCLOK	= $0012
   297 = 004D			ATRACT	= $004D
   298 = 0052			LMARGIN	= $0052
   299 = 0053			RMARGIN	= $0053
   300 = 0054			ROWCRS	= $0054
   301 = 0055			COLCRS	= $0055
   302 = 0057			DINDEX	= $0057
   303 = 0058			SAVMSC	= $0058
   304 = 006A			RAMTOP	= $006A
   305 = 0200			VDSLST	= $0200
   306 = 0230			SDLSTL	= $0230
   307 = 0290			TXTROW	= $0290
   308 = 0291			TXTCOL	= $0291
   309 = 0293			TINDEX	= $0293
   310 = 0294			TXTMSC	= $0294
   311 = 022F			SDMCTL	= $022F
   312 = 026F			GPRIOR	= $026F
   313 = 02F0			CRSINH	= $02F0
   314 = 02F3			CHACT	= $02F3
   315 = 02F4			CHBAS	= $02F4
   316 = 02FC			CH	= $02FC
   317 = 02C0			PCOLR0	= $02C0
   318 = 02C1			PCOLR1	= $02C1
   319 = 02C2			PCOLR2	= $02C2
   320 = 02C3			PCOLR3	= $02C3
   321 = 02C4			COLOR0	= $02C4
   322 = 02C5			COLOR1	= $02C5
   323 = 02C6			COLOR2	= $02C6
   324 = 02C7			COLOR3	= $02C7
   325 = 02C8			COLOR4	= $02C8
   326 = 02C8			COLBAKS	= $02C8
   327 = D000			HPOSP0	= $D000
   328 = D001			HPOSP1	= $D001
   329 = D002			HPOSP2	= $D002
   330 = D003			HPOSP3	= $D003
   331 = D004			HPOSM0	= $D004
   332 = D005			HPOSM1	= $D005
   333 = D006			HPOSM2	= $D006
   334 = D007			HPOSM3	= $D007
   335 = D008			SIZEP0	= $D008
   336 = D009			SIZEP1	= $D009
   337 = D00A			SIZEP2	= $D00A
   338 = D00B			SIZEP3	= $D00B
   339 = D00C			SIZEM	= $D00C
   340 = D00D			GRAFP0	= $D00D
   341 = D00E			GRAFP1	= $D00E
   342 = D00F			GRAFP2	= $D00F
   343 = D010			GRAFP3	= $D010
   344 = D011			GRAFM	= $D011
   345 = D004			P0PF	= $D004
   346 = D014			PAL	= $D014
   347 = D012			COLPM0	= $D012
   348 = D013			COLPM1	= $D013
   349 = D014			COLPM2	= $D014
   350 = D015			COLPM3	= $D015
   351 = D016			COLPF0	= $D016
   352 = D017			COLPF1	= $D017
   353 = D018			COLPF2	= $D018
   354 = D019			COLPF3	= $D019
   355 = D01A			COLBK	= $D01A
   356 = D01B			PRIOR	= $D01B
   357 = D01D			GRACTL	= $D01D
   358 = D01E			HITCLR	= $D01E
   359 = D200			AUDF1	= $D200
   360 = D201			AUDC1	= $D201
   361 = D202			AUDF2	= $D202
   362 = D203			AUDC2	= $D203
   363 = D204			AUDF3	= $D204
   364 = D205			AUDC3	= $D205
   365 = D206			AUDF4	= $D206
   366 = D207			AUDC4	= $D207
   367 = D208			AUDCTL	= $D208
   368 = D20F			SKSTAT	= $D20F
   369 = D301			PORTB	= $D301
   370 = D400			DMACTL	= $D400
   371 = D401			CHACTL	= $D401
   372 = D402			DLISTL	= $D402
   373 = D404			HSCROL	= $D404
   374 = D405			VSCROL	= $D405
   375 = D407			PMBASE	= $D407
   376 = D409			CHBASE	= $D409
   377 = D40A			WSYNC	= $D40A
   378 = D40B			VCOUNT	= $D40B
   379 = D40C			PENH	= $D40C
   380 = D40D			PENV	= $D40D
   381 = D40E			NMIEN	= $D40E
   382
   383 				.endl							; UNIT ATARI
   384
   385 				; ------------------------------------------------------------
   386
   387 2232			.local	CRT						; UNIT
   388
   389 2232			.local	READKEY						; FUNCTION | ASSEMBLER
   390
   391 				; ---------------------  ASM Block 063  ---------------------
   392
   393 2232 8A 48			txa:pha
   394
   395 2234 20 DF 21			@GetKey
   396
   397 2237 8D 3F 23			sta Result
   398
   399 223A 68 AA			pla:tax
   400
   401 223C			@exit
   402
   403 				; ------------------------------------------------------------
   404
   405 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   406 				; as Pointer
   407
   408 223C E8				inx						; add bx, 1
   409 223D AD 3F 23 95 98		mva RESULT :STACKORIGIN,x
   410
   411 					.ifdef @new
   412 					@FreeMem #@VarData #@VarDataSize
   413 					eif
   414
   415 				; ------------------------------------------------------------
   416
   417 = 233F			RESULT	= DATAORIGIN+$000E
   418
   419 = 233F			@VarData	= RESULT
   420 = 0001			@VarDataSize	= 1
   421
   422 2242 60				rts						; ret
   423 				.endl
   424
   425 				; ------------------------------------------------------------
   426
   427 = 233E			TEXTATTR	= DATAORIGIN+$000D
   428 = D01F			CONSOL	= $D01F
   429 = 0000			CN_START_SELECT_OPTION	= $0000
   430 = 0001			CN_SELECT_OPTION	= $0001
   431 = 0002			CN_START_OPTION	= $0002
   432 = 0003			CN_OPTION	= $0003
   433 = 0004			CN_START_SELECT	= $0004
   434 = 0005			CN_SELECT	= $0005
   435 = 0006			CN_START	= $0006
   436 = 0007			CN_NONE	= $0007
   437 = 0000			BW40	= $0000
   438 = 0001			CO40	= $0001
   439 = 0002			BW80	= $0002
   440 = 0003			CO80	= $0003
   441 = 0007			MONO	= $0007
   442 = 0001			C40	= $0001
   443 = 0003			C80	= $0003
   444 = 0000			BLACK	= $0000
   445 = 0001			BLUE	= $0001
   446 = 0002			GREEN	= $0002
   447 = 0003			CYAN	= $0003
   448 = 0004			RED	= $0004
   449 = 0005			MAGENTA	= $0005
   450 = 0006			BROWN	= $0006
   451 = 0007			LIGHTGRAY	= $0007
   452 = 0008			DARKGRAY	= $0008
   453 = 0009			LIGHTBLUE	= $0009
   454 = 000A			LIGHTGREEN	= $000A
   455 = 000B			LIGHTCYAN	= $000B
   456 = 000C			LIGHTRED	= $000C
   457 = 000D			LIGHTMAGENTA	= $000D
   458 = 000E			YELLOW	= $000E
   459 = 000F			WHITE	= $000F
   460 = 0080			BLINK	= $0080
   461
   462 				.endl							; UNIT CRT
   463
   464 2243			.local	MAINPROC					; PROCEDURE
   465
   466 				; optimize FAIL (100, examples\rand.pas), line = 17
   467 					@print #$7D
   467 				 LDY# $7D\ JSR @PRINT
   467 2243 A0 7D		 LDY# $7D
   467 2245 20 FF 20		 JSR @PRINT
   468
   469 				; optimize FAIL (100, examples\rand.pas), line = 18
   470 					@printSTRING #CODEORIGIN+$000D
   470 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   470 2248 A0 20		 LDY> CODEORIGIN+$000D
   470 224A A9 0D		 LDA< CODEORIGIN+$000D
   470 224C 20 08 21		 JSR @PRINTSTRING
   471 224F 20 FA 20			@printEOL
   472
   473 				; optimize FAIL (100, examples\rand.pas), line = 19
   474 					@printSTRING #CODEORIGIN+$0020
   474 				 LDY> CODEORIGIN+$0020\ LDA< CODEORIGIN+$0020\ JSR @PRINTSTRING
   474 2252 A0 20		 LDY> CODEORIGIN+$0020
   474 2254 A9 20		 LDA< CODEORIGIN+$0020
   474 2256 20 08 21		 JSR @PRINTSTRING
   475 2259 20 FA 20			@printEOL
   476
   477 				; optimize FAIL (100, examples\rand.pas), line = 20
   478 					@printSTRING #CODEORIGIN+$0047
   478 				 LDY> CODEORIGIN+$0047\ LDA< CODEORIGIN+$0047\ JSR @PRINTSTRING
   478 225C A0 20		 LDY> CODEORIGIN+$0047
   478 225E A9 47		 LDA< CODEORIGIN+$0047
   478 2260 20 08 21		 JSR @PRINTSTRING
   479 2263 20 FA 20			@printEOL
   480
   481 				; optimize FAIL (100, examples\rand.pas), line = 21
   482 					@printSTRING #CODEORIGIN+$0058
   482 				 LDY> CODEORIGIN+$0058\ LDA< CODEORIGIN+$0058\ JSR @PRINTSTRING
   482 2266 A0 20		 LDY> CODEORIGIN+$0058
   482 2268 A9 58		 LDA< CODEORIGIN+$0058
   482 226A 20 08 21		 JSR @PRINTSTRING
   483 226D 20 FA 20			@printEOL
   484
   485 				; optimize FAIL (100, examples\rand.pas), line = 22
   486 					@printSTRING #CODEORIGIN+$005A
   486 				 LDY> CODEORIGIN+$005A\ LDA< CODEORIGIN+$005A\ JSR @PRINTSTRING
   486 2270 A0 20		 LDY> CODEORIGIN+$005A
   486 2272 A9 5A		 LDA< CODEORIGIN+$005A
   486 2274 20 08 21		 JSR @PRINTSTRING
   487 2277 20 FA 20			@printEOL
   488
   489 				; optimize FAIL ('CRT.READKEY', examples\rand.pas), line = 23
   490 227A 20 32 22			jsr CRT.READKEY
   491 227D B5 98 8D 41 23		mva :STACKORIGIN,x KEY
   492 2282 CA				dex
   493
   494 				; optimize FAIL (100, examples\rand.pas), line = 24
   495 					@printSTRING #CODEORIGIN+$0057
   495 				 LDY> CODEORIGIN+$0057\ LDA< CODEORIGIN+$0057\ JSR @PRINTSTRING
   495 2283 A0 20		 LDY> CODEORIGIN+$0057
   495 2285 A9 57		 LDA< CODEORIGIN+$0057
   495 2287 20 08 21		 JSR @PRINTSTRING
   496 228A 20 FA 20			@printEOL
   497
   498 				; optimize FAIL (100, examples\rand.pas), line = 25
   499 					@printSTRING #CODEORIGIN+$0080
   499 				 LDY> CODEORIGIN+$0080\ LDA< CODEORIGIN+$0080\ JSR @PRINTSTRING
   499 228D A0 20		 LDY> CODEORIGIN+$0080
   499 228F A9 80		 LDA< CODEORIGIN+$0080
   499 2291 20 08 21		 JSR @PRINTSTRING
   500 2294 20 FA 20			@printEOL
   501
   502 				; optimize FAIL ('SYSTEM.RANDOM_00EE', examples\rand.pas), line = 26
   503 2297 E8				inx
   504 2298 A9 64 95 98			mva #$64 :STACKORIGIN,x
   505 229C 20 0E 22			jsr SYSTEM.RANDOM_00EE
   506 229F B5 98 8D 40 23		mva :STACKORIGIN,x I
   507 22A4 CA				dex
   508
   509 				; optimize FAIL (100, examples\rand.pas), line = 27
   510 22A5 E8				inx
   511 22A6 AD 40 23 95 98		mva I :STACKORIGIN,x
   512 22AB 20 48 21			jsr @printBYTE
   513 22AE CA				dex
   514 22AF 20 FA 20			@printEOL
   515
   516 				; optimize FAIL (100, examples\rand.pas), line = 28
   517 					@printSTRING #CODEORIGIN+$0057
   517 				 LDY> CODEORIGIN+$0057\ LDA< CODEORIGIN+$0057\ JSR @PRINTSTRING
   517 22B2 A0 20		 LDY> CODEORIGIN+$0057
   517 22B4 A9 57		 LDA< CODEORIGIN+$0057
   517 22B6 20 08 21		 JSR @PRINTSTRING
   518 22B9 20 FA 20			@printEOL
   519
   520 				; optimize FAIL (100, examples\rand.pas), line = 29
   521 					@printSTRING #CODEORIGIN+$00A3
   521 				 LDY> CODEORIGIN+$00A3\ LDA< CODEORIGIN+$00A3\ JSR @PRINTSTRING
   521 22BC A0 20		 LDY> CODEORIGIN+$00A3
   521 22BE A9 A3		 LDA< CODEORIGIN+$00A3
   521 22C0 20 08 21		 JSR @PRINTSTRING
   522 22C3 20 FA 20			@printEOL
   523
   524 				; optimize FAIL ('SYSTEM.RANDOM_00EE', examples\rand.pas), line = 30
   525 22C6 E8				inx
   526 22C7 A9 FF 95 98			mva #$FF :STACKORIGIN,x
   527 22CB 20 0E 22			jsr SYSTEM.RANDOM_00EE
   528 22CE B5 98 8D 40 23		mva :STACKORIGIN,x I
   529 22D3 CA				dex
   530
   531 				; optimize FAIL (100, examples\rand.pas), line = 31
   532 22D4 E8				inx
   533 22D5 AD 40 23 95 98		mva I :STACKORIGIN,x
   534 22DA 20 48 21			jsr @printBYTE
   535 22DD CA				dex
   536 22DE 20 FA 20			@printEOL
   537
   538 				; optimize FAIL (100, examples\rand.pas), line = 32
   539 					@printSTRING #CODEORIGIN+$0057
   539 				 LDY> CODEORIGIN+$0057\ LDA< CODEORIGIN+$0057\ JSR @PRINTSTRING
   539 22E1 A0 20		 LDY> CODEORIGIN+$0057
   539 22E3 A9 57		 LDA< CODEORIGIN+$0057
   539 22E5 20 08 21		 JSR @PRINTSTRING
   540 22E8 20 FA 20			@printEOL
   541
   542 				; optimize FAIL (100, examples\rand.pas), line = 33
   543 					@printSTRING #CODEORIGIN+$00C6
   543 				 LDY> CODEORIGIN+$00C6\ LDA< CODEORIGIN+$00C6\ JSR @PRINTSTRING
   543 22EB A0 20		 LDY> CODEORIGIN+$00C6
   543 22ED A9 C6		 LDA< CODEORIGIN+$00C6
   543 22EF 20 08 21		 JSR @PRINTSTRING
   544 22F2 20 FA 20			@printEOL
   545
   546 				; optimize FAIL ('SYSTEM.RANDOM_00EE', examples\rand.pas), line = 34
   547 22F5 E8				inx
   548 22F6 A9 03 95 98			mva #$03 :STACKORIGIN,x
   549 22FA 20 0E 22			jsr SYSTEM.RANDOM_00EE
   550 22FD B5 98 8D 40 23		mva :STACKORIGIN,x I
   551 2302 CA				dex
   552
   553 				; optimize FAIL (100, examples\rand.pas), line = 35
   554 2303 E8				inx
   555 2304 AD 40 23 95 98		mva I :STACKORIGIN,x
   556 2309 20 48 21			jsr @printBYTE
   557 230C CA				dex
   558 230D 20 FA 20			@printEOL
   559
   560 				; optimize FAIL ('CRT.READKEY', examples\rand.pas), line = 36
   561 2310 20 32 22			jsr CRT.READKEY
   562 2313 B5 98 8D 41 23		mva :STACKORIGIN,x KEY
   563 2318 CA				dex
   564 2319			@exit
   565 					.ifdef @new
   566 					@FreeMem #@VarData #@VarDataSize
   567 					eif
   568 2319 60				rts						; ret
   569 				.endl
   570 231A			l_00EE
   571
   572 				; optimize FAIL ('MAINPROC', examples\rand.pas), line = 40
   573 231A 20 43 22			jsr MAINPROC
   574
   575 				; ------------------------------------------------------------
   576
   577 = 2340			I	= DATAORIGIN+$000F
   578 = 2341			KEY	= DATAORIGIN+$0010
   579 231D			@exit
   580
   581 231D A2 00		@halt	ldx #0
   582 231F 9A				txs
   583
   584 2320 60				rts
   585
   586 				; ------------------------------------------------------------
   587
   588 2321 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   589
   590 				; ------------------------------------------------------------
   591
   592 2331			.local	@DEFINES
   593 2331			ATARI
   594 				.endl
   595
   596 				.endl							; MAIN
   597
   598 				; ------------------------------------------------------------
   599 				; ------------------------------------------------------------
   600
   601 				.macro	UNITINITIALIZATION
   602 				
   603 					.ifdef MAIN.SYSTEM.@UnitInit
   604 					jsr MAIN.SYSTEM.@UnitInit
   605 					eif
   606 				
   607 					.ifdef MAIN.DOS.@UnitInit
   608 					jsr MAIN.DOS.@UnitInit
   609 					eif
   610 				
   611 					.ifdef MAIN.STRUTILS.@UnitInit
   612 					jsr MAIN.STRUTILS.@UnitInit
   613 					eif
   614 				
   615 					.ifdef MAIN.SYSUTILS.@UnitInit
   616 					jsr MAIN.SYSUTILS.@UnitInit
   617 					eif
   618 				
   619 					.ifdef MAIN.ATARI.@UnitInit
   620 					jsr MAIN.ATARI.@UnitInit
   621 					eif
   622 				
   623 					.ifdef MAIN.CRT.@UnitInit
   624 					jsr MAIN.CRT.@UnitInit
   625 					eif
   626 				.endm
   627
   628 				; ------------------------------------------------------------
   629
   630 					ift .SIZEOF(MAIN.SYSTEM) > 0
   631 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   631 				SYSTEM: $220E..$2231
   632 					eif
   633
   634 					ift .SIZEOF(MAIN.DOS) > 0
   635 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   636 					eif
   637
   638 					ift .SIZEOF(MAIN.STRUTILS) > 0
   639 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   640 					eif
   641
   642 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   643 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   644 					eif
   645
   646 					ift .SIZEOF(MAIN.ATARI) > 0
   647 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   648 					eif
   649
   650 					ift .SIZEOF(MAIN.CRT) > 0
   651 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   651 				CRT: $2232..$2242
   652 					eif
   653
   654 					.print 'CODE: ',CODEORIGIN,'..',*-1
   654 				CODE: $2000..$2330
   655
   656 				; ------------------------------------------------------------
   657
   658 2331			DATAORIGIN
   659 2331 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   660
   661 = 0006			VARINITSIZE	= *-DATAORIGIN
   662 = 0011			VARDATASIZE	= 17
   663
   664 = 2342			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   665
   666 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   666 				DATA: $2331..$2342
   667
   668 02E0-02E1> EF 21			run START
   669
   670 				; ------------------------------------------------------------
   671
   672 				.macro	STATICDATA
   673 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $11 $45 $66  $66 $65 $63 $74 $75 $73 $20 $65
   674 				.by  $78 $61 $6D $70 $6C $65 $3A $00  $25 $52 $61 $6E $64 $6F $6D $20  $6E $75 $6D $62 $65 $72 $20 $67
   675 				.by  $65 $6E $65 $72 $61 $74 $6F $72  $20 $64 $65 $6D $6F $6E $73 $74  $72 $61 $74 $69 $6F $6E $00 $0F
   676 				.by  $28 $66 $75 $6E $63 $74 $69 $6F  $6E $20 $52 $61 $6E $64 $29 $00  $00 $00 $24 $50 $72 $65 $73 $73
   677 				.by  $20 $61 $6E $79 $20 $6B $65 $79  $20 $74 $6F $20 $73 $65 $65 $20  $72 $61 $6E $64 $6F $6D $20 $6E
   678 				.by  $75 $6D $62 $65 $72 $73 $21 $00  $21 $53 $65 $6C $65 $63 $74 $65  $64 $20 $6E $75 $6D $62 $65 $72
   679 				.by  $20 $62 $65 $74 $77 $65 $65 $6E  $20 $30 $20 $61 $6E $64 $20 $31  $30 $30 $00 $21 $53 $65 $6C $65
   680 				.by  $63 $74 $65 $64 $20 $6E $75 $6D  $62 $65 $72 $20 $62 $65 $74 $77  $65 $65 $6E $20 $30 $20 $61 $6E
   681 				.by  $64 $20 $32 $35 $35 $00 $1F $53  $65 $6C $65 $63 $74 $65 $64 $20  $6E $75 $6D $62 $65 $72 $20 $62
   682 				.by  $65 $74 $77 $65 $65 $6E $20 $30  $20 $61 $6E $64 $20 $33 $00
   683 				.endm
   684
   685 					end
