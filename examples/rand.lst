mads 2.1.0 build 8 (23 Dec 19)
   388 					opt l+
   101
   102 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   102 				ZPAGE: $0080..$00D7
   103
   104 				.print 'RTLIB: ',RTLIB,'..',*-1
   104 				RTLIB: $20E7..$222F
   105
   106 				; ------------------------------------------------------------
   107
   108 2230			START
   109 2230 BA				tsx
   110 2231 8E B2 23			stx MAIN.@halt+1
   111
   112 					.ifdef fmulinit
   113 					fmulinit
   114 					eif
   115
   116 = 010D			VLEN	= VARDATASIZE-VARINITSIZE
   117 = 23CD			VADR	= DATAORIGIN+VARINITSIZE
   118
   119 					ift VADR > $BFFF
   120 					ert 'Invalid memory address range ',VADR
   121 					eli (VLEN>0) && (VLEN<=256)
   122 					ldx #256-VLEN
   123 					lda #0
   124 					sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>0
   126 					@fill #VADR #VLEN #0
   126 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   126 2234 A9 CD 85 88 A9 23 +  MWA #VADR @FILL.PTR1
   126 223C A9 0D 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   126 2244 A9 00 85 84		 MVA #0 @FILL.PTR2
   126 2248 20 0A 21		 JSR @FILL
   127 					eif
   128
   129 					.ifdef MAIN.@DEFINES.ROMOFF
   130 					icl 'atari\romoff.asm'
   131 					.endif
   132
   133 224B A9 DA 85 82 A9 24 + 	mwa #PROGRAMSTACK psptr
   134
   135 2253 A2 0F			ldx #$0f					; DOS II+/D ParamStr
   136 2255 BD 40 03 9D B5 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   137
   138 225E E8				inx						; X = 0
   139 225F 86 90			stx bp						; BP = 0
   140
   141 2261 8E 08 D2			stx audctl					; reset POKEY
   142 2264 A9 03			lda #3
   143 2266 8D 0F D2			sta skctl
   144
   145 2269 CA				dex						; X = 255
   146
   147 226A				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: rand.a65]
Source: rand.a65
   148
   149 226A			.local	MAIN						; PROCEDURE
   150
   151 226A 4C AE 23			jmp l_00EE
   152
   153 				; ------------------------------------------------------------
   154
   155 226D			.local	SYSTEM						; UNIT
   156
   157 226D			.local	RANDOM_00EE					; FUNCTION | ASSEMBLER | OVERLOAD
   158
   159 				; ------------------------------------------------------------
   160
   161 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   162 				; as Pointer
   163 226D B5 98 8D D2 23		mva :STACKORIGIN,x RANGE
   164 2272 CA				dex
   165
   166 				; ---------------------  ASM Block 006  ---------------------
   167
   168
   169 				;BYTE FUNC Rand(BYTE range)
   170 				; returns random number between 0 and
   171 				; range-1.  If range=0, then a random
   172 				; number between 0 and 255 is returned
   173
   174 2273 AC 0A D2			ldy	$d20a		; RANDOM
   175
   176 2276 AD D2 23			lda	range
   177 2279 F0 08			beq	stop
   178
   179 227B 85 8C			sta	ecx
   180 227D 84 84			sty	eax
   181
   182 227F 20 52 21			jsr	imulCL
   183 2282 A8				tay
   184
   185 2283 8C D3 23		stop	sty	Result
   186
   187 2286			@exit
   188
   189 				; ------------------------------------------------------------
   190
   191 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   192 				; as Pointer
   193
   194 2286 E8				inx
   195 2287 AD D3 23 95 98		mva RESULT :STACKORIGIN,x
   196
   197 					.ifdef @new
   198 					lda <@VarData
   199 					sta :ztmp
   200 					lda >@VarData
   201 					ldy #@VarDataSize-1
   202 					jmp @FreeMem
   203 					eif
   204
   205 				; ------------------------------------------------------------
   206
   207 = 23D2			RANGE	= DATAORIGIN+$000B
   208 = 23D3			RESULT	= DATAORIGIN+$000C
   209
   210 = 23D2			@VarData	= RANGE
   211 = 0002			@VarDataSize	= 2
   212
   213 228C 60				rts						; ret
   214 				.endl
   215
   216 				; ------------------------------------------------------------
   217
   218 = 0101			__PORTB_BANKS	= $0101
   219 = 0648			M_PI_2	= $0648
   220 = 0192			D_PI_2	= $0192
   221 = 0004			D_PI_180	= $04
   222 = 0000			MGTIA	= $00
   223 = 0080			MVBXE	= $80
   224 = 0000			VBXE_XDLADR	= $00
   225 = 0100			VBXE_BCBADR	= $0100
   226 = 1000			VBXE_MAPADR	= $1000
   227 = 5000			VBXE_OVRADR	= $5000
   228 = B000			VBXE_WINDOW	= $B000
   229 = 0000			IDLI	= $00
   230 = 0001			IVBL	= $01
   231 = 00FE			CH_DELCHR	= $FE
   232 = 009B			CH_ENTER	= $9B
   233 = 001B			CH_ESC	= $1B
   234 = 001C			CH_CURS_UP	= $1C
   235 = 001D			CH_CURS_DOWN	= $1D
   236 = 001E			CH_CURS_LEFT	= $1E
   237 = 001F			CH_CURS_RIGHT	= $1F
   238 = 007F			CH_TAB	= $7F
   239 = 009B			CH_EOL	= $9B
   240 = 007D			CH_CLR	= $7D
   241 = 00FD			CH_BELL	= $FD
   242 = 007E			CH_DEL	= $7E
   243 = 009C			CH_DELLINE	= $9C
   244 = 009D			CH_INSLINE	= $9D
   245 = 0000			COLOR_BLACK	= $00
   246 = 000E			COLOR_WHITE	= $0E
   247 = 0032			COLOR_RED	= $32
   248 = 0096			COLOR_CYAN	= $96
   249 = 0068			COLOR_VIOLET	= $68
   250 = 00C4			COLOR_GREEN	= $C4
   251 = 0074			COLOR_BLUE	= $74
   252 = 00EE			COLOR_YELLOW	= $EE
   253 = 0028			COLOR_ORANGE	= $28
   254 = 00E4			COLOR_BROWN	= $E4
   255 = 003C			COLOR_LIGHTRED	= $3C
   256 = 0004			COLOR_GRAY1	= $04
   257 = 0006			COLOR_GRAY2	= $06
   258 = 000A			COLOR_GRAY3	= $0A
   259 = 00CC			COLOR_LIGHTGREEN	= $CC
   260 = 007C			COLOR_LIGHTBLUE	= $7C
   261 = 0004			FMOPENREAD	= $04
   262 = 0008			FMOPENWRITE	= $08
   263 = 0009			FMOPENAPPEND	= $09
   264 = 000C			FMOPENREADWRITE	= $0C
   265 = 23C7			SCREENWIDTH	= DATAORIGIN+$0000
   266 = 23C9			SCREENHEIGHT	= DATAORIGIN+$0002
   267 = 23CB			DATESEPARATOR	= DATAORIGIN+$0004
   268 = D014			TVSYSTEM	= $D014
   269 = 02C0			adr.PALETTE	= $02C0
   270 228D			.var PALETTE	= adr.PALETTE .word
   271 = D012			adr.HPALETTE	= $D012
   272 228D			.var HPALETTE	= adr.HPALETTE .word
   273 = 23CC			FILEMODE	= DATAORIGIN+$0005
   274 = 23CD			GRAPHMODE	= DATAORIGIN+$0006
   275 = 23CE			IORESULT	= DATAORIGIN+$0007
   276 = 23CF			EOLN	= DATAORIGIN+$0008
   277 = 23D0			RNDSEED	= DATAORIGIN+$0009
   278
   279 = 228D C0 02		PALETTE
   279 = 228F 12 D0		HPALETTE
   279 				.endl							; UNIT SYSTEM
   280
   281 				; ------------------------------------------------------------
   282
   283 2291			.local	ATARI						; UNIT
   284
   285 				; ------------------------------------------------------------
   286
   287 = 0012			RTCLOK	= $12
   288 = 004D			ATRACT	= $4D
   289 = 0052			LMARGIN	= $52
   290 = 0053			RMARGIN	= $53
   291 = 0054			ROWCRS	= $54
   292 = 0055			COLCRS	= $55
   293 = 0057			DINDEX	= $57
   294 = 0058			SAVMSC	= $58
   295 = 0062			PALNTS	= $62
   296 = 006A			RAMTOP	= $6A
   297 = 0200			VDSLST	= $0200
   298 = 0230			SDLSTL	= $0230
   299 = 0290			TXTROW	= $0290
   300 = 0291			TXTCOL	= $0291
   301 = 0293			TINDEX	= $0293
   302 = 0294			TXTMSC	= $0294
   303 = 022F			SDMCTL	= $022F
   304 = 026F			GPRIOR	= $026F
   305 = 02F0			CRSINH	= $02F0
   306 = 02F3			CHACT	= $02F3
   307 = 02F4			CHBAS	= $02F4
   308 = 02FC			CH	= $02FC
   309 = 02C0			PCOLR0	= $02C0
   310 = 02C1			PCOLR1	= $02C1
   311 = 02C2			PCOLR2	= $02C2
   312 = 02C3			PCOLR3	= $02C3
   313 = 02C4			COLOR0	= $02C4
   314 = 02C5			COLOR1	= $02C5
   315 = 02C6			COLOR2	= $02C6
   316 = 02C7			COLOR3	= $02C7
   317 = 02C8			COLOR4	= $02C8
   318 = 02C8			COLBAKS	= $02C8
   319 = D000			HPOSP0	= $D000
   320 = D001			HPOSP1	= $D001
   321 = D002			HPOSP2	= $D002
   322 = D003			HPOSP3	= $D003
   323 = D004			HPOSM0	= $D004
   324 = D005			HPOSM1	= $D005
   325 = D006			HPOSM2	= $D006
   326 = D007			HPOSM3	= $D007
   327 = D008			SIZEP0	= $D008
   328 = D009			SIZEP1	= $D009
   329 = D00A			SIZEP2	= $D00A
   330 = D00B			SIZEP3	= $D00B
   331 = D00C			SIZEM	= $D00C
   332 = D00D			GRAFP0	= $D00D
   333 = D00E			GRAFP1	= $D00E
   334 = D00F			GRAFP2	= $D00F
   335 = D010			GRAFP3	= $D010
   336 = D011			GRAFM	= $D011
   337 = D004			P0PF	= $D004
   338 = D014			PAL	= $D014
   339 = D012			COLPM0	= $D012
   340 = D013			COLPM1	= $D013
   341 = D014			COLPM2	= $D014
   342 = D015			COLPM3	= $D015
   343 = D016			COLPF0	= $D016
   344 = D017			COLPF1	= $D017
   345 = D018			COLPF2	= $D018
   346 = D019			COLPF3	= $D019
   347 = D01A			COLBK	= $D01A
   348 = D01B			PRIOR	= $D01B
   349 = D01D			GRACTL	= $D01D
   350 = D01E			HITCLR	= $D01E
   351 = D200			AUDF1	= $D200
   352 = D201			AUDC1	= $D201
   353 = D202			AUDF2	= $D202
   354 = D203			AUDC2	= $D203
   355 = D204			AUDF3	= $D204
   356 = D205			AUDC3	= $D205
   357 = D206			AUDF4	= $D206
   358 = D207			AUDC4	= $D207
   359 = D208			AUDCTL	= $D208
   360 = D20F			SKSTAT	= $D20F
   361 = D301			PORTB	= $D301
   362 = D400			DMACTL	= $D400
   363 = D401			CHACTL	= $D401
   364 = D402			DLISTL	= $D402
   365 = D404			HSCROL	= $D404
   366 = D405			VSCROL	= $D405
   367 = D407			PMBASE	= $D407
   368 = D409			CHBASE	= $D409
   369 = D40A			WSYNC	= $D40A
   370 = D40B			VCOUNT	= $D40B
   371 = D40C			PENH	= $D40C
   372 = D40D			PENV	= $D40D
   373 = D40E			NMIEN	= $D40E
   374
   375 				.endl							; UNIT ATARI
   376
   377 				; ------------------------------------------------------------
   378
   379 2291			.local	CRT						; UNIT
   380
   381 2291			.local	READKEY						; FUNCTION | ASSEMBLER
   382
   383 				; ---------------------  ASM Block 049  ---------------------
   384
   385 2291 8A 48			txa:pha
   386
   387 2293 20 E7 20			@GetKey
   388
   389 2296 8D D5 23			sta Result
   390
   391 2299 68 AA			pla:tax
   392
   393 229B			@exit
   394
   395 				; ------------------------------------------------------------
   396
   397 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   398 				; as Pointer
   399
   400 229B E8				inx
   401 229C AD D5 23 95 98		mva RESULT :STACKORIGIN,x
   402
   403 					.ifdef @new
   404 					lda <@VarData
   405 					sta :ztmp
   406 					lda >@VarData
   407 					ldy #@VarDataSize-1
   408 					jmp @FreeMem
   409 					eif
   410
   411 				; ------------------------------------------------------------
   412
   413 = 23D5			RESULT	= DATAORIGIN+$000E
   414
   415 = 23D5			@VarData	= RESULT
   416 = 0001			@VarDataSize	= 1
   417
   418 22A1 60				rts						; ret
   419 				.endl
   420
   421 				; ------------------------------------------------------------
   422
   423 = 23D4			TEXTATTR	= DATAORIGIN+$000D
   424 = D01F			CONSOL	= $D01F
   425 = 0000			CN_START_SELECT_OPTION	= $00
   426 = 0001			CN_SELECT_OPTION	= $01
   427 = 0002			CN_START_OPTION	= $02
   428 = 0003			CN_OPTION	= $03
   429 = 0004			CN_START_SELECT	= $04
   430 = 0005			CN_SELECT	= $05
   431 = 0006			CN_START	= $06
   432 = 0007			CN_NONE	= $07
   433 = 0000			BW40	= $00
   434 = 0001			CO40	= $01
   435 = 0002			BW80	= $02
   436 = 0003			CO80	= $03
   437 = 0007			MONO	= $07
   438 = 0001			C40	= $01
   439 = 0003			C80	= $03
   440 = 0000			BLACK	= $00
   441 = 0001			BLUE	= $01
   442 = 0002			GREEN	= $02
   443 = 0003			CYAN	= $03
   444 = 0004			RED	= $04
   445 = 0005			MAGENTA	= $05
   446 = 0006			BROWN	= $06
   447 = 0007			LIGHTGRAY	= $07
   448 = 0008			DARKGRAY	= $08
   449 = 0009			LIGHTBLUE	= $09
   450 = 000A			LIGHTGREEN	= $0A
   451 = 000B			LIGHTCYAN	= $0B
   452 = 000C			LIGHTRED	= $0C
   453 = 000D			LIGHTMAGENTA	= $0D
   454 = 000E			YELLOW	= $0E
   455 = 000F			WHITE	= $0F
   456 = 0080			BLINK	= $80
   457
   458 				.endl							; UNIT CRT
   459
   460 				; ------------------------------------------------------------
   461
   462 22A2			.local	DOS						; UNIT
   463
   464 				; ------------------------------------------------------------
   465
   466 = D014			PALNTSC	= $D014
   467
   468 				.endl							; UNIT DOS
   469
   470 				; ------------------------------------------------------------
   471
   472 22A2			.local	STRUTILS					; UNIT
   473
   474 				; ------------------------------------------------------------
   475
   476 				.endl							; UNIT STRUTILS
   477
   478 				; ------------------------------------------------------------
   479
   480 22A2			.local	SYSUTILS					; UNIT
   481
   482 				; ------------------------------------------------------------
   483
   484 = 0001			FAREADONLY	= $01
   485 = 0002			FAHIDDEN	= $02
   486 = 0004			FASYSFILE	= $04
   487 = 0008			FAVOLUMEID	= $08
   488 = 0010			FADIRECTORY	= $10
   489 = 0020			FAARCHIVE	= $20
   490 = 003F			FAANYFILE	= $3F
   491
   492 				.endl							; UNIT SYSUTILS
   493
   494 				; ------------------------------------------------------------
   495
   496 22A2			.local	CIO						; UNIT
   497
   498 22A2			.local	GET						; FUNCTION | ASSEMBLER
   499
   500 				; ------------------------------------------------------------
   501
   502 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   503 				; as Pointer
   504 22A2 B5 98 8D D6 23		mva :STACKORIGIN,x CHN
   505 22A7 CA				dex
   506
   507 				; ---------------------  ASM Block 080  ---------------------
   508
   509 22A8 8A 48			txa:pha
   510
   511 22AA AD D6 23			lda chn
   512 22AD 0A 0A 0A 0A			:4 asl @
   513 22B1 AA				tax
   514
   515 22B2 A9 07			lda #7		;get char command
   516 22B4 9D 42 03			sta iccmd,x
   517
   518 22B7 A9 00			lda #$00	;zero out the unused
   519 22B9 9D 48 03			sta icbufl,x	;store in accumulator
   520 22BC 9D 49 03			sta icbufh,x	;...after CIOV jump
   521
   522 22BF				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 22BF 20 56 E4				jsr CIOV
Source: rand.a65
   523
   524 22C2 8C CE 23			sty MAIN.SYSTEM.IOResult
   525
   526 22C5 8D D7 23			sta Result
   527
   528 22C8 68 AA			pla:tax
   529
   530 22CA			@exit
   531
   532 				; ------------------------------------------------------------
   533
   534 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   535 				; as Pointer
   536
   537 22CA E8				inx
   538 22CB AD D7 23 95 98		mva RESULT :STACKORIGIN,x
   539
   540 					.ifdef @new
   541 					lda <@VarData
   542 					sta :ztmp
   543 					lda >@VarData
   544 					ldy #@VarDataSize-1
   545 					jmp @FreeMem
   546 					eif
   547
   548 				; ------------------------------------------------------------
   549
   550 = 23D6			CHN	= DATAORIGIN+$000F
   551 = 23D7			RESULT	= DATAORIGIN+$0010
   552
   553 = 23D6			@VarData	= CHN
   554 = 0002			@VarDataSize	= 2
   555
   556 22D0 60				rts						; ret
   557 				.endl
   558
   559 				; ------------------------------------------------------------
   560
   561 				.endl							; UNIT CIO
   562
   563 22D1			.local	MAINPROC					; PROCEDURE
   564
   565 				; optimize FAIL (100, examples\rand.pas), line = 19
   566 					@print #$7D
   566 				 LDY# $7D\ JSR @PRINT
   566 22D1 A0 7D		 LDY# $7D
   566 22D3 20 6B 21		 JSR @PRINT
   567
   568 				; optimize FAIL (100, examples\rand.pas), line = 20
   569 					@printSTRING #CODEORIGIN+$000D
   569 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   569 22D6 A0 20		 LDY> CODEORIGIN+$000D
   569 22D8 A9 0D		 LDA< CODEORIGIN+$000D
   569 22DA 20 74 21		 JSR @PRINTSTRING
   570 22DD 20 66 21			@printEOL
   571
   572 				; optimize FAIL (100, examples\rand.pas), line = 21
   573 					@printSTRING #CODEORIGIN+$0020
   573 				 LDY> CODEORIGIN+$0020\ LDA< CODEORIGIN+$0020\ JSR @PRINTSTRING
   573 22E0 A0 20		 LDY> CODEORIGIN+$0020
   573 22E2 A9 20		 LDA< CODEORIGIN+$0020
   573 22E4 20 74 21		 JSR @PRINTSTRING
   574 22E7 20 66 21			@printEOL
   575
   576 				; optimize FAIL (100, examples\rand.pas), line = 22
   577 					@printSTRING #CODEORIGIN+$0047
   577 				 LDY> CODEORIGIN+$0047\ LDA< CODEORIGIN+$0047\ JSR @PRINTSTRING
   577 22EA A0 20		 LDY> CODEORIGIN+$0047
   577 22EC A9 47		 LDA< CODEORIGIN+$0047
   577 22EE 20 74 21		 JSR @PRINTSTRING
   578 22F1 20 66 21			@printEOL
   579
   580 				; optimize FAIL (100, examples\rand.pas), line = 23
   581 					@printSTRING #CODEORIGIN+$0058
   581 				 LDY> CODEORIGIN+$0058\ LDA< CODEORIGIN+$0058\ JSR @PRINTSTRING
   581 22F4 A0 20		 LDY> CODEORIGIN+$0058
   581 22F6 A9 58		 LDA< CODEORIGIN+$0058
   581 22F8 20 74 21		 JSR @PRINTSTRING
   582 22FB 20 66 21			@printEOL
   583
   584 				; optimize FAIL (100, examples\rand.pas), line = 24
   585 					@printSTRING #CODEORIGIN+$005A
   585 				 LDY> CODEORIGIN+$005A\ LDA< CODEORIGIN+$005A\ JSR @PRINTSTRING
   585 22FE A0 20		 LDY> CODEORIGIN+$005A
   585 2300 A9 5A		 LDA< CODEORIGIN+$005A
   585 2302 20 74 21		 JSR @PRINTSTRING
   586 2305 20 66 21			@printEOL
   587
   588 				; optimize FAIL ('CIO.GET', examples\rand.pas), line = 25
   589 2308 E8				inx
   590 2309 A9 07 95 98			mva #$07 :STACKORIGIN,x
   591 230D 20 A2 22			jsr CIO.GET
   592 2310 B5 98 8D D9 24		mva :STACKORIGIN,x KEY
   593 2315 CA				dex
   594
   595 2316 20 91 22			jsr CRT.READKEY					; call Entry
   596
   597 2319 CA				dex
   598
   599 				; optimize FAIL (100, examples\rand.pas), line = 27
   600 					@printSTRING #CODEORIGIN+$0057
   600 				 LDY> CODEORIGIN+$0057\ LDA< CODEORIGIN+$0057\ JSR @PRINTSTRING
   600 231A A0 20		 LDY> CODEORIGIN+$0057
   600 231C A9 57		 LDA< CODEORIGIN+$0057
   600 231E 20 74 21		 JSR @PRINTSTRING
   601 2321 20 66 21			@printEOL
   602
   603 				; optimize FAIL (100, examples\rand.pas), line = 28
   604 					@printSTRING #CODEORIGIN+$0080
   604 				 LDY> CODEORIGIN+$0080\ LDA< CODEORIGIN+$0080\ JSR @PRINTSTRING
   604 2324 A0 20		 LDY> CODEORIGIN+$0080
   604 2326 A9 80		 LDA< CODEORIGIN+$0080
   604 2328 20 74 21		 JSR @PRINTSTRING
   605 232B 20 66 21			@printEOL
   606
   607 				; optimize FAIL ('SYSTEM.RANDOM_00EE', examples\rand.pas), line = 29
   608 232E E8				inx
   609 232F A9 64 95 98			mva #$64 :STACKORIGIN,x
   610 2333 20 6D 22			jsr SYSTEM.RANDOM_00EE
   611 2336 B5 98 8D D8 24		mva :STACKORIGIN,x I
   612 233B CA				dex
   613
   614 				; optimize FAIL (100, examples\rand.pas), line = 30
   615 233C AD D8 24			lda I
   616 233F 20 A5 21			jsr @printBYTE._a
   617 2342 20 66 21			@printEOL
   618
   619 				; optimize FAIL (100, examples\rand.pas), line = 31
   620 					@printSTRING #CODEORIGIN+$0057
   620 				 LDY> CODEORIGIN+$0057\ LDA< CODEORIGIN+$0057\ JSR @PRINTSTRING
   620 2345 A0 20		 LDY> CODEORIGIN+$0057
   620 2347 A9 57		 LDA< CODEORIGIN+$0057
   620 2349 20 74 21		 JSR @PRINTSTRING
   621 234C 20 66 21			@printEOL
   622
   623 				; optimize FAIL (100, examples\rand.pas), line = 32
   624 					@printSTRING #CODEORIGIN+$00A3
   624 				 LDY> CODEORIGIN+$00A3\ LDA< CODEORIGIN+$00A3\ JSR @PRINTSTRING
   624 234F A0 20		 LDY> CODEORIGIN+$00A3
   624 2351 A9 A3		 LDA< CODEORIGIN+$00A3
   624 2353 20 74 21		 JSR @PRINTSTRING
   625 2356 20 66 21			@printEOL
   626
   627 				; optimize FAIL ('SYSTEM.RANDOM_00EE', examples\rand.pas), line = 33
   628 2359 E8				inx
   629 235A A9 FF 95 98			mva #$FF :STACKORIGIN,x
   630 235E 20 6D 22			jsr SYSTEM.RANDOM_00EE
   631 2361 B5 98 8D D8 24		mva :STACKORIGIN,x I
   632 2366 CA				dex
   633
   634 				; optimize FAIL (100, examples\rand.pas), line = 34
   635 2367 AD D8 24			lda I
   636 236A 20 A5 21			jsr @printBYTE._a
   637 236D 20 66 21			@printEOL
   638
   639 				; optimize FAIL (100, examples\rand.pas), line = 35
   640 					@printSTRING #CODEORIGIN+$0057
   640 				 LDY> CODEORIGIN+$0057\ LDA< CODEORIGIN+$0057\ JSR @PRINTSTRING
   640 2370 A0 20		 LDY> CODEORIGIN+$0057
   640 2372 A9 57		 LDA< CODEORIGIN+$0057
   640 2374 20 74 21		 JSR @PRINTSTRING
   641 2377 20 66 21			@printEOL
   642
   643 				; optimize FAIL (100, examples\rand.pas), line = 36
   644 					@printSTRING #CODEORIGIN+$00C6
   644 				 LDY> CODEORIGIN+$00C6\ LDA< CODEORIGIN+$00C6\ JSR @PRINTSTRING
   644 237A A0 20		 LDY> CODEORIGIN+$00C6
   644 237C A9 C6		 LDA< CODEORIGIN+$00C6
   644 237E 20 74 21		 JSR @PRINTSTRING
   645 2381 20 66 21			@printEOL
   646
   647 				; optimize FAIL ('SYSTEM.RANDOM_00EE', examples\rand.pas), line = 37
   648 2384 E8				inx
   649 2385 A9 03 95 98			mva #$03 :STACKORIGIN,x
   650 2389 20 6D 22			jsr SYSTEM.RANDOM_00EE
   651 238C B5 98 8D D8 24		mva :STACKORIGIN,x I
   652 2391 CA				dex
   653
   654 				; optimize FAIL (100, examples\rand.pas), line = 38
   655 2392 AD D8 24			lda I
   656 2395 20 A5 21			jsr @printBYTE._a
   657 2398 20 66 21			@printEOL
   658
   659 				; optimize FAIL ('CIO.GET', examples\rand.pas), line = 39
   660 239B E8				inx
   661 239C A9 07 95 98			mva #$07 :STACKORIGIN,x
   662 23A0 20 A2 22			jsr CIO.GET
   663 23A3 B5 98 8D D9 24		mva :STACKORIGIN,x KEY
   664 23A8 CA				dex
   665
   666 23A9 20 91 22			jsr CRT.READKEY					; call Entry
   667
   668 23AC CA				dex
   669 23AD			@exit
   670 					.ifdef @new
   671 					lda <@VarData
   672 					sta :ztmp
   673 					lda >@VarData
   674 					ldy #@VarDataSize-1
   675 					jmp @FreeMem
   676 					eif
   677 23AD 60				rts						; ret
   678 				.endl
   679 23AE			l_00EE
   680
   681 				; optimize FAIL ('MAINPROC', examples\rand.pas), line = 44
   682 23AE 20 D1 22			jsr MAINPROC
   683
   684 				; ------------------------------------------------------------
   685
   686 = 23D8			adr.STRBUFFER	= DATAORIGIN+$0011
   687 23B1			.var STRBUFFER	= adr.STRBUFFER .word
   688 = 24D8			I	= DATAORIGIN+$0111
   689 = 24D9			KEY	= DATAORIGIN+$0112
   690 23B1			@exit
   691
   692 23B1 A2 00		@halt	ldx #0
   693 23B3 9A				txs
   694 					.ifdef MAIN.@DEFINES.ROMOFF
   695 					inc portb
   696 					.endif
   697
   698 23B4 60				rts
   699
   700 				; ------------------------------------------------------------
   701
   702 23B5 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   703
   704 				; ------------------------------------------------------------
   705
   706 23C5			.local	@DEFINES
   707 23C5			ATARI
   708 				.endl
   709
   710 = 23C5 D8 23		STRBUFFER
   710 				.endl							; MAIN
   711
   712 				; ------------------------------------------------------------
   713 				; ------------------------------------------------------------
   714
   715 				.macro	UNITINITIALIZATION
   716 				
   717 					.ifdef MAIN.SYSTEM.@UnitInit
   718 					jsr MAIN.SYSTEM.@UnitInit
   719 					eif
   720 				
   721 					.ifdef MAIN.ATARI.@UnitInit
   722 					jsr MAIN.ATARI.@UnitInit
   723 					eif
   724 				
   725 					.ifdef MAIN.CRT.@UnitInit
   726 					jsr MAIN.CRT.@UnitInit
   727 					eif
   728 				
   729 					.ifdef MAIN.DOS.@UnitInit
   730 					jsr MAIN.DOS.@UnitInit
   731 					eif
   732 				
   733 					.ifdef MAIN.STRUTILS.@UnitInit
   734 					jsr MAIN.STRUTILS.@UnitInit
   735 					eif
   736 				
   737 					.ifdef MAIN.SYSUTILS.@UnitInit
   738 					jsr MAIN.SYSUTILS.@UnitInit
   739 					eif
   740 				
   741 					.ifdef MAIN.CIO.@UnitInit
   742 					jsr MAIN.CIO.@UnitInit
   743 					eif
   744 				.endm
   745
   746 				; ------------------------------------------------------------
   747
   748 					ift .SIZEOF(MAIN.SYSTEM) > 0
   749 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   749 				SYSTEM: $226D..$2290
   750 					eif
   751
   752 					ift .SIZEOF(MAIN.ATARI) > 0
   753 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   754 					eif
   755
   756 					ift .SIZEOF(MAIN.CRT) > 0
   757 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   757 				CRT: $2291..$22A1
   758 					eif
   759
   760 					ift .SIZEOF(MAIN.DOS) > 0
   761 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   762 					eif
   763
   764 					ift .SIZEOF(MAIN.STRUTILS) > 0
   765 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   766 					eif
   767
   768 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   769 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   770 					eif
   771
   772 					ift .SIZEOF(MAIN.CIO) > 0
   773 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
   773 				CIO: $22A2..$22D0
   774 					eif
   775
   776 					.print 'CODE: ',CODEORIGIN,'..',*-1
   776 				CODE: $2000..$23C6
   777
   778 				; ------------------------------------------------------------
   779
   780 23C7			DATAORIGIN
   781 23C7 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   782
   783 = 0006			VARINITSIZE	= *-DATAORIGIN
   784 = 0113			VARDATASIZE	= 275
   785
   786 = 24DA			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   787
   788 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   788 				DATA: $23C7..$24DA
   789
   790 02E0-02E1> 30 22			run START
   791
   792 				; ------------------------------------------------------------
   793
   794 				.macro	STATICDATA
   795 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $11 $45 $66  $66 $65 $63 $74 $75 $73 $20 $65
   796 				.by  $78 $61 $6D $70 $6C $65 $3A $00  $25 $52 $61 $6E $64 $6F $6D $20  $6E $75 $6D $62 $65 $72 $20 $67
   797 				.by  $65 $6E $65 $72 $61 $74 $6F $72  $20 $64 $65 $6D $6F $6E $73 $74  $72 $61 $74 $69 $6F $6E $00 $0F
   798 				.by  $28 $66 $75 $6E $63 $74 $69 $6F  $6E $20 $52 $61 $6E $64 $29 $00  $00 $00 $24 $50 $72 $65 $73 $73
   799 				.by  $20 $61 $6E $79 $20 $6B $65 $79  $20 $74 $6F $20 $73 $65 $65 $20  $72 $61 $6E $64 $6F $6D $20 $6E
   800 				.by  $75 $6D $62 $65 $72 $73 $21 $00  $21 $53 $65 $6C $65 $63 $74 $65  $64 $20 $6E $75 $6D $62 $65 $72
   801 				.by  $20 $62 $65 $74 $77 $65 $65 $6E  $20 $30 $20 $61 $6E $64 $20 $31  $30 $30 $00 $21 $53 $65 $6C $65
   802 				.by  $63 $74 $65 $64 $20 $6E $75 $6D  $62 $65 $72 $20 $62 $65 $74 $77  $65 $65 $6E $20 $30 $20 $61 $6E
   803 				.by  $64 $20 $32 $35 $35 $00 $1F $53  $65 $6C $65 $63 $74 $65 $64 $20  $6E $75 $6D $62 $65 $72 $20 $62
   804 				.by  $65 $74 $77 $65 $65 $6E $20 $30  $20 $61 $6E $64 $20 $33 $00
   805 				.endm
   806
   807 					end
