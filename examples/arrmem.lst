mads 2.1.0
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $204B..$2140
    97
    98 				; ------------------------------------------------------------
    99
   100 2140			START
   101 2140 BA				tsx
   102 2141 8E 06 23			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 000A			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 2325			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 2144 A2 F6			ldx #256-VLEN
   115 2146 A9 00			lda #0
   116 2148 9D 2F 22 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   119 					eif
   120
   121 214E A2 0F			ldx #$0f
   122 2150 BD 40 03 9D 09 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 2159 E8				inx		; X = 0 !!!
   125 215A 86 8E			stx bp		; lo BP = 0
   126
   127 215C				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: arrmem.a65]
   128
   129 215C			.local	MAIN						; PROCEDURE
   130
   131 215C 4C 02 23			jmp l_0052
   132
   133 				; ------------------------------------------------------------
   134
   135 215F			.local	SYSTEM						; UNIT
   136
   137 215F			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   138
   139 				; ------------------------------------------------------------
   140
   141 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   142 				; as Pointer
   143 215F B5 98 85 86			mva :STACKORIGIN,x A
   144 2163 B5 A8 85 87			mva :STACKORIGIN+STACKWIDTH,x A+1
   145 2167 CA				dex						; sub bx, 1
   146
   147 				; ---------------------  ASM Block 004  ---------------------
   148
   149 2168 A0 00			ldy #0
   150 216A B1 86 8D 2A 23		mva (edx),y Result
   151
   152 216F			@exit
   153
   154 				; ------------------------------------------------------------
   155
   156 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   157 				; as Pointer
   158
   159 216F E8				inx						; add bx, 1
   160 2170 AD 2A 23 95 98		mva RESULT :STACKORIGIN,x
   161
   162 					.ifdef @new
   163 					@FreeMem #@VarData #@VarDataSize
   164 					eif
   165
   166 				; ------------------------------------------------------------
   167
   168 = 0086			A	= edx
   169 = 232A			RESULT	= DATAORIGIN+$000B
   170
   171 = 232A			@VarData	= RESULT
   172 = 0001			@VarDataSize	= 1
   173
   174 2175 60				rts						; ret
   175 				.endl
   176
   177 				; ------------------------------------------------------------
   178
   179 = 0648			M_PI_2	= $0648
   180 = 0192			D_PI_2	= $0192
   181 = 0004			D_PI_180	= $0004
   182 = 0000			MGTIA	= $0000
   183 = 0080			MVBXE	= $0080
   184 = 0000			VBXE_XDLADR	= $0000
   185 = 0100			VBXE_BCBADR	= $0100
   186 = 1000			VBXE_MAPADR	= $1000
   187 = 5000			VBXE_OVRADR	= $5000
   188 = B000			VBXE_WINDOW	= $B000
   189 = 0000			IDLI	= $0000
   190 = 0001			IVBL	= $0001
   191 = 00FE			CH_DELCHR	= $00FE
   192 = 009B			CH_ENTER	= $009B
   193 = 001B			CH_ESC	= $001B
   194 = 001C			CH_CURS_UP	= $001C
   195 = 001D			CH_CURS_DOWN	= $001D
   196 = 001E			CH_CURS_LEFT	= $001E
   197 = 001F			CH_CURS_RIGHT	= $001F
   198 = 007F			CH_TAB	= $007F
   199 = 009B			CH_EOL	= $009B
   200 = 007D			CH_CLR	= $007D
   201 = 00FD			CH_BELL	= $00FD
   202 = 007E			CH_DEL	= $007E
   203 = 009C			CH_DELLINE	= $009C
   204 = 009D			CH_INSLINE	= $009D
   205 = 0000			COLOR_BLACK	= $0000
   206 = 000E			COLOR_WHITE	= $000E
   207 = 0032			COLOR_RED	= $0032
   208 = 0096			COLOR_CYAN	= $0096
   209 = 0068			COLOR_VIOLET	= $0068
   210 = 00C4			COLOR_GREEN	= $00C4
   211 = 0074			COLOR_BLUE	= $0074
   212 = 00EE			COLOR_YELLOW	= $00EE
   213 = 0028			COLOR_ORANGE	= $0028
   214 = 00E4			COLOR_BROWN	= $00E4
   215 = 003C			COLOR_LIGHTRED	= $003C
   216 = 0004			COLOR_GRAY1	= $0004
   217 = 0006			COLOR_GRAY2	= $0006
   218 = 000A			COLOR_GRAY3	= $000A
   219 = 00CC			COLOR_LIGHTGREEN	= $00CC
   220 = 007C			COLOR_LIGHTBLUE	= $007C
   221 = 0004			FMOPENREAD	= $0004
   222 = 0008			FMOPENWRITE	= $0008
   223 = 0009			FMOPENAPPEND	= $0009
   224 = 000C			FMOPENREADWRITE	= $000C
   225 = 231F			SCREENWIDTH	= DATAORIGIN+$0000
   226 = 2321			SCREENHEIGHT	= DATAORIGIN+$0002
   227 = 2323			DATESEPARATOR	= DATAORIGIN+$0004
   228 = D014			TVSYSTEM	= $D014
   229 = 02C0			adr.PALETTE	= $02C0
   230 2176			.var PALETTE	= adr.PALETTE .word
   231 = D012			adr.HPALETTE	= $D012
   232 2176			.var HPALETTE	= adr.HPALETTE .word
   233 = 2324			FILEMODE	= DATAORIGIN+$0005
   234 = 2325			SCREENMODE	= DATAORIGIN+$0006
   235 = 2326			IORESULT	= DATAORIGIN+$0007
   236 = 2327			EOLN	= DATAORIGIN+$0008
   237 = 2328			RNDSEED	= DATAORIGIN+$0009
   238
   239 = 2176 C0 02		PALETTE
   239 = 2178 12 D0		HPALETTE
   239 				.endl							; UNIT SYSTEM
   240
   241 				; ------------------------------------------------------------
   242
   243 217A			.local	DOS						; UNIT
   244
   245 				; ------------------------------------------------------------
   246
   247 = D014			PALNTSC	= $D014
   248
   249 				.endl							; UNIT DOS
   250
   251 				; ------------------------------------------------------------
   252
   253 217A			.local	STRUTILS					; UNIT
   254
   255 				; ------------------------------------------------------------
   256
   257 				.endl							; UNIT STRUTILS
   258
   259 				; ------------------------------------------------------------
   260
   261 217A			.local	SYSUTILS					; UNIT
   262
   263 				; ------------------------------------------------------------
   264
   265 = 0001			FAREADONLY	= $0001
   266 = 0002			FAHIDDEN	= $0002
   267 = 0004			FASYSFILE	= $0004
   268 = 0008			FAVOLUMEID	= $0008
   269 = 0010			FADIRECTORY	= $0010
   270 = 0020			FAARCHIVE	= $0020
   271 = 003F			FAANYFILE	= $003F
   272
   273 				.endl							; UNIT SYSUTILS
   274
   275 				; ------------------------------------------------------------
   276
   277 217A			.local	ATARI						; UNIT
   278
   279 				; ------------------------------------------------------------
   280
   281 = 0012			RTCLOK	= $0012
   282 = 004D			ATRACT	= $004D
   283 = 0052			LMARGIN	= $0052
   284 = 0053			RMARGIN	= $0053
   285 = 0054			ROWCRS	= $0054
   286 = 0055			COLCRS	= $0055
   287 = 0057			DINDEX	= $0057
   288 = 0058			SAVMSC	= $0058
   289 = 006A			RAMTOP	= $006A
   290 = 0200			VDSLST	= $0200
   291 = 0230			SDLSTL	= $0230
   292 = 0290			TXTROW	= $0290
   293 = 0291			TXTCOL	= $0291
   294 = 0293			TINDEX	= $0293
   295 = 0294			TXTMSC	= $0294
   296 = 022F			SDMCTL	= $022F
   297 = 026F			GPRIOR	= $026F
   298 = 02F0			CRSINH	= $02F0
   299 = 02F3			CHACT	= $02F3
   300 = 02F4			CHBAS	= $02F4
   301 = 02FC			CH	= $02FC
   302 = 02C0			PCOLR0	= $02C0
   303 = 02C1			PCOLR1	= $02C1
   304 = 02C2			PCOLR2	= $02C2
   305 = 02C3			PCOLR3	= $02C3
   306 = 02C4			COLOR0	= $02C4
   307 = 02C5			COLOR1	= $02C5
   308 = 02C6			COLOR2	= $02C6
   309 = 02C7			COLOR3	= $02C7
   310 = 02C8			COLOR4	= $02C8
   311 = 02C8			COLBAKS	= $02C8
   312 = D000			HPOSP0	= $D000
   313 = D001			HPOSP1	= $D001
   314 = D002			HPOSP2	= $D002
   315 = D003			HPOSP3	= $D003
   316 = D004			HPOSM0	= $D004
   317 = D005			HPOSM1	= $D005
   318 = D006			HPOSM2	= $D006
   319 = D007			HPOSM3	= $D007
   320 = D008			SIZEP0	= $D008
   321 = D009			SIZEP1	= $D009
   322 = D00A			SIZEP2	= $D00A
   323 = D00B			SIZEP3	= $D00B
   324 = D00C			SIZEM	= $D00C
   325 = D00D			GRAFP0	= $D00D
   326 = D00E			GRAFP1	= $D00E
   327 = D00F			GRAFP2	= $D00F
   328 = D010			GRAFP3	= $D010
   329 = D011			GRAFM	= $D011
   330 = D004			P0PF	= $D004
   331 = D014			PAL	= $D014
   332 = D012			COLPM0	= $D012
   333 = D013			COLPM1	= $D013
   334 = D014			COLPM2	= $D014
   335 = D015			COLPM3	= $D015
   336 = D016			COLPF0	= $D016
   337 = D017			COLPF1	= $D017
   338 = D018			COLPF2	= $D018
   339 = D019			COLPF3	= $D019
   340 = D01A			COLBK	= $D01A
   341 = D01B			PRIOR	= $D01B
   342 = D01D			GRACTL	= $D01D
   343 = D01E			HITCLR	= $D01E
   344 = D200			AUDF1	= $D200
   345 = D201			AUDC1	= $D201
   346 = D202			AUDF2	= $D202
   347 = D203			AUDC2	= $D203
   348 = D204			AUDF3	= $D204
   349 = D205			AUDC3	= $D205
   350 = D206			AUDF4	= $D206
   351 = D207			AUDC4	= $D207
   352 = D208			AUDCTL	= $D208
   353 = D20F			SKSTAT	= $D20F
   354 = D301			PORTB	= $D301
   355 = D400			DMACTL	= $D400
   356 = D401			CHACTL	= $D401
   357 = D402			DLISTL	= $D402
   358 = D404			HSCROL	= $D404
   359 = D405			VSCROL	= $D405
   360 = D407			PMBASE	= $D407
   361 = D409			CHBASE	= $D409
   362 = D40A			WSYNC	= $D40A
   363 = D40B			VCOUNT	= $D40B
   364 = D40C			PENH	= $D40C
   365 = D40D			PENV	= $D40D
   366 = D40E			NMIEN	= $D40E
   367
   368 				.endl							; UNIT ATARI
   369
   370 				; ------------------------------------------------------------
   371
   372 217A			.local	CRT						; UNIT
   373
   374 217A			.local	READKEY						; FUNCTION | ASSEMBLER
   375
   376 				; ---------------------  ASM Block 063  ---------------------
   377
   378 217A 8A 48			txa:pha
   379
   380 217C 20 30 21			@GetKey
   381
   382 217F 8D 2C 23			sta Result
   383
   384 2182 68 AA			pla:tax
   385
   386 2184			@exit
   387
   388 				; ------------------------------------------------------------
   389
   390 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   391 				; as Pointer
   392
   393 2184 E8				inx						; add bx, 1
   394 2185 AD 2C 23 95 98		mva RESULT :STACKORIGIN,x
   395
   396 					.ifdef @new
   397 					@FreeMem #@VarData #@VarDataSize
   398 					eif
   399
   400 				; ------------------------------------------------------------
   401
   402 = 232C			RESULT	= DATAORIGIN+$000D
   403
   404 = 232C			@VarData	= RESULT
   405 = 0001			@VarDataSize	= 1
   406
   407 218A 60				rts						; ret
   408 				.endl
   409
   410 				; ------------------------------------------------------------
   411
   412 = 232B			TEXTATTR	= DATAORIGIN+$000C
   413 = D01F			CONSOL	= $D01F
   414 = 0000			CN_START_SELECT_OPTION	= $0000
   415 = 0001			CN_SELECT_OPTION	= $0001
   416 = 0002			CN_START_OPTION	= $0002
   417 = 0003			CN_OPTION	= $0003
   418 = 0004			CN_START_SELECT	= $0004
   419 = 0005			CN_SELECT	= $0005
   420 = 0006			CN_START	= $0006
   421 = 0007			CN_NONE	= $0007
   422 = 0000			BW40	= $0000
   423 = 0001			CO40	= $0001
   424 = 0002			BW80	= $0002
   425 = 0003			CO80	= $0003
   426 = 0007			MONO	= $0007
   427 = 0001			C40	= $0001
   428 = 0003			C80	= $0003
   429 = 0000			BLACK	= $0000
   430 = 0001			BLUE	= $0001
   431 = 0002			GREEN	= $0002
   432 = 0003			CYAN	= $0003
   433 = 0004			RED	= $0004
   434 = 0005			MAGENTA	= $0005
   435 = 0006			BROWN	= $0006
   436 = 0007			LIGHTGRAY	= $0007
   437 = 0008			DARKGRAY	= $0008
   438 = 0009			LIGHTBLUE	= $0009
   439 = 000A			LIGHTGREEN	= $000A
   440 = 000B			LIGHTCYAN	= $000B
   441 = 000C			LIGHTRED	= $000C
   442 = 000D			LIGHTMAGENTA	= $000D
   443 = 000E			YELLOW	= $000E
   444 = 000F			WHITE	= $000F
   445 = 0080			BLINK	= $0080
   446
   447 				.endl							; UNIT CRT
   448
   449 218B			.local	MAINPROC					; PROCEDURE
   450
   451 				; optimize FAIL (100, examples\arrmem.pas), line = 20
   452 					@print #$7D
   452 				 LDY# $7D\ JSR @PRINT
   452 218B A0 7D		 LDY# $7D
   452 218D 20 50 20		 JSR @PRINT
   453
   454 				; optimize OK (examples\arrmem.pas), line = 21
   455
   456 2190 A9 9A 8D C4 02		mva #$9A adr.COL+$00
   457
   458 				; optimize OK (examples\arrmem.pas), line = 22
   459
   460 2195 A9 28 8D C5 02		mva #$28 adr.COL+$01
   461
   462 				; optimize OK (examples\arrmem.pas), line = 23
   463
   464 219A A9 4E 8D C6 02		mva #$4E adr.COL+$02
   465
   466 				; optimize OK (examples\arrmem.pas), line = 24
   467
   468 219F A9 E4 8D C8 02		mva #$E4 adr.COL+$04
   469
   470 				; optimize OK (examples\arrmem.pas), line = 25
   471
   472 21A4 A9 0A 8D 60 6D		mva #$0A adr.ARRD+$00
   473
   474 				; optimize OK (examples\arrmem.pas), line = 26
   475
   476 21A9 A9 1E			lda #$1E
   477 21AB 18 6D 60 6D			add adr.ARRD+$00
   478 21AF 85 A2			sta :STACKORIGIN+10
   479 21B1 A9 24			lda #$24
   480 21B3 85 82			sta :eax
   481 21B5 A9 00			lda #$00
   482 21B7 85 83			sta :eax+1
   483 21B9 A5 82			lda :eax
   484 21BB 0A				asl @
   485 21BC 18 65 82			add :eax
   486 21BF 85 82			sta :eax
   487 21C1 A5 A2			lda :STACKORIGIN+10
   488 21C3 38 E5 82			sub :eax
   489 21C6 8D 61 6D			sta adr.ARRD+$01
   490
   491 				; optimize OK (examples\arrmem.pas), line = 27
   492
   493 21C9 A9 3C 8D 62 6D		mva #$3C adr.ARRD+$02
   494
   495 				; optimize OK (examples\arrmem.pas), line = 28
   496
   497 21CE A9 14 8D 00 06		mva #$14 adr.ARRH+$00
   498
   499 				; optimize OK (examples\arrmem.pas), line = 29
   500
   501 21D3 A9 28 8D 01 06		mva #$28 adr.ARRH+$01
   502
   503 				; optimize OK (examples\arrmem.pas), line = 30
   504
   505 21D8 A9 96 8D 02 06		mva #$96 adr.ARRH+$02
   506
   507 				; optimize FAIL (100, examples\arrmem.pas), line = 37
   508 					@printSTRING #CODEORIGIN+$000D
   508 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   508 21DD A0 20		 LDY> CODEORIGIN+$000D
   508 21DF A9 0D		 LDA< CODEORIGIN+$000D
   508 21E1 20 59 20		 JSR @PRINTSTRING
   509 					@print #$9B
   509 				 LDY# $9B\ JSR @PRINT
   509 21E4 A0 9B		 LDY# $9B
   509 21E6 20 50 20		 JSR @PRINT
   510 					@printSTRING #CODEORIGIN+$000F
   510 				 LDY> CODEORIGIN+$000F\ LDA< CODEORIGIN+$000F\ JSR @PRINTSTRING
   510 21E9 A0 20		 LDY> CODEORIGIN+$000F
   510 21EB A9 0F		 LDA< CODEORIGIN+$000F
   510 21ED 20 59 20		 JSR @PRINTSTRING
   511 					@print #$9B
   511 				 LDY# $9B\ JSR @PRINT
   511 21F0 A0 9B		 LDY# $9B
   511 21F2 20 50 20		 JSR @PRINT
   512 					@printSTRING #CODEORIGIN+$000C
   512 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   512 21F5 A0 20		 LDY> CODEORIGIN+$000C
   512 21F7 A9 0C		 LDA< CODEORIGIN+$000C
   512 21F9 20 59 20		 JSR @PRINTSTRING
   513 21FC E8				inx
   514 21FD A0 00			ldy #$00
   515 21FF B9 60 6D 95 98		mva adr.ARRD,y :STACKORIGIN,x
   516 2204 20 99 20			jsr @printBYTE
   517 2207 CA				dex
   518 					@print #$2C
   518 				 LDY# $2C\ JSR @PRINT
   518 2208 A0 2C		 LDY# $2C
   518 220A 20 50 20		 JSR @PRINT
   519 220D E8				inx
   520 220E A0 01			ldy #$01
   521 2210 B9 60 6D 95 98		mva adr.ARRD,y :STACKORIGIN,x
   522 2215 20 99 20			jsr @printBYTE
   523 2218 CA				dex
   524 					@print #$2C
   524 				 LDY# $2C\ JSR @PRINT
   524 2219 A0 2C		 LDY# $2C
   524 221B 20 50 20		 JSR @PRINT
   525 221E E8				inx
   526 221F A0 02			ldy #$02
   527 2221 B9 60 6D 95 98		mva adr.ARRD,y :STACKORIGIN,x
   528 2226 20 99 20			jsr @printBYTE
   529 2229 CA				dex
   530 					@printSTRING #CODEORIGIN+$000C
   530 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   530 222A A0 20		 LDY> CODEORIGIN+$000C
   530 222C A9 0C		 LDA< CODEORIGIN+$000C
   530 222E 20 59 20		 JSR @PRINTSTRING
   531
   532 				; optimize FAIL (100, examples\arrmem.pas), line = 38
   533 					@printSTRING #CODEORIGIN+$000C
   533 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   533 2231 A0 20		 LDY> CODEORIGIN+$000C
   533 2233 A9 0C		 LDA< CODEORIGIN+$000C
   533 2235 20 59 20		 JSR @PRINTSTRING
   534 					@print #$9B
   534 				 LDY# $9B\ JSR @PRINT
   534 2238 A0 9B		 LDY# $9B
   534 223A 20 50 20		 JSR @PRINT
   535 					@printSTRING #CODEORIGIN+$000C
   535 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   535 223D A0 20		 LDY> CODEORIGIN+$000C
   535 223F A9 0C		 LDA< CODEORIGIN+$000C
   535 2241 20 59 20		 JSR @PRINTSTRING
   536 					@print #$9B
   536 				 LDY# $9B\ JSR @PRINT
   536 2244 A0 9B		 LDY# $9B
   536 2246 20 50 20		 JSR @PRINT
   537 					@printSTRING #CODEORIGIN+$0025
   537 				 LDY> CODEORIGIN+$0025\ LDA< CODEORIGIN+$0025\ JSR @PRINTSTRING
   537 2249 A0 20		 LDY> CODEORIGIN+$0025
   537 224B A9 25		 LDA< CODEORIGIN+$0025
   537 224D 20 59 20		 JSR @PRINTSTRING
   538 					@print #$9B
   538 				 LDY# $9B\ JSR @PRINT
   538 2250 A0 9B		 LDY# $9B
   538 2252 20 50 20		 JSR @PRINT
   539 					@printSTRING #CODEORIGIN+$000C
   539 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   539 2255 A0 20		 LDY> CODEORIGIN+$000C
   539 2257 A9 0C		 LDA< CODEORIGIN+$000C
   539 2259 20 59 20		 JSR @PRINTSTRING
   540
   541 				; optimize FAIL (100, examples\arrmem.pas), line = 39
   542 225C E8				inx
   543 225D A0 00			ldy #$00
   544 225F B9 00 06 95 98		mva adr.ARRH,y :STACKORIGIN,x
   545 2264 20 99 20			jsr @printBYTE
   546 2267 CA				dex
   547
   548 				; optimize FAIL (100, examples\arrmem.pas), line = 40
   549 					@print #$2C
   549 				 LDY# $2C\ JSR @PRINT
   549 2268 A0 2C		 LDY# $2C
   549 226A 20 50 20		 JSR @PRINT
   550
   551 				; optimize FAIL (100, examples\arrmem.pas), line = 41
   552 226D E8				inx
   553 226E A0 01			ldy #$01
   554 2270 B9 00 06 95 98		mva adr.ARRH,y :STACKORIGIN,x
   555 2275 20 99 20			jsr @printBYTE
   556 2278 CA				dex
   557
   558 				; optimize FAIL (100, examples\arrmem.pas), line = 42
   559 					@print #$2C
   559 				 LDY# $2C\ JSR @PRINT
   559 2279 A0 2C		 LDY# $2C
   559 227B 20 50 20		 JSR @PRINT
   560
   561 				; optimize FAIL (100, examples\arrmem.pas), line = 43
   562 227E E8				inx
   563 227F A0 02			ldy #$02
   564 2281 B9 00 06 95 98		mva adr.ARRH,y :STACKORIGIN,x
   565 2286 20 99 20			jsr @printBYTE
   566 2289 CA				dex
   567 228A 20 4B 20			@printEOL
   568
   569 				; optimize FAIL (100, examples\arrmem.pas), line = 44
   570 					@printSTRING #CODEORIGIN+$000C
   570 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   570 228D A0 20		 LDY> CODEORIGIN+$000C
   570 228F A9 0C		 LDA< CODEORIGIN+$000C
   570 2291 20 59 20		 JSR @PRINTSTRING
   571 					@print #$9B
   571 				 LDY# $9B\ JSR @PRINT
   571 2294 A0 9B		 LDY# $9B
   571 2296 20 50 20		 JSR @PRINT
   572 					@printSTRING #CODEORIGIN+$003B
   572 				 LDY> CODEORIGIN+$003B\ LDA< CODEORIGIN+$003B\ JSR @PRINTSTRING
   572 2299 A0 20		 LDY> CODEORIGIN+$003B
   572 229B A9 3B		 LDA< CODEORIGIN+$003B
   572 229D 20 59 20		 JSR @PRINTSTRING
   573 					@print #$9B
   573 				 LDY# $9B\ JSR @PRINT
   573 22A0 A0 9B		 LDY# $9B
   573 22A2 20 50 20		 JSR @PRINT
   574 					@printSTRING #CODEORIGIN+$000C
   574 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   574 22A5 A0 20		 LDY> CODEORIGIN+$000C
   574 22A7 A9 0C		 LDA< CODEORIGIN+$000C
   574 22A9 20 59 20		 JSR @PRINTSTRING
   575
   576 				; optimize OK (examples\arrmem.pas), line = 45
   577
   578 22AC AD 60 6D			lda $6D60
   579 22AF 8D 2E 23			sta MEM
   580
   581 				; optimize FAIL (100, examples\arrmem.pas), line = 46
   582 22B2 E8				inx
   583 22B3 AD 2E 23 95 98		mva MEM :STACKORIGIN,x
   584 22B8 20 99 20			jsr @printBYTE
   585 22BB CA				dex
   586 22BC 20 4B 20			@printEOL
   587
   588 				; optimize OK (examples\arrmem.pas), line = 47
   589
   590 22BF AD 00 06			lda $0600
   591 22C2 8D 2E 23			sta MEM
   592
   593 				; optimize FAIL (100, examples\arrmem.pas), line = 48
   594 22C5 E8				inx
   595 22C6 AD 2E 23 95 98		mva MEM :STACKORIGIN,x
   596 22CB 20 99 20			jsr @printBYTE
   597 22CE CA				dex
   598 22CF 20 4B 20			@printEOL
   599
   600 				; optimize OK (examples\arrmem.pas), line = 49
   601
   602 22D2 AD 61 6D			lda $6D61
   603 22D5 8D 2E 23			sta MEM
   604
   605 				; optimize FAIL (100, examples\arrmem.pas), line = 50
   606 22D8 E8				inx
   607 22D9 AD 2E 23 95 98		mva MEM :STACKORIGIN,x
   608 22DE 20 99 20			jsr @printBYTE
   609 22E1 CA				dex
   610 22E2 20 4B 20			@printEOL
   611
   612 				; optimize OK (examples\arrmem.pas), line = 51
   613
   614 22E5 AD 01 06			lda $0601
   615 22E8 8D 2E 23			sta MEM
   616
   617 				; optimize FAIL (100, examples\arrmem.pas), line = 52
   618 22EB E8				inx
   619 22EC AD 2E 23 95 98		mva MEM :STACKORIGIN,x
   620 22F1 20 99 20			jsr @printBYTE
   621 22F4 CA				dex
   622 22F5 20 4B 20			@printEOL
   623
   624 				; optimize FAIL ('CRT.READKEY', examples\arrmem.pas), line = 53
   625 22F8 20 7A 21			jsr CRT.READKEY
   626 22FB B5 98 8D 2D 23		mva :STACKORIGIN,x KEY
   627 2300 CA				dex
   628 2301			@exit
   629 					.ifdef @new
   630 					@FreeMem #@VarData #@VarDataSize
   631 					eif
   632 2301 60				rts						; ret
   633 				.endl
   634 2302			l_0052
   635
   636 				; optimize FAIL ('MAINPROC', examples\arrmem.pas), line = 57
   637 2302 20 8B 21			jsr MAINPROC
   638
   639 				; ------------------------------------------------------------
   640
   641 = 232D			KEY	= DATAORIGIN+$000E
   642 = 232E			MEM	= DATAORIGIN+$000F
   643 = 6D60			adr.ARRD	= $6D60
   644 2305			.var ARRD	= adr.ARRD .word
   645 = 0600			adr.ARRH	= $0600
   646 2305			.var ARRH	= adr.ARRH .word
   647 = 02C4			adr.COL	= $02C4
   648 2305			.var COL	= adr.COL .word
   649 2305			@exit
   650
   651 2305 A2 00		@halt	ldx #0
   652 2307 9A				txs
   653
   654 2308 60				rts
   655
   656 				; ------------------------------------------------------------
   657
   658 2309 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   659
   660 				; ------------------------------------------------------------
   661
   662 2319			.local	@DEFINES
   663 2319			ATARI
   664 				.endl
   665
   666 = 2319 60 6D		ARRD
   666 = 231B 00 06		ARRH
   666 = 231D C4 02		COL
   666 				.endl							; MAIN
   667
   668 				; ------------------------------------------------------------
   669 				; ------------------------------------------------------------
   670
   671 				.macro	UNITINITIALIZATION
   672 				
   673 					.ifdef MAIN.SYSTEM.@UnitInit
   674 					jsr MAIN.SYSTEM.@UnitInit
   675 					eif
   676 				
   677 					.ifdef MAIN.DOS.@UnitInit
   678 					jsr MAIN.DOS.@UnitInit
   679 					eif
   680 				
   681 					.ifdef MAIN.STRUTILS.@UnitInit
   682 					jsr MAIN.STRUTILS.@UnitInit
   683 					eif
   684 				
   685 					.ifdef MAIN.SYSUTILS.@UnitInit
   686 					jsr MAIN.SYSUTILS.@UnitInit
   687 					eif
   688 				
   689 					.ifdef MAIN.ATARI.@UnitInit
   690 					jsr MAIN.ATARI.@UnitInit
   691 					eif
   692 				
   693 					.ifdef MAIN.CRT.@UnitInit
   694 					jsr MAIN.CRT.@UnitInit
   695 					eif
   696 				.endm
   697
   698 				; ------------------------------------------------------------
   699
   700 					ift .SIZEOF(MAIN.SYSTEM) > 0
   701 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   701 				SYSTEM: $215F..$2179
   702 					eif
   703
   704 					ift .SIZEOF(MAIN.DOS) > 0
   705 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   706 					eif
   707
   708 					ift .SIZEOF(MAIN.STRUTILS) > 0
   709 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   710 					eif
   711
   712 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   713 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   714 					eif
   715
   716 					ift .SIZEOF(MAIN.ATARI) > 0
   717 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   718 					eif
   719
   720 					ift .SIZEOF(MAIN.CRT) > 0
   721 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   721 				CRT: $217A..$218A
   722 					eif
   723
   724 					.print 'CODE: ',CODEORIGIN,'..',*-1
   724 				CODE: $2000..$231E
   725
   726 				; ------------------------------------------------------------
   727
   728 231F			DATAORIGIN
   729 231F 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   730
   731 = 0006			VARINITSIZE	= *-DATAORIGIN
   732 = 0010			VARDATASIZE	= 16
   733
   734 = 232F			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   735
   736 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   736 				DATA: $231F..$232F
   737
   738 02E0-02E1> 40 21			run START
   739
   740 				; ------------------------------------------------------------
   741
   742 				.macro	STATICDATA
   743 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $00 $00 $14  $61 $72 $72 $44 $20 $61 $72 $72
   744 				.by  $61 $79 $20 $65 $6C $65 $6D $65  $6E $74 $73 $3A $00 $14 $61 $72  $72 $48 $20 $61 $72 $72 $61 $79
   745 				.by  $20 $65 $6C $65 $6D $65 $6E $74  $73 $3A $00 $0E $50 $65 $65 $6B  $65 $64 $20 $76 $61 $6C $75 $65
   746 				.by  $73 $3A $00
   747 				.endm
   748
   749 					end
