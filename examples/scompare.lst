mads 2.1.0 build 8 (23 Dec 19)
   388 					opt l+
   101
   102 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   102 				ZPAGE: $0080..$00D7
   103
   104 				.print 'RTLIB: ',RTLIB,'..',*-1
   104 				RTLIB: $20B0..$21CC
   105
   106 				; ------------------------------------------------------------
   107
   108 21CD			START
   109 21CD BA				tsx
   110 21CE 8E 6C 23			stx MAIN.@halt+1
   111
   112 					.ifdef fmulinit
   113 					fmulinit
   114 					eif
   115
   116 = 00FA			VLEN	= VARDATASIZE-VARINITSIZE
   117 = 269B			VADR	= DATAORIGIN+VARINITSIZE
   118
   119 					ift VADR > $BFFF
   120 					ert 'Invalid memory address range ',VADR
   121 					eli (VLEN>0) && (VLEN<=256)
   122 21D1 A2 06			ldx #256-VLEN
   123 21D3 A9 00			lda #0
   124 21D5 9D 95 26 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>0
   126 					@fill #VADR #VLEN #0
   127 					eif
   128
   129 					.ifdef MAIN.@DEFINES.ROMOFF
   130 					icl 'atari\romoff.asm'
   131 					.endif
   132
   133 21DB A9 95 85 82 A9 27 + 	mwa #PROGRAMSTACK psptr
   134
   135 21E3 A2 0F			ldx #$0f					; DOS II+/D ParamStr
   136 21E5 BD 40 03 9D 6F 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   137
   138 21EE E8				inx						; X = 0
   139 21EF 86 90			stx bp						; BP = 0
   140
   141 21F1 8E 08 D2			stx audctl					; reset POKEY
   142 21F4 A9 03			lda #3
   143 21F6 8D 0F D2			sta skctl
   144
   145 21F9 CA				dex						; X = 255
   146
   147 21FA				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: scompare.a65]
   148
   149 21FA			.local	MAIN						; PROCEDURE
   150
   151 21FA 4C 68 23			jmp l_00B7
   152
   153 				; ------------------------------------------------------------
   154
   155 21FD			.local	SYSTEM						; UNIT
   156
   157 				; ------------------------------------------------------------
   158
   159 = 0101			__PORTB_BANKS	= $0101
   160 = 0648			M_PI_2	= $0648
   161 = 0192			D_PI_2	= $0192
   162 = 0004			D_PI_180	= $04
   163 = 0000			MGTIA	= $00
   164 = 0080			MVBXE	= $80
   165 = 0000			VBXE_XDLADR	= $00
   166 = 0100			VBXE_BCBADR	= $0100
   167 = 1000			VBXE_MAPADR	= $1000
   168 = 5000			VBXE_OVRADR	= $5000
   169 = B000			VBXE_WINDOW	= $B000
   170 = 0000			IDLI	= $00
   171 = 0001			IVBL	= $01
   172 = 00FE			CH_DELCHR	= $FE
   173 = 009B			CH_ENTER	= $9B
   174 = 001B			CH_ESC	= $1B
   175 = 001C			CH_CURS_UP	= $1C
   176 = 001D			CH_CURS_DOWN	= $1D
   177 = 001E			CH_CURS_LEFT	= $1E
   178 = 001F			CH_CURS_RIGHT	= $1F
   179 = 007F			CH_TAB	= $7F
   180 = 009B			CH_EOL	= $9B
   181 = 007D			CH_CLR	= $7D
   182 = 00FD			CH_BELL	= $FD
   183 = 007E			CH_DEL	= $7E
   184 = 009C			CH_DELLINE	= $9C
   185 = 009D			CH_INSLINE	= $9D
   186 = 0000			COLOR_BLACK	= $00
   187 = 000E			COLOR_WHITE	= $0E
   188 = 0032			COLOR_RED	= $32
   189 = 0096			COLOR_CYAN	= $96
   190 = 0068			COLOR_VIOLET	= $68
   191 = 00C4			COLOR_GREEN	= $C4
   192 = 0074			COLOR_BLUE	= $74
   193 = 00EE			COLOR_YELLOW	= $EE
   194 = 0028			COLOR_ORANGE	= $28
   195 = 00E4			COLOR_BROWN	= $E4
   196 = 003C			COLOR_LIGHTRED	= $3C
   197 = 0004			COLOR_GRAY1	= $04
   198 = 0006			COLOR_GRAY2	= $06
   199 = 000A			COLOR_GRAY3	= $0A
   200 = 00CC			COLOR_LIGHTGREEN	= $CC
   201 = 007C			COLOR_LIGHTBLUE	= $7C
   202 = 0004			FMOPENREAD	= $04
   203 = 0008			FMOPENWRITE	= $08
   204 = 0009			FMOPENAPPEND	= $09
   205 = 000C			FMOPENREADWRITE	= $0C
   206 = 2381			SCREENWIDTH	= DATAORIGIN+$0000
   207 = 2383			SCREENHEIGHT	= DATAORIGIN+$0002
   208 = 2385			DATESEPARATOR	= DATAORIGIN+$0004
   209 = D014			TVSYSTEM	= $D014
   210 = 02C0			adr.PALETTE	= $02C0
   211 21FD			.var PALETTE	= adr.PALETTE .word
   212 = D012			adr.HPALETTE	= $D012
   213 21FD			.var HPALETTE	= adr.HPALETTE .word
   214 = 2386			FILEMODE	= DATAORIGIN+$0005
   215 = 2387			GRAPHMODE	= DATAORIGIN+$0006
   216 = 2388			IORESULT	= DATAORIGIN+$0007
   217 = 2389			EOLN	= DATAORIGIN+$0008
   218 = 238A			RNDSEED	= DATAORIGIN+$0009
   219
   220 = 21FD C0 02		PALETTE
   220 = 21FF 12 D0		HPALETTE
   220 				.endl							; UNIT SYSTEM
   221
   222 				; ------------------------------------------------------------
   223
   224 2201			.local	ATARI						; UNIT
   225
   226 				; ------------------------------------------------------------
   227
   228 = 0012			RTCLOK	= $12
   229 = 004D			ATRACT	= $4D
   230 = 0052			LMARGIN	= $52
   231 = 0053			RMARGIN	= $53
   232 = 0054			ROWCRS	= $54
   233 = 0055			COLCRS	= $55
   234 = 0057			DINDEX	= $57
   235 = 0058			SAVMSC	= $58
   236 = 0062			PALNTS	= $62
   237 = 006A			RAMTOP	= $6A
   238 = 0200			VDSLST	= $0200
   239 = 0230			SDLSTL	= $0230
   240 = 0290			TXTROW	= $0290
   241 = 0291			TXTCOL	= $0291
   242 = 0293			TINDEX	= $0293
   243 = 0294			TXTMSC	= $0294
   244 = 022F			SDMCTL	= $022F
   245 = 026F			GPRIOR	= $026F
   246 = 02F0			CRSINH	= $02F0
   247 = 02F3			CHACT	= $02F3
   248 = 02F4			CHBAS	= $02F4
   249 = 02FC			CH	= $02FC
   250 = 02C0			PCOLR0	= $02C0
   251 = 02C1			PCOLR1	= $02C1
   252 = 02C2			PCOLR2	= $02C2
   253 = 02C3			PCOLR3	= $02C3
   254 = 02C4			COLOR0	= $02C4
   255 = 02C5			COLOR1	= $02C5
   256 = 02C6			COLOR2	= $02C6
   257 = 02C7			COLOR3	= $02C7
   258 = 02C8			COLOR4	= $02C8
   259 = 02C8			COLBAKS	= $02C8
   260 = D000			HPOSP0	= $D000
   261 = D001			HPOSP1	= $D001
   262 = D002			HPOSP2	= $D002
   263 = D003			HPOSP3	= $D003
   264 = D004			HPOSM0	= $D004
   265 = D005			HPOSM1	= $D005
   266 = D006			HPOSM2	= $D006
   267 = D007			HPOSM3	= $D007
   268 = D008			SIZEP0	= $D008
   269 = D009			SIZEP1	= $D009
   270 = D00A			SIZEP2	= $D00A
   271 = D00B			SIZEP3	= $D00B
   272 = D00C			SIZEM	= $D00C
   273 = D00D			GRAFP0	= $D00D
   274 = D00E			GRAFP1	= $D00E
   275 = D00F			GRAFP2	= $D00F
   276 = D010			GRAFP3	= $D010
   277 = D011			GRAFM	= $D011
   278 = D004			P0PF	= $D004
   279 = D014			PAL	= $D014
   280 = D012			COLPM0	= $D012
   281 = D013			COLPM1	= $D013
   282 = D014			COLPM2	= $D014
   283 = D015			COLPM3	= $D015
   284 = D016			COLPF0	= $D016
   285 = D017			COLPF1	= $D017
   286 = D018			COLPF2	= $D018
   287 = D019			COLPF3	= $D019
   288 = D01A			COLBK	= $D01A
   289 = D01B			PRIOR	= $D01B
   290 = D01D			GRACTL	= $D01D
   291 = D01E			HITCLR	= $D01E
   292 = D200			AUDF1	= $D200
   293 = D201			AUDC1	= $D201
   294 = D202			AUDF2	= $D202
   295 = D203			AUDC2	= $D203
   296 = D204			AUDF3	= $D204
   297 = D205			AUDC3	= $D205
   298 = D206			AUDF4	= $D206
   299 = D207			AUDC4	= $D207
   300 = D208			AUDCTL	= $D208
   301 = D20F			SKSTAT	= $D20F
   302 = D301			PORTB	= $D301
   303 = D400			DMACTL	= $D400
   304 = D401			CHACTL	= $D401
   305 = D402			DLISTL	= $D402
   306 = D404			HSCROL	= $D404
   307 = D405			VSCROL	= $D405
   308 = D407			PMBASE	= $D407
   309 = D409			CHBASE	= $D409
   310 = D40A			WSYNC	= $D40A
   311 = D40B			VCOUNT	= $D40B
   312 = D40C			PENH	= $D40C
   313 = D40D			PENV	= $D40D
   314 = D40E			NMIEN	= $D40E
   315
   316 				.endl							; UNIT ATARI
   317
   318 				; ------------------------------------------------------------
   319
   320 2201			.local	CRT						; UNIT
   321
   322 2201			.local	READKEY						; FUNCTION | ASSEMBLER
   323
   324 				; ---------------------  ASM Block 049  ---------------------
   325
   326 2201 8A 48			txa:pha
   327
   328 2203 20 B0 20			@GetKey
   329
   330 2206 8D 8D 23			sta Result
   331
   332 2209 68 AA			pla:tax
   333
   334 220B			@exit
   335
   336 				; ------------------------------------------------------------
   337
   338 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   339 				; as Pointer
   340
   341 220B E8				inx
   342 220C AD 8D 23 95 98		mva RESULT :STACKORIGIN,x
   343
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					eif
   351
   352 				; ------------------------------------------------------------
   353
   354 = 238D			RESULT	= DATAORIGIN+$000C
   355
   356 = 238D			@VarData	= RESULT
   357 = 0001			@VarDataSize	= 1
   358
   359 2211 60				rts						; ret
   360 				.endl
   361
   362 				; ------------------------------------------------------------
   363
   364 = 238C			TEXTATTR	= DATAORIGIN+$000B
   365 = D01F			CONSOL	= $D01F
   366 = 0000			CN_START_SELECT_OPTION	= $00
   367 = 0001			CN_SELECT_OPTION	= $01
   368 = 0002			CN_START_OPTION	= $02
   369 = 0003			CN_OPTION	= $03
   370 = 0004			CN_START_SELECT	= $04
   371 = 0005			CN_SELECT	= $05
   372 = 0006			CN_START	= $06
   373 = 0007			CN_NONE	= $07
   374 = 0000			BW40	= $00
   375 = 0001			CO40	= $01
   376 = 0002			BW80	= $02
   377 = 0003			CO80	= $03
   378 = 0007			MONO	= $07
   379 = 0001			C40	= $01
   380 = 0003			C80	= $03
   381 = 0000			BLACK	= $00
   382 = 0001			BLUE	= $01
   383 = 0002			GREEN	= $02
   384 = 0003			CYAN	= $03
   385 = 0004			RED	= $04
   386 = 0005			MAGENTA	= $05
   387 = 0006			BROWN	= $06
   388 = 0007			LIGHTGRAY	= $07
   389 = 0008			DARKGRAY	= $08
   390 = 0009			LIGHTBLUE	= $09
   391 = 000A			LIGHTGREEN	= $0A
   392 = 000B			LIGHTCYAN	= $0B
   393 = 000C			LIGHTRED	= $0C
   394 = 000D			LIGHTMAGENTA	= $0D
   395 = 000E			YELLOW	= $0E
   396 = 000F			WHITE	= $0F
   397 = 0080			BLINK	= $80
   398
   399 				.endl							; UNIT CRT
   400
   401 				; ------------------------------------------------------------
   402
   403 2212			.local	DOS						; UNIT
   404
   405 				; ------------------------------------------------------------
   406
   407 = D014			PALNTSC	= $D014
   408
   409 				.endl							; UNIT DOS
   410
   411 				; ------------------------------------------------------------
   412
   413 2212			.local	STRUTILS					; UNIT
   414
   415 				; ------------------------------------------------------------
   416
   417 				.endl							; UNIT STRUTILS
   418
   419 				; ------------------------------------------------------------
   420
   421 2212			.local	SYSUTILS					; UNIT
   422
   423 				; ------------------------------------------------------------
   424
   425 = 0001			FAREADONLY	= $01
   426 = 0002			FAHIDDEN	= $02
   427 = 0004			FASYSFILE	= $04
   428 = 0008			FAVOLUMEID	= $08
   429 = 0010			FADIRECTORY	= $10
   430 = 0020			FAARCHIVE	= $20
   431 = 003F			FAANYFILE	= $3F
   432
   433 				.endl							; UNIT SYSUTILS
   434
   435 				; ------------------------------------------------------------
   436
   437 2212			.local	CIO						; UNIT
   438
   439 2212			.local	GET						; FUNCTION | ASSEMBLER
   440
   441 				; ------------------------------------------------------------
   442
   443 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   444 				; as Pointer
   445 2212 B5 98 8D 8E 23		mva :STACKORIGIN,x CHN
   446 2217 CA				dex
   447
   448 				; ---------------------  ASM Block 080  ---------------------
   449
   450 2218 8A 48			txa:pha
   451
   452 221A AD 8E 23			lda chn
   453 221D 0A 0A 0A 0A			:4 asl @
   454 2221 AA				tax
   455
   456 2222 A9 07			lda #7		;get char command
   457 2224 9D 42 03			sta iccmd,x
   458
   459 2227 A9 00			lda #$00	;zero out the unused
   460 2229 9D 48 03			sta icbufl,x	;store in accumulator
   461 222C 9D 49 03			sta icbufh,x	;...after CIOV jump
   462
   463 222F				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 222F 20 56 E4				jsr CIOV
   464
   465 2232 8C 88 23			sty MAIN.SYSTEM.IOResult
   466
   467 2235 8D 8F 23			sta Result
   468
   469 2238 68 AA			pla:tax
   470
   471 223A			@exit
   472
   473 				; ------------------------------------------------------------
   474
   475 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   476 				; as Pointer
   477
   478 223A E8				inx
   479 223B AD 8F 23 95 98		mva RESULT :STACKORIGIN,x
   480
   481 					.ifdef @new
   482 					lda <@VarData
   483 					sta :ztmp
   484 					lda >@VarData
   485 					ldy #@VarDataSize-1
   486 					jmp @FreeMem
   487 					eif
   488
   489 				; ------------------------------------------------------------
   490
   491 = 238E			CHN	= DATAORIGIN+$000D
   492 = 238F			RESULT	= DATAORIGIN+$000E
   493
   494 = 238E			@VarData	= CHN
   495 = 0002			@VarDataSize	= 2
   496
   497 2240 60				rts						; ret
   498 				.endl
   499
   500 				; ------------------------------------------------------------
   501
   502 				.endl							; UNIT CIO
   503
   504 2241			.local	MAINPROC					; PROCEDURE
   505
   506 				; optimize FAIL (100, examples\scompare.pas), line = 25
   507 					@printSTRING #CODEORIGIN+$001B
   507 				 LDY> CODEORIGIN+$001B\ LDA< CODEORIGIN+$001B\ JSR @PRINTSTRING
   507 2241 A0 20		 LDY> CODEORIGIN+$001B
   507 2243 A9 1B		 LDA< CODEORIGIN+$001B
   507 2245 20 FB 20		 JSR @PRINTSTRING
   508 2248 20 ED 20			@printEOL
   509
   510 				; optimize FAIL (100, examples\scompare.pas), line = 26
   511 					@printSTRING #CODEORIGIN+$001D
   511 				 LDY> CODEORIGIN+$001D\ LDA< CODEORIGIN+$001D\ JSR @PRINTSTRING
   511 224B A0 20		 LDY> CODEORIGIN+$001D
   511 224D A9 1D		 LDA< CODEORIGIN+$001D
   511 224F 20 FB 20		 JSR @PRINTSTRING
   512
   513 				; optimize FAIL (100, examples\scompare.pas), line = 27
   514 					@printSTRING STR1
   514 				 LDY STR1+1\ LDA STR1\ JSR @PRINTSTRING
   514 2252 AC 63 23		 LDY STR1+1
   514 2255 AD 62 23		 LDA STR1
   514 2258 20 FB 20		 JSR @PRINTSTRING
   515 225B 20 ED 20			@printEOL
   516
   517 				; optimize FAIL (100, examples\scompare.pas), line = 28
   518 					@printSTRING #CODEORIGIN+$0024
   518 				 LDY> CODEORIGIN+$0024\ LDA< CODEORIGIN+$0024\ JSR @PRINTSTRING
   518 225E A0 20		 LDY> CODEORIGIN+$0024
   518 2260 A9 24		 LDA< CODEORIGIN+$0024
   518 2262 20 FB 20		 JSR @PRINTSTRING
   519
   520 				; optimize FAIL (100, examples\scompare.pas), line = 29
   521 					@printSTRING STR2
   521 				 LDY STR2+1\ LDA STR2\ JSR @PRINTSTRING
   521 2265 AC 65 23		 LDY STR2+1
   521 2268 AD 64 23		 LDA STR2
   521 226B 20 FB 20		 JSR @PRINTSTRING
   522 226E 20 ED 20			@printEOL
   523
   524 				; optimize FAIL (100, examples\scompare.pas), line = 30
   525 					@printSTRING #CODEORIGIN+$002B
   525 				 LDY> CODEORIGIN+$002B\ LDA< CODEORIGIN+$002B\ JSR @PRINTSTRING
   525 2271 A0 20		 LDY> CODEORIGIN+$002B
   525 2273 A9 2B		 LDA< CODEORIGIN+$002B
   525 2275 20 FB 20		 JSR @PRINTSTRING
   526
   527 				; optimize FAIL (100, examples\scompare.pas), line = 31
   528 					@printSTRING STR3
   528 				 LDY STR3+1\ LDA STR3\ JSR @PRINTSTRING
   528 2278 AC 67 23		 LDY STR3+1
   528 227B AD 66 23		 LDA STR3
   528 227E 20 FB 20		 JSR @PRINTSTRING
   529 2281 20 ED 20			@printEOL
   530
   531 				; optimize OK (examples\scompare.pas), line = 32
   532
   533 2284 A9 FF			lda #$FF
   534 2286 8D 90 24			sta VALUE
   535 2289 8D 91 24			sta VALUE+1
   536 228C 8D 92 24			sta VALUE+2
   537 228F 8D 93 24			sta VALUE+3
   538
   539 				; optimize FAIL (100, examples\scompare.pas), line = 33
   540 					@printSTRING #CODEORIGIN+$0032
   540 				 LDY> CODEORIGIN+$0032\ LDA< CODEORIGIN+$0032\ JSR @PRINTSTRING
   540 2292 A0 20		 LDY> CODEORIGIN+$0032
   540 2294 A9 32		 LDA< CODEORIGIN+$0032
   540 2296 20 FB 20		 JSR @PRINTSTRING
   541 2299 20 ED 20			@printEOL
   542
   543 				; optimize FAIL (100, examples\scompare.pas), line = 34
   544 229C E8				inx
   545 229D AD 90 24 95 98		mva VALUE :STACKORIGIN,x
   546 22A2 AD 91 24 95 A8		mva VALUE+1 :STACKORIGIN+STACKWIDTH,x
   547 22A7 AD 92 24 95 B8		mva VALUE+2 :STACKORIGIN+STACKWIDTH*2,x
   548 22AC AD 93 24 95 C8		mva VALUE+3 :STACKORIGIN+STACKWIDTH*3,x
   549 22B1 20 2A 21			jsr @printINT
   550 22B4 CA				dex
   551 22B5 20 ED 20			@printEOL
   552
   553 				; optimize FAIL (100, examples\scompare.pas), line = 35
   554 					@printSTRING #CODEORIGIN+$001A
   554 				 LDY> CODEORIGIN+$001A\ LDA< CODEORIGIN+$001A\ JSR @PRINTSTRING
   554 22B8 A0 20		 LDY> CODEORIGIN+$001A
   554 22BA A9 1A		 LDA< CODEORIGIN+$001A
   554 22BC 20 FB 20		 JSR @PRINTSTRING
   555 22BF 20 ED 20			@printEOL
   556
   557 				; optimize OK (examples\scompare.pas), line = 36
   558
   559 22C2 AD 93 24			lda VALUE+3
   560 22C5 10 0D			jpl l_017F
   561
   562 				; optimize FAIL (100, examples\scompare.pas), line = 37
   563 					@printSTRING #CODEORIGIN+$0057
   563 				 LDY> CODEORIGIN+$0057\ LDA< CODEORIGIN+$0057\ JSR @PRINTSTRING
   563 22C7 A0 20		 LDY> CODEORIGIN+$0057
   563 22C9 A9 57		 LDA< CODEORIGIN+$0057
   563 22CB 20 FB 20		 JSR @PRINTSTRING
   564 22CE 20 ED 20			@printEOL
   565 22D1 4C F9 22			jmp l_018C
   566 22D4			l_017F
   567
   568 				; optimize OK (examples\scompare.pas), line = 39
   569
   570 22D4 AD 93 24			lda VALUE+3
   571 22D7 0D 92 24			ora VALUE+2
   572 22DA 0D 91 24			ora VALUE+1
   573 22DD 0D 90 24			ora VALUE
   574 22E0 D0 0D			jne l_019C
   575
   576 				; optimize FAIL (100, examples\scompare.pas), line = 40
   577 					@printSTRING #CODEORIGIN+$0072
   577 				 LDY> CODEORIGIN+$0072\ LDA< CODEORIGIN+$0072\ JSR @PRINTSTRING
   577 22E2 A0 20		 LDY> CODEORIGIN+$0072
   577 22E4 A9 72		 LDA< CODEORIGIN+$0072
   577 22E6 20 FB 20		 JSR @PRINTSTRING
   578 22E9 20 ED 20			@printEOL
   579 22EC 4C F9 22			jmp l_01A9
   580 22EF			l_019C
   581
   582 				; optimize FAIL (100, examples\scompare.pas), line = 43
   583 					@printSTRING #CODEORIGIN+$008B
   583 				 LDY> CODEORIGIN+$008B\ LDA< CODEORIGIN+$008B\ JSR @PRINTSTRING
   583 22EF A0 20		 LDY> CODEORIGIN+$008B
   583 22F1 A9 8B		 LDA< CODEORIGIN+$008B
   583 22F3 20 FB 20		 JSR @PRINTSTRING
   584 22F6 20 ED 20			@printEOL
   585 22F9			l_01A9
   586 22F9			l_018C
   587
   588 				; optimize FAIL (100, examples\scompare.pas), line = 45
   589 					@printSTRING #CODEORIGIN+$001A
   589 				 LDY> CODEORIGIN+$001A\ LDA< CODEORIGIN+$001A\ JSR @PRINTSTRING
   589 22F9 A0 20		 LDY> CODEORIGIN+$001A
   589 22FB A9 1A		 LDA< CODEORIGIN+$001A
   589 22FD 20 FB 20		 JSR @PRINTSTRING
   590 					@print #$9B
   590 				 LDY# $9B\ JSR @PRINT
   590 2300 A0 9B		 LDY# $9B
   590 2302 20 F2 20		 JSR @PRINT
   591 					@printSTRING #CODEORIGIN+$00A6
   591 				 LDY> CODEORIGIN+$00A6\ LDA< CODEORIGIN+$00A6\ JSR @PRINTSTRING
   591 2305 A0 20		 LDY> CODEORIGIN+$00A6
   591 2307 A9 A6		 LDA< CODEORIGIN+$00A6
   591 2309 20 FB 20		 JSR @PRINTSTRING
   592 					@print #$9B
   592 				 LDY# $9B\ JSR @PRINT
   592 230C A0 9B		 LDY# $9B
   592 230E 20 F2 20		 JSR @PRINT
   593 					@printSTRING #CODEORIGIN+$001A
   593 				 LDY> CODEORIGIN+$001A\ LDA< CODEORIGIN+$001A\ JSR @PRINTSTRING
   593 2311 A0 20		 LDY> CODEORIGIN+$001A
   593 2313 A9 1A		 LDA< CODEORIGIN+$001A
   593 2315 20 FB 20		 JSR @PRINTSTRING
   594 					@print #$9B
   594 				 LDY# $9B\ JSR @PRINT
   594 2318 A0 9B		 LDY# $9B
   594 231A 20 F2 20		 JSR @PRINT
   595 					@printSTRING #CODEORIGIN+$001A
   595 				 LDY> CODEORIGIN+$001A\ LDA< CODEORIGIN+$001A\ JSR @PRINTSTRING
   595 231D A0 20		 LDY> CODEORIGIN+$001A
   595 231F A9 1A		 LDA< CODEORIGIN+$001A
   595 2321 20 FB 20		 JSR @PRINTSTRING
   596
   597 				; optimize OK (examples\scompare.pas), line = 46
   598
   599 2324 A9 FF			lda #$FF
   600 2326 F0 0D			jeq l_01D4
   601
   602 				; optimize FAIL (100, examples\scompare.pas), line = 47
   603 					@printSTRING #CODEORIGIN+$0057
   603 				 LDY> CODEORIGIN+$0057\ LDA< CODEORIGIN+$0057\ JSR @PRINTSTRING
   603 2328 A0 20		 LDY> CODEORIGIN+$0057
   603 232A A9 57		 LDA< CODEORIGIN+$0057
   603 232C 20 FB 20		 JSR @PRINTSTRING
   604 232F 20 ED 20			@printEOL
   605 2332 4C 4F 23			jmp l_01E1
   606 2335			l_01D4
   607
   608 				; optimize OK (examples\scompare.pas), line = 49
   609
   610 2335 4C 45 23			jmp l_01EB
   611
   612 				; optimize FAIL (100, examples\scompare.pas), line = 50
   613 					@printSTRING #CODEORIGIN+$0072
   613 				 LDY> CODEORIGIN+$0072\ LDA< CODEORIGIN+$0072\ JSR @PRINTSTRING
   613 2338 A0 20		 LDY> CODEORIGIN+$0072
   613 233A A9 72		 LDA< CODEORIGIN+$0072
   613 233C 20 FB 20		 JSR @PRINTSTRING
   614 233F 20 ED 20			@printEOL
   615 2342 4C 4F 23			jmp l_01F8
   616 2345			l_01EB
   617
   618 				; optimize FAIL (100, examples\scompare.pas), line = 53
   619 					@printSTRING #CODEORIGIN+$008B
   619 				 LDY> CODEORIGIN+$008B\ LDA< CODEORIGIN+$008B\ JSR @PRINTSTRING
   619 2345 A0 20		 LDY> CODEORIGIN+$008B
   619 2347 A9 8B		 LDA< CODEORIGIN+$008B
   619 2349 20 FB 20		 JSR @PRINTSTRING
   620 234C 20 ED 20			@printEOL
   621 234F			l_01F8
   622 234F			l_01E1
   623
   624 				; optimize FAIL ('CIO.GET', examples\scompare.pas), line = 55
   625 234F E8				inx
   626 2350 A9 07 95 98			mva #$07 :STACKORIGIN,x
   627 2354 20 12 22			jsr CIO.GET
   628 2357 B5 98 8D 94 24		mva :STACKORIGIN,x KEY
   629 235C CA				dex
   630
   631 235D 20 01 22			jsr CRT.READKEY					; call Entry
   632
   633 2360 CA				dex
   634
   635 				; ------------------------------------------------------------
   636
   637 = 2490			VALUE	= DATAORIGIN+$010F
   638 = 2494			KEY	= DATAORIGIN+$0113
   639 = 2495			adr.STR1	= DATAORIGIN+$0114
   640 2361			.var STR1	= adr.STR1 .word
   641 = 2595			adr.STR2	= DATAORIGIN+$0214
   642 2361			.var STR2	= adr.STR2 .word
   643 = 2695			adr.STR3	= DATAORIGIN+$0314
   644 2361			.var STR3	= adr.STR3 .word
   645
   646 = 2490			@VarData	= VALUE
   647 = 0305			@VarDataSize	= 773
   648
   649 2361			@exit
   650 					.ifdef @new
   651 					lda <@VarData
   652 					sta :ztmp
   653 					lda >@VarData
   654 					ldy #@VarDataSize-1
   655 					jmp @FreeMem
   656 					eif
   657 2361 60				rts						; ret
   658 = 2362 95 24		STR1
   658 = 2364 95 25		STR2
   658 = 2366 95 26		STR3
   658 				.endl
   659 2368			l_00B7
   660
   661 				; optimize FAIL ('MAINPROC', examples\scompare.pas), line = 60
   662 2368 20 41 22			jsr MAINPROC
   663
   664 				; ------------------------------------------------------------
   665
   666 = 2390			adr.STRBUFFER	= DATAORIGIN+$000F
   667 236B			.var STRBUFFER	= adr.STRBUFFER .word
   668 236B			@exit
   669
   670 236B A2 00		@halt	ldx #0
   671 236D 9A				txs
   672 					.ifdef MAIN.@DEFINES.ROMOFF
   673 					inc portb
   674 					.endif
   675
   676 236E 60				rts
   677
   678 				; ------------------------------------------------------------
   679
   680 236F 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   681
   682 				; ------------------------------------------------------------
   683
   684 237F			.local	@DEFINES
   685 237F			ATARI
   686 				.endl
   687
   688 = 237F 90 23		STRBUFFER
   688 				.endl							; MAIN
   689
   690 				; ------------------------------------------------------------
   691 				; ------------------------------------------------------------
   692
   693 				.macro	UNITINITIALIZATION
   694 				
   695 					.ifdef MAIN.SYSTEM.@UnitInit
   696 					jsr MAIN.SYSTEM.@UnitInit
   697 					eif
   698 				
   699 					.ifdef MAIN.ATARI.@UnitInit
   700 					jsr MAIN.ATARI.@UnitInit
   701 					eif
   702 				
   703 					.ifdef MAIN.CRT.@UnitInit
   704 					jsr MAIN.CRT.@UnitInit
   705 					eif
   706 				
   707 					.ifdef MAIN.DOS.@UnitInit
   708 					jsr MAIN.DOS.@UnitInit
   709 					eif
   710 				
   711 					.ifdef MAIN.STRUTILS.@UnitInit
   712 					jsr MAIN.STRUTILS.@UnitInit
   713 					eif
   714 				
   715 					.ifdef MAIN.SYSUTILS.@UnitInit
   716 					jsr MAIN.SYSUTILS.@UnitInit
   717 					eif
   718 				
   719 					.ifdef MAIN.CIO.@UnitInit
   720 					jsr MAIN.CIO.@UnitInit
   721 					eif
   722 				.endm
   723
   724 				; ------------------------------------------------------------
   725
   726 					ift .SIZEOF(MAIN.SYSTEM) > 0
   727 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   727 				SYSTEM: $21FD..$2200
   728 					eif
   729
   730 					ift .SIZEOF(MAIN.ATARI) > 0
   731 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   732 					eif
   733
   734 					ift .SIZEOF(MAIN.CRT) > 0
   735 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   735 				CRT: $2201..$2211
   736 					eif
   737
   738 					ift .SIZEOF(MAIN.DOS) > 0
   739 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   740 					eif
   741
   742 					ift .SIZEOF(MAIN.STRUTILS) > 0
   743 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   744 					eif
   745
   746 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   747 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   748 					eif
   749
   750 					ift .SIZEOF(MAIN.CIO) > 0
   751 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
   751 				CIO: $2212..$2240
   752 					eif
   753
   754 					.print 'CODE: ',CODEORIGIN,'..',*-1
   754 				CODE: $2000..$2380
   755
   756 				; ------------------------------------------------------------
   757
   758 2381			DATAORIGIN
   759 2381 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   760 2399 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   761 23B1 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   762 23C9 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   763 23E1 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   764 23F9 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   765 2411 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   766 2429 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   767 2441 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   768 2459 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   769 2471 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   770 2489 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $05 $41 $54 $41  $52 $49 $00 $00 $00 $00 $00 $00
   771 24A1 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   772 24B9 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   773 24D1 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   774 24E9 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   775 2501 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   776 2519 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   777 2531 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   778 2549 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   779 2561 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   780 2579 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   781 2591 00 00 00 00 05 48 + .by  $00 $00 $00 $00 $05 $48 $45 $4C  $4C $4F $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   782 25A9 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   783 25C1 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   784 25D9 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   785 25F1 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   786 2609 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   787 2621 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   788 2639 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   789 2651 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   790 2669 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
   791 2681 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $05 $41 $54 $41
   792 2699 52 49		.by  $52 $49
   793
   794 = 031A			VARINITSIZE	= *-DATAORIGIN
   795 = 0414			VARDATASIZE	= 1044
   796
   797 = 2795			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   798
   799 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   799 				DATA: $2381..$2795
   800
   801 02E0-02E1> CD 21			run START
   802
   803 				; ------------------------------------------------------------
   804
   805 				.macro	STATICDATA
   806 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $05 $41 $54  $41 $52 $49 $00 $05 $48 $45 $4C
   807 				.by  $4C $4F $00 $00 $00 $05 $73 $74  $72 $31 $3D $00 $05 $73 $74 $72  $32 $3D $00 $05 $73 $74 $72 $33
   808 				.by  $3D $00 $23 $56 $61 $6C $75 $65  $20 $6F $66 $20 $63 $6F $6D $70  $61 $72 $69 $73 $6F $6E $20 $62
   809 				.by  $79 $20 $53 $43 $6F $6D $70 $61  $72 $65 $20 $69 $73 $3A $00 $19  $73 $74 $72 $32 $20 $69 $73 $20
   810 				.by  $67 $72 $65 $61 $74 $65 $72 $20  $74 $68 $61 $6E $20 $73 $74 $72  $31 $00 $17 $73 $74 $72 $31 $20
   811 				.by  $61 $6E $64 $20 $73 $74 $72 $32  $20 $61 $72 $65 $20 $65 $71 $75  $61 $6C $00 $19 $73 $74 $72 $31
   812 				.by  $20 $69 $73 $20 $67 $72 $65 $61  $74 $65 $72 $20 $74 $68 $61 $6E  $20 $73 $74 $72 $32 $00 $08 $41
   813 				.by  $67 $61 $69 $6E $2E $2E $2E $00
   814 				.endm
   815
   816 					end
