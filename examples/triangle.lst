mads 2.1.0 build 8 (23 Dec 19)
   388 					opt l+
   101
   102 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   102 				ZPAGE: $0080..$00D7
   103
   104 				.print 'RTLIB: ',RTLIB,'..',*-1
   104 				RTLIB: $2017..$218F
   105
   106 				; ------------------------------------------------------------
   107
   108 2190			START
   109 2190 BA				tsx
   110 2191 8E B5 25			stx MAIN.@halt+1
   111
   112 					.ifdef fmulinit
   113 					fmulinit
   114 					eif
   115
   116 = 012A			VLEN	= VARDATASIZE-VARINITSIZE
   117 = 25DE			VADR	= DATAORIGIN+VARINITSIZE
   118
   119 					ift VADR > $BFFF
   120 					ert 'Invalid memory address range ',VADR
   121 					eli (VLEN>0) && (VLEN<=256)
   122 					ldx #256-VLEN
   123 					lda #0
   124 					sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>0
   126 					@fill #VADR #VLEN #0
   126 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   126 2194 A9 DE 85 88 A9 25 +  MWA #VADR @FILL.PTR1
   126 219C A9 2A 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   126 21A4 A9 00 85 84		 MVA #0 @FILL.PTR2
   126 21A8 20 0B 21		 JSR @FILL
   127 					eif
   128
   129 					.ifdef MAIN.@DEFINES.ROMOFF
   130 					icl 'atari\romoff.asm'
   131 					.endif
   132
   133 21AB A9 08 85 82 A9 27 + 	mwa #PROGRAMSTACK psptr
   134
   135 21B3 A2 0F			ldx #$0f					; DOS II+/D ParamStr
   136 21B5 BD 40 03 9D B8 25 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   137
   138 21BE E8				inx						; X = 0
   139 21BF 86 90			stx bp						; BP = 0
   140
   141 21C1 8E 08 D2			stx audctl					; reset POKEY
   142 21C4 A9 03			lda #3
   143 21C6 8D 0F D2			sta skctl
   144
   145 21C9 CA				dex						; X = 255
   146
   147 21CA				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: triangle.a65]
Source: triangle.a65
   148
   149 21CA			.local	MAIN						; PROCEDURE
   150
   151 21CA 4C B1 25			jmp l_001E
   152
   153 				; ------------------------------------------------------------
   154
   155 21CD			.local	SYSTEM						; UNIT
   156
   157 				; ------------------------------------------------------------
   158
   159 = 0101			__PORTB_BANKS	= $0101
   160 = 0648			M_PI_2	= $0648
   161 = 0192			D_PI_2	= $0192
   162 = 0004			D_PI_180	= $04
   163 = 0000			MGTIA	= $00
   164 = 0080			MVBXE	= $80
   165 = 0000			VBXE_XDLADR	= $00
   166 = 0100			VBXE_BCBADR	= $0100
   167 = 1000			VBXE_MAPADR	= $1000
   168 = 5000			VBXE_OVRADR	= $5000
   169 = B000			VBXE_WINDOW	= $B000
   170 = 0000			IDLI	= $00
   171 = 0001			IVBL	= $01
   172 = 00FE			CH_DELCHR	= $FE
   173 = 009B			CH_ENTER	= $9B
   174 = 001B			CH_ESC	= $1B
   175 = 001C			CH_CURS_UP	= $1C
   176 = 001D			CH_CURS_DOWN	= $1D
   177 = 001E			CH_CURS_LEFT	= $1E
   178 = 001F			CH_CURS_RIGHT	= $1F
   179 = 007F			CH_TAB	= $7F
   180 = 009B			CH_EOL	= $9B
   181 = 007D			CH_CLR	= $7D
   182 = 00FD			CH_BELL	= $FD
   183 = 007E			CH_DEL	= $7E
   184 = 009C			CH_DELLINE	= $9C
   185 = 009D			CH_INSLINE	= $9D
   186 = 0000			COLOR_BLACK	= $00
   187 = 000E			COLOR_WHITE	= $0E
   188 = 0032			COLOR_RED	= $32
   189 = 0096			COLOR_CYAN	= $96
   190 = 0068			COLOR_VIOLET	= $68
   191 = 00C4			COLOR_GREEN	= $C4
   192 = 0074			COLOR_BLUE	= $74
   193 = 00EE			COLOR_YELLOW	= $EE
   194 = 0028			COLOR_ORANGE	= $28
   195 = 00E4			COLOR_BROWN	= $E4
   196 = 003C			COLOR_LIGHTRED	= $3C
   197 = 0004			COLOR_GRAY1	= $04
   198 = 0006			COLOR_GRAY2	= $06
   199 = 000A			COLOR_GRAY3	= $0A
   200 = 00CC			COLOR_LIGHTGREEN	= $CC
   201 = 007C			COLOR_LIGHTBLUE	= $7C
   202 = 0004			FMOPENREAD	= $04
   203 = 0008			FMOPENWRITE	= $08
   204 = 0009			FMOPENAPPEND	= $09
   205 = 000C			FMOPENREADWRITE	= $0C
   206 = 25CA			SCREENWIDTH	= DATAORIGIN+$0000
   207 = 25CC			SCREENHEIGHT	= DATAORIGIN+$0002
   208 = 25CE			DATESEPARATOR	= DATAORIGIN+$0004
   209 = D014			TVSYSTEM	= $D014
   210 = 02C0			adr.PALETTE	= $02C0
   211 21CD			.var PALETTE	= adr.PALETTE .word
   212 = D012			adr.HPALETTE	= $D012
   213 21CD			.var HPALETTE	= adr.HPALETTE .word
   214 = 25CF			FILEMODE	= DATAORIGIN+$0005
   215 = 25D0			GRAPHMODE	= DATAORIGIN+$0006
   216 = 25D1			IORESULT	= DATAORIGIN+$0007
   217 = 25D2			EOLN	= DATAORIGIN+$0008
   218 = 25D3			RNDSEED	= DATAORIGIN+$0009
   219
   220 = 21CD C0 02		PALETTE
   220 = 21CF 12 D0		HPALETTE
   220 				.endl							; UNIT SYSTEM
   221
   222 				; ------------------------------------------------------------
   223
   224 21D1			.local	ATARI						; UNIT
   225
   226 				; ------------------------------------------------------------
   227
   228 = 0012			RTCLOK	= $12
   229 = 004D			ATRACT	= $4D
   230 = 0052			LMARGIN	= $52
   231 = 0053			RMARGIN	= $53
   232 = 0054			ROWCRS	= $54
   233 = 0055			COLCRS	= $55
   234 = 0057			DINDEX	= $57
   235 = 0058			SAVMSC	= $58
   236 = 0062			PALNTS	= $62
   237 = 006A			RAMTOP	= $6A
   238 = 0200			VDSLST	= $0200
   239 = 0230			SDLSTL	= $0230
   240 = 0290			TXTROW	= $0290
   241 = 0291			TXTCOL	= $0291
   242 = 0293			TINDEX	= $0293
   243 = 0294			TXTMSC	= $0294
   244 = 022F			SDMCTL	= $022F
   245 = 026F			GPRIOR	= $026F
   246 = 02F0			CRSINH	= $02F0
   247 = 02F3			CHACT	= $02F3
   248 = 02F4			CHBAS	= $02F4
   249 = 02FC			CH	= $02FC
   250 = 02C0			PCOLR0	= $02C0
   251 = 02C1			PCOLR1	= $02C1
   252 = 02C2			PCOLR2	= $02C2
   253 = 02C3			PCOLR3	= $02C3
   254 = 02C4			COLOR0	= $02C4
   255 = 02C5			COLOR1	= $02C5
   256 = 02C6			COLOR2	= $02C6
   257 = 02C7			COLOR3	= $02C7
   258 = 02C8			COLOR4	= $02C8
   259 = 02C8			COLBAKS	= $02C8
   260 = D000			HPOSP0	= $D000
   261 = D001			HPOSP1	= $D001
   262 = D002			HPOSP2	= $D002
   263 = D003			HPOSP3	= $D003
   264 = D004			HPOSM0	= $D004
   265 = D005			HPOSM1	= $D005
   266 = D006			HPOSM2	= $D006
   267 = D007			HPOSM3	= $D007
   268 = D008			SIZEP0	= $D008
   269 = D009			SIZEP1	= $D009
   270 = D00A			SIZEP2	= $D00A
   271 = D00B			SIZEP3	= $D00B
   272 = D00C			SIZEM	= $D00C
   273 = D00D			GRAFP0	= $D00D
   274 = D00E			GRAFP1	= $D00E
   275 = D00F			GRAFP2	= $D00F
   276 = D010			GRAFP3	= $D010
   277 = D011			GRAFM	= $D011
   278 = D004			P0PF	= $D004
   279 = D014			PAL	= $D014
   280 = D012			COLPM0	= $D012
   281 = D013			COLPM1	= $D013
   282 = D014			COLPM2	= $D014
   283 = D015			COLPM3	= $D015
   284 = D016			COLPF0	= $D016
   285 = D017			COLPF1	= $D017
   286 = D018			COLPF2	= $D018
   287 = D019			COLPF3	= $D019
   288 = D01A			COLBK	= $D01A
   289 = D01B			PRIOR	= $D01B
   290 = D01D			GRACTL	= $D01D
   291 = D01E			HITCLR	= $D01E
   292 = D200			AUDF1	= $D200
   293 = D201			AUDC1	= $D201
   294 = D202			AUDF2	= $D202
   295 = D203			AUDC2	= $D203
   296 = D204			AUDF3	= $D204
   297 = D205			AUDC3	= $D205
   298 = D206			AUDF4	= $D206
   299 = D207			AUDC4	= $D207
   300 = D208			AUDCTL	= $D208
   301 = D20F			SKSTAT	= $D20F
   302 = D301			PORTB	= $D301
   303 = D400			DMACTL	= $D400
   304 = D401			CHACTL	= $D401
   305 = D402			DLISTL	= $D402
   306 = D404			HSCROL	= $D404
   307 = D405			VSCROL	= $D405
   308 = D407			PMBASE	= $D407
   309 = D409			CHBASE	= $D409
   310 = D40A			WSYNC	= $D40A
   311 = D40B			VCOUNT	= $D40B
   312 = D40C			PENH	= $D40C
   313 = D40D			PENV	= $D40D
   314 = D40E			NMIEN	= $D40E
   315
   316 				.endl							; UNIT ATARI
   317
   318 				; ------------------------------------------------------------
   319
   320 21D1			.local	CRT						; UNIT
   321
   322 21D1			.local	READKEY						; FUNCTION | ASSEMBLER
   323
   324 				; ---------------------  ASM Block 049  ---------------------
   325
   326 21D1 8A 48			txa:pha
   327
   328 21D3 20 17 20			@GetKey
   329
   330 21D6 8D D6 25			sta Result
   331
   332 21D9 68 AA			pla:tax
   333
   334 21DB			@exit
   335
   336 				; ------------------------------------------------------------
   337
   338 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   339 				; as Pointer
   340
   341 21DB E8				inx
   342 21DC AD D6 25 95 98		mva RESULT :STACKORIGIN,x
   343
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					eif
   351
   352 				; ------------------------------------------------------------
   353
   354 = 25D6			RESULT	= DATAORIGIN+$000C
   355
   356 = 25D6			@VarData	= RESULT
   357 = 0001			@VarDataSize	= 1
   358
   359 21E1 60				rts						; ret
   360 				.endl
   361
   362 				; ------------------------------------------------------------
   363
   364 = 25D5			TEXTATTR	= DATAORIGIN+$000B
   365 = D01F			CONSOL	= $D01F
   366 = 0000			CN_START_SELECT_OPTION	= $00
   367 = 0001			CN_SELECT_OPTION	= $01
   368 = 0002			CN_START_OPTION	= $02
   369 = 0003			CN_OPTION	= $03
   370 = 0004			CN_START_SELECT	= $04
   371 = 0005			CN_SELECT	= $05
   372 = 0006			CN_START	= $06
   373 = 0007			CN_NONE	= $07
   374 = 0000			BW40	= $00
   375 = 0001			CO40	= $01
   376 = 0002			BW80	= $02
   377 = 0003			CO80	= $03
   378 = 0007			MONO	= $07
   379 = 0001			C40	= $01
   380 = 0003			C80	= $03
   381 = 0000			BLACK	= $00
   382 = 0001			BLUE	= $01
   383 = 0002			GREEN	= $02
   384 = 0003			CYAN	= $03
   385 = 0004			RED	= $04
   386 = 0005			MAGENTA	= $05
   387 = 0006			BROWN	= $06
   388 = 0007			LIGHTGRAY	= $07
   389 = 0008			DARKGRAY	= $08
   390 = 0009			LIGHTBLUE	= $09
   391 = 000A			LIGHTGREEN	= $0A
   392 = 000B			LIGHTCYAN	= $0B
   393 = 000C			LIGHTRED	= $0C
   394 = 000D			LIGHTMAGENTA	= $0D
   395 = 000E			YELLOW	= $0E
   396 = 000F			WHITE	= $0F
   397 = 0080			BLINK	= $80
   398
   399 				.endl							; UNIT CRT
   400
   401 				; ------------------------------------------------------------
   402
   403 21E2			.local	DOS						; UNIT
   404
   405 				; ------------------------------------------------------------
   406
   407 = D014			PALNTSC	= $D014
   408
   409 				.endl							; UNIT DOS
   410
   411 				; ------------------------------------------------------------
   412
   413 21E2			.local	STRUTILS					; UNIT
   414
   415 				; ------------------------------------------------------------
   416
   417 				.endl							; UNIT STRUTILS
   418
   419 				; ------------------------------------------------------------
   420
   421 21E2			.local	SYSUTILS					; UNIT
   422
   423 				; ------------------------------------------------------------
   424
   425 = 0001			FAREADONLY	= $01
   426 = 0002			FAHIDDEN	= $02
   427 = 0004			FASYSFILE	= $04
   428 = 0008			FAVOLUMEID	= $08
   429 = 0010			FADIRECTORY	= $10
   430 = 0020			FAARCHIVE	= $20
   431 = 003F			FAANYFILE	= $3F
   432
   433 				.endl							; UNIT SYSUTILS
   434
   435 				; ------------------------------------------------------------
   436
   437 21E2			.local	TYPES						; UNIT
   438
   439 				; ------------------------------------------------------------
   440
   441 				.endl							; UNIT TYPES
   442
   443 				; ------------------------------------------------------------
   444
   445 21E2			.local	GRAPH						; UNIT
   446
   447 21E2			.local	INITGRAPH_00B0					; PROCEDURE | OVERLOAD
   448
   449 				; ------------------------------------------------------------
   450
   451 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   452 				; as Pointer
   453 21E2 B5 98 8D F4 25		mva :STACKORIGIN,x MODE
   454 21E7 CA				dex
   455
   456 				; ---------------------  ASM Block 078  ---------------------
   457
   458
   459 21E8 8A 48			txa:pha
   460
   461 21EA AD F4 25			lda mode
   462 21ED 8D D0 25			sta MAIN.SYSTEM.GraphMode
   463 21F0 29 0F			and #$0f
   464 21F2 A8				tay
   465
   466 21F3 A2 60			ldx #$60		; 6*16
   467 21F5 AD F4 25			lda mode		; %00010000 with text window
   468 21F8 29 10			and #$10
   469 21FA 49 10			eor #$10
   470 21FC 09 02			ora #2			; read
   471
   472 					.nowarn @GRAPHICS
   472 21FE 20 58 20		 JSR @GRAPHICS
   473
   474 2201 8C DF 25			sty GraphResult
   475
   476
   477 					.ifdef MAIN.@DEFINES.ROMOFF
   478 					inc portb
   479 					.endif
   480
   481 = EE6D			tlshc	equ $ee6d
   482
   483 2204 A6 57			ldx dindex
   484 2206 BC 6D EE			ldy tlshc,x
   485 2209 A9 05			lda #5
   486 220B 0A			shift	asl @
   487 220C 88				dey
   488 220D D0 FC			bne shift
   489
   490 220F 8D F3 25			sta SCANLINE_WIDTH
   491
   492 				; Fox/TQA
   493
   494 = 0057			dindex	equ $57
   495 = EE7D			tmccn	equ $ee7d
   496 = EE8D			tmrcn	equ $ee8d
   497
   498 2212 A6 57			ldx dindex
   499 2214 BD 7D EE			lda tmccn,x
   500 2217 BC 8D EE			ldy tmrcn,x
   501 221A A2 00			ldx #0
   502 221C C9 40			cmp #<320
   503 221E D0 01 E8			sne:inx
   504
   505 				; X:A = horizontal resolution
   506 				; Y = vertical resolution
   507
   508 2221 20 92 20			@SCREENSIZE
   509
   510 					.ifdef MAIN.@DEFINES.ROMOFF
   511 					dec portb
   512 					.endif
   513
   514 2224 68 AA			pla:tax
   515
   516
   517 				; optimize OK (GRAPH), line = 132
   518
   519 2226 A5 58 8D F1 25		mva ATARI.SAVMSC VIDEORAM
   520 222B A5 59 8D F2 25		mva ATARI.SAVMSC+1 VIDEORAM+1
   521
   522 				; ------------------------------------------------------------
   523
   524 = 25F4			MODE	= DATAORIGIN+$002A
   525
   526 = 25F4			@VarData	= MODE
   527 = 0001			@VarDataSize	= 1
   528
   529 2230			@exit
   530 					.ifdef @new
   531 					lda <@VarData
   532 					sta :ztmp
   533 					lda >@VarData
   534 					ldy #@VarDataSize-1
   535 					jmp @FreeMem
   536 					eif
   537 2230 60				rts						; ret
   538 				.endl
   539
   540 2231			.local	SETCOLOR					; PROCEDURE | ASSEMBLER
   541
   542 				; ------------------------------------------------------------
   543
   544 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   545 				; as Pointer
   546 2231 B5 98 8D F5 25		mva :STACKORIGIN,x COLOR
   547 2236 CA				dex
   548
   549 				; ---------------------  ASM Block 080  ---------------------
   550
   551 2237 AD F5 25 8D 50 20		mva color @COMMAND.colscr
   552 223D 8D E0 25			sta GetColor
   553
   554
   555 				; ------------------------------------------------------------
   556
   557 = 25F5			COLOR	= DATAORIGIN+$002B
   558
   559 = 25F5			@VarData	= COLOR
   560 = 0001			@VarDataSize	= 1
   561
   562 2240			@exit
   563 					.ifdef @new
   564 					lda <@VarData
   565 					sta :ztmp
   566 					lda >@VarData
   567 					ldy #@VarDataSize-1
   568 					jmp @FreeMem
   569 					eif
   570 2240 60				rts						; ret
   571 				.endl
   572
   573 2241			.local	PUTPIXEL_00C0					; PROCEDURE | ASSEMBLER | OVERLOAD
   574
   575 				; ------------------------------------------------------------
   576
   577 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   578 				; as Pointer
   579 2241 B5 98 8D F8 25		mva :STACKORIGIN,x Y
   580 2246 B5 A8 8D F9 25		mva :STACKORIGIN+STACKWIDTH,x Y+1
   581 224B CA				dex
   582
   583 				; ------------------------------------------------------------
   584
   585 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   586 				; as Pointer
   587 224C B5 98 8D F6 25		mva :STACKORIGIN,x X
   588 2251 B5 A8 8D F7 25		mva :STACKORIGIN+STACKWIDTH,x X+1
   589 2256 CA				dex
   590
   591 				; ---------------------  ASM Block 081  ---------------------
   592
   593 2257 8A 48			txa:pha
   594 				{
   595 2259 AD F9 25			lda y+1
   596 225C 30 37			bmi stop
   597 225E CD CD 25			cmp MAIN.SYSTEM.ScreenHeight+1
   598 2261 D0 06			bne sk0
   599 2263 AD F8 25			lda y
   600 2266 CD CC 25			cmp MAIN.SYSTEM.ScreenHeight
   601 2269			sk0
   602 2269 B0 2A			bcs stop
   603
   604 226B AD F7 25			lda x+1
   605 226E 30 25			bmi stop
   606 2270 CD CB 25			cmp MAIN.SYSTEM.ScreenWidth+1
   607 2273 D0 06			bne sk1
   608 2275 AD F6 25			lda x
   609 2278 CD CA 25			cmp MAIN.SYSTEM.ScreenWidth
   610 227B			sk1
   611 227B B0 18			bcs stop
   612
   613 227D AD F6 25 85 55 AD + 	mwa x colcrs
   614 2287 AD F8 25 85 54		mva y rowcrs
   615
   616 				;	lda #@IDput		; slower
   617 				;	jsr @COMMAND
   618
   619 228C AE 3B 20			ldx @COMMAND.scrchn	; faster
   620 228F AD 50 20			lda @COMMAND.colscr
   621
   622 2292				m@call	@putchar.main
Macro: M@CALL [Source: rtl6502.asm]
    12 2292 20 2F 20				jsr @PUTCHAR.MAIN
Source: triangle.a65
   623
   624 2295 68 AA		stop	pla:tax
   625
   626
   627 				; ------------------------------------------------------------
   628
   629 = 25F6			X	= DATAORIGIN+$002C
   630 = 25F8			Y	= DATAORIGIN+$002E
   631
   632 = 25F6			@VarData	= X
   633 = 0004			@VarDataSize	= 4
   634
   635 2297			@exit
   636 					.ifdef @new
   637 					lda <@VarData
   638 					sta :ztmp
   639 					lda >@VarData
   640 					ldy #@VarDataSize-1
   641 					jmp @FreeMem
   642 					eif
   643 2297 60				rts						; ret
   644 				.endl
   645
   646 2298			.local	MOVETO						; PROCEDURE | ASSEMBLER
   647
   648 				; ------------------------------------------------------------
   649
   650 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   651 				; as Pointer
   652 2298 B5 98 8D FC 25		mva :STACKORIGIN,x Y
   653 229D B5 A8 8D FD 25		mva :STACKORIGIN+STACKWIDTH,x Y+1
   654 22A2 CA				dex
   655
   656 				; ------------------------------------------------------------
   657
   658 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   659 				; as Pointer
   660 22A3 B5 98 8D FA 25		mva :STACKORIGIN,x X
   661 22A8 B5 A8 8D FB 25		mva :STACKORIGIN+STACKWIDTH,x X+1
   662 22AD CA				dex
   663
   664 				; ---------------------  ASM Block 084  ---------------------
   665
   666 22AE AD FD 25			lda y+1
   667 22B1 10 08			bpl _0
   668
   669 22B3 A9 00			lda #0
   670 22B5 8D FC 25			sta y
   671 22B8 8D FD 25			sta y+1
   672 22BB			_0
   673 22BB AD FB 25			lda x+1
   674 22BE 10 08			bpl _1
   675
   676 22C0 A9 00			lda #0
   677 22C2 8D FA 25			sta x
   678 22C5 8D FB 25			sta x+1
   679 22C8			_1
   680 22C8 AD FD 25 CD CD 25 + 	cpw y main.system.ScreenHeight
   681 22D6 90 11			bcc _2
   682
   683 22D8 38 AD CC 25 E9 01 + 	sbw main.system.ScreenHeight #1 y
   684 22E9			_2
   685 22E9 AD FB 25 CD CB 25 + 	cpw x main.system.ScreenWidth
   686 22F7 90 11			bcc _3
   687
   688 22F9 38 AD CA 25 E9 01 + 	sbw main.system.ScreenWidth #1 x
   689 230A			_3
   690 230A AD FA 25 8D ED 25 + 	mwa x CurrentX
   691 2316 AD FC 25 8D EF 25 + 	mwa y CurrentY
   692
   693
   694 				; ------------------------------------------------------------
   695
   696 = 25FA			X	= DATAORIGIN+$0030
   697 = 25FC			Y	= DATAORIGIN+$0032
   698
   699 = 25FA			@VarData	= X
   700 = 0004			@VarDataSize	= 4
   701
   702 2322			@exit
   703 					.ifdef @new
   704 					lda <@VarData
   705 					sta :ztmp
   706 					lda >@VarData
   707 					ldy #@VarDataSize-1
   708 					jmp @FreeMem
   709 					eif
   710 2322 60				rts						; ret
   711 				.endl
   712
   713 2323			.local	LINETO						; PROCEDURE | ASSEMBLER
   714
   715 				; ------------------------------------------------------------
   716
   717 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   718 				; as Pointer
   719 2323 B5 98 8D 00 26		mva :STACKORIGIN,x Y
   720 2328 B5 A8 8D 01 26		mva :STACKORIGIN+STACKWIDTH,x Y+1
   721 232D CA				dex
   722
   723 				; ------------------------------------------------------------
   724
   725 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   726 				; as Pointer
   727 232E B5 98 8D FE 25		mva :STACKORIGIN,x X
   728 2333 B5 A8 8D FF 25		mva :STACKORIGIN+STACKWIDTH,x X+1
   729 2338 CA				dex
   730
   731 				; ---------------------  ASM Block 085  ---------------------
   732
   733 2339 AD 01 26			lda y+1
   734 233C 10 08			bpl _0
   735
   736 233E A9 00			lda #0
   737 2340 8D 00 26			sta y
   738 2343 8D 01 26			sta y+1
   739 2346			_0
   740 2346 AD FF 25			lda x+1
   741 2349 10 08			bpl _1
   742
   743 234B A9 00			lda #0
   744 234D 8D FE 25			sta x
   745 2350 8D FF 25			sta x+1
   746 2353			_1
   747 2353 AD 01 26 CD CD 25 + 	cpw y main.system.ScreenHeight
   748 2361 90 11			bcc _2
   749
   750 2363 38 AD CC 25 E9 01 + 	sbw main.system.ScreenHeight #1 y
   751 2374			_2
   752 2374 AD FF 25 CD CB 25 + 	cpw x main.system.ScreenWidth
   753 2382 90 11			bcc _3
   754
   755 2384 38 AD CA 25 E9 01 + 	sbw main.system.ScreenWidth #1 x
   756 2395			_3
   757 2395 8A 48			txa:pha
   758
   759 2397 AD ED 25 85 55 AD + 	mwa CurrentX colcrs
   760 23A1 AD EF 25 85 54		mva CurrentY rowcrs
   761
   762 				;	lda #@IDput		; slower
   763 				;	jsr @COMMAND
   764
   765 23A6 AE 3B 20			ldx @COMMAND.scrchn	; faster
   766 23A9 AD 50 20			lda @COMMAND.colscr
   767
   768 23AC				m@call	@putchar.main
Macro: M@CALL [Source: rtl6502.asm]
    12 23AC 20 2F 20				jsr @PUTCHAR.MAIN
Source: triangle.a65
   769
   770 23AF AD FE 25			lda x
   771 23B2 85 55			sta colcrs
   772 23B4 8D ED 25			sta CurrentX
   773 23B7 AD FF 25			lda x+1
   774 23BA 85 56			sta colcrs+1
   775 23BC 8D EE 25			sta CurrentX+1
   776
   777 23BF AD 00 26 85 54		mva y rowcrs
   778 23C4 8D EF 25			sta CurrentY
   779 23C7 AD 01 26			lda y+1
   780 23CA 8D F0 25			sta CurrentY+1
   781
   782 23CD A9 11			lda #@IDdraw
   783
   784 23CF 20 3A 20			jsr @COMMAND
   785
   786 23D2 68 AA			pla:tax
   787
   788
   789 				; ------------------------------------------------------------
   790
   791 = 25FE			X	= DATAORIGIN+$0034
   792 = 2600			Y	= DATAORIGIN+$0036
   793
   794 = 25FE			@VarData	= X
   795 = 0004			@VarDataSize	= 4
   796
   797 23D4			@exit
   798 					.ifdef @new
   799 					lda <@VarData
   800 					sta :ztmp
   801 					lda >@VarData
   802 					ldy #@VarDataSize-1
   803 					jmp @FreeMem
   804 					eif
   805 23D4 60				rts						; ret
   806 				.endl
   807
   808 				; ------------------------------------------------------------
   809
   810 = 0080			CURRENTDRIVER	= $80
   811 = 0000			DETECT	= $00
   812 = 0001			CGA	= $01
   813 = 0002			MCGA	= $02
   814 = 0003			EGA	= $03
   815 = 0004			EGA64	= $04
   816 = 0005			EGAMONO	= $05
   817 = 0006			LOWRES	= $06
   818 = 0007			HERCMONO	= $07
   819 = 0009			VGA	= $09
   820 = 000A			VESA	= $0A
   821 = 000B			D1BIT	= $0B
   822 = 000C			D2BIT	= $0C
   823 = 000D			D4BIT	= $0D
   824 = 000E			D6BIT	= $0E
   825 = 000F			D8BIT	= $0F
   826 = 0010			D12BIT	= $10
   827 = 0018			M640X400	= $18
   828 = 0018			M640X480	= $18
   829 = 0001			GROK	= $01
   830 = 00FF			GRNOINITGRAPH	= $FF
   831 = 00FE			GRNOTDETECTED	= $FE
   832 = 00FD			GRFILENOTFOUND	= $FD
   833 = 00FC			GRINVALIDDRIVER	= $FC
   834 = 00FB			GRNOLOADMEM	= $FB
   835 = 00FA			GRNOSCANMEM	= $FA
   836 = 00F9			GRNOFLOODMEM	= $F9
   837 = 00F8			GRFONTNOTFOUND	= $F8
   838 = 00F7			GRNOFONTMEM	= $F7
   839 = 00F6			GRINVALIDMODE	= $F6
   840 = 00F5			GRERROR	= $F5
   841 = 00F4			GRIOERROR	= $F4
   842 = 00F3			GRINVALIDFONT	= $F3
   843 = 00F2			GRINVALIDFONTNUM	= $F2
   844 = 00EE			GRINVALIDVERSION	= $EE
   845 = 0000			CGAC0	= $00
   846 = 0001			CGAC1	= $01
   847 = 0002			CGAC2	= $02
   848 = 0003			CGAC3	= $03
   849 = 0004			CGAHI	= $04
   850 = 0000			MCGAC0	= $00
   851 = 0001			MCGAC1	= $01
   852 = 0002			MCGAC2	= $02
   853 = 0003			MCGAC3	= $03
   854 = 0004			MCGAMED	= $04
   855 = 0005			MCGAHI	= $05
   856 = 0000			EGALO	= $00
   857 = 0001			EGAHI	= $01
   858 = 0000			EGA64LO	= $00
   859 = 0001			EGA64HI	= $01
   860 = 0003			EGAMONOHI	= $03
   861 = 000A			VGALO	= $0A
   862 = 001F			VGAMED	= $1F
   863 = 0018			VGAHI	= $18
   864 = 25D7			WIN_LEFT	= DATAORIGIN+$000D
   865 = 25D9			WIN_RIGHT	= DATAORIGIN+$000F
   866 = 25DB			WIN_TOP	= DATAORIGIN+$0011
   867 = 25DD			WIN_BOTTOM	= DATAORIGIN+$0013
   868 = 25DF			GRAPHRESULT	= DATAORIGIN+$0015
   869 = 25E0			GETCOLOR	= DATAORIGIN+$0016
   870 = 25E1			adr.LASTARCCOORDS	= DATAORIGIN+$0017
   871 23D5			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   872 = 25E1			LASTARCCOORDS.X	= DATAORIGIN+$0017
   873 = 25E3			LASTARCCOORDS.Y	= DATAORIGIN+$0019
   874 = 25E5			LASTARCCOORDS.XSTART	= DATAORIGIN+$001B
   875 = 25E7			LASTARCCOORDS.YSTART	= DATAORIGIN+$001D
   876 = 25E9			LASTARCCOORDS.XEND	= DATAORIGIN+$001F
   877 = 25EB			LASTARCCOORDS.YEND	= DATAORIGIN+$0021
   878 = 25ED			CURRENTX	= DATAORIGIN+$0023
   879 = 25EF			CURRENTY	= DATAORIGIN+$0025
   880 = 25F1			VIDEORAM	= DATAORIGIN+$0027
   881 = 25F3			SCANLINE_WIDTH	= DATAORIGIN+$0029
   882
   883 = 23D5 E1 25		LASTARCCOORDS
   883 				.endl							; UNIT GRAPH
   884
   885 				; ------------------------------------------------------------
   886
   887 23D7			.local	CIO						; UNIT
   888
   889 23D7			.local	GET						; FUNCTION | ASSEMBLER
   890
   891 				; ------------------------------------------------------------
   892
   893 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   894 				; as Pointer
   895 23D7 B5 98 8D 02 26		mva :STACKORIGIN,x CHN
   896 23DC CA				dex
   897
   898 				; ---------------------  ASM Block 095  ---------------------
   899
   900 23DD 8A 48			txa:pha
   901
   902 23DF AD 02 26			lda chn
   903 23E2 0A 0A 0A 0A			:4 asl @
   904 23E6 AA				tax
   905
   906 23E7 A9 07			lda #7		;get char command
   907 23E9 9D 42 03			sta iccmd,x
   908
   909 23EC A9 00			lda #$00	;zero out the unused
   910 23EE 9D 48 03			sta icbufl,x	;store in accumulator
   911 23F1 9D 49 03			sta icbufh,x	;...after CIOV jump
   912
   913 23F4				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 23F4 20 56 E4				jsr CIOV
Source: triangle.a65
   914
   915 23F7 8C D1 25			sty MAIN.SYSTEM.IOResult
   916
   917 23FA 8D 03 26			sta Result
   918
   919 23FD 68 AA			pla:tax
   920
   921 23FF			@exit
   922
   923 				; ------------------------------------------------------------
   924
   925 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   926 				; as Pointer
   927
   928 23FF E8				inx
   929 2400 AD 03 26 95 98		mva RESULT :STACKORIGIN,x
   930
   931 					.ifdef @new
   932 					lda <@VarData
   933 					sta :ztmp
   934 					lda >@VarData
   935 					ldy #@VarDataSize-1
   936 					jmp @FreeMem
   937 					eif
   938
   939 				; ------------------------------------------------------------
   940
   941 = 2602			CHN	= DATAORIGIN+$0038
   942 = 2603			RESULT	= DATAORIGIN+$0039
   943
   944 = 2602			@VarData	= CHN
   945 = 0002			@VarDataSize	= 2
   946
   947 2405 60				rts						; ret
   948 				.endl
   949
   950 				; ------------------------------------------------------------
   951
   952 				.endl							; UNIT CIO
   953
   954 2406			.local	MAINPROC					; PROCEDURE
   955
   956 				; optimize FAIL ('GRAPH.INITGRAPH_00B0', examples\triangle.pas), line = 20
   957 2406 E8				inx
   958 2407 A9 07 95 98			mva #$07 :STACKORIGIN,x
   959 240B 20 E2 21			jsr GRAPH.INITGRAPH_00B0
   960
   961 				; optimize OK (examples\triangle.pas), line = 21
   962
   963 240E A9 50 8D 04 27		mva #$50 X
   964
   965 				; optimize OK (examples\triangle.pas), line = 22
   966
   967 2413 A9 0A 8D 05 27		mva #$0A Y
   968
   969 				; optimize OK (examples\triangle.pas), line = 23
   970
   971 2418 A9 3C 8D 06 27		mva #$3C R
   972
   973 				; optimize FAIL ('GRAPH.SETCOLOR', examples\triangle.pas), line = 24
   974 241D E8				inx
   975 241E A9 01 95 98			mva #$01 :STACKORIGIN,x
   976 2422 20 31 22			jsr GRAPH.SETCOLOR
   977
   978 				; optimize FAIL ('GRAPH.PUTPIXEL_00C0', examples\triangle.pas), line = 25
   979 2425 E8				inx
   980 2426 AD 04 27 95 98		mva X :STACKORIGIN,x
   981 242B A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   982 242F E8				inx
   983 2430 AD 05 27 95 98		mva Y :STACKORIGIN,x
   984 2435 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   985 2439 20 41 22			jsr GRAPH.PUTPIXEL_00C0
   986
   987 				; optimize FAIL ('GRAPH.MOVETO', examples\triangle.pas), line = 26
   988 243C E8				inx
   989 243D AD 04 27 95 98		mva X :STACKORIGIN,x
   990 2442 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   991 2446 E8				inx
   992 2447 AD 05 27 95 98		mva Y :STACKORIGIN,x
   993 244C A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   994 2450 20 98 22			jsr GRAPH.MOVETO
   995
   996 				; optimize FAIL ('GRAPH.LINETO', examples\triangle.pas), line = 27
   997 2453 E8				inx
   998 2454 AD 04 27			lda X
   999 2457 18 6D 06 27			add R
  1000 245B 95 98			sta :STACKORIGIN,x
  1001 245D A9 00			lda #$00
  1002 245F 69 00			adc #$00
  1003 2461 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  1004 2463 E8				inx
  1005 2464 A9 0A 95 98			mva #$0A :STACKORIGIN,x
  1006 2468 20 02 21			jsr @expandToCARD.BYTE
  1007 246B 20 D7 20			jsr subAX_CX
  1008 246E AD 05 27			lda Y
  1009 2471 18 6D 06 27			add R
  1010 2475 95 98			sta :STACKORIGIN,x
  1011 2477 A9 00			lda #$00
  1012 2479 69 00			adc #$00
  1013 247B 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  1014 247D 20 23 23			jsr GRAPH.LINETO
  1015
  1016 				; optimize FAIL ('GRAPH.SETCOLOR', examples\triangle.pas), line = 28
  1017 2480 E8				inx
  1018 2481 A9 02 95 98			mva #$02 :STACKORIGIN,x
  1019 2485 20 31 22			jsr GRAPH.SETCOLOR
  1020
  1021 				; optimize FAIL ('GRAPH.LINETO', examples\triangle.pas), line = 29
  1022 2488 E8				inx
  1023 2489 AD 04 27			lda X
  1024 248C 38 ED 06 27			sub R
  1025 2490 95 98			sta :STACKORIGIN,x
  1026 2492 A9 00			lda #$00
  1027 2494 E9 00			sbc #$00
  1028 2496 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  1029 2498 E8				inx
  1030 2499 A9 0A 95 98			mva #$0A :STACKORIGIN,x
  1031 249D 20 02 21			jsr @expandToCARD.BYTE
  1032 24A0 20 C0 20			jsr addAX_CX
  1033 24A3 AD 05 27			lda Y
  1034 24A6 18 6D 06 27			add R
  1035 24AA 95 98			sta :STACKORIGIN,x
  1036 24AC A9 00			lda #$00
  1037 24AE 69 00			adc #$00
  1038 24B0 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  1039 24B2 20 23 23			jsr GRAPH.LINETO
  1040
  1041 				; optimize FAIL ('GRAPH.SETCOLOR', examples\triangle.pas), line = 30
  1042 24B5 E8				inx
  1043 24B6 A9 03 95 98			mva #$03 :STACKORIGIN,x
  1044 24BA 20 31 22			jsr GRAPH.SETCOLOR
  1045
  1046 				; optimize FAIL ('GRAPH.LINETO', examples\triangle.pas), line = 31
  1047 24BD E8				inx
  1048 24BE AD 04 27 95 98		mva X :STACKORIGIN,x
  1049 24C3 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1050 24C7 E8				inx
  1051 24C8 AD 05 27 95 98		mva Y :STACKORIGIN,x
  1052 24CD A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1053 24D1 20 23 23			jsr GRAPH.LINETO
  1054
  1055 				; optimize OK (examples\triangle.pas), line = 32
  1056
  1057 24D4 A9 50 8D 04 27		mva #$50 X
  1058
  1059 				; optimize OK (examples\triangle.pas), line = 33
  1060
  1061 24D9 A9 0E 8D 05 27		mva #$0E Y
  1062
  1063 				; optimize OK (examples\triangle.pas), line = 34
  1064
  1065 24DE A9 36 8D 06 27		mva #$36 R
  1066
  1067 				; optimize FAIL ('GRAPH.PUTPIXEL_00C0', examples\triangle.pas), line = 35
  1068 24E3 E8				inx
  1069 24E4 AD 04 27 95 98		mva X :STACKORIGIN,x
  1070 24E9 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1071 24ED E8				inx
  1072 24EE AD 05 27 95 98		mva Y :STACKORIGIN,x
  1073 24F3 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1074 24F7 20 41 22			jsr GRAPH.PUTPIXEL_00C0
  1075
  1076 				; optimize FAIL ('GRAPH.MOVETO', examples\triangle.pas), line = 36
  1077 24FA E8				inx
  1078 24FB AD 04 27 95 98		mva X :STACKORIGIN,x
  1079 2500 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1080 2504 E8				inx
  1081 2505 AD 05 27 95 98		mva Y :STACKORIGIN,x
  1082 250A A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1083 250E 20 98 22			jsr GRAPH.MOVETO
  1084
  1085 				; optimize FAIL ('GRAPH.LINETO', examples\triangle.pas), line = 37
  1086 2511 E8				inx
  1087 2512 AD 04 27			lda X
  1088 2515 18 6D 06 27			add R
  1089 2519 95 98			sta :STACKORIGIN,x
  1090 251B A9 00			lda #$00
  1091 251D 69 00			adc #$00
  1092 251F 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  1093 2521 E8				inx
  1094 2522 AD 05 27 95 98		mva Y :STACKORIGIN,x
  1095 2527 20 02 21			jsr @expandToCARD.BYTE
  1096 252A 20 D7 20			jsr subAX_CX
  1097 252D AD 05 27			lda Y
  1098 2530 18 6D 06 27			add R
  1099 2534 95 98			sta :STACKORIGIN,x
  1100 2536 A9 00			lda #$00
  1101 2538 69 00			adc #$00
  1102 253A 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  1103 253C 20 23 23			jsr GRAPH.LINETO
  1104
  1105 				; optimize FAIL ('GRAPH.SETCOLOR', examples\triangle.pas), line = 38
  1106 253F E8				inx
  1107 2540 A9 02 95 98			mva #$02 :STACKORIGIN,x
  1108 2544 20 31 22			jsr GRAPH.SETCOLOR
  1109
  1110 				; optimize FAIL ('GRAPH.LINETO', examples\triangle.pas), line = 39
  1111 2547 E8				inx
  1112 2548 AD 04 27			lda X
  1113 254B 38 ED 06 27			sub R
  1114 254F 95 98			sta :STACKORIGIN,x
  1115 2551 A9 00			lda #$00
  1116 2553 E9 00			sbc #$00
  1117 2555 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  1118 2557 E8				inx
  1119 2558 AD 05 27 95 98		mva Y :STACKORIGIN,x
  1120 255D 20 02 21			jsr @expandToCARD.BYTE
  1121 2560 20 C0 20			jsr addAX_CX
  1122 2563 AD 05 27			lda Y
  1123 2566 18 6D 06 27			add R
  1124 256A 95 98			sta :STACKORIGIN,x
  1125 256C A9 00			lda #$00
  1126 256E 69 00			adc #$00
  1127 2570 95 A8			sta :STACKORIGIN+STACKWIDTH,x
  1128 2572 20 23 23			jsr GRAPH.LINETO
  1129
  1130 				; optimize FAIL ('GRAPH.SETCOLOR', examples\triangle.pas), line = 40
  1131 2575 E8				inx
  1132 2576 A9 03 95 98			mva #$03 :STACKORIGIN,x
  1133 257A 20 31 22			jsr GRAPH.SETCOLOR
  1134
  1135 				; optimize FAIL ('GRAPH.LINETO', examples\triangle.pas), line = 41
  1136 257D E8				inx
  1137 257E AD 04 27 95 98		mva X :STACKORIGIN,x
  1138 2583 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1139 2587 E8				inx
  1140 2588 AD 05 27 95 98		mva Y :STACKORIGIN,x
  1141 258D A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1142 2591 20 23 23			jsr GRAPH.LINETO
  1143
  1144 				; optimize FAIL (100, examples\triangle.pas), line = 42
  1145 					@printSTRING #CODEORIGIN+$000D
  1145 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
  1145 2594 A0 20		 LDY> CODEORIGIN+$000D
  1145 2596 A9 0D		 LDA< CODEORIGIN+$000D
  1145 2598 20 61 21		 JSR @PRINTSTRING
  1146 259B 20 53 21			@printEOL
  1147
  1148 				; optimize FAIL ('CIO.GET', examples\triangle.pas), line = 43
  1149 259E E8				inx
  1150 259F A9 07 95 98			mva #$07 :STACKORIGIN,x
  1151 25A3 20 D7 23			jsr CIO.GET
  1152 25A6 B5 98 8D 07 27		mva :STACKORIGIN,x KEY
  1153 25AB CA				dex
  1154
  1155 25AC 20 D1 21			jsr CRT.READKEY					; call Entry
  1156
  1157 25AF CA				dex
  1158 25B0			@exit
  1159 					.ifdef @new
  1160 					lda <@VarData
  1161 					sta :ztmp
  1162 					lda >@VarData
  1163 					ldy #@VarDataSize-1
  1164 					jmp @FreeMem
  1165 					eif
  1166 25B0 60				rts						; ret
  1167 				.endl
  1168 25B1			l_001E
  1169
  1170 				; optimize FAIL ('MAINPROC', examples\triangle.pas), line = 48
  1171 25B1 20 06 24			jsr MAINPROC
  1172
  1173 				; ------------------------------------------------------------
  1174
  1175 = 2604			adr.STRBUFFER	= DATAORIGIN+$003A
  1176 25B4			.var STRBUFFER	= adr.STRBUFFER .word
  1177 = 2704			X	= DATAORIGIN+$013A
  1178 = 2705			Y	= DATAORIGIN+$013B
  1179 = 2706			R	= DATAORIGIN+$013C
  1180 = 2707			KEY	= DATAORIGIN+$013D
  1181 25B4			@exit
  1182
  1183 25B4 A2 00		@halt	ldx #0
  1184 25B6 9A				txs
  1185 					.ifdef MAIN.@DEFINES.ROMOFF
  1186 					inc portb
  1187 					.endif
  1188
  1189 25B7 60				rts
  1190
  1191 				; ------------------------------------------------------------
  1192
  1193 25B8 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1194
  1195 				; ------------------------------------------------------------
  1196
  1197 25C8			.local	@DEFINES
  1198 25C8			ATARI
  1199 				.endl
  1200
  1201 = 25C8 04 26		STRBUFFER
  1201 				.endl							; MAIN
  1202
  1203 				; ------------------------------------------------------------
  1204 				; ------------------------------------------------------------
  1205
  1206 				.macro	UNITINITIALIZATION
  1207 				
  1208 					.ifdef MAIN.SYSTEM.@UnitInit
  1209 					jsr MAIN.SYSTEM.@UnitInit
  1210 					eif
  1211 				
  1212 					.ifdef MAIN.ATARI.@UnitInit
  1213 					jsr MAIN.ATARI.@UnitInit
  1214 					eif
  1215 				
  1216 					.ifdef MAIN.CRT.@UnitInit
  1217 					jsr MAIN.CRT.@UnitInit
  1218 					eif
  1219 				
  1220 					.ifdef MAIN.DOS.@UnitInit
  1221 					jsr MAIN.DOS.@UnitInit
  1222 					eif
  1223 				
  1224 					.ifdef MAIN.STRUTILS.@UnitInit
  1225 					jsr MAIN.STRUTILS.@UnitInit
  1226 					eif
  1227 				
  1228 					.ifdef MAIN.SYSUTILS.@UnitInit
  1229 					jsr MAIN.SYSUTILS.@UnitInit
  1230 					eif
  1231 				
  1232 					.ifdef MAIN.TYPES.@UnitInit
  1233 					jsr MAIN.TYPES.@UnitInit
  1234 					eif
  1235 				
  1236 					.ifdef MAIN.GRAPH.@UnitInit
  1237 					jsr MAIN.GRAPH.@UnitInit
  1238 					eif
  1239 				
  1240 					.ifdef MAIN.CIO.@UnitInit
  1241 					jsr MAIN.CIO.@UnitInit
  1242 					eif
  1243 				.endm
  1244
  1245 				; ------------------------------------------------------------
  1246
  1247 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1248 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1248 				SYSTEM: $21CD..$21D0
  1249 					eif
  1250
  1251 					ift .SIZEOF(MAIN.ATARI) > 0
  1252 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1253 					eif
  1254
  1255 					ift .SIZEOF(MAIN.CRT) > 0
  1256 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1256 				CRT: $21D1..$21E1
  1257 					eif
  1258
  1259 					ift .SIZEOF(MAIN.DOS) > 0
  1260 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
  1261 					eif
  1262
  1263 					ift .SIZEOF(MAIN.STRUTILS) > 0
  1264 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
  1265 					eif
  1266
  1267 					ift .SIZEOF(MAIN.SYSUTILS) > 0
  1268 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
  1269 					eif
  1270
  1271 					ift .SIZEOF(MAIN.TYPES) > 0
  1272 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
  1273 					eif
  1274
  1275 					ift .SIZEOF(MAIN.GRAPH) > 0
  1276 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
  1276 				GRAPH: $21E2..$23D6
  1277 					eif
  1278
  1279 					ift .SIZEOF(MAIN.CIO) > 0
  1280 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
  1280 				CIO: $23D7..$2405
  1281 					eif
  1282
  1283 					.print 'CODE: ',CODEORIGIN,'..',*-1
  1283 				CODE: $2000..$25C9
  1284
  1285 				; ------------------------------------------------------------
  1286
  1287 25CA			DATAORIGIN
  1288 25CA 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $27  $00 $00 $00 $17
  1289
  1290 = 0014			VARINITSIZE	= *-DATAORIGIN
  1291 = 013E			VARDATASIZE	= 318
  1292
  1293 = 2708			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1294
  1295 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1295 				DATA: $25CA..$2708
  1296
  1297 02E0-02E1> 90 21			run START
  1298
  1299 				; ------------------------------------------------------------
  1300
  1301 				.macro	STATICDATA
  1302 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $08 $54 $72  $69 $61 $6E $67 $6C $65 $00
  1303 				.endm
  1304
  1305 					end
