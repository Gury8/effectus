mads 2.1.0 build 4 (27 Oct 19)
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $2049..$21BC
    97
    98 				; ------------------------------------------------------------
    99
   100 21BC			START
   101 21BC BA				tsx
   102 21BD 8E 68 23			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 0016			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 2381			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 21C0 A2 EA			ldx #256-VLEN
   115 21C2 A9 00			lda #0
   116 21C4 9D 97 22 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   119 					eif
   120
   121 21CA A2 0F			ldx #$0f
   122 21CC BD 40 03 9D 6B 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 21D5 E8				inx		; X = 0 !!!
   125 21D6 86 8E			stx bp		; lo BP = 0
   126
   127 21D8				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: scope02.a65]
   128
   129 21D8			.local	MAIN						; PROCEDURE
   130
   131 21D8 4C 64 23			jmp l_0050
   132
   133 				; ------------------------------------------------------------
   134
   135 21DB			.local	SYSTEM						; UNIT
   136
   137 				; ------------------------------------------------------------
   138
   139 = 0648			M_PI_2	= $0648
   140 = 0192			D_PI_2	= $0192
   141 = 0004			D_PI_180	= $0004
   142 = 0000			MGTIA	= $0000
   143 = 0080			MVBXE	= $0080
   144 = 0000			VBXE_XDLADR	= $0000
   145 = 0100			VBXE_BCBADR	= $0100
   146 = 1000			VBXE_MAPADR	= $1000
   147 = 5000			VBXE_OVRADR	= $5000
   148 = B000			VBXE_WINDOW	= $B000
   149 = 0000			IDLI	= $0000
   150 = 0001			IVBL	= $0001
   151 = 00FE			CH_DELCHR	= $00FE
   152 = 009B			CH_ENTER	= $009B
   153 = 001B			CH_ESC	= $001B
   154 = 001C			CH_CURS_UP	= $001C
   155 = 001D			CH_CURS_DOWN	= $001D
   156 = 001E			CH_CURS_LEFT	= $001E
   157 = 001F			CH_CURS_RIGHT	= $001F
   158 = 007F			CH_TAB	= $007F
   159 = 009B			CH_EOL	= $009B
   160 = 007D			CH_CLR	= $007D
   161 = 00FD			CH_BELL	= $00FD
   162 = 007E			CH_DEL	= $007E
   163 = 009C			CH_DELLINE	= $009C
   164 = 009D			CH_INSLINE	= $009D
   165 = 0000			COLOR_BLACK	= $0000
   166 = 000E			COLOR_WHITE	= $000E
   167 = 0032			COLOR_RED	= $0032
   168 = 0096			COLOR_CYAN	= $0096
   169 = 0068			COLOR_VIOLET	= $0068
   170 = 00C4			COLOR_GREEN	= $00C4
   171 = 0074			COLOR_BLUE	= $0074
   172 = 00EE			COLOR_YELLOW	= $00EE
   173 = 0028			COLOR_ORANGE	= $0028
   174 = 00E4			COLOR_BROWN	= $00E4
   175 = 003C			COLOR_LIGHTRED	= $003C
   176 = 0004			COLOR_GRAY1	= $0004
   177 = 0006			COLOR_GRAY2	= $0006
   178 = 000A			COLOR_GRAY3	= $000A
   179 = 00CC			COLOR_LIGHTGREEN	= $00CC
   180 = 007C			COLOR_LIGHTBLUE	= $007C
   181 = 0004			FMOPENREAD	= $0004
   182 = 0008			FMOPENWRITE	= $0008
   183 = 0009			FMOPENAPPEND	= $0009
   184 = 000C			FMOPENREADWRITE	= $000C
   185 = 237B			SCREENWIDTH	= DATAORIGIN+$0000
   186 = 237D			SCREENHEIGHT	= DATAORIGIN+$0002
   187 = 237F			DATESEPARATOR	= DATAORIGIN+$0004
   188 = D014			TVSYSTEM	= $D014
   189 = 02C0			adr.PALETTE	= $02C0
   190 21DB			.var PALETTE	= adr.PALETTE .word
   191 = D012			adr.HPALETTE	= $D012
   192 21DB			.var HPALETTE	= adr.HPALETTE .word
   193 = 2380			FILEMODE	= DATAORIGIN+$0005
   194 = 2381			SCREENMODE	= DATAORIGIN+$0006
   195 = 2382			IORESULT	= DATAORIGIN+$0007
   196 = 2383			EOLN	= DATAORIGIN+$0008
   197 = 2384			RNDSEED	= DATAORIGIN+$0009
   198
   199 = 21DB C0 02		PALETTE
   199 = 21DD 12 D0		HPALETTE
   199 				.endl							; UNIT SYSTEM
   200
   201 				; ------------------------------------------------------------
   202
   203 21DF			.local	DOS						; UNIT
   204
   205 				; ------------------------------------------------------------
   206
   207 = D014			PALNTSC	= $D014
   208
   209 				.endl							; UNIT DOS
   210
   211 				; ------------------------------------------------------------
   212
   213 21DF			.local	STRUTILS					; UNIT
   214
   215 				; ------------------------------------------------------------
   216
   217 				.endl							; UNIT STRUTILS
   218
   219 				; ------------------------------------------------------------
   220
   221 21DF			.local	SYSUTILS					; UNIT
   222
   223 				; ------------------------------------------------------------
   224
   225 = 0001			FAREADONLY	= $0001
   226 = 0002			FAHIDDEN	= $0002
   227 = 0004			FASYSFILE	= $0004
   228 = 0008			FAVOLUMEID	= $0008
   229 = 0010			FADIRECTORY	= $0010
   230 = 0020			FAARCHIVE	= $0020
   231 = 003F			FAANYFILE	= $003F
   232
   233 				.endl							; UNIT SYSUTILS
   234
   235 				; ------------------------------------------------------------
   236
   237 21DF			.local	ATARI						; UNIT
   238
   239 				; ------------------------------------------------------------
   240
   241 = 0012			RTCLOK	= $0012
   242 = 004D			ATRACT	= $004D
   243 = 0052			LMARGIN	= $0052
   244 = 0053			RMARGIN	= $0053
   245 = 0054			ROWCRS	= $0054
   246 = 0055			COLCRS	= $0055
   247 = 0057			DINDEX	= $0057
   248 = 0058			SAVMSC	= $0058
   249 = 006A			RAMTOP	= $006A
   250 = 0200			VDSLST	= $0200
   251 = 0230			SDLSTL	= $0230
   252 = 0290			TXTROW	= $0290
   253 = 0291			TXTCOL	= $0291
   254 = 0293			TINDEX	= $0293
   255 = 0294			TXTMSC	= $0294
   256 = 022F			SDMCTL	= $022F
   257 = 026F			GPRIOR	= $026F
   258 = 02F0			CRSINH	= $02F0
   259 = 02F3			CHACT	= $02F3
   260 = 02F4			CHBAS	= $02F4
   261 = 02FC			CH	= $02FC
   262 = 02C0			PCOLR0	= $02C0
   263 = 02C1			PCOLR1	= $02C1
   264 = 02C2			PCOLR2	= $02C2
   265 = 02C3			PCOLR3	= $02C3
   266 = 02C4			COLOR0	= $02C4
   267 = 02C5			COLOR1	= $02C5
   268 = 02C6			COLOR2	= $02C6
   269 = 02C7			COLOR3	= $02C7
   270 = 02C8			COLOR4	= $02C8
   271 = 02C8			COLBAKS	= $02C8
   272 = D000			HPOSP0	= $D000
   273 = D001			HPOSP1	= $D001
   274 = D002			HPOSP2	= $D002
   275 = D003			HPOSP3	= $D003
   276 = D004			HPOSM0	= $D004
   277 = D005			HPOSM1	= $D005
   278 = D006			HPOSM2	= $D006
   279 = D007			HPOSM3	= $D007
   280 = D008			SIZEP0	= $D008
   281 = D009			SIZEP1	= $D009
   282 = D00A			SIZEP2	= $D00A
   283 = D00B			SIZEP3	= $D00B
   284 = D00C			SIZEM	= $D00C
   285 = D00D			GRAFP0	= $D00D
   286 = D00E			GRAFP1	= $D00E
   287 = D00F			GRAFP2	= $D00F
   288 = D010			GRAFP3	= $D010
   289 = D011			GRAFM	= $D011
   290 = D004			P0PF	= $D004
   291 = D014			PAL	= $D014
   292 = D012			COLPM0	= $D012
   293 = D013			COLPM1	= $D013
   294 = D014			COLPM2	= $D014
   295 = D015			COLPM3	= $D015
   296 = D016			COLPF0	= $D016
   297 = D017			COLPF1	= $D017
   298 = D018			COLPF2	= $D018
   299 = D019			COLPF3	= $D019
   300 = D01A			COLBK	= $D01A
   301 = D01B			PRIOR	= $D01B
   302 = D01D			GRACTL	= $D01D
   303 = D01E			HITCLR	= $D01E
   304 = D200			AUDF1	= $D200
   305 = D201			AUDC1	= $D201
   306 = D202			AUDF2	= $D202
   307 = D203			AUDC2	= $D203
   308 = D204			AUDF3	= $D204
   309 = D205			AUDC3	= $D205
   310 = D206			AUDF4	= $D206
   311 = D207			AUDC4	= $D207
   312 = D208			AUDCTL	= $D208
   313 = D20F			SKSTAT	= $D20F
   314 = D301			PORTB	= $D301
   315 = D400			DMACTL	= $D400
   316 = D401			CHACTL	= $D401
   317 = D402			DLISTL	= $D402
   318 = D404			HSCROL	= $D404
   319 = D405			VSCROL	= $D405
   320 = D407			PMBASE	= $D407
   321 = D409			CHBASE	= $D409
   322 = D40A			WSYNC	= $D40A
   323 = D40B			VCOUNT	= $D40B
   324 = D40C			PENH	= $D40C
   325 = D40D			PENV	= $D40D
   326 = D40E			NMIEN	= $D40E
   327
   328 				.endl							; UNIT ATARI
   329
   330 				; ------------------------------------------------------------
   331
   332 21DF			.local	CRT						; UNIT
   333
   334 21DF			.local	READKEY						; FUNCTION | ASSEMBLER
   335
   336 				; ---------------------  ASM Block 063  ---------------------
   337
   338 21DF 8A 48			txa:pha
   339
   340 21E1 20 AC 21			@GetKey
   341
   342 21E4 8D 87 23			sta Result
   343
   344 21E7 68 AA			pla:tax
   345
   346 21E9			@exit
   347
   348 				; ------------------------------------------------------------
   349
   350 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   351 				; as Pointer
   352
   353 21E9 E8				inx						; add bx, 1
   354 21EA AD 87 23 95 98		mva RESULT :STACKORIGIN,x
   355
   356 					.ifdef @new
   357 					@FreeMem #@VarData #@VarDataSize
   358 					eif
   359
   360 				; ------------------------------------------------------------
   361
   362 = 2387			RESULT	= DATAORIGIN+$000C
   363
   364 = 2387			@VarData	= RESULT
   365 = 0001			@VarDataSize	= 1
   366
   367 21EF 60				rts						; ret
   368 				.endl
   369
   370 				; ------------------------------------------------------------
   371
   372 = 2386			TEXTATTR	= DATAORIGIN+$000B
   373 = D01F			CONSOL	= $D01F
   374 = 0000			CN_START_SELECT_OPTION	= $0000
   375 = 0001			CN_SELECT_OPTION	= $0001
   376 = 0002			CN_START_OPTION	= $0002
   377 = 0003			CN_OPTION	= $0003
   378 = 0004			CN_START_SELECT	= $0004
   379 = 0005			CN_SELECT	= $0005
   380 = 0006			CN_START	= $0006
   381 = 0007			CN_NONE	= $0007
   382 = 0000			BW40	= $0000
   383 = 0001			CO40	= $0001
   384 = 0002			BW80	= $0002
   385 = 0003			CO80	= $0003
   386 = 0007			MONO	= $0007
   387 = 0001			C40	= $0001
   388 = 0003			C80	= $0003
   389 = 0000			BLACK	= $0000
   390 = 0001			BLUE	= $0001
   391 = 0002			GREEN	= $0002
   392 = 0003			CYAN	= $0003
   393 = 0004			RED	= $0004
   394 = 0005			MAGENTA	= $0005
   395 = 0006			BROWN	= $0006
   396 = 0007			LIGHTGRAY	= $0007
   397 = 0008			DARKGRAY	= $0008
   398 = 0009			LIGHTBLUE	= $0009
   399 = 000A			LIGHTGREEN	= $000A
   400 = 000B			LIGHTCYAN	= $000B
   401 = 000C			LIGHTRED	= $000C
   402 = 000D			LIGHTMAGENTA	= $000D
   403 = 000E			YELLOW	= $000E
   404 = 000F			WHITE	= $000F
   405 = 0080			BLINK	= $0080
   406
   407 				.endl							; UNIT CRT
   408
   409 21F0			.local	TEST01PROC					; PROCEDURE
   410
   411 				; optimize FAIL (100, examples\scope02.pas), line = 16
   412 					@printSTRING #CODEORIGIN+$000D
   412 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   412 21F0 A0 20		 LDY> CODEORIGIN+$000D
   412 21F2 A9 0D		 LDA< CODEORIGIN+$000D
   412 21F4 20 97 20		 JSR @PRINTSTRING
   413 21F7 20 89 20			@printEOL
   414 21FA			@exit
   415 					.ifdef @new
   416 					@FreeMem #@VarData #@VarDataSize
   417 					eif
   418 21FA 60				rts						; ret
   419 				.endl
   420
   421 21FB			.local	TEST02PROC					; PROCEDURE
   422
   423 				; ------------------------------------------------------------
   424
   425 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   426 				; as Pointer
   427 21FB B5 98 8D 8B 23		mva :STACKORIGIN,x N
   428 2200 CA				dex						; sub bx, 1
   429
   430 				; optimize FAIL (100, examples\scope02.pas), line = 23
   431 					@printSTRING #CODEORIGIN+$001D
   431 				 LDY> CODEORIGIN+$001D\ LDA< CODEORIGIN+$001D\ JSR @PRINTSTRING
   431 2201 A0 20		 LDY> CODEORIGIN+$001D
   431 2203 A9 1D		 LDA< CODEORIGIN+$001D
   431 2205 20 97 20		 JSR @PRINTSTRING
   432 2208 20 89 20			@printEOL
   433
   434 				; optimize FAIL (100, examples\scope02.pas), line = 24
   435 220B E8				inx
   436 220C AD 8B 23 95 98		mva N :STACKORIGIN,x
   437 2211 20 84 20			@printCHAR
   438 2214 CA				dex
   439
   440 				; optimize FAIL (100, examples\scope02.pas), line = 25
   441 					@printSTRING #CODEORIGIN+$002D
   441 				 LDY> CODEORIGIN+$002D\ LDA< CODEORIGIN+$002D\ JSR @PRINTSTRING
   441 2215 A0 20		 LDY> CODEORIGIN+$002D
   441 2217 A9 2D		 LDA< CODEORIGIN+$002D
   441 2219 20 97 20		 JSR @PRINTSTRING
   442 221C 20 89 20			@printEOL
   443
   444 				; optimize OK (examples\scope02.pas), line = 26
   445
   446 221F A9 32			lda #$32
   447 2221 8D 8C 23			sta II
   448 2224 A0 FF			ldy #$FF
   449 2226 A9 FB			lda #$FB
   450 2228 8D 8D 23			sta II+1
   451 222B 8C 8E 23			sty II+2
   452 222E 8C 8F 23			sty II+3
   453
   454 				; optimize FAIL (100, examples\scope02.pas), line = 27
   455 2231 E8				inx
   456 2232 AD 8C 23 95 98		mva II :STACKORIGIN,x
   457 2237 AD 8D 23 95 A8		mva II+1 :STACKORIGIN+STACKWIDTH,x
   458 223C AD 8E 23 95 B8		mva II+2 :STACKORIGIN+STACKWIDTH*2,x
   459 2241 AD 8F 23 95 C8		mva II+3 :STACKORIGIN+STACKWIDTH*3,x
   460 2246 20 FF 20			jsr @printINT
   461 2249 CA				dex
   462 224A 20 89 20			@printEOL
   463
   464 				; ------------------------------------------------------------
   465
   466 = 238B			N	= DATAORIGIN+$0010
   467 = 238C			II	= DATAORIGIN+$0011
   468
   469 = 238B			@VarData	= N
   470 = 0005			@VarDataSize	= 5
   471
   472 224D			@exit
   473 					.ifdef @new
   474 					@FreeMem #@VarData #@VarDataSize
   475 					eif
   476 224D 60				rts						; ret
   477 				.endl
   478
   479 224E			.local	TEST03PROC					; PROCEDURE
   480
   481 				; ------------------------------------------------------------
   482
   483 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   484 				; as Pointer
   485 224E B5 98 8D 91 23		mva :STACKORIGIN,x CC
   486 2253 B5 A8 8D 92 23		mva :STACKORIGIN+STACKWIDTH,x CC+1
   487 2258 CA				dex						; sub bx, 1
   488
   489 				; ------------------------------------------------------------
   490
   491 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   492 				; as Pointer
   493 2259 B5 98 8D 90 23		mva :STACKORIGIN,x N
   494 225E CA				dex						; sub bx, 1
   495
   496 				; optimize FAIL (100, examples\scope02.pas), line = 32
   497 225F E8				inx
   498 2260 AD 90 23 95 98		mva N :STACKORIGIN,x
   499 2265 20 15 21			jsr @printBYTE
   500 2268 CA				dex
   501 2269 20 89 20			@printEOL
   502
   503 				; optimize FAIL (100, examples\scope02.pas), line = 33
   504 226C E8				inx
   505 226D AD 91 23 95 98		mva CC :STACKORIGIN,x
   506 2272 AD 92 23 95 A8		mva CC+1 :STACKORIGIN+STACKWIDTH,x
   507 2277 20 0F 21			jsr @printWORD
   508 227A CA				dex
   509 227B 20 89 20			@printEOL
   510
   511 				; optimize OK (examples\scope02.pas), line = 34
   512
   513 227E A9 E8 8D 89 23		mva #$E8 CVAR
   514 2283 A9 FD 8D 8A 23		mva #$FD CVAR+1
   515
   516 				; optimize OK (examples\scope02.pas), line = 35
   517
   518 2288 A9 0A 8D 90 23		mva #$0A N
   519
   520 				; optimize OK (examples\scope02.pas), line = 36
   521
   522 228D A9 50 8D 91 23		mva #$50 CC
   523 2292 A9 C3 8D 92 23		mva #$C3 CC+1
   524
   525 				; optimize FAIL (100, examples\scope02.pas), line = 37
   526 2297 E8				inx
   527 2298 AD 90 23 95 98		mva N :STACKORIGIN,x
   528 229D 20 15 21			jsr @printBYTE
   529 22A0 CA				dex
   530 22A1 20 89 20			@printEOL
   531
   532 				; optimize FAIL (100, examples\scope02.pas), line = 38
   533 22A4 E8				inx
   534 22A5 AD 91 23 95 98		mva CC :STACKORIGIN,x
   535 22AA AD 92 23 95 A8		mva CC+1 :STACKORIGIN+STACKWIDTH,x
   536 22AF 20 0F 21			jsr @printWORD
   537 22B2 CA				dex
   538 22B3 20 89 20			@printEOL
   539
   540 				; ------------------------------------------------------------
   541
   542 = 2390			N	= DATAORIGIN+$0015
   543 = 2391			CC	= DATAORIGIN+$0016
   544
   545 = 2390			@VarData	= N
   546 = 0003			@VarDataSize	= 3
   547
   548 22B6			@exit
   549 					.ifdef @new
   550 					@FreeMem #@VarData #@VarDataSize
   551 					eif
   552 22B6 60				rts						; ret
   553 				.endl
   554
   555 22B7			.local	MAINPROC					; PROCEDURE
   556
   557 				; optimize FAIL (100, examples\scope02.pas), line = 46
   558 					@print #$7D
   558 				 LDY# $7D\ JSR @PRINT
   558 22B7 A0 7D		 LDY# $7D
   558 22B9 20 8E 20		 JSR @PRINT
   559
   560 				; optimize FAIL (100, examples\scope02.pas), line = 47
   561 					@printSTRING #CODEORIGIN+$003C
   561 				 LDY> CODEORIGIN+$003C\ LDA< CODEORIGIN+$003C\ JSR @PRINTSTRING
   561 22BC A0 20		 LDY> CODEORIGIN+$003C
   561 22BE A9 3C		 LDA< CODEORIGIN+$003C
   561 22C0 20 97 20		 JSR @PRINTSTRING
   562 22C3 20 89 20			@printEOL
   563
   564 				; optimize OK (examples\scope02.pas), line = 48
   565
   566 22C6 A9 1E 8D 93 23		mva #$1E X
   567 22CB A9 00 8D 94 23		mva #$00 X+1
   568
   569 				; optimize OK (examples\scope02.pas), line = 49
   570
   571 22D0 A9 32 8D 95 23		mva #$32 Y
   572 22D5 A9 00 8D 96 23		mva #$00 Y+1
   573
   574 				; optimize OK (examples\scope02.pas), line = 50
   575
   576 22DA A9 14			lda #$14
   577 22DC 85 8A			sta :ecx
   578 22DE A9 00			lda #$00
   579 22E0 85 8B			sta :ecx+1
   580 22E2 AD 93 23			lda X
   581 22E5 85 82			sta :eax
   582 22E7 AD 94 23			lda X+1
   583 22EA 85 83			sta :eax+1
   584 					.ifdef fmulinit
   585 					fmulu_16
   586 					els
   587 22EC 20 63 20			imulCX
   588 					eif
   589 22EF A5 82			lda :eax
   590 22F1 8D 93 23			sta X
   591 22F4 A5 83			lda :eax+1
   592 22F6 8D 94 23			sta X+1
   593
   594 				; optimize FAIL (100, examples\scope02.pas), line = 51
   595 22F9 E8				inx
   596 22FA AD 93 23 95 98		mva X :STACKORIGIN,x
   597 22FF AD 94 23 95 A8		mva X+1 :STACKORIGIN+STACKWIDTH,x
   598 2304 20 0F 21			jsr @printWORD
   599 2307 CA				dex
   600 2308 20 89 20			@printEOL
   601
   602 				; optimize OK (examples\scope02.pas), line = 52
   603
   604 230B AD 95 23			lda Y
   605 230E 85 8A			sta :ecx
   606 2310 AD 96 23			lda Y+1
   607 2313 85 8B			sta :ecx+1
   608 2315 AD 93 23			lda X
   609 2318 85 82			sta :eax
   610 231A AD 94 23			lda X+1
   611 231D 85 83			sta :eax+1
   612 					.ifdef fmulinit
   613 					fmulu_16
   614 					els
   615 231F 20 63 20			imulCX
   616 					eif
   617 2322 A5 82			lda :eax
   618 2324 8D 93 23			sta X
   619 2327 A5 83			lda :eax+1
   620 2329 8D 94 23			sta X+1
   621
   622 				; optimize FAIL (100, examples\scope02.pas), line = 53
   623 232C E8				inx
   624 232D AD 93 23 95 98		mva X :STACKORIGIN,x
   625 2332 AD 94 23 95 A8		mva X+1 :STACKORIGIN+STACKWIDTH,x
   626 2337 20 0F 21			jsr @printWORD
   627 233A CA				dex
   628 233B 20 89 20			@printEOL
   629
   630 				; optimize FAIL ('TEST01PROC', examples\scope02.pas), line = 54
   631 233E 20 F0 21			jsr TEST01PROC
   632
   633 				; optimize FAIL ('TEST02PROC', examples\scope02.pas), line = 55
   634 2341 E8				inx
   635 2342 A9 48 95 98			mva #$48 :STACKORIGIN,x
   636 2346 20 FB 21			jsr TEST02PROC
   637
   638 				; optimize FAIL ('TEST03PROC', examples\scope02.pas), line = 56
   639 2349 E8				inx
   640 234A A9 07 95 98			mva #$07 :STACKORIGIN,x
   641 234E E8				inx
   642 234F A9 33 95 98			mva #$33 :STACKORIGIN,x
   643 2353 A9 09 95 A8			mva #$09 :STACKORIGIN+STACKWIDTH,x
   644 2357 20 4E 22			jsr TEST03PROC
   645
   646 				; optimize FAIL ('CRT.READKEY', examples\scope02.pas), line = 57
   647 235A 20 DF 21			jsr CRT.READKEY
   648 235D B5 98 8D 88 23		mva :STACKORIGIN,x KEY
   649 2362 CA				dex
   650
   651 				; ------------------------------------------------------------
   652
   653 = 2393			X	= DATAORIGIN+$0018
   654 = 2395			Y	= DATAORIGIN+$001A
   655
   656 = 2393			@VarData	= X
   657 = 0004			@VarDataSize	= 4
   658
   659 2363			@exit
   660 					.ifdef @new
   661 					@FreeMem #@VarData #@VarDataSize
   662 					eif
   663 2363 60				rts						; ret
   664 				.endl
   665 2364			l_0050
   666
   667 				; optimize FAIL ('MAINPROC', examples\scope02.pas), line = 61
   668 2364 20 B7 22			jsr MAINPROC
   669
   670 				; ------------------------------------------------------------
   671
   672 = 2388			KEY	= DATAORIGIN+$000D
   673 = 2389			CVAR	= DATAORIGIN+$000E
   674 2367			@exit
   675
   676 2367 A2 00		@halt	ldx #0
   677 2369 9A				txs
   678
   679 236A 60				rts
   680
   681 				; ------------------------------------------------------------
   682
   683 236B 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   684
   685 				; ------------------------------------------------------------
   686
   687 237B			.local	@DEFINES
   688 237B			ATARI
   689 				.endl
   690
   691 				.endl							; MAIN
   692
   693 				; ------------------------------------------------------------
   694 				; ------------------------------------------------------------
   695
   696 				.macro	UNITINITIALIZATION
   697 				
   698 					.ifdef MAIN.SYSTEM.@UnitInit
   699 					jsr MAIN.SYSTEM.@UnitInit
   700 					eif
   701 				
   702 					.ifdef MAIN.DOS.@UnitInit
   703 					jsr MAIN.DOS.@UnitInit
   704 					eif
   705 				
   706 					.ifdef MAIN.STRUTILS.@UnitInit
   707 					jsr MAIN.STRUTILS.@UnitInit
   708 					eif
   709 				
   710 					.ifdef MAIN.SYSUTILS.@UnitInit
   711 					jsr MAIN.SYSUTILS.@UnitInit
   712 					eif
   713 				
   714 					.ifdef MAIN.ATARI.@UnitInit
   715 					jsr MAIN.ATARI.@UnitInit
   716 					eif
   717 				
   718 					.ifdef MAIN.CRT.@UnitInit
   719 					jsr MAIN.CRT.@UnitInit
   720 					eif
   721 				.endm
   722
   723 				; ------------------------------------------------------------
   724
   725 					ift .SIZEOF(MAIN.SYSTEM) > 0
   726 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   726 				SYSTEM: $21DB..$21DE
   727 					eif
   728
   729 					ift .SIZEOF(MAIN.DOS) > 0
   730 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   731 					eif
   732
   733 					ift .SIZEOF(MAIN.STRUTILS) > 0
   734 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   735 					eif
   736
   737 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   738 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   739 					eif
   740
   741 					ift .SIZEOF(MAIN.ATARI) > 0
   742 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   743 					eif
   744
   745 					ift .SIZEOF(MAIN.CRT) > 0
   746 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   746 				CRT: $21DF..$21EF
   747 					eif
   748
   749 					.print 'CODE: ',CODEORIGIN,'..',*-1
   749 				CODE: $2000..$237A
   750
   751 				; ------------------------------------------------------------
   752
   753 237B			DATAORIGIN
   754 237B 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   755
   756 = 0006			VARINITSIZE	= *-DATAORIGIN
   757 = 001C			VARDATASIZE	= 28
   758
   759 = 2397			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   760
   761 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   761 				DATA: $237B..$2397
   762
   763 02E0-02E1> BC 21			run START
   764
   765 				; ------------------------------------------------------------
   766
   767 				.macro	STATICDATA
   768 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $0E $48 $65  $6C $6C $6F $20 $74 $68 $65 $72
   769 				.by  $65 $20 $30 $31 $00 $0E $48 $65  $6C $6C $6F $20 $74 $68 $65 $72  $65 $20 $30 $32 $00 $0D $65 $6C
   770 				.by  $6C $6F $20 $74 $68 $65 $72 $65  $20 $30 $33 $00 $0B $48 $65 $6C  $6C $6F $20 $77 $6F $72 $6C $64
   771 				.by  $00
   772 				.endm
   773
   774 					end
