mads 2.1.0 build 8 (23 Dec 19)
   388 					opt l+
   101
   102 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   102 				ZPAGE: $0080..$00D7
   103
   104 				.print 'RTLIB: ',RTLIB,'..',*-1
   104 				RTLIB: $2048..$20EF
   105
   106 				; ------------------------------------------------------------
   107
   108 20F0			START
   109 20F0 BA				tsx
   110 20F1 8E 9E 22			stx MAIN.@halt+1
   111
   112 					.ifdef fmulinit
   113 					fmulinit
   114 					eif
   115
   116 = 0112			VLEN	= VARDATASIZE-VARINITSIZE
   117 = 22B9			VADR	= DATAORIGIN+VARINITSIZE
   118
   119 					ift VADR > $BFFF
   120 					ert 'Invalid memory address range ',VADR
   121 					eli (VLEN>0) && (VLEN<=256)
   122 					ldx #256-VLEN
   123 					lda #0
   124 					sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>0
   126 					@fill #VADR #VLEN #0
   126 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   126 20F4 A9 B9 85 88 A9 22 +  MWA #VADR @FILL.PTR1
   126 20FC A9 12 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   126 2104 A9 00 85 84		 MVA #0 @FILL.PTR2
   126 2108 20 6B 20		 JSR @FILL
   127 					eif
   128
   129 					.ifdef MAIN.@DEFINES.ROMOFF
   130 					icl 'atari\romoff.asm'
   131 					.endif
   132
   133 210B A9 CB 85 82 A9 23 + 	mwa #PROGRAMSTACK psptr
   134
   135 2113 A2 0F			ldx #$0f					; DOS II+/D ParamStr
   136 2115 BD 40 03 9D A1 22 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   137
   138 211E E8				inx						; X = 0
   139 211F 86 90			stx bp						; BP = 0
   140
   141 2121 8E 08 D2			stx audctl					; reset POKEY
   142 2124 A9 03			lda #3
   143 2126 8D 0F D2			sta skctl
   144
   145 2129 CA				dex						; X = 255
   146
   147 212A				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: diskget.a65]
Source: diskget.a65
   148
   149 212A			.local	MAIN						; PROCEDURE
   150
   151 212A 4C 9A 22			jmp l_004F
   152
   153 				; ------------------------------------------------------------
   154
   155 212D			.local	SYSTEM						; UNIT
   156
   157 				; ------------------------------------------------------------
   158
   159 = 0101			__PORTB_BANKS	= $0101
   160 = 0648			M_PI_2	= $0648
   161 = 0192			D_PI_2	= $0192
   162 = 0004			D_PI_180	= $04
   163 = 0000			MGTIA	= $00
   164 = 0080			MVBXE	= $80
   165 = 0000			VBXE_XDLADR	= $00
   166 = 0100			VBXE_BCBADR	= $0100
   167 = 1000			VBXE_MAPADR	= $1000
   168 = 5000			VBXE_OVRADR	= $5000
   169 = B000			VBXE_WINDOW	= $B000
   170 = 0000			IDLI	= $00
   171 = 0001			IVBL	= $01
   172 = 00FE			CH_DELCHR	= $FE
   173 = 009B			CH_ENTER	= $9B
   174 = 001B			CH_ESC	= $1B
   175 = 001C			CH_CURS_UP	= $1C
   176 = 001D			CH_CURS_DOWN	= $1D
   177 = 001E			CH_CURS_LEFT	= $1E
   178 = 001F			CH_CURS_RIGHT	= $1F
   179 = 007F			CH_TAB	= $7F
   180 = 009B			CH_EOL	= $9B
   181 = 007D			CH_CLR	= $7D
   182 = 00FD			CH_BELL	= $FD
   183 = 007E			CH_DEL	= $7E
   184 = 009C			CH_DELLINE	= $9C
   185 = 009D			CH_INSLINE	= $9D
   186 = 0000			COLOR_BLACK	= $00
   187 = 000E			COLOR_WHITE	= $0E
   188 = 0032			COLOR_RED	= $32
   189 = 0096			COLOR_CYAN	= $96
   190 = 0068			COLOR_VIOLET	= $68
   191 = 00C4			COLOR_GREEN	= $C4
   192 = 0074			COLOR_BLUE	= $74
   193 = 00EE			COLOR_YELLOW	= $EE
   194 = 0028			COLOR_ORANGE	= $28
   195 = 00E4			COLOR_BROWN	= $E4
   196 = 003C			COLOR_LIGHTRED	= $3C
   197 = 0004			COLOR_GRAY1	= $04
   198 = 0006			COLOR_GRAY2	= $06
   199 = 000A			COLOR_GRAY3	= $0A
   200 = 00CC			COLOR_LIGHTGREEN	= $CC
   201 = 007C			COLOR_LIGHTBLUE	= $7C
   202 = 0004			FMOPENREAD	= $04
   203 = 0008			FMOPENWRITE	= $08
   204 = 0009			FMOPENAPPEND	= $09
   205 = 000C			FMOPENREADWRITE	= $0C
   206 = 22B3			SCREENWIDTH	= DATAORIGIN+$0000
   207 = 22B5			SCREENHEIGHT	= DATAORIGIN+$0002
   208 = 22B7			DATESEPARATOR	= DATAORIGIN+$0004
   209 = D014			TVSYSTEM	= $D014
   210 = 02C0			adr.PALETTE	= $02C0
   211 212D			.var PALETTE	= adr.PALETTE .word
   212 = D012			adr.HPALETTE	= $D012
   213 212D			.var HPALETTE	= adr.HPALETTE .word
   214 = 22B8			FILEMODE	= DATAORIGIN+$0005
   215 = 22B9			GRAPHMODE	= DATAORIGIN+$0006
   216 = 22BA			IORESULT	= DATAORIGIN+$0007
   217 = 22BB			EOLN	= DATAORIGIN+$0008
   218 = 22BC			RNDSEED	= DATAORIGIN+$0009
   219
   220 = 212D C0 02		PALETTE
   220 = 212F 12 D0		HPALETTE
   220 				.endl							; UNIT SYSTEM
   221
   222 				; ------------------------------------------------------------
   223
   224 2131			.local	ATARI						; UNIT
   225
   226 				; ------------------------------------------------------------
   227
   228 = 0012			RTCLOK	= $12
   229 = 004D			ATRACT	= $4D
   230 = 0052			LMARGIN	= $52
   231 = 0053			RMARGIN	= $53
   232 = 0054			ROWCRS	= $54
   233 = 0055			COLCRS	= $55
   234 = 0057			DINDEX	= $57
   235 = 0058			SAVMSC	= $58
   236 = 0062			PALNTS	= $62
   237 = 006A			RAMTOP	= $6A
   238 = 0200			VDSLST	= $0200
   239 = 0230			SDLSTL	= $0230
   240 = 0290			TXTROW	= $0290
   241 = 0291			TXTCOL	= $0291
   242 = 0293			TINDEX	= $0293
   243 = 0294			TXTMSC	= $0294
   244 = 022F			SDMCTL	= $022F
   245 = 026F			GPRIOR	= $026F
   246 = 02F0			CRSINH	= $02F0
   247 = 02F3			CHACT	= $02F3
   248 = 02F4			CHBAS	= $02F4
   249 = 02FC			CH	= $02FC
   250 = 02C0			PCOLR0	= $02C0
   251 = 02C1			PCOLR1	= $02C1
   252 = 02C2			PCOLR2	= $02C2
   253 = 02C3			PCOLR3	= $02C3
   254 = 02C4			COLOR0	= $02C4
   255 = 02C5			COLOR1	= $02C5
   256 = 02C6			COLOR2	= $02C6
   257 = 02C7			COLOR3	= $02C7
   258 = 02C8			COLOR4	= $02C8
   259 = 02C8			COLBAKS	= $02C8
   260 = D000			HPOSP0	= $D000
   261 = D001			HPOSP1	= $D001
   262 = D002			HPOSP2	= $D002
   263 = D003			HPOSP3	= $D003
   264 = D004			HPOSM0	= $D004
   265 = D005			HPOSM1	= $D005
   266 = D006			HPOSM2	= $D006
   267 = D007			HPOSM3	= $D007
   268 = D008			SIZEP0	= $D008
   269 = D009			SIZEP1	= $D009
   270 = D00A			SIZEP2	= $D00A
   271 = D00B			SIZEP3	= $D00B
   272 = D00C			SIZEM	= $D00C
   273 = D00D			GRAFP0	= $D00D
   274 = D00E			GRAFP1	= $D00E
   275 = D00F			GRAFP2	= $D00F
   276 = D010			GRAFP3	= $D010
   277 = D011			GRAFM	= $D011
   278 = D004			P0PF	= $D004
   279 = D014			PAL	= $D014
   280 = D012			COLPM0	= $D012
   281 = D013			COLPM1	= $D013
   282 = D014			COLPM2	= $D014
   283 = D015			COLPM3	= $D015
   284 = D016			COLPF0	= $D016
   285 = D017			COLPF1	= $D017
   286 = D018			COLPF2	= $D018
   287 = D019			COLPF3	= $D019
   288 = D01A			COLBK	= $D01A
   289 = D01B			PRIOR	= $D01B
   290 = D01D			GRACTL	= $D01D
   291 = D01E			HITCLR	= $D01E
   292 = D200			AUDF1	= $D200
   293 = D201			AUDC1	= $D201
   294 = D202			AUDF2	= $D202
   295 = D203			AUDC2	= $D203
   296 = D204			AUDF3	= $D204
   297 = D205			AUDC3	= $D205
   298 = D206			AUDF4	= $D206
   299 = D207			AUDC4	= $D207
   300 = D208			AUDCTL	= $D208
   301 = D20F			SKSTAT	= $D20F
   302 = D301			PORTB	= $D301
   303 = D400			DMACTL	= $D400
   304 = D401			CHACTL	= $D401
   305 = D402			DLISTL	= $D402
   306 = D404			HSCROL	= $D404
   307 = D405			VSCROL	= $D405
   308 = D407			PMBASE	= $D407
   309 = D409			CHBASE	= $D409
   310 = D40A			WSYNC	= $D40A
   311 = D40B			VCOUNT	= $D40B
   312 = D40C			PENH	= $D40C
   313 = D40D			PENV	= $D40D
   314 = D40E			NMIEN	= $D40E
   315
   316 				.endl							; UNIT ATARI
   317
   318 				; ------------------------------------------------------------
   319
   320 2131			.local	CRT						; UNIT
   321
   322 2131			.local	READKEY						; FUNCTION | ASSEMBLER
   323
   324 				; ---------------------  ASM Block 049  ---------------------
   325
   326 2131 8A 48			txa:pha
   327
   328 2133 20 48 20			@GetKey
   329
   330 2136 8D BF 22			sta Result
   331
   332 2139 68 AA			pla:tax
   333
   334 213B			@exit
   335
   336 				; ------------------------------------------------------------
   337
   338 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   339 				; as Pointer
   340
   341 213B E8				inx
   342 213C AD BF 22 95 98		mva RESULT :STACKORIGIN,x
   343
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					eif
   351
   352 				; ------------------------------------------------------------
   353
   354 = 22BF			RESULT	= DATAORIGIN+$000C
   355
   356 = 22BF			@VarData	= RESULT
   357 = 0001			@VarDataSize	= 1
   358
   359 2141 60				rts						; ret
   360 				.endl
   361
   362 				; ------------------------------------------------------------
   363
   364 = 22BE			TEXTATTR	= DATAORIGIN+$000B
   365 = D01F			CONSOL	= $D01F
   366 = 0000			CN_START_SELECT_OPTION	= $00
   367 = 0001			CN_SELECT_OPTION	= $01
   368 = 0002			CN_START_OPTION	= $02
   369 = 0003			CN_OPTION	= $03
   370 = 0004			CN_START_SELECT	= $04
   371 = 0005			CN_SELECT	= $05
   372 = 0006			CN_START	= $06
   373 = 0007			CN_NONE	= $07
   374 = 0000			BW40	= $00
   375 = 0001			CO40	= $01
   376 = 0002			BW80	= $02
   377 = 0003			CO80	= $03
   378 = 0007			MONO	= $07
   379 = 0001			C40	= $01
   380 = 0003			C80	= $03
   381 = 0000			BLACK	= $00
   382 = 0001			BLUE	= $01
   383 = 0002			GREEN	= $02
   384 = 0003			CYAN	= $03
   385 = 0004			RED	= $04
   386 = 0005			MAGENTA	= $05
   387 = 0006			BROWN	= $06
   388 = 0007			LIGHTGRAY	= $07
   389 = 0008			DARKGRAY	= $08
   390 = 0009			LIGHTBLUE	= $09
   391 = 000A			LIGHTGREEN	= $0A
   392 = 000B			LIGHTCYAN	= $0B
   393 = 000C			LIGHTRED	= $0C
   394 = 000D			LIGHTMAGENTA	= $0D
   395 = 000E			YELLOW	= $0E
   396 = 000F			WHITE	= $0F
   397 = 0080			BLINK	= $80
   398
   399 				.endl							; UNIT CRT
   400
   401 				; ------------------------------------------------------------
   402
   403 2142			.local	DOS						; UNIT
   404
   405 				; ------------------------------------------------------------
   406
   407 = D014			PALNTSC	= $D014
   408
   409 				.endl							; UNIT DOS
   410
   411 				; ------------------------------------------------------------
   412
   413 2142			.local	STRUTILS					; UNIT
   414
   415 				; ------------------------------------------------------------
   416
   417 				.endl							; UNIT STRUTILS
   418
   419 				; ------------------------------------------------------------
   420
   421 2142			.local	SYSUTILS					; UNIT
   422
   423 				; ------------------------------------------------------------
   424
   425 = 0001			FAREADONLY	= $01
   426 = 0002			FAHIDDEN	= $02
   427 = 0004			FASYSFILE	= $04
   428 = 0008			FAVOLUMEID	= $08
   429 = 0010			FADIRECTORY	= $10
   430 = 0020			FAARCHIVE	= $20
   431 = 003F			FAANYFILE	= $3F
   432
   433 				.endl							; UNIT SYSUTILS
   434
   435 				; ------------------------------------------------------------
   436
   437 2142			.local	CIO						; UNIT
   438
   439 2142			.local	OPN						; PROCEDURE | ASSEMBLER
   440
   441 				; ------------------------------------------------------------
   442
   443 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   444 				; as Pointer
   445 2142 B5 98 8D C3 22		mva :STACKORIGIN,x DEVICE
   446 2147 B5 A8 8D C4 22		mva :STACKORIGIN+STACKWIDTH,x DEVICE+1
   447 214C CA				dex
   448
   449 				; ------------------------------------------------------------
   450
   451 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   452 				; as Pointer
   453 214D B5 98 8D C2 22		mva :STACKORIGIN,x AX2
   454 2152 CA				dex
   455
   456 				; ------------------------------------------------------------
   457
   458 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   459 				; as Pointer
   460 2153 B5 98 8D C1 22		mva :STACKORIGIN,x AX1
   461 2158 CA				dex
   462
   463 				; ------------------------------------------------------------
   464
   465 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   466 				; as Pointer
   467 2159 B5 98 8D C0 22		mva :STACKORIGIN,x CHN
   468 215E CA				dex
   469
   470 				; ---------------------  ASM Block 078  ---------------------
   471
   472 215F 8A 48			txa:pha
   473
   474 2161 AD C0 22			lda chn
   475 2164 0A 0A 0A 0A			:4 asl @
   476 2168 AA				tax
   477
   478 2169 A9 03			lda #$03		;komenda: OPEN
   479 216B 9D 42 03			sta iccmd,x
   480
   481 216E EE C3 22 D0 03 EE + 	inw device		;omin bajt z dlugoscia STRING-a
   482
   483 2176 AD C3 22			lda device		;adres nazwy pliku
   484 2179 9D 44 03			sta icbufa,x
   485 217C AD C4 22			lda device+1
   486 217F 9D 45 03			sta icbufa+1,x
   487
   488 2182 AD C1 22			lda ax1			;kod dostepu: $04 odczyt, $08 zapis, $09 dopisywanie, $0c odczyt/zapis, $0d odczyt/dopisywanie
   489 2185 9D 4A 03			sta icax1,x
   490
   491 2188 AD C2 22			lda ax2			;dodatkowy parametr, $00 jest zawsze dobre
   492 218B 9D 4B 03			sta icax2,x
   493
   494 218E				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 218E 20 56 E4				jsr CIOV
Source: diskget.a65
   495
   496 2191 8C BA 22			sty MAIN.SYSTEM.IOResult
   497
   498 2194 68 AA			pla:tax
   499
   500
   501 				; ------------------------------------------------------------
   502
   503 = 22C0			CHN	= DATAORIGIN+$000D
   504 = 22C1			AX1	= DATAORIGIN+$000E
   505 = 22C2			AX2	= DATAORIGIN+$000F
   506 = 22C3			DEVICE	= DATAORIGIN+$0010
   507
   508 = 22C0			@VarData	= CHN
   509 = 0005			@VarDataSize	= 5
   510
   511 2196			@exit
   512 					.ifdef @new
   513 					lda <@VarData
   514 					sta :ztmp
   515 					lda >@VarData
   516 					ldy #@VarDataSize-1
   517 					jmp @FreeMem
   518 					eif
   519 2196 60				rts						; ret
   520 				.endl
   521
   522 2197			.local	CLS						; PROCEDURE | ASSEMBLER
   523
   524 				; ------------------------------------------------------------
   525
   526 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   527 				; as Pointer
   528 2197 B5 98 8D C5 22		mva :STACKORIGIN,x CHN
   529 219C CA				dex
   530
   531 				; ---------------------  ASM Block 079  ---------------------
   532
   533 219D 8A 48			txa:pha
   534
   535 219F AD C5 22			lda chn
   536 21A2 0A 0A 0A 0A			:4 asl @
   537 21A6 AA				tax
   538
   539 21A7 A9 0C			lda #$0c		;komenda: CLOSE
   540 21A9 9D 42 03			sta iccmd,x
   541
   542 21AC				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 21AC 20 56 E4				jsr CIOV
Source: diskget.a65
   543
   544 21AF 8C BA 22			sty MAIN.SYSTEM.IOResult
   545
   546 21B2 68 AA			pla:tax
   547
   548
   549 				; ------------------------------------------------------------
   550
   551 = 22C5			CHN	= DATAORIGIN+$0012
   552
   553 = 22C5			@VarData	= CHN
   554 = 0001			@VarDataSize	= 1
   555
   556 21B4			@exit
   557 					.ifdef @new
   558 					lda <@VarData
   559 					sta :ztmp
   560 					lda >@VarData
   561 					ldy #@VarDataSize-1
   562 					jmp @FreeMem
   563 					eif
   564 21B4 60				rts						; ret
   565 				.endl
   566
   567 21B5			.local	GET						; FUNCTION | ASSEMBLER
   568
   569 				; ------------------------------------------------------------
   570
   571 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   572 				; as Pointer
   573 21B5 B5 98 8D C6 22		mva :STACKORIGIN,x CHN
   574 21BA CA				dex
   575
   576 				; ---------------------  ASM Block 080  ---------------------
   577
   578 21BB 8A 48			txa:pha
   579
   580 21BD AD C6 22			lda chn
   581 21C0 0A 0A 0A 0A			:4 asl @
   582 21C4 AA				tax
   583
   584 21C5 A9 07			lda #7		;get char command
   585 21C7 9D 42 03			sta iccmd,x
   586
   587 21CA A9 00			lda #$00	;zero out the unused
   588 21CC 9D 48 03			sta icbufl,x	;store in accumulator
   589 21CF 9D 49 03			sta icbufh,x	;...after CIOV jump
   590
   591 21D2				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 21D2 20 56 E4				jsr CIOV
Source: diskget.a65
   592
   593 21D5 8C BA 22			sty MAIN.SYSTEM.IOResult
   594
   595 21D8 8D C7 22			sta Result
   596
   597 21DB 68 AA			pla:tax
   598
   599 21DD			@exit
   600
   601 				; ------------------------------------------------------------
   602
   603 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   604 				; as Pointer
   605
   606 21DD E8				inx
   607 21DE AD C7 22 95 98		mva RESULT :STACKORIGIN,x
   608
   609 					.ifdef @new
   610 					lda <@VarData
   611 					sta :ztmp
   612 					lda >@VarData
   613 					ldy #@VarDataSize-1
   614 					jmp @FreeMem
   615 					eif
   616
   617 				; ------------------------------------------------------------
   618
   619 = 22C6			CHN	= DATAORIGIN+$0013
   620 = 22C7			RESULT	= DATAORIGIN+$0014
   621
   622 = 22C6			@VarData	= CHN
   623 = 0002			@VarDataSize	= 2
   624
   625 21E3 60				rts						; ret
   626 				.endl
   627
   628 				; ------------------------------------------------------------
   629
   630 				.endl							; UNIT CIO
   631
   632 21E4			.local	MAINPROC					; PROCEDURE
   633
   634 				; optimize FAIL (100, examples\diskget.pas), line = 21
   635 					@print #$7D
   635 				 LDY# $7D\ JSR @PRINT
   635 21E4 A0 7D		 LDY# $7D
   635 21E6 20 B8 20		 JSR @PRINT
   636
   637 				; optimize FAIL (100, examples\diskget.pas), line = 22
   638 					@printSTRING #CODEORIGIN+$000D
   638 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   638 21E9 A0 20		 LDY> CODEORIGIN+$000D
   638 21EB A9 0D		 LDA< CODEORIGIN+$000D
   638 21ED 20 C1 20		 JSR @PRINTSTRING
   639 					@print #$9B
   639 				 LDY# $9B\ JSR @PRINT
   639 21F0 A0 9B		 LDY# $9B
   639 21F2 20 B8 20		 JSR @PRINT
   640 					@printSTRING #CODEORIGIN+$0023
   640 				 LDY> CODEORIGIN+$0023\ LDA< CODEORIGIN+$0023\ JSR @PRINTSTRING
   640 21F5 A0 20		 LDY> CODEORIGIN+$0023
   640 21F7 A9 23		 LDA< CODEORIGIN+$0023
   640 21F9 20 C1 20		 JSR @PRINTSTRING
   641 					@print #$9B
   641 				 LDY# $9B\ JSR @PRINT
   641 21FC A0 9B		 LDY# $9B
   641 21FE 20 B8 20		 JSR @PRINT
   642 					@printSTRING #CODEORIGIN+$0022
   642 				 LDY> CODEORIGIN+$0022\ LDA< CODEORIGIN+$0022\ JSR @PRINTSTRING
   642 2201 A0 20		 LDY> CODEORIGIN+$0022
   642 2203 A9 22		 LDA< CODEORIGIN+$0022
   642 2205 20 C1 20		 JSR @PRINTSTRING
   643
   644 				; optimize FAIL ('CIO.CLS', examples\diskget.pas), line = 23
   645 2208 E8				inx
   646 2209 A9 01 95 98			mva #$01 :STACKORIGIN,x
   647 220D 20 97 21			jsr CIO.CLS
   648
   649 				; optimize FAIL ('CIO.OPN', examples\diskget.pas), line = 24
   650 2210 E8				inx
   651 2211 A9 01 95 98			mva #$01 :STACKORIGIN,x
   652 2215 E8				inx
   653 2216 A9 04 95 98			mva #$04 :STACKORIGIN,x
   654 221A E8				inx
   655 221B A9 00 95 98			mva #$00 :STACKORIGIN,x
   656 221F E8				inx
   657 2220 A9 25 95 98			mva #$25 :STACKORIGIN,x
   658 2224 A9 20 95 A8			mva #$20 :STACKORIGIN+STACKWIDTH,x
   659 2228 20 42 21			jsr CIO.OPN
   660 				; --- For
   661
   662 				; optimize OK (examples\diskget.pas), line = 25
   663
   664 222B A9 01 8D C9 23		mva #$01 I
   665
   666 				; optimize OK (examples\diskget.pas), line = 25
   667
   668 2230			l_0115
   669 				; --- ForToDoCondition
   670
   671 				; optimize OK (examples\diskget.pas), line = 25
   672
   673 2230 AD C9 23			lda I
   674 2233 C9 10			cmp #$10
   675 2235 B0 1D			jcs l_0123
   676
   677 				; optimize FAIL ('CIO.GET', examples\diskget.pas), line = 26
   678 2237 E8				inx
   679 2238 A9 01 95 98			mva #$01 :STACKORIGIN,x
   680 223C 20 B5 21			jsr CIO.GET
   681 223F B5 98 8D C8 23		mva :STACKORIGIN,x N
   682 2244 CA				dex
   683
   684 				; optimize FAIL (100, examples\diskget.pas), line = 27
   685 2245 E8				inx
   686 2246 AD C8 23 95 98		mva N :STACKORIGIN,x
   687 224B 20 B3 20			@printCHAR
   688 224E CA				dex
   689
   690 				; --- ForToDoEpilog
   691 224F EE C9 23			inc I						; inc ptr byte [CounterAddress]
   692 2252 D0 DC			jne l_0115
   693 2254			l_0123
   694
   695 				; optimize FAIL ('CIO.CLS', examples\diskget.pas), line = 29
   696 2254 E8				inx
   697 2255 A9 01 95 98			mva #$01 :STACKORIGIN,x
   698 2259 20 97 21			jsr CIO.CLS
   699
   700 				; optimize FAIL (100, examples\diskget.pas), line = 30
   701 					@printSTRING #CODEORIGIN+$0022
   701 				 LDY> CODEORIGIN+$0022\ LDA< CODEORIGIN+$0022\ JSR @PRINTSTRING
   701 225C A0 20		 LDY> CODEORIGIN+$0022
   701 225E A9 22		 LDA< CODEORIGIN+$0022
   701 2260 20 C1 20		 JSR @PRINTSTRING
   702 					@print #$9B
   702 				 LDY# $9B\ JSR @PRINT
   702 2263 A0 9B		 LDY# $9B
   702 2265 20 B8 20		 JSR @PRINT
   703 					@printSTRING #CODEORIGIN+$0035
   703 				 LDY> CODEORIGIN+$0035\ LDA< CODEORIGIN+$0035\ JSR @PRINTSTRING
   703 2268 A0 20		 LDY> CODEORIGIN+$0035
   703 226A A9 35		 LDA< CODEORIGIN+$0035
   703 226C 20 C1 20		 JSR @PRINTSTRING
   704 					@print #$9B
   704 				 LDY# $9B\ JSR @PRINT
   704 226F A0 9B		 LDY# $9B
   704 2271 20 B8 20		 JSR @PRINT
   705 					@printSTRING #CODEORIGIN+$0022
   705 				 LDY> CODEORIGIN+$0022\ LDA< CODEORIGIN+$0022\ JSR @PRINTSTRING
   705 2274 A0 20		 LDY> CODEORIGIN+$0022
   705 2276 A9 22		 LDA< CODEORIGIN+$0022
   705 2278 20 C1 20		 JSR @PRINTSTRING
   706 					@print #$9B
   706 				 LDY# $9B\ JSR @PRINT
   706 227B A0 9B		 LDY# $9B
   706 227D 20 B8 20		 JSR @PRINT
   707 					@printSTRING #CODEORIGIN+$0022
   707 				 LDY> CODEORIGIN+$0022\ LDA< CODEORIGIN+$0022\ JSR @PRINTSTRING
   707 2280 A0 20		 LDY> CODEORIGIN+$0022
   707 2282 A9 22		 LDA< CODEORIGIN+$0022
   707 2284 20 C1 20		 JSR @PRINTSTRING
   708
   709 				; optimize FAIL ('CIO.GET', examples\diskget.pas), line = 39
   710 2287 E8				inx
   711 2288 A9 07 95 98			mva #$07 :STACKORIGIN,x
   712 228C 20 B5 21			jsr CIO.GET
   713 228F B5 98 8D CA 23		mva :STACKORIGIN,x KEY
   714 2294 CA				dex
   715
   716 2295 20 31 21			jsr CRT.READKEY					; call Entry
   717
   718 2298 CA				dex
   719
   720 				; ------------------------------------------------------------
   721
   722 = 000F			@FORTMP_0112	= $0F
   723 2299			@exit
   724 					.ifdef @new
   725 					lda <@VarData
   726 					sta :ztmp
   727 					lda >@VarData
   728 					ldy #@VarDataSize-1
   729 					jmp @FreeMem
   730 					eif
   731 2299 60				rts						; ret
   732 				.endl
   733 229A			l_004F
   734
   735 				; optimize FAIL ('MAINPROC', examples\diskget.pas), line = 44
   736 229A 20 E4 21			jsr MAINPROC
   737
   738 				; ------------------------------------------------------------
   739
   740 = 22C8			adr.STRBUFFER	= DATAORIGIN+$0015
   741 229D			.var STRBUFFER	= adr.STRBUFFER .word
   742 = 23C8			N	= DATAORIGIN+$0115
   743 = 23C9			I	= DATAORIGIN+$0116
   744 = 23CA			KEY	= DATAORIGIN+$0117
   745 229D			@exit
   746
   747 229D A2 00		@halt	ldx #0
   748 229F 9A				txs
   749 					.ifdef MAIN.@DEFINES.ROMOFF
   750 					inc portb
   751 					.endif
   752
   753 22A0 60				rts
   754
   755 				; ------------------------------------------------------------
   756
   757 22A1 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   758
   759 				; ------------------------------------------------------------
   760
   761 22B1			.local	@DEFINES
   762 22B1			ATARI
   763 				.endl
   764
   765 = 22B1 C8 22		STRBUFFER
   765 				.endl							; MAIN
   766
   767 				; ------------------------------------------------------------
   768 				; ------------------------------------------------------------
   769
   770 				.macro	UNITINITIALIZATION
   771 				
   772 					.ifdef MAIN.SYSTEM.@UnitInit
   773 					jsr MAIN.SYSTEM.@UnitInit
   774 					eif
   775 				
   776 					.ifdef MAIN.ATARI.@UnitInit
   777 					jsr MAIN.ATARI.@UnitInit
   778 					eif
   779 				
   780 					.ifdef MAIN.CRT.@UnitInit
   781 					jsr MAIN.CRT.@UnitInit
   782 					eif
   783 				
   784 					.ifdef MAIN.DOS.@UnitInit
   785 					jsr MAIN.DOS.@UnitInit
   786 					eif
   787 				
   788 					.ifdef MAIN.STRUTILS.@UnitInit
   789 					jsr MAIN.STRUTILS.@UnitInit
   790 					eif
   791 				
   792 					.ifdef MAIN.SYSUTILS.@UnitInit
   793 					jsr MAIN.SYSUTILS.@UnitInit
   794 					eif
   795 				
   796 					.ifdef MAIN.CIO.@UnitInit
   797 					jsr MAIN.CIO.@UnitInit
   798 					eif
   799 				.endm
   800
   801 				; ------------------------------------------------------------
   802
   803 					ift .SIZEOF(MAIN.SYSTEM) > 0
   804 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   804 				SYSTEM: $212D..$2130
   805 					eif
   806
   807 					ift .SIZEOF(MAIN.ATARI) > 0
   808 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   809 					eif
   810
   811 					ift .SIZEOF(MAIN.CRT) > 0
   812 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   812 				CRT: $2131..$2141
   813 					eif
   814
   815 					ift .SIZEOF(MAIN.DOS) > 0
   816 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   817 					eif
   818
   819 					ift .SIZEOF(MAIN.STRUTILS) > 0
   820 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   821 					eif
   822
   823 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   824 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   825 					eif
   826
   827 					ift .SIZEOF(MAIN.CIO) > 0
   828 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
   828 				CIO: $2142..$21E3
   829 					eif
   830
   831 					.print 'CODE: ',CODEORIGIN,'..',*-1
   831 				CODE: $2000..$22B2
   832
   833 				; ------------------------------------------------------------
   834
   835 22B3			DATAORIGIN
   836 22B3 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   837
   838 = 0006			VARINITSIZE	= *-DATAORIGIN
   839 = 0118			VARDATASIZE	= 280
   840
   841 = 23CB			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   842
   843 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   843 				DATA: $22B3..$23CB
   844
   845 02E0-02E1> F0 20			run START
   846
   847 				; ------------------------------------------------------------
   848
   849 				.macro	STATICDATA
   850 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $14 $47 $65  $74 $44 $20 $61 $6E $64 $20 $45
   851 				.by  $4F $46 $20 $65 $78 $61 $6D $70  $6C $65 $00 $00 $00 $0E $48 $31  $3A $54 $45 $53 $54 $4E $55 $4D
   852 				.by  $2E $54 $58 $54 $00 $11 $41 $6C  $6C $20 $6E $75 $6D $62 $65 $72  $73 $20 $72 $65 $61 $64 $21 $00
   853 				.endm
   854
   855 					end
