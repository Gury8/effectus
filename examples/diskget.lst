mads 2.1.0 build 4 (27 Oct 19)
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $207A..$244A
    97
    98 				; ------------------------------------------------------------
    99
   100 244A			START
   101 244A BA				tsx
   102 244B 8E DF 27			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 022D			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 27FC			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 					ldx #256-VLEN
   115 					lda #0
   116 					sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   118 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   118 244E A9 FC 85 86 A9 27 +  MWA #VADR @FILL.PTR1
   118 2456 A9 2D 85 8A A9 02 +  MWA #VLEN @FILL.PTR3
   118 245E A9 00 85 82		 MVA #0 @FILL.PTR2
   118 2462 20 DC 23		 JSR @FILL
   119 					eif
   120
   121 2465 A2 0F			ldx #$0f
   122 2467 BD 40 03 9D E2 27 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 2470 E8				inx		; X = 0 !!!
   125 2471 86 8E			stx bp		; lo BP = 0
   126
   127 2473				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: diskget.a65]
Source: diskget.a65
   128
   129 2473			.local	MAIN						; PROCEDURE
   130
   131 2473 4C CD 27			jmp l_0081
   132
   133 				; ------------------------------------------------------------
   134
   135 2476			.local	SYSTEM						; UNIT
   136
   137 2476			.local	FILEPOS						; FUNCTION | ASSEMBLER
   138
   139 				; ------------------------------------------------------------
   140
   141 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   142 				; as Pointer
   143 2476 B5 98 8D 01 28		mva :STACKORIGIN,x F
   144 247B B5 A8 8D 02 28		mva :STACKORIGIN+STACKWIDTH,x F+1
   145 2480 CA				dex						; sub bx, 1
   146
   147 				; ---------------------  ASM Block 015  ---------------------
   148
   149 2481 8A 48			txa:pha
   150
   151 2483 AD 01 28 85 90 AD + 	mwa f :bp2
   152
   153 248D A0 04			ldy #s@file.chanel
   154 248F B1 90			lda (:bp2),y
   155 2491 AA				tax
   156 2492 A9 26			lda #38
   157 2494 9D 42 03			sta iccmd,x
   158 2497 20 56 E4			jsr ciov
   159
   160 249A 8C FD 27			sty IOResult
   161
   162 249D BD 4C 03 85 82		mva icax3,x eax
   163 24A2 BD 4D 03 85 83		mva icax4,x eax+1
   164 24A7 BD 4E 03 85 84		mva icax5,x eax+2
   165
   166 24AC A9 00 85 85			mva #$00 eax+3
   167 24B0 85 8C			sta ecx+2
   168 24B2 85 8D			sta ecx+3
   169
   170 24B4 A0 02			ldy #s@file.record
   171 24B6 B1 90			lda (:bp2),y
   172 24B8 85 8A			sta ecx
   173 24BA C8				iny
   174 24BB B1 90			lda (:bp2),y
   175 24BD 85 8B			sta ecx+1
   176
   177 24BF 20 AD 22			jsr idivEAX_ECX.main
   178
   179 24C2 A5 82 8D 03 28		mva eax Result
   180 24C7 A5 83 8D 04 28		mva eax+1 Result+1
   181 24CC A5 84 8D 05 28		mva eax+2 Result+2
   182 24D1 A5 85 8D 06 28		mva eax+3 Result+3
   183
   184 24D6 68 AA			pla:tax
   185
   186 24D8			@exit
   187
   188 				; ------------------------------------------------------------
   189
   190 				; Push CARDINAL / INTEGER / REAL / SINGLE
   191 				; as Pointer
   192
   193 24D8 E8				inx						; add bx, 1
   194 24D9 AD 03 28 95 98		mva RESULT :STACKORIGIN,x
   195 24DE AD 04 28 95 A8		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   196 24E3 AD 05 28 95 B8		mva RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
   197 24E8 AD 06 28 95 C8		mva RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
   198
   199 					.ifdef @new
   200 					@FreeMem #@VarData #@VarDataSize
   201 					eif
   202
   203 				; ------------------------------------------------------------
   204
   205 = 2801			F	= DATAORIGIN+$000B
   206 = 2803			RESULT	= DATAORIGIN+$000D
   207
   208 = 2801			@VarData	= F
   209 = 0006			@VarDataSize	= 6
   210
   211 24ED 60				rts						; ret
   212 				.endl
   213
   214 24EE			.local	SEEK						; PROCEDURE | ASSEMBLER
   215
   216 				; ------------------------------------------------------------
   217
   218 				; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
   219 				; as Pointer
   220 24EE B5 98 8D 09 28		mva :STACKORIGIN,x A
   221 24F3 B5 A8 8D 0A 28		mva :STACKORIGIN+STACKWIDTH,x A+1
   222 24F8 B5 B8 8D 0B 28		mva :STACKORIGIN+STACKWIDTH*2,x A+2
   223 24FD B5 C8 8D 0C 28		mva :STACKORIGIN+STACKWIDTH*3,x A+3
   224 2502 CA				dex						; sub bx, 1
   225
   226 				; ------------------------------------------------------------
   227
   228 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   229 				; as Pointer
   230 2503 B5 98 8D 07 28		mva :STACKORIGIN,x F
   231 2508 B5 A8 8D 08 28		mva :STACKORIGIN+STACKWIDTH,x F+1
   232 250D CA				dex						; sub bx, 1
   233
   234 				; ---------------------  ASM Block 016  ---------------------
   235
   236 250E 8A 48			txa:pha
   237
   238 2510 AD 07 28 85 90 AD + 	mwa f :bp2
   239
   240 251A A0 04			ldy #s@file.chanel
   241 251C B1 90			lda (:bp2),y
   242 251E AA				tax
   243 251F A9 25			lda #37
   244 2521 9D 42 03			sta iccmd,x
   245
   246 2524 A0 02			ldy #s@file.record
   247 2526 B1 90			lda (:bp2),y
   248 2528 85 82			sta eax
   249 252A C8				iny
   250 252B B1 90			lda (:bp2),y
   251 252D 85 83			sta eax+1
   252 252F A9 00			lda #$00
   253 2531 85 84			sta eax+2
   254 2533 85 85			sta eax+3
   255
   256 2535 AD 09 28 85 8A		mva a ecx
   257 253A AD 0A 28 85 8B		mva a+1 ecx+1
   258 253F AD 0B 28 85 8C		mva a+2 ecx+2
   259 2544 AD 0C 28 85 8D		mva a+3 ecx+3
   260
   261 2549 20 67 22			jsr imulECX
   262
   263 254C A5 82 9D 4C 03		mva eax icax3,x
   264 2551 A5 83 9D 4D 03		mva eax+1 icax4,x
   265 2556 A5 84 9D 4E 03		mva eax+2 icax5,x
   266
   267 255B 20 56 E4			jsr ciov
   268
   269 255E 8C FD 27			sty IOResult
   270
   271 2561 68 AA			pla:tax
   272
   273
   274 				; ------------------------------------------------------------
   275
   276 = 2807			F	= DATAORIGIN+$0011
   277 = 2809			A	= DATAORIGIN+$0013
   278
   279 = 2807			@VarData	= F
   280 = 0006			@VarDataSize	= 6
   281
   282 2563			@exit
   283 					.ifdef @new
   284 					@FreeMem #@VarData #@VarDataSize
   285 					eif
   286 2563 60				rts						; ret
   287 				.endl
   288
   289 2564			.local	EOF						; FUNCTION
   290
   291 				; ------------------------------------------------------------
   292
   293 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   294 				; as Pointer
   295 2564 B5 98 8D 0D 28		mva :STACKORIGIN,x F
   296 2569 B5 A8 8D 0E 28		mva :STACKORIGIN+STACKWIDTH,x F+1
   297 256E CA				dex						; sub bx, 1
   298
   299 				; optimize FAIL ('FILEPOS', SYSTEM), line = 1295
   300 256F E8				inx
   301 2570 AD 0D 28 95 98		mva F :STACKORIGIN,x
   302 2575 AD 0E 28 95 A8		mva F+1 :STACKORIGIN+STACKWIDTH,x
   303 257A 20 76 24			jsr FILEPOS
   304 257D B5 98 8D 10 28		mva :STACKORIGIN,x I
   305 2582 B5 A8 8D 11 28		mva :STACKORIGIN+STACKWIDTH,x I+1
   306 2587 B5 B8 8D 12 28		mva :STACKORIGIN+STACKWIDTH*2,x I+2
   307 258C B5 C8 8D 13 28		mva :STACKORIGIN+STACKWIDTH*3,x I+3
   308 2591 CA				dex
   309 				; BlockRead
   310
   311 				; optimize OK (SYSTEM), line = 1297
   312
   313 2592 AD 0D 28 85 90 AD + 	mwa F :bp2
   314 259C A0 06			ldy #s@file.buffer
   315 259E AD 01 26			lda BF
   316 25A1 91 90			sta (:bp2),y
   317 25A3 C8				iny
   318 25A4 AD 02 26			lda BF+1
   319 25A7 91 90			sta (:bp2),y
   320
   321 				; optimize OK (SYSTEM), line = 1297
   322
   323 25A9 A0 08			ldy #s@file.nrecord
   324 25AB A9 01			lda #$01
   325 25AD 91 90			sta (:bp2),y
   326 25AF C8				iny
   327 25B0 A9 00			lda #$00
   328 25B2 91 90			sta (:bp2),y
   329
   330 25B4 8A 48			txa:pha
   331 25B6 38				sec
   332 					@readfile F, #7
   332 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
   332 25B7 AC 0E 28		 LDY F+1
   332 25BA AD 0D 28		 LDA F
   332 25BD A2 07		 LDX# 7
   332 25BF 20 4E 21		 JSR @READFILE
   333 25C2 68 AA			pla:tax
   334
   335 				; optimize FAIL ('SEEK', SYSTEM), line = 1299
   336 25C4 E8				inx
   337 25C5 AD 0D 28 95 98		mva F :STACKORIGIN,x
   338 25CA AD 0E 28 95 A8		mva F+1 :STACKORIGIN+STACKWIDTH,x
   339 25CF E8				inx
   340 25D0 AD 10 28 95 98		mva I :STACKORIGIN,x
   341 25D5 AD 11 28 95 A8		mva I+1 :STACKORIGIN+STACKWIDTH,x
   342 25DA AD 12 28 95 B8		mva I+2 :STACKORIGIN+STACKWIDTH*2,x
   343 25DF AD 13 28 95 C8		mva I+3 :STACKORIGIN+STACKWIDTH*3,x
   344 25E4 20 EE 24			jsr SEEK
   345
   346 				; ---------------------  ASM Block 017  ---------------------
   347
   348 25E7 AD 0D 28 85 90 AD + 	mwa f :bp2
   349
   350 25F1 A0 05			ldy #s@file.status
   351 25F3 B1 90			lda (:bp2),y
   352 25F5 29 01			and #e@file.eof
   353 25F7 8D 0F 28			sta Result
   354
   355 25FA			@exit
   356
   357 				; ------------------------------------------------------------
   358
   359 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   360 				; as Pointer
   361
   362 25FA E8				inx						; add bx, 1
   363 25FB AD 0F 28 95 98		mva RESULT :STACKORIGIN,x
   364
   365 					.ifdef @new
   366 					@FreeMem #@VarData #@VarDataSize
   367 					eif
   368
   369 				; ------------------------------------------------------------
   370
   371 = 280D			F	= DATAORIGIN+$0017
   372 = 280F			RESULT	= DATAORIGIN+$0019
   373 = 2810			I	= DATAORIGIN+$001A
   374 = 2814			adr.BF	= DATAORIGIN+$001E
   375 2600			.var BF	= adr.BF .word
   376
   377 = 280D			@VarData	= F
   378 = 0107			@VarDataSize	= 263
   379
   380 2600 60				rts						; ret
   381 = 2601 14 28		BF
   381 				.endl
   382
   383 				; ------------------------------------------------------------
   384
   385 = 0648			M_PI_2	= $0648
   386 = 0192			D_PI_2	= $0192
   387 = 0004			D_PI_180	= $0004
   388 = 0000			MGTIA	= $0000
   389 = 0080			MVBXE	= $0080
   390 = 0000			VBXE_XDLADR	= $0000
   391 = 0100			VBXE_BCBADR	= $0100
   392 = 1000			VBXE_MAPADR	= $1000
   393 = 5000			VBXE_OVRADR	= $5000
   394 = B000			VBXE_WINDOW	= $B000
   395 = 0000			IDLI	= $0000
   396 = 0001			IVBL	= $0001
   397 = 00FE			CH_DELCHR	= $00FE
   398 = 009B			CH_ENTER	= $009B
   399 = 001B			CH_ESC	= $001B
   400 = 001C			CH_CURS_UP	= $001C
   401 = 001D			CH_CURS_DOWN	= $001D
   402 = 001E			CH_CURS_LEFT	= $001E
   403 = 001F			CH_CURS_RIGHT	= $001F
   404 = 007F			CH_TAB	= $007F
   405 = 009B			CH_EOL	= $009B
   406 = 007D			CH_CLR	= $007D
   407 = 00FD			CH_BELL	= $00FD
   408 = 007E			CH_DEL	= $007E
   409 = 009C			CH_DELLINE	= $009C
   410 = 009D			CH_INSLINE	= $009D
   411 = 0000			COLOR_BLACK	= $0000
   412 = 000E			COLOR_WHITE	= $000E
   413 = 0032			COLOR_RED	= $0032
   414 = 0096			COLOR_CYAN	= $0096
   415 = 0068			COLOR_VIOLET	= $0068
   416 = 00C4			COLOR_GREEN	= $00C4
   417 = 0074			COLOR_BLUE	= $0074
   418 = 00EE			COLOR_YELLOW	= $00EE
   419 = 0028			COLOR_ORANGE	= $0028
   420 = 00E4			COLOR_BROWN	= $00E4
   421 = 003C			COLOR_LIGHTRED	= $003C
   422 = 0004			COLOR_GRAY1	= $0004
   423 = 0006			COLOR_GRAY2	= $0006
   424 = 000A			COLOR_GRAY3	= $000A
   425 = 00CC			COLOR_LIGHTGREEN	= $00CC
   426 = 007C			COLOR_LIGHTBLUE	= $007C
   427 = 0004			FMOPENREAD	= $0004
   428 = 0008			FMOPENWRITE	= $0008
   429 = 0009			FMOPENAPPEND	= $0009
   430 = 000C			FMOPENREADWRITE	= $000C
   431 = 27F6			SCREENWIDTH	= DATAORIGIN+$0000
   432 = 27F8			SCREENHEIGHT	= DATAORIGIN+$0002
   433 = 27FA			DATESEPARATOR	= DATAORIGIN+$0004
   434 = D014			TVSYSTEM	= $D014
   435 = 02C0			adr.PALETTE	= $02C0
   436 2603			.var PALETTE	= adr.PALETTE .word
   437 = D012			adr.HPALETTE	= $D012
   438 2603			.var HPALETTE	= adr.HPALETTE .word
   439 = 27FB			FILEMODE	= DATAORIGIN+$0005
   440 = 27FC			SCREENMODE	= DATAORIGIN+$0006
   441 = 27FD			IORESULT	= DATAORIGIN+$0007
   442 = 27FE			EOLN	= DATAORIGIN+$0008
   443 = 27FF			RNDSEED	= DATAORIGIN+$0009
   444
   445 = 2603 C0 02		PALETTE
   445 = 2605 12 D0		HPALETTE
   445 				.endl							; UNIT SYSTEM
   446
   447 				; ------------------------------------------------------------
   448
   449 2607			.local	DOS						; UNIT
   450
   451 				; ------------------------------------------------------------
   452
   453 = D014			PALNTSC	= $D014
   454
   455 				.endl							; UNIT DOS
   456
   457 				; ------------------------------------------------------------
   458
   459 2607			.local	STRUTILS					; UNIT
   460
   461 				; ------------------------------------------------------------
   462
   463 				.endl							; UNIT STRUTILS
   464
   465 				; ------------------------------------------------------------
   466
   467 2607			.local	SYSUTILS					; UNIT
   468
   469 				; ------------------------------------------------------------
   470
   471 = 0001			FAREADONLY	= $0001
   472 = 0002			FAHIDDEN	= $0002
   473 = 0004			FASYSFILE	= $0004
   474 = 0008			FAVOLUMEID	= $0008
   475 = 0010			FADIRECTORY	= $0010
   476 = 0020			FAARCHIVE	= $0020
   477 = 003F			FAANYFILE	= $003F
   478
   479 				.endl							; UNIT SYSUTILS
   480
   481 				; ------------------------------------------------------------
   482
   483 2607			.local	ATARI						; UNIT
   484
   485 				; ------------------------------------------------------------
   486
   487 = 0012			RTCLOK	= $0012
   488 = 004D			ATRACT	= $004D
   489 = 0052			LMARGIN	= $0052
   490 = 0053			RMARGIN	= $0053
   491 = 0054			ROWCRS	= $0054
   492 = 0055			COLCRS	= $0055
   493 = 0057			DINDEX	= $0057
   494 = 0058			SAVMSC	= $0058
   495 = 006A			RAMTOP	= $006A
   496 = 0200			VDSLST	= $0200
   497 = 0230			SDLSTL	= $0230
   498 = 0290			TXTROW	= $0290
   499 = 0291			TXTCOL	= $0291
   500 = 0293			TINDEX	= $0293
   501 = 0294			TXTMSC	= $0294
   502 = 022F			SDMCTL	= $022F
   503 = 026F			GPRIOR	= $026F
   504 = 02F0			CRSINH	= $02F0
   505 = 02F3			CHACT	= $02F3
   506 = 02F4			CHBAS	= $02F4
   507 = 02FC			CH	= $02FC
   508 = 02C0			PCOLR0	= $02C0
   509 = 02C1			PCOLR1	= $02C1
   510 = 02C2			PCOLR2	= $02C2
   511 = 02C3			PCOLR3	= $02C3
   512 = 02C4			COLOR0	= $02C4
   513 = 02C5			COLOR1	= $02C5
   514 = 02C6			COLOR2	= $02C6
   515 = 02C7			COLOR3	= $02C7
   516 = 02C8			COLOR4	= $02C8
   517 = 02C8			COLBAKS	= $02C8
   518 = D000			HPOSP0	= $D000
   519 = D001			HPOSP1	= $D001
   520 = D002			HPOSP2	= $D002
   521 = D003			HPOSP3	= $D003
   522 = D004			HPOSM0	= $D004
   523 = D005			HPOSM1	= $D005
   524 = D006			HPOSM2	= $D006
   525 = D007			HPOSM3	= $D007
   526 = D008			SIZEP0	= $D008
   527 = D009			SIZEP1	= $D009
   528 = D00A			SIZEP2	= $D00A
   529 = D00B			SIZEP3	= $D00B
   530 = D00C			SIZEM	= $D00C
   531 = D00D			GRAFP0	= $D00D
   532 = D00E			GRAFP1	= $D00E
   533 = D00F			GRAFP2	= $D00F
   534 = D010			GRAFP3	= $D010
   535 = D011			GRAFM	= $D011
   536 = D004			P0PF	= $D004
   537 = D014			PAL	= $D014
   538 = D012			COLPM0	= $D012
   539 = D013			COLPM1	= $D013
   540 = D014			COLPM2	= $D014
   541 = D015			COLPM3	= $D015
   542 = D016			COLPF0	= $D016
   543 = D017			COLPF1	= $D017
   544 = D018			COLPF2	= $D018
   545 = D019			COLPF3	= $D019
   546 = D01A			COLBK	= $D01A
   547 = D01B			PRIOR	= $D01B
   548 = D01D			GRACTL	= $D01D
   549 = D01E			HITCLR	= $D01E
   550 = D200			AUDF1	= $D200
   551 = D201			AUDC1	= $D201
   552 = D202			AUDF2	= $D202
   553 = D203			AUDC2	= $D203
   554 = D204			AUDF3	= $D204
   555 = D205			AUDC3	= $D205
   556 = D206			AUDF4	= $D206
   557 = D207			AUDC4	= $D207
   558 = D208			AUDCTL	= $D208
   559 = D20F			SKSTAT	= $D20F
   560 = D301			PORTB	= $D301
   561 = D400			DMACTL	= $D400
   562 = D401			CHACTL	= $D401
   563 = D402			DLISTL	= $D402
   564 = D404			HSCROL	= $D404
   565 = D405			VSCROL	= $D405
   566 = D407			PMBASE	= $D407
   567 = D409			CHBASE	= $D409
   568 = D40A			WSYNC	= $D40A
   569 = D40B			VCOUNT	= $D40B
   570 = D40C			PENH	= $D40C
   571 = D40D			PENV	= $D40D
   572 = D40E			NMIEN	= $D40E
   573
   574 				.endl							; UNIT ATARI
   575
   576 				; ------------------------------------------------------------
   577
   578 2607			.local	CRT						; UNIT
   579
   580 2607			.local	READKEY						; FUNCTION | ASSEMBLER
   581
   582 				; ---------------------  ASM Block 063  ---------------------
   583
   584 2607 8A 48			txa:pha
   585
   586 2609 20 CC 23			@GetKey
   587
   588 260C 8D 15 29			sta Result
   589
   590 260F 68 AA			pla:tax
   591
   592 2611			@exit
   593
   594 				; ------------------------------------------------------------
   595
   596 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   597 				; as Pointer
   598
   599 2611 E8				inx						; add bx, 1
   600 2612 AD 15 29 95 98		mva RESULT :STACKORIGIN,x
   601
   602 					.ifdef @new
   603 					@FreeMem #@VarData #@VarDataSize
   604 					eif
   605
   606 				; ------------------------------------------------------------
   607
   608 = 2915			RESULT	= DATAORIGIN+$011F
   609
   610 = 2915			@VarData	= RESULT
   611 = 0001			@VarDataSize	= 1
   612
   613 2617 60				rts						; ret
   614 				.endl
   615
   616 				; ------------------------------------------------------------
   617
   618 = 2914			TEXTATTR	= DATAORIGIN+$011E
   619 = D01F			CONSOL	= $D01F
   620 = 0000			CN_START_SELECT_OPTION	= $0000
   621 = 0001			CN_SELECT_OPTION	= $0001
   622 = 0002			CN_START_OPTION	= $0002
   623 = 0003			CN_OPTION	= $0003
   624 = 0004			CN_START_SELECT	= $0004
   625 = 0005			CN_SELECT	= $0005
   626 = 0006			CN_START	= $0006
   627 = 0007			CN_NONE	= $0007
   628 = 0000			BW40	= $0000
   629 = 0001			CO40	= $0001
   630 = 0002			BW80	= $0002
   631 = 0003			CO80	= $0003
   632 = 0007			MONO	= $0007
   633 = 0001			C40	= $0001
   634 = 0003			C80	= $0003
   635 = 0000			BLACK	= $0000
   636 = 0001			BLUE	= $0001
   637 = 0002			GREEN	= $0002
   638 = 0003			CYAN	= $0003
   639 = 0004			RED	= $0004
   640 = 0005			MAGENTA	= $0005
   641 = 0006			BROWN	= $0006
   642 = 0007			LIGHTGRAY	= $0007
   643 = 0008			DARKGRAY	= $0008
   644 = 0009			LIGHTBLUE	= $0009
   645 = 000A			LIGHTGREEN	= $000A
   646 = 000B			LIGHTCYAN	= $000B
   647 = 000C			LIGHTRED	= $000C
   648 = 000D			LIGHTMAGENTA	= $000D
   649 = 000E			YELLOW	= $000E
   650 = 000F			WHITE	= $000F
   651 = 0080			BLINK	= $0080
   652
   653 				.endl							; UNIT CRT
   654
   655 2618			.local	MAINPROC					; PROCEDURE
   656
   657 				; optimize FAIL (100, examples\diskget.pas), line = 24
   658 					@print #$7D
   658 				 LDY# $7D\ JSR @PRINT
   658 2618 A0 7D		 LDY# $7D
   658 261A 20 FF 22		 JSR @PRINT
   659
   660 				; optimize FAIL (100, examples\diskget.pas), line = 25
   661 					@printSTRING #CODEORIGIN+$000D
   661 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   661 261D A0 20		 LDY> CODEORIGIN+$000D
   661 261F A9 0D		 LDA< CODEORIGIN+$000D
   661 2621 20 08 23		 JSR @PRINTSTRING
   662 					@print #$9B
   662 				 LDY# $9B\ JSR @PRINT
   662 2624 A0 9B		 LDY# $9B
   662 2626 20 FF 22		 JSR @PRINT
   663 					@printSTRING #CODEORIGIN+$0023
   663 				 LDY> CODEORIGIN+$0023\ LDA< CODEORIGIN+$0023\ JSR @PRINTSTRING
   663 2629 A0 20		 LDY> CODEORIGIN+$0023
   663 262B A9 23		 LDA< CODEORIGIN+$0023
   663 262D 20 08 23		 JSR @PRINTSTRING
   664 					@print #$9B
   664 				 LDY# $9B\ JSR @PRINT
   664 2630 A0 9B		 LDY# $9B
   664 2632 20 FF 22		 JSR @PRINT
   665 					@printSTRING #CODEORIGIN+$0022
   665 				 LDY> CODEORIGIN+$0022\ LDA< CODEORIGIN+$0022\ JSR @PRINTSTRING
   665 2635 A0 20		 LDY> CODEORIGIN+$0022
   665 2637 A9 22		 LDA< CODEORIGIN+$0022
   665 2639 20 08 23		 JSR @PRINTSTRING
   666 				; AssignFile
   667
   668 				; optimize OK (examples\diskget.pas), line = 26
   669
   670 263C AD F2 27 85 90 AD + 	mwa F :bp2
   671 2646 A0 00			ldy #s@file.pfname
   672 2648 A9 25			lda #$25
   673 264A 91 90			sta (:bp2),y
   674 264C C8				iny
   675 264D A9 20			lda #$20
   676 264F 91 90			sta (:bp2),y
   677
   678 				; optimize OK (examples\diskget.pas), line = 26
   679
   680 2651 A0 05			ldy #s@file.status
   681 2653 A9 00			lda #$00
   682 2655 91 90			sta (:bp2),y
   683 				; Reset
   684
   685 				; optimize OK (examples\diskget.pas), line = 27
   686
   687 2657 A0 02			ldy #s@file.record
   688 2659 A9 01			lda #$01
   689 265B 91 90			sta (:bp2),y
   690 265D C8				iny
   691 265E A9 00			lda #$00
   692 2660 91 90			sta (:bp2),y
   693
   694 2662 8A 48			txa:pha
   695 2664 38				sec
   696 					@openfile F, MAIN.SYSTEM.FileMode
   696 				 LDY F+1\ LDA F\ LDX MAIN.SYSTEM.FILEMODE\ JSR @OPENFILE
   696 2665 AC F3 27		 LDY F+1
   696 2668 AD F2 27		 LDA F
   696 266B AE FB 27		 LDX MAIN.SYSTEM.FILEMODE
   696 266E 20 7A 20		 JSR @OPENFILE
   697 2671 68 AA			pla:tax
   698
   699 				; optimize OK (examples\diskget.pas), line = 28
   700
   701 2673 A9 01 8D 27 2A		mva #$01 I
   702 				; --- For
   703
   704 				; optimize OK (examples\diskget.pas), line = 29
   705
   706 2678 8D 27 2A			sta I
   707
   708 				; optimize OK (examples\diskget.pas), line = 29
   709
   710 				; --- To
   711 267B			l_0123
   712
   713 				; --- ForToDoCondition
   714
   715 				; optimize OK (examples\diskget.pas), line = 29
   716
   717 267B AD 27 2A			lda I
   718 267E C9 0F			cmp #$0F
   719 2680 90 02			scc
   720 2682 D0 3F			jne l_0131
   721
   722 				; BlockRead
   723
   724 				; optimize OK (examples\diskget.pas), line = 30
   725
   726 2684 AD F2 27 85 90 AD + 	mwa F :bp2
   727 268E A0 06			ldy #s@file.buffer
   728 2690 A9 26			lda <N
   729 2692 91 90			sta (:bp2),y
   730 2694 C8				iny
   731 2695 A9 2A			lda >N
   732 2697 91 90			sta (:bp2),y
   733
   734 				; optimize OK (examples\diskget.pas), line = 30
   735
   736 2699 A0 08			ldy #s@file.nrecord
   737 269B A9 01			lda #$01
   738 269D 91 90			sta (:bp2),y
   739 269F C8				iny
   740 26A0 A9 00			lda #$00
   741 26A2 91 90			sta (:bp2),y
   742
   743 26A4 8A 48			txa:pha
   744 26A6 38				sec
   745 					@readfile F, #7
   745 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
   745 26A7 AC F3 27		 LDY F+1
   745 26AA AD F2 27		 LDA F
   745 26AD A2 07		 LDX# 7
   745 26AF 20 4E 21		 JSR @READFILE
   746 26B2 68 AA			pla:tax
   747
   748 				; optimize FAIL (100, examples\diskget.pas), line = 31
   749 26B4 E8				inx
   750 26B5 AD 26 2A 95 98		mva N :STACKORIGIN,x
   751 26BA 20 F5 22			@printCHAR
   752 26BD CA				dex
   753
   754 				; --- ForToDoEpilog
   755 26BE EE 27 2A			inc I						; inc ptr byte [CounterAddress]
   756
   757 26C1 D0 B8			jne l_0123
   758
   759 26C3			l_0131
   760 				; CloseFile
   761
   762 26C3 8A 48			txa:pha
   763 26C5 38				sec
   764 					@closefile F
   764 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
   764 26C6 AC F3 27		 LDY F+1
   764 26C9 AD F2 27		 LDA F
   764 26CC 20 21 21		 JSR @CLOSEFILE
   765 26CF 68 AA			pla:tax
   766
   767 				; optimize FAIL (100, examples\diskget.pas), line = 34
   768 					@printSTRING #CODEORIGIN+$0022
   768 				 LDY> CODEORIGIN+$0022\ LDA< CODEORIGIN+$0022\ JSR @PRINTSTRING
   768 26D1 A0 20		 LDY> CODEORIGIN+$0022
   768 26D3 A9 22		 LDA< CODEORIGIN+$0022
   768 26D5 20 08 23		 JSR @PRINTSTRING
   769 					@print #$9B
   769 				 LDY# $9B\ JSR @PRINT
   769 26D8 A0 9B		 LDY# $9B
   769 26DA 20 FF 22		 JSR @PRINT
   770 					@printSTRING #CODEORIGIN+$0035
   770 				 LDY> CODEORIGIN+$0035\ LDA< CODEORIGIN+$0035\ JSR @PRINTSTRING
   770 26DD A0 20		 LDY> CODEORIGIN+$0035
   770 26DF A9 35		 LDA< CODEORIGIN+$0035
   770 26E1 20 08 23		 JSR @PRINTSTRING
   771 					@print #$9B
   771 				 LDY# $9B\ JSR @PRINT
   771 26E4 A0 9B		 LDY# $9B
   771 26E6 20 FF 22		 JSR @PRINT
   772 					@printSTRING #CODEORIGIN+$0022
   772 				 LDY> CODEORIGIN+$0022\ LDA< CODEORIGIN+$0022\ JSR @PRINTSTRING
   772 26E9 A0 20		 LDY> CODEORIGIN+$0022
   772 26EB A9 22		 LDA< CODEORIGIN+$0022
   772 26ED 20 08 23		 JSR @PRINTSTRING
   773 					@print #$9B
   773 				 LDY# $9B\ JSR @PRINT
   773 26F0 A0 9B		 LDY# $9B
   773 26F2 20 FF 22		 JSR @PRINT
   774 					@printSTRING #CODEORIGIN+$0022
   774 				 LDY> CODEORIGIN+$0022\ LDA< CODEORIGIN+$0022\ JSR @PRINTSTRING
   774 26F5 A0 20		 LDY> CODEORIGIN+$0022
   774 26F7 A9 22		 LDA< CODEORIGIN+$0022
   774 26F9 20 08 23		 JSR @PRINTSTRING
   775
   776 				; optimize FAIL (100, examples\diskget.pas), line = 35
   777 					@printSTRING #CODEORIGIN+$0048
   777 				 LDY> CODEORIGIN+$0048\ LDA< CODEORIGIN+$0048\ JSR @PRINTSTRING
   777 26FC A0 20		 LDY> CODEORIGIN+$0048
   777 26FE A9 48		 LDA< CODEORIGIN+$0048
   777 2700 20 08 23		 JSR @PRINTSTRING
   778 2703 20 FA 22			@printEOL
   779 				; AssignFile
   780
   781 				; optimize OK (examples\diskget.pas), line = 36
   782
   783 2706 AD F2 27 85 90 AD + 	mwa F :bp2
   784 2710 A0 00			ldy #s@file.pfname
   785 2712 A9 25			lda #$25
   786 2714 91 90			sta (:bp2),y
   787 2716 C8				iny
   788 2717 A9 20			lda #$20
   789 2719 91 90			sta (:bp2),y
   790
   791 				; optimize OK (examples\diskget.pas), line = 36
   792
   793 271B A0 05			ldy #s@file.status
   794 271D A9 00			lda #$00
   795 271F 91 90			sta (:bp2),y
   796 				; Reset
   797
   798 				; optimize OK (examples\diskget.pas), line = 37
   799
   800 2721 A0 02			ldy #s@file.record
   801 2723 A9 01			lda #$01
   802 2725 91 90			sta (:bp2),y
   803 2727 C8				iny
   804 2728 A9 00			lda #$00
   805 272A 91 90			sta (:bp2),y
   806
   807 272C 8A 48			txa:pha
   808 272E 38				sec
   809 					@openfile F, MAIN.SYSTEM.FileMode
   809 				 LDY F+1\ LDA F\ LDX MAIN.SYSTEM.FILEMODE\ JSR @OPENFILE
   809 272F AC F3 27		 LDY F+1
   809 2732 AD F2 27		 LDA F
   809 2735 AE FB 27		 LDX MAIN.SYSTEM.FILEMODE
   809 2738 20 7A 20		 JSR @OPENFILE
   810 273B 68 AA			pla:tax
   811
   812 				; --- RepeatUntilProlog
   813 273D			l_0174
   814 				; BlockRead
   815
   816 				; optimize OK (examples\diskget.pas), line = 39
   817
   818 273D AD F2 27 85 90 AD + 	mwa F :bp2
   819 2747 A0 06			ldy #s@file.buffer
   820 2749 A9 26			lda <N
   821 274B 91 90			sta (:bp2),y
   822 274D C8				iny
   823 274E A9 2A			lda >N
   824 2750 91 90			sta (:bp2),y
   825
   826 				; optimize OK (examples\diskget.pas), line = 39
   827
   828 2752 A0 08			ldy #s@file.nrecord
   829 2754 A9 01			lda #$01
   830 2756 91 90			sta (:bp2),y
   831 2758 C8				iny
   832 2759 A9 00			lda #$00
   833 275B 91 90			sta (:bp2),y
   834
   835 275D 8A 48			txa:pha
   836 275F 38				sec
   837 					@readfile F, #7
   837 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
   837 2760 AC F3 27		 LDY F+1
   837 2763 AD F2 27		 LDA F
   837 2766 A2 07		 LDX# 7
   837 2768 20 4E 21		 JSR @READFILE
   838 276B 68 AA			pla:tax
   839
   840 				; optimize FAIL (100, examples\diskget.pas), line = 40
   841 276D E8				inx
   842 276E AD 26 2A 95 98		mva N :STACKORIGIN,x
   843 2773 20 F5 22			@printCHAR
   844 2776 CA				dex
   845
   846 				; optimize FAIL ('SYSTEM.EOF', examples\diskget.pas), line = 41
   847 2777 E8				inx
   848 2778 AD F2 27 95 98		mva F :STACKORIGIN,x
   849 277D AD F3 27 95 A8		mva F+1 :STACKORIGIN+STACKWIDTH,x
   850 2782 20 64 25			jsr SYSTEM.EOF
   851 2785 CA				dex
   852 2786 B5 99			lda :STACKORIGIN+1,x
   853 2788 F0 B3			jeq l_0174
   854 				; CloseFile
   855
   856 278A 8A 48			txa:pha
   857 278C 38				sec
   858 					@closefile F
   858 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
   858 278D AC F3 27		 LDY F+1
   858 2790 AD F2 27		 LDA F
   858 2793 20 21 21		 JSR @CLOSEFILE
   859 2796 68 AA			pla:tax
   860
   861 				; optimize FAIL (100, examples\diskget.pas), line = 43
   862 					@printSTRING #CODEORIGIN+$0022
   862 				 LDY> CODEORIGIN+$0022\ LDA< CODEORIGIN+$0022\ JSR @PRINTSTRING
   862 2798 A0 20		 LDY> CODEORIGIN+$0022
   862 279A A9 22		 LDA< CODEORIGIN+$0022
   862 279C 20 08 23		 JSR @PRINTSTRING
   863 					@print #$9B
   863 				 LDY# $9B\ JSR @PRINT
   863 279F A0 9B		 LDY# $9B
   863 27A1 20 FF 22		 JSR @PRINT
   864 					@printSTRING #CODEORIGIN+$0022
   864 				 LDY> CODEORIGIN+$0022\ LDA< CODEORIGIN+$0022\ JSR @PRINTSTRING
   864 27A4 A0 20		 LDY> CODEORIGIN+$0022
   864 27A6 A9 22		 LDA< CODEORIGIN+$0022
   864 27A8 20 08 23		 JSR @PRINTSTRING
   865 					@print #$9B
   865 				 LDY# $9B\ JSR @PRINT
   865 27AB A0 9B		 LDY# $9B
   865 27AD 20 FF 22		 JSR @PRINT
   866 					@printSTRING #CODEORIGIN+$005D
   866 				 LDY> CODEORIGIN+$005D\ LDA< CODEORIGIN+$005D\ JSR @PRINTSTRING
   866 27B0 A0 20		 LDY> CODEORIGIN+$005D
   866 27B2 A9 5D		 LDA< CODEORIGIN+$005D
   866 27B4 20 08 23		 JSR @PRINTSTRING
   867 					@print #$9B
   867 				 LDY# $9B\ JSR @PRINT
   867 27B7 A0 9B		 LDY# $9B
   867 27B9 20 FF 22		 JSR @PRINT
   868 					@printSTRING #CODEORIGIN+$0022
   868 				 LDY> CODEORIGIN+$0022\ LDA< CODEORIGIN+$0022\ JSR @PRINTSTRING
   868 27BC A0 20		 LDY> CODEORIGIN+$0022
   868 27BE A9 22		 LDA< CODEORIGIN+$0022
   868 27C0 20 08 23		 JSR @PRINTSTRING
   869
   870 				; optimize FAIL ('CRT.READKEY', examples\diskget.pas), line = 44
   871 27C3 20 07 26			jsr CRT.READKEY
   872 27C6 B5 98 8D 28 2A		mva :STACKORIGIN,x KEY
   873 27CB CA				dex
   874
   875 				; ------------------------------------------------------------
   876
   877 = 000F			@FORTMP_0120	= $000F
   878 27CC			@exit
   879 					.ifdef @new
   880 					@FreeMem #@VarData #@VarDataSize
   881 					eif
   882 27CC 60				rts						; ret
   883 				.endl
   884 27CD			l_0081
   885
   886 				; optimize FAIL ('MAINPROC', examples\diskget.pas), line = 48
   887 27CD 20 18 26			jsr MAINPROC
   888 				; CloseFile
   889
   890 27D0 8A 48			txa:pha
   891 27D2 38				sec
   892 					@closefile F
   892 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
   892 27D3 AC F3 27		 LDY F+1
   892 27D6 AD F2 27		 LDA F
   892 27D9 20 21 21		 JSR @CLOSEFILE
   893 27DC 68 AA			pla:tax
   894
   895 				; ------------------------------------------------------------
   896
   897 = 2916			INTVALUE	= DATAORIGIN+$0120
   898 27DE			.var F	= DATAORIGIN+$0124 .word
   899 = 2926			adr.STRBUFFER	= DATAORIGIN+$0130
   900 27DE			.var STRBUFFER	= adr.STRBUFFER .word
   901 = 2A26			N	= DATAORIGIN+$0230
   902 = 2A27			I	= DATAORIGIN+$0231
   903 = 2A28			KEY	= DATAORIGIN+$0232
   904 27DE			@exit
   905
   906 27DE A2 00		@halt	ldx #0
   907 27E0 9A				txs
   908
   909 27E1 60				rts
   910
   911 				; ------------------------------------------------------------
   912
   913 27E2 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   914
   915 				; ------------------------------------------------------------
   916
   917 27F2			.local	@DEFINES
   918 27F2			ATARI
   919 				.endl
   920
   921 = 27F2 1A 29		F
   921 = 27F4 26 29		STRBUFFER
   921 				.endl							; MAIN
   922
   923 				; ------------------------------------------------------------
   924 				; ------------------------------------------------------------
   925
   926 				.macro	UNITINITIALIZATION
   927 				
   928 					.ifdef MAIN.SYSTEM.@UnitInit
   929 					jsr MAIN.SYSTEM.@UnitInit
   930 					eif
   931 				
   932 					.ifdef MAIN.DOS.@UnitInit
   933 					jsr MAIN.DOS.@UnitInit
   934 					eif
   935 				
   936 					.ifdef MAIN.STRUTILS.@UnitInit
   937 					jsr MAIN.STRUTILS.@UnitInit
   938 					eif
   939 				
   940 					.ifdef MAIN.SYSUTILS.@UnitInit
   941 					jsr MAIN.SYSUTILS.@UnitInit
   942 					eif
   943 				
   944 					.ifdef MAIN.ATARI.@UnitInit
   945 					jsr MAIN.ATARI.@UnitInit
   946 					eif
   947 				
   948 					.ifdef MAIN.CRT.@UnitInit
   949 					jsr MAIN.CRT.@UnitInit
   950 					eif
   951 				.endm
   952
   953 				; ------------------------------------------------------------
   954
   955 					ift .SIZEOF(MAIN.SYSTEM) > 0
   956 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   956 				SYSTEM: $2476..$2606
   957 					eif
   958
   959 					ift .SIZEOF(MAIN.DOS) > 0
   960 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   961 					eif
   962
   963 					ift .SIZEOF(MAIN.STRUTILS) > 0
   964 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   965 					eif
   966
   967 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   968 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   969 					eif
   970
   971 					ift .SIZEOF(MAIN.ATARI) > 0
   972 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   973 					eif
   974
   975 					ift .SIZEOF(MAIN.CRT) > 0
   976 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   976 				CRT: $2607..$2617
   977 					eif
   978
   979 					.print 'CODE: ',CODEORIGIN,'..',*-1
   979 				CODE: $2000..$27F5
   980
   981 				; ------------------------------------------------------------
   982
   983 27F6			DATAORIGIN
   984 27F6 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   985
   986 = 0006			VARINITSIZE	= *-DATAORIGIN
   987 = 0233			VARDATASIZE	= 563
   988
   989 = 2A29			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   990
   991 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   991 				DATA: $27F6..$2A29
   992
   993 02E0-02E1> 4A 24			run START
   994
   995 				; ------------------------------------------------------------
   996
   997 				.macro	STATICDATA
   998 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $14 $47 $65  $74 $44 $20 $61 $6E $64 $20 $45
   999 				.by  $4F $46 $20 $65 $78 $61 $6D $70  $6C $65 $00 $00 $00 $0E $48 $31  $3A $54 $45 $53 $54 $4E $55 $4D
  1000 				.by  $2E $54 $58 $54 $00 $11 $41 $6C  $6C $20 $6E $75 $6D $62 $65 $72  $73 $20 $72 $65 $61 $64 $21 $00
  1001 				.by  $13 $52 $65 $61 $64 $20 $6E $75  $6D $62 $65 $72 $73 $20 $61 $67  $61 $69 $6E $3A $00 $1B $41 $6C
  1002 				.by  $6C $20 $6E $75 $6D $62 $65 $72  $73 $20 $61 $72 $65 $20 $72 $65  $61 $64 $20 $61 $67 $61 $69 $6E
  1003 				.by  $21 $00
  1004 				.endm
  1005
  1006 					end
