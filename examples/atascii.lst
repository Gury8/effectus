mads 2.1.0 build 8 (23 Dec 19)
   388 					opt l+
   101
   102 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   102 				ZPAGE: $0080..$00D7
   103
   104 				.print 'RTLIB: ',RTLIB,'..',*-1
   104 				RTLIB: $206C..$21A0
   105
   106 				; ------------------------------------------------------------
   107
   108 21A1			START
   109 21A1 BA				tsx
   110 21A2 8E FE 22			stx MAIN.@halt+1
   111
   112 					.ifdef fmulinit
   113 					fmulinit
   114 					eif
   115
   116 = 0113			VLEN	= VARDATASIZE-VARINITSIZE
   117 = 2319			VADR	= DATAORIGIN+VARINITSIZE
   118
   119 					ift VADR > $BFFF
   120 					ert 'Invalid memory address range ',VADR
   121 					eli (VLEN>0) && (VLEN<=256)
   122 					ldx #256-VLEN
   123 					lda #0
   124 					sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>0
   126 					@fill #VADR #VLEN #0
   126 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   126 21A5 A9 19 85 88 A9 23 +  MWA #VADR @FILL.PTR1
   126 21AD A9 13 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   126 21B5 A9 00 85 84		 MVA #0 @FILL.PTR2
   126 21B9 20 8F 20		 JSR @FILL
   127 					eif
   128
   129 					.ifdef MAIN.@DEFINES.ROMOFF
   130 					icl 'atari\romoff.asm'
   131 					.endif
   132
   133 21BC A9 2C 85 82 A9 24 + 	mwa #PROGRAMSTACK psptr
   134
   135 21C4 A2 0F			ldx #$0f					; DOS II+/D ParamStr
   136 21C6 BD 40 03 9D 01 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   137
   138 21CF E8				inx						; X = 0
   139 21D0 86 90			stx bp						; BP = 0
   140
   141 21D2 8E 08 D2			stx audctl					; reset POKEY
   142 21D5 A9 03			lda #3
   143 21D7 8D 0F D2			sta skctl
   144
   145 21DA CA				dex						; X = 255
   146
   147 21DB				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: atascii.a65]
Source: atascii.a65
   148
   149 21DB			.local	MAIN						; PROCEDURE
   150
   151 21DB 4C FA 22			jmp l_0073
   152
   153 				; ------------------------------------------------------------
   154
   155 21DE			.local	SYSTEM						; UNIT
   156
   157 				; ------------------------------------------------------------
   158
   159 = 0101			__PORTB_BANKS	= $0101
   160 = 0648			M_PI_2	= $0648
   161 = 0192			D_PI_2	= $0192
   162 = 0004			D_PI_180	= $04
   163 = 0000			MGTIA	= $00
   164 = 0080			MVBXE	= $80
   165 = 0000			VBXE_XDLADR	= $00
   166 = 0100			VBXE_BCBADR	= $0100
   167 = 1000			VBXE_MAPADR	= $1000
   168 = 5000			VBXE_OVRADR	= $5000
   169 = B000			VBXE_WINDOW	= $B000
   170 = 0000			IDLI	= $00
   171 = 0001			IVBL	= $01
   172 = 00FE			CH_DELCHR	= $FE
   173 = 009B			CH_ENTER	= $9B
   174 = 001B			CH_ESC	= $1B
   175 = 001C			CH_CURS_UP	= $1C
   176 = 001D			CH_CURS_DOWN	= $1D
   177 = 001E			CH_CURS_LEFT	= $1E
   178 = 001F			CH_CURS_RIGHT	= $1F
   179 = 007F			CH_TAB	= $7F
   180 = 009B			CH_EOL	= $9B
   181 = 007D			CH_CLR	= $7D
   182 = 00FD			CH_BELL	= $FD
   183 = 007E			CH_DEL	= $7E
   184 = 009C			CH_DELLINE	= $9C
   185 = 009D			CH_INSLINE	= $9D
   186 = 0000			COLOR_BLACK	= $00
   187 = 000E			COLOR_WHITE	= $0E
   188 = 0032			COLOR_RED	= $32
   189 = 0096			COLOR_CYAN	= $96
   190 = 0068			COLOR_VIOLET	= $68
   191 = 00C4			COLOR_GREEN	= $C4
   192 = 0074			COLOR_BLUE	= $74
   193 = 00EE			COLOR_YELLOW	= $EE
   194 = 0028			COLOR_ORANGE	= $28
   195 = 00E4			COLOR_BROWN	= $E4
   196 = 003C			COLOR_LIGHTRED	= $3C
   197 = 0004			COLOR_GRAY1	= $04
   198 = 0006			COLOR_GRAY2	= $06
   199 = 000A			COLOR_GRAY3	= $0A
   200 = 00CC			COLOR_LIGHTGREEN	= $CC
   201 = 007C			COLOR_LIGHTBLUE	= $7C
   202 = 0004			FMOPENREAD	= $04
   203 = 0008			FMOPENWRITE	= $08
   204 = 0009			FMOPENAPPEND	= $09
   205 = 000C			FMOPENREADWRITE	= $0C
   206 = 2313			SCREENWIDTH	= DATAORIGIN+$0000
   207 = 2315			SCREENHEIGHT	= DATAORIGIN+$0002
   208 = 2317			DATESEPARATOR	= DATAORIGIN+$0004
   209 = D014			TVSYSTEM	= $D014
   210 = 02C0			adr.PALETTE	= $02C0
   211 21DE			.var PALETTE	= adr.PALETTE .word
   212 = D012			adr.HPALETTE	= $D012
   213 21DE			.var HPALETTE	= adr.HPALETTE .word
   214 = 2318			FILEMODE	= DATAORIGIN+$0005
   215 = 2319			GRAPHMODE	= DATAORIGIN+$0006
   216 = 231A			IORESULT	= DATAORIGIN+$0007
   217 = 231B			EOLN	= DATAORIGIN+$0008
   218 = 231C			RNDSEED	= DATAORIGIN+$0009
   219
   220 = 21DE C0 02		PALETTE
   220 = 21E0 12 D0		HPALETTE
   220 				.endl							; UNIT SYSTEM
   221
   222 				; ------------------------------------------------------------
   223
   224 21E2			.local	ATARI						; UNIT
   225
   226 				; ------------------------------------------------------------
   227
   228 = 0012			RTCLOK	= $12
   229 = 004D			ATRACT	= $4D
   230 = 0052			LMARGIN	= $52
   231 = 0053			RMARGIN	= $53
   232 = 0054			ROWCRS	= $54
   233 = 0055			COLCRS	= $55
   234 = 0057			DINDEX	= $57
   235 = 0058			SAVMSC	= $58
   236 = 0062			PALNTS	= $62
   237 = 006A			RAMTOP	= $6A
   238 = 0200			VDSLST	= $0200
   239 = 0230			SDLSTL	= $0230
   240 = 0290			TXTROW	= $0290
   241 = 0291			TXTCOL	= $0291
   242 = 0293			TINDEX	= $0293
   243 = 0294			TXTMSC	= $0294
   244 = 022F			SDMCTL	= $022F
   245 = 026F			GPRIOR	= $026F
   246 = 02F0			CRSINH	= $02F0
   247 = 02F3			CHACT	= $02F3
   248 = 02F4			CHBAS	= $02F4
   249 = 02FC			CH	= $02FC
   250 = 02C0			PCOLR0	= $02C0
   251 = 02C1			PCOLR1	= $02C1
   252 = 02C2			PCOLR2	= $02C2
   253 = 02C3			PCOLR3	= $02C3
   254 = 02C4			COLOR0	= $02C4
   255 = 02C5			COLOR1	= $02C5
   256 = 02C6			COLOR2	= $02C6
   257 = 02C7			COLOR3	= $02C7
   258 = 02C8			COLOR4	= $02C8
   259 = 02C8			COLBAKS	= $02C8
   260 = D000			HPOSP0	= $D000
   261 = D001			HPOSP1	= $D001
   262 = D002			HPOSP2	= $D002
   263 = D003			HPOSP3	= $D003
   264 = D004			HPOSM0	= $D004
   265 = D005			HPOSM1	= $D005
   266 = D006			HPOSM2	= $D006
   267 = D007			HPOSM3	= $D007
   268 = D008			SIZEP0	= $D008
   269 = D009			SIZEP1	= $D009
   270 = D00A			SIZEP2	= $D00A
   271 = D00B			SIZEP3	= $D00B
   272 = D00C			SIZEM	= $D00C
   273 = D00D			GRAFP0	= $D00D
   274 = D00E			GRAFP1	= $D00E
   275 = D00F			GRAFP2	= $D00F
   276 = D010			GRAFP3	= $D010
   277 = D011			GRAFM	= $D011
   278 = D004			P0PF	= $D004
   279 = D014			PAL	= $D014
   280 = D012			COLPM0	= $D012
   281 = D013			COLPM1	= $D013
   282 = D014			COLPM2	= $D014
   283 = D015			COLPM3	= $D015
   284 = D016			COLPF0	= $D016
   285 = D017			COLPF1	= $D017
   286 = D018			COLPF2	= $D018
   287 = D019			COLPF3	= $D019
   288 = D01A			COLBK	= $D01A
   289 = D01B			PRIOR	= $D01B
   290 = D01D			GRACTL	= $D01D
   291 = D01E			HITCLR	= $D01E
   292 = D200			AUDF1	= $D200
   293 = D201			AUDC1	= $D201
   294 = D202			AUDF2	= $D202
   295 = D203			AUDC2	= $D203
   296 = D204			AUDF3	= $D204
   297 = D205			AUDC3	= $D205
   298 = D206			AUDF4	= $D206
   299 = D207			AUDC4	= $D207
   300 = D208			AUDCTL	= $D208
   301 = D20F			SKSTAT	= $D20F
   302 = D301			PORTB	= $D301
   303 = D400			DMACTL	= $D400
   304 = D401			CHACTL	= $D401
   305 = D402			DLISTL	= $D402
   306 = D404			HSCROL	= $D404
   307 = D405			VSCROL	= $D405
   308 = D407			PMBASE	= $D407
   309 = D409			CHBASE	= $D409
   310 = D40A			WSYNC	= $D40A
   311 = D40B			VCOUNT	= $D40B
   312 = D40C			PENH	= $D40C
   313 = D40D			PENV	= $D40D
   314 = D40E			NMIEN	= $D40E
   315
   316 				.endl							; UNIT ATARI
   317
   318 				; ------------------------------------------------------------
   319
   320 21E2			.local	CRT						; UNIT
   321
   322 21E2			.local	READKEY						; FUNCTION | ASSEMBLER
   323
   324 				; ---------------------  ASM Block 049  ---------------------
   325
   326 21E2 8A 48			txa:pha
   327
   328 21E4 20 6C 20			@GetKey
   329
   330 21E7 8D 1F 23			sta Result
   331
   332 21EA 68 AA			pla:tax
   333
   334 21EC			@exit
   335
   336 				; ------------------------------------------------------------
   337
   338 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   339 				; as Pointer
   340
   341 21EC E8				inx
   342 21ED AD 1F 23 95 98		mva RESULT :STACKORIGIN,x
   343
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					eif
   351
   352 				; ------------------------------------------------------------
   353
   354 = 231F			RESULT	= DATAORIGIN+$000C
   355
   356 = 231F			@VarData	= RESULT
   357 = 0001			@VarDataSize	= 1
   358
   359 21F2 60				rts						; ret
   360 				.endl
   361
   362 				; ------------------------------------------------------------
   363
   364 = 231E			TEXTATTR	= DATAORIGIN+$000B
   365 = D01F			CONSOL	= $D01F
   366 = 0000			CN_START_SELECT_OPTION	= $00
   367 = 0001			CN_SELECT_OPTION	= $01
   368 = 0002			CN_START_OPTION	= $02
   369 = 0003			CN_OPTION	= $03
   370 = 0004			CN_START_SELECT	= $04
   371 = 0005			CN_SELECT	= $05
   372 = 0006			CN_START	= $06
   373 = 0007			CN_NONE	= $07
   374 = 0000			BW40	= $00
   375 = 0001			CO40	= $01
   376 = 0002			BW80	= $02
   377 = 0003			CO80	= $03
   378 = 0007			MONO	= $07
   379 = 0001			C40	= $01
   380 = 0003			C80	= $03
   381 = 0000			BLACK	= $00
   382 = 0001			BLUE	= $01
   383 = 0002			GREEN	= $02
   384 = 0003			CYAN	= $03
   385 = 0004			RED	= $04
   386 = 0005			MAGENTA	= $05
   387 = 0006			BROWN	= $06
   388 = 0007			LIGHTGRAY	= $07
   389 = 0008			DARKGRAY	= $08
   390 = 0009			LIGHTBLUE	= $09
   391 = 000A			LIGHTGREEN	= $0A
   392 = 000B			LIGHTCYAN	= $0B
   393 = 000C			LIGHTRED	= $0C
   394 = 000D			LIGHTMAGENTA	= $0D
   395 = 000E			YELLOW	= $0E
   396 = 000F			WHITE	= $0F
   397 = 0080			BLINK	= $80
   398
   399 				.endl							; UNIT CRT
   400
   401 				; ------------------------------------------------------------
   402
   403 21F3			.local	DOS						; UNIT
   404
   405 				; ------------------------------------------------------------
   406
   407 = D014			PALNTSC	= $D014
   408
   409 				.endl							; UNIT DOS
   410
   411 				; ------------------------------------------------------------
   412
   413 21F3			.local	STRUTILS					; UNIT
   414
   415 				; ------------------------------------------------------------
   416
   417 				.endl							; UNIT STRUTILS
   418
   419 				; ------------------------------------------------------------
   420
   421 21F3			.local	SYSUTILS					; UNIT
   422
   423 				; ------------------------------------------------------------
   424
   425 = 0001			FAREADONLY	= $01
   426 = 0002			FAHIDDEN	= $02
   427 = 0004			FASYSFILE	= $04
   428 = 0008			FAVOLUMEID	= $08
   429 = 0010			FADIRECTORY	= $10
   430 = 0020			FAARCHIVE	= $20
   431 = 003F			FAANYFILE	= $3F
   432
   433 				.endl							; UNIT SYSUTILS
   434
   435 				; ------------------------------------------------------------
   436
   437 21F3			.local	CIO						; UNIT
   438
   439 21F3			.local	GET						; FUNCTION | ASSEMBLER
   440
   441 				; ------------------------------------------------------------
   442
   443 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   444 				; as Pointer
   445 21F3 B5 98 8D 20 23		mva :STACKORIGIN,x CHN
   446 21F8 CA				dex
   447
   448 				; ---------------------  ASM Block 080  ---------------------
   449
   450 21F9 8A 48			txa:pha
   451
   452 21FB AD 20 23			lda chn
   453 21FE 0A 0A 0A 0A			:4 asl @
   454 2202 AA				tax
   455
   456 2203 A9 07			lda #7		;get char command
   457 2205 9D 42 03			sta iccmd,x
   458
   459 2208 A9 00			lda #$00	;zero out the unused
   460 220A 9D 48 03			sta icbufl,x	;store in accumulator
   461 220D 9D 49 03			sta icbufh,x	;...after CIOV jump
   462
   463 2210				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 2210 20 56 E4				jsr CIOV
Source: atascii.a65
   464
   465 2213 8C 1A 23			sty MAIN.SYSTEM.IOResult
   466
   467 2216 8D 21 23			sta Result
   468
   469 2219 68 AA			pla:tax
   470
   471 221B			@exit
   472
   473 				; ------------------------------------------------------------
   474
   475 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   476 				; as Pointer
   477
   478 221B E8				inx
   479 221C AD 21 23 95 98		mva RESULT :STACKORIGIN,x
   480
   481 					.ifdef @new
   482 					lda <@VarData
   483 					sta :ztmp
   484 					lda >@VarData
   485 					ldy #@VarDataSize-1
   486 					jmp @FreeMem
   487 					eif
   488
   489 				; ------------------------------------------------------------
   490
   491 = 2320			CHN	= DATAORIGIN+$000D
   492 = 2321			RESULT	= DATAORIGIN+$000E
   493
   494 = 2320			@VarData	= CHN
   495 = 0002			@VarDataSize	= 2
   496
   497 2221 60				rts						; ret
   498 				.endl
   499
   500 				; ------------------------------------------------------------
   501
   502 				.endl							; UNIT CIO
   503
   504 2222			.local	MAINPROC					; PROCEDURE
   505
   506 				; optimize FAIL (100, examples\atascii.pas), line = 21
   507 					@print #$7D
   507 				 LDY# $7D\ JSR @PRINT
   507 2222 A0 7D		 LDY# $7D
   507 2224 20 DC 20		 JSR @PRINT
   508
   509 				; optimize FAIL (100, examples\atascii.pas), line = 22
   510 					@printSTRING #CODEORIGIN+$000D
   510 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   510 2227 A0 20		 LDY> CODEORIGIN+$000D
   510 2229 A9 0D		 LDA< CODEORIGIN+$000D
   510 222B 20 E5 20		 JSR @PRINTSTRING
   511 222E 20 D7 20			@printEOL
   512
   513 				; optimize FAIL (100, examples\atascii.pas), line = 23
   514 					@printSTRING #CODEORIGIN+$002F
   514 				 LDY> CODEORIGIN+$002F\ LDA< CODEORIGIN+$002F\ JSR @PRINTSTRING
   514 2231 A0 20		 LDY> CODEORIGIN+$002F
   514 2233 A9 2F		 LDA< CODEORIGIN+$002F
   514 2235 20 E5 20		 JSR @PRINTSTRING
   515 2238 20 D7 20			@printEOL
   516
   517 				; optimize FAIL (100, examples\atascii.pas), line = 24
   518 					@printSTRING #CODEORIGIN+$0031
   518 				 LDY> CODEORIGIN+$0031\ LDA< CODEORIGIN+$0031\ JSR @PRINTSTRING
   518 223B A0 20		 LDY> CODEORIGIN+$0031
   518 223D A9 31		 LDA< CODEORIGIN+$0031
   518 223F 20 E5 20		 JSR @PRINTSTRING
   519 2242 20 D7 20			@printEOL
   520
   521 				; optimize FAIL (100, examples\atascii.pas), line = 25
   522 					@print #$41
   522 				 LDY# $41\ JSR @PRINT
   522 2245 A0 41		 LDY# $41
   522 2247 20 DC 20		 JSR @PRINT
   523
   524 				; optimize FAIL (100, examples\atascii.pas), line = 26
   525 					@print #$54
   525 				 LDY# $54\ JSR @PRINT
   525 224A A0 54		 LDY# $54
   525 224C 20 DC 20		 JSR @PRINT
   526
   527 				; optimize FAIL (100, examples\atascii.pas), line = 27
   528 					@print #$61
   528 				 LDY# $61\ JSR @PRINT
   528 224F A0 61		 LDY# $61
   528 2251 20 DC 20		 JSR @PRINT
   529
   530 				; optimize FAIL (100, examples\atascii.pas), line = 28
   531 					@print #$52
   531 				 LDY# $52\ JSR @PRINT
   531 2254 A0 52		 LDY# $52
   531 2256 20 DC 20		 JSR @PRINT
   532
   533 				; optimize FAIL (100, examples\atascii.pas), line = 29
   534 					@print #$49
   534 				 LDY# $49\ JSR @PRINT
   534 2259 A0 49		 LDY# $49
   534 225B 20 DC 20		 JSR @PRINT
   535
   536 				; optimize FAIL (100, examples\atascii.pas), line = 30
   537 					@printSTRING #CODEORIGIN+$002E
   537 				 LDY> CODEORIGIN+$002E\ LDA< CODEORIGIN+$002E\ JSR @PRINTSTRING
   537 225E A0 20		 LDY> CODEORIGIN+$002E
   537 2260 A9 2E		 LDA< CODEORIGIN+$002E
   537 2262 20 E5 20		 JSR @PRINTSTRING
   538 2265 20 D7 20			@printEOL
   539
   540 				; optimize FAIL (100, examples\atascii.pas), line = 31
   541 					@printSTRING #CODEORIGIN+$0045
   541 				 LDY> CODEORIGIN+$0045\ LDA< CODEORIGIN+$0045\ JSR @PRINTSTRING
   541 2268 A0 20		 LDY> CODEORIGIN+$0045
   541 226A A9 45		 LDA< CODEORIGIN+$0045
   541 226C 20 E5 20		 JSR @PRINTSTRING
   542 226F 20 D7 20			@printEOL
   543
   544 				; optimize OK (examples\atascii.pas), line = 32
   545
   546 2272 A9 41 8D 24 24		mva #$41 A
   547
   548 				; optimize OK (examples\atascii.pas), line = 33
   549
   550 2277 A9 42 8D 25 24		mva #$42 B
   551
   552 				; optimize FAIL (100, examples\atascii.pas), line = 34
   553 					@printSTRING #CODEORIGIN+$0050
   553 				 LDY> CODEORIGIN+$0050\ LDA< CODEORIGIN+$0050\ JSR @PRINTSTRING
   553 227C A0 20		 LDY> CODEORIGIN+$0050
   553 227E A9 50		 LDA< CODEORIGIN+$0050
   553 2280 20 E5 20		 JSR @PRINTSTRING
   554
   555 				; optimize OK (examples\atascii.pas), line = 35
   556
   557 2283 AD 24 24			lda A
   558 2286 18 6D 25 24			add B
   559 228A 8D 23 24			sta N
   560
   561 				; optimize FAIL (100, examples\atascii.pas), line = 36
   562 228D AD 23 24			lda N
   563 2290 20 16 21			jsr @printBYTE._a
   564 2293 20 D7 20			@printEOL
   565
   566 				; optimize FAIL (100, examples\atascii.pas), line = 37
   567 					@printSTRING #CODEORIGIN+$002E
   567 				 LDY> CODEORIGIN+$002E\ LDA< CODEORIGIN+$002E\ JSR @PRINTSTRING
   567 2296 A0 20		 LDY> CODEORIGIN+$002E
   567 2298 A9 2E		 LDA< CODEORIGIN+$002E
   567 229A 20 E5 20		 JSR @PRINTSTRING
   568 229D 20 D7 20			@printEOL
   569
   570 				; optimize FAIL (100, examples\atascii.pas), line = 38
   571 					@printSTRING #CODEORIGIN+$0060
   571 				 LDY> CODEORIGIN+$0060\ LDA< CODEORIGIN+$0060\ JSR @PRINTSTRING
   571 22A0 A0 20		 LDY> CODEORIGIN+$0060
   571 22A2 A9 60		 LDA< CODEORIGIN+$0060
   571 22A4 20 E5 20		 JSR @PRINTSTRING
   572 22A7 20 D7 20			@printEOL
   573
   574 				; optimize OK (examples\atascii.pas), line = 39
   575
   576 22AA A9 41 8D 27 24		mva #$41 adr.ARR+$01
   577
   578 				; optimize FAIL (100, examples\atascii.pas), line = 40
   579 22AF A0 01			ldy #$01
   580 22B1 B9 26 24			lda adr.ARR,y
   581 22B4 20 16 21			jsr @printBYTE._a
   582
   583 				; optimize OK (examples\atascii.pas), line = 41
   584
   585 22B7 A9 32 8D 28 24		mva #$32 adr.ARR+$02
   586
   587 				; optimize OK (examples\atascii.pas), line = 42
   588
   589 22BC A9 43 8D 29 24		mva #$43 adr.ARR+$03
   590
   591 				; optimize OK (examples\atascii.pas), line = 43
   592
   593 22C1 A9 34 8D 2A 24		mva #$34 adr.ARR+$04
   594 				; --- For
   595
   596 				; optimize OK (examples\atascii.pas), line = 44
   597
   598 22C6 A9 02 8D 23 24		mva #$02 N
   599
   600 				; optimize OK (examples\atascii.pas), line = 44
   601
   602 22CB			l_017B
   603 				; --- ForToDoCondition
   604
   605 				; optimize OK (examples\atascii.pas), line = 44
   606
   607 22CB AD 23 24			lda N
   608 22CE C9 05			cmp #$05
   609 22D0 B0 13			jcs l_0189
   610
   611 				; optimize FAIL (100, examples\atascii.pas), line = 45
   612 					@print #$2C
   612 				 LDY# $2C\ JSR @PRINT
   612 22D2 A0 2C		 LDY# $2C
   612 22D4 20 DC 20		 JSR @PRINT
   613
   614 				; optimize FAIL (100, examples\atascii.pas), line = 46
   615 22D7 AC 23 24			ldy N
   616 22DA B9 26 24			lda adr.ARR,y
   617 22DD 20 16 21			jsr @printBYTE._a
   618
   619 				; --- ForToDoEpilog
   620 22E0 EE 23 24			inc N						; inc ptr byte [CounterAddress]
   621 22E3 D0 E6			jne l_017B
   622 22E5			l_0189
   623
   624 				; optimize FAIL ('CIO.GET', examples\atascii.pas), line = 48
   625 22E5 E8				inx
   626 22E6 A9 07 95 98			mva #$07 :STACKORIGIN,x
   627 22EA 20 F3 21			jsr CIO.GET
   628 22ED B5 98 8D 22 24		mva :STACKORIGIN,x KEY
   629 22F2 CA				dex
   630
   631 22F3 20 E2 21			jsr CRT.READKEY					; call Entry
   632
   633 22F6 CA				dex
   634
   635 				; ------------------------------------------------------------
   636
   637 = 2422			KEY	= DATAORIGIN+$010F
   638 = 2423			N	= DATAORIGIN+$0110
   639 = 2424			A	= DATAORIGIN+$0111
   640 = 2425			B	= DATAORIGIN+$0112
   641 = 2426			adr.ARR	= DATAORIGIN+$0113
   642 22F7			.var ARR	= adr.ARR .word
   643 = 0004			@FORTMP_0178	= $04
   644
   645 = 2422			@VarData	= KEY
   646 = 000A			@VarDataSize	= 10
   647
   648 22F7			@exit
   649 					.ifdef @new
   650 					lda <@VarData
   651 					sta :ztmp
   652 					lda >@VarData
   653 					ldy #@VarDataSize-1
   654 					jmp @FreeMem
   655 					eif
   656 22F7 60				rts						; ret
   657 = 22F8 26 24		ARR
   657 				.endl
   658 22FA			l_0073
   659
   660 				; optimize FAIL ('MAINPROC', examples\atascii.pas), line = 53
   661 22FA 20 22 22			jsr MAINPROC
   662
   663 				; ------------------------------------------------------------
   664
   665 = 2322			adr.STRBUFFER	= DATAORIGIN+$000F
   666 22FD			.var STRBUFFER	= adr.STRBUFFER .word
   667 22FD			@exit
   668
   669 22FD A2 00		@halt	ldx #0
   670 22FF 9A				txs
   671 					.ifdef MAIN.@DEFINES.ROMOFF
   672 					inc portb
   673 					.endif
   674
   675 2300 60				rts
   676
   677 				; ------------------------------------------------------------
   678
   679 2301 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   680
   681 				; ------------------------------------------------------------
   682
   683 2311			.local	@DEFINES
   684 2311			ATARI
   685 				.endl
   686
   687 = 2311 22 23		STRBUFFER
   687 				.endl							; MAIN
   688
   689 				; ------------------------------------------------------------
   690 				; ------------------------------------------------------------
   691
   692 				.macro	UNITINITIALIZATION
   693 				
   694 					.ifdef MAIN.SYSTEM.@UnitInit
   695 					jsr MAIN.SYSTEM.@UnitInit
   696 					eif
   697 				
   698 					.ifdef MAIN.ATARI.@UnitInit
   699 					jsr MAIN.ATARI.@UnitInit
   700 					eif
   701 				
   702 					.ifdef MAIN.CRT.@UnitInit
   703 					jsr MAIN.CRT.@UnitInit
   704 					eif
   705 				
   706 					.ifdef MAIN.DOS.@UnitInit
   707 					jsr MAIN.DOS.@UnitInit
   708 					eif
   709 				
   710 					.ifdef MAIN.STRUTILS.@UnitInit
   711 					jsr MAIN.STRUTILS.@UnitInit
   712 					eif
   713 				
   714 					.ifdef MAIN.SYSUTILS.@UnitInit
   715 					jsr MAIN.SYSUTILS.@UnitInit
   716 					eif
   717 				
   718 					.ifdef MAIN.CIO.@UnitInit
   719 					jsr MAIN.CIO.@UnitInit
   720 					eif
   721 				.endm
   722
   723 				; ------------------------------------------------------------
   724
   725 					ift .SIZEOF(MAIN.SYSTEM) > 0
   726 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   726 				SYSTEM: $21DE..$21E1
   727 					eif
   728
   729 					ift .SIZEOF(MAIN.ATARI) > 0
   730 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   731 					eif
   732
   733 					ift .SIZEOF(MAIN.CRT) > 0
   734 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   734 				CRT: $21E2..$21F2
   735 					eif
   736
   737 					ift .SIZEOF(MAIN.DOS) > 0
   738 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   739 					eif
   740
   741 					ift .SIZEOF(MAIN.STRUTILS) > 0
   742 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   743 					eif
   744
   745 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   746 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   747 					eif
   748
   749 					ift .SIZEOF(MAIN.CIO) > 0
   750 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
   750 				CIO: $21F3..$2221
   751 					eif
   752
   753 					.print 'CODE: ',CODEORIGIN,'..',*-1
   753 				CODE: $2000..$2312
   754
   755 				; ------------------------------------------------------------
   756
   757 2313			DATAORIGIN
   758 2313 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   759
   760 = 0006			VARINITSIZE	= *-DATAORIGIN
   761 = 0119			VARDATASIZE	= 281
   762
   763 = 242C			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   764
   765 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   765 				DATA: $2313..$242C
   766
   767 02E0-02E1> A1 21			run START
   768
   769 				; ------------------------------------------------------------
   770
   771 				.macro	STATICDATA
   772 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $20 $41 $53  $43 $49 $49 $20 $6D $61 $6E $69
   773 				.by  $70 $75 $6C $61 $74 $69 $6F $6E  $20 $64 $65 $6D $6F $6E $73 $74  $72 $61 $74 $69 $6F $6E $00 $00
   774 				.by  $00 $12 $43 $68 $61 $72 $61 $63  $74 $65 $72 $20 $50 $75 $74 $20  $74 $65 $73 $74 $00 $09 $53 $6F
   775 				.by  $6D $65 $20 $6D $61 $74 $68 $00  $0E $61 $3D $36 $35 $2C $62 $3D  $36 $36 $2C $61 $2B $62 $3D $00
   776 				.by  $0A $41 $72 $72 $61 $79 $20 $74  $65 $73 $74 $00
   777 				.endm
   778
   779 					end
