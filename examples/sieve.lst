mads 2.1.0 build 4 (27 Oct 19)
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $2025..$215F
    97
    98 				; ------------------------------------------------------------
    99
   100 215F			START
   101 215F BA				tsx
   102 2160 8E 0A 23			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 2011			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 2325			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 					ldx #256-VLEN
   115 					lda #0
   116 					sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   118 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   118 2163 A9 25 85 86 A9 23 +  MWA #VADR @FILL.PTR1
   118 216B A9 11 85 8A A9 20 +  MWA #VLEN @FILL.PTR3
   118 2173 A9 00 85 82		 MVA #0 @FILL.PTR2
   118 2177 20 17 21		 JSR @FILL
   119 					eif
   120
   121 217A A2 0F			ldx #$0f
   122 217C BD 40 03 9D 0D 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 2185 E8				inx		; X = 0 !!!
   125 2186 86 8E			stx bp		; lo BP = 0
   126
   127 2188				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: sieve.a65]
Source: sieve.a65
   128
   129 2188			.local	MAIN						; PROCEDURE
   130
   131 2188 4C 06 23			jmp l_002C
   132
   133 				; ------------------------------------------------------------
   134
   135 218B			.local	SYSTEM						; UNIT
   136
   137 				; ------------------------------------------------------------
   138
   139 = 0648			M_PI_2	= $0648
   140 = 0192			D_PI_2	= $0192
   141 = 0004			D_PI_180	= $0004
   142 = 0000			MGTIA	= $0000
   143 = 0080			MVBXE	= $0080
   144 = 0000			VBXE_XDLADR	= $0000
   145 = 0100			VBXE_BCBADR	= $0100
   146 = 1000			VBXE_MAPADR	= $1000
   147 = 5000			VBXE_OVRADR	= $5000
   148 = B000			VBXE_WINDOW	= $B000
   149 = 0000			IDLI	= $0000
   150 = 0001			IVBL	= $0001
   151 = 00FE			CH_DELCHR	= $00FE
   152 = 009B			CH_ENTER	= $009B
   153 = 001B			CH_ESC	= $001B
   154 = 001C			CH_CURS_UP	= $001C
   155 = 001D			CH_CURS_DOWN	= $001D
   156 = 001E			CH_CURS_LEFT	= $001E
   157 = 001F			CH_CURS_RIGHT	= $001F
   158 = 007F			CH_TAB	= $007F
   159 = 009B			CH_EOL	= $009B
   160 = 007D			CH_CLR	= $007D
   161 = 00FD			CH_BELL	= $00FD
   162 = 007E			CH_DEL	= $007E
   163 = 009C			CH_DELLINE	= $009C
   164 = 009D			CH_INSLINE	= $009D
   165 = 0000			COLOR_BLACK	= $0000
   166 = 000E			COLOR_WHITE	= $000E
   167 = 0032			COLOR_RED	= $0032
   168 = 0096			COLOR_CYAN	= $0096
   169 = 0068			COLOR_VIOLET	= $0068
   170 = 00C4			COLOR_GREEN	= $00C4
   171 = 0074			COLOR_BLUE	= $0074
   172 = 00EE			COLOR_YELLOW	= $00EE
   173 = 0028			COLOR_ORANGE	= $0028
   174 = 00E4			COLOR_BROWN	= $00E4
   175 = 003C			COLOR_LIGHTRED	= $003C
   176 = 0004			COLOR_GRAY1	= $0004
   177 = 0006			COLOR_GRAY2	= $0006
   178 = 000A			COLOR_GRAY3	= $000A
   179 = 00CC			COLOR_LIGHTGREEN	= $00CC
   180 = 007C			COLOR_LIGHTBLUE	= $007C
   181 = 0004			FMOPENREAD	= $0004
   182 = 0008			FMOPENWRITE	= $0008
   183 = 0009			FMOPENAPPEND	= $0009
   184 = 000C			FMOPENREADWRITE	= $000C
   185 = 231F			SCREENWIDTH	= DATAORIGIN+$0000
   186 = 2321			SCREENHEIGHT	= DATAORIGIN+$0002
   187 = 2323			DATESEPARATOR	= DATAORIGIN+$0004
   188 = D014			TVSYSTEM	= $D014
   189 = 02C0			adr.PALETTE	= $02C0
   190 218B			.var PALETTE	= adr.PALETTE .word
   191 = D012			adr.HPALETTE	= $D012
   192 218B			.var HPALETTE	= adr.HPALETTE .word
   193 = 2324			FILEMODE	= DATAORIGIN+$0005
   194 = 2325			SCREENMODE	= DATAORIGIN+$0006
   195 = 2326			IORESULT	= DATAORIGIN+$0007
   196 = 2327			EOLN	= DATAORIGIN+$0008
   197 = 2328			RNDSEED	= DATAORIGIN+$0009
   198
   199 = 218B C0 02		PALETTE
   199 = 218D 12 D0		HPALETTE
   199 				.endl							; UNIT SYSTEM
   200
   201 				; ------------------------------------------------------------
   202
   203 218F			.local	DOS						; UNIT
   204
   205 				; ------------------------------------------------------------
   206
   207 = D014			PALNTSC	= $D014
   208
   209 				.endl							; UNIT DOS
   210
   211 				; ------------------------------------------------------------
   212
   213 218F			.local	STRUTILS					; UNIT
   214
   215 				; ------------------------------------------------------------
   216
   217 				.endl							; UNIT STRUTILS
   218
   219 				; ------------------------------------------------------------
   220
   221 218F			.local	SYSUTILS					; UNIT
   222
   223 				; ------------------------------------------------------------
   224
   225 = 0001			FAREADONLY	= $0001
   226 = 0002			FAHIDDEN	= $0002
   227 = 0004			FASYSFILE	= $0004
   228 = 0008			FAVOLUMEID	= $0008
   229 = 0010			FADIRECTORY	= $0010
   230 = 0020			FAARCHIVE	= $0020
   231 = 003F			FAANYFILE	= $003F
   232
   233 				.endl							; UNIT SYSUTILS
   234
   235 				; ------------------------------------------------------------
   236
   237 218F			.local	ATARI						; UNIT
   238
   239 				; ------------------------------------------------------------
   240
   241 = 0012			RTCLOK	= $0012
   242 = 004D			ATRACT	= $004D
   243 = 0052			LMARGIN	= $0052
   244 = 0053			RMARGIN	= $0053
   245 = 0054			ROWCRS	= $0054
   246 = 0055			COLCRS	= $0055
   247 = 0057			DINDEX	= $0057
   248 = 0058			SAVMSC	= $0058
   249 = 006A			RAMTOP	= $006A
   250 = 0200			VDSLST	= $0200
   251 = 0230			SDLSTL	= $0230
   252 = 0290			TXTROW	= $0290
   253 = 0291			TXTCOL	= $0291
   254 = 0293			TINDEX	= $0293
   255 = 0294			TXTMSC	= $0294
   256 = 022F			SDMCTL	= $022F
   257 = 026F			GPRIOR	= $026F
   258 = 02F0			CRSINH	= $02F0
   259 = 02F3			CHACT	= $02F3
   260 = 02F4			CHBAS	= $02F4
   261 = 02FC			CH	= $02FC
   262 = 02C0			PCOLR0	= $02C0
   263 = 02C1			PCOLR1	= $02C1
   264 = 02C2			PCOLR2	= $02C2
   265 = 02C3			PCOLR3	= $02C3
   266 = 02C4			COLOR0	= $02C4
   267 = 02C5			COLOR1	= $02C5
   268 = 02C6			COLOR2	= $02C6
   269 = 02C7			COLOR3	= $02C7
   270 = 02C8			COLOR4	= $02C8
   271 = 02C8			COLBAKS	= $02C8
   272 = D000			HPOSP0	= $D000
   273 = D001			HPOSP1	= $D001
   274 = D002			HPOSP2	= $D002
   275 = D003			HPOSP3	= $D003
   276 = D004			HPOSM0	= $D004
   277 = D005			HPOSM1	= $D005
   278 = D006			HPOSM2	= $D006
   279 = D007			HPOSM3	= $D007
   280 = D008			SIZEP0	= $D008
   281 = D009			SIZEP1	= $D009
   282 = D00A			SIZEP2	= $D00A
   283 = D00B			SIZEP3	= $D00B
   284 = D00C			SIZEM	= $D00C
   285 = D00D			GRAFP0	= $D00D
   286 = D00E			GRAFP1	= $D00E
   287 = D00F			GRAFP2	= $D00F
   288 = D010			GRAFP3	= $D010
   289 = D011			GRAFM	= $D011
   290 = D004			P0PF	= $D004
   291 = D014			PAL	= $D014
   292 = D012			COLPM0	= $D012
   293 = D013			COLPM1	= $D013
   294 = D014			COLPM2	= $D014
   295 = D015			COLPM3	= $D015
   296 = D016			COLPF0	= $D016
   297 = D017			COLPF1	= $D017
   298 = D018			COLPF2	= $D018
   299 = D019			COLPF3	= $D019
   300 = D01A			COLBK	= $D01A
   301 = D01B			PRIOR	= $D01B
   302 = D01D			GRACTL	= $D01D
   303 = D01E			HITCLR	= $D01E
   304 = D200			AUDF1	= $D200
   305 = D201			AUDC1	= $D201
   306 = D202			AUDF2	= $D202
   307 = D203			AUDC2	= $D203
   308 = D204			AUDF3	= $D204
   309 = D205			AUDC3	= $D205
   310 = D206			AUDF4	= $D206
   311 = D207			AUDC4	= $D207
   312 = D208			AUDCTL	= $D208
   313 = D20F			SKSTAT	= $D20F
   314 = D301			PORTB	= $D301
   315 = D400			DMACTL	= $D400
   316 = D401			CHACTL	= $D401
   317 = D402			DLISTL	= $D402
   318 = D404			HSCROL	= $D404
   319 = D405			VSCROL	= $D405
   320 = D407			PMBASE	= $D407
   321 = D409			CHBASE	= $D409
   322 = D40A			WSYNC	= $D40A
   323 = D40B			VCOUNT	= $D40B
   324 = D40C			PENH	= $D40C
   325 = D40D			PENV	= $D40D
   326 = D40E			NMIEN	= $D40E
   327
   328 				.endl							; UNIT ATARI
   329
   330 				; ------------------------------------------------------------
   331
   332 218F			.local	CRT						; UNIT
   333
   334 218F			.local	READKEY						; FUNCTION | ASSEMBLER
   335
   336 				; ---------------------  ASM Block 063  ---------------------
   337
   338 218F 8A 48			txa:pha
   339
   340 2191 20 07 21			@GetKey
   341
   342 2194 8D 2B 23			sta Result
   343
   344 2197 68 AA			pla:tax
   345
   346 2199			@exit
   347
   348 				; ------------------------------------------------------------
   349
   350 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   351 				; as Pointer
   352
   353 2199 E8				inx						; add bx, 1
   354 219A AD 2B 23 95 98		mva RESULT :STACKORIGIN,x
   355
   356 					.ifdef @new
   357 					@FreeMem #@VarData #@VarDataSize
   358 					eif
   359
   360 				; ------------------------------------------------------------
   361
   362 = 232B			RESULT	= DATAORIGIN+$000C
   363
   364 = 232B			@VarData	= RESULT
   365 = 0001			@VarDataSize	= 1
   366
   367 219F 60				rts						; ret
   368 				.endl
   369
   370 				; ------------------------------------------------------------
   371
   372 = 232A			TEXTATTR	= DATAORIGIN+$000B
   373 = D01F			CONSOL	= $D01F
   374 = 0000			CN_START_SELECT_OPTION	= $0000
   375 = 0001			CN_SELECT_OPTION	= $0001
   376 = 0002			CN_START_OPTION	= $0002
   377 = 0003			CN_OPTION	= $0003
   378 = 0004			CN_START_SELECT	= $0004
   379 = 0005			CN_SELECT	= $0005
   380 = 0006			CN_START	= $0006
   381 = 0007			CN_NONE	= $0007
   382 = 0000			BW40	= $0000
   383 = 0001			CO40	= $0001
   384 = 0002			BW80	= $0002
   385 = 0003			CO80	= $0003
   386 = 0007			MONO	= $0007
   387 = 0001			C40	= $0001
   388 = 0003			C80	= $0003
   389 = 0000			BLACK	= $0000
   390 = 0001			BLUE	= $0001
   391 = 0002			GREEN	= $0002
   392 = 0003			CYAN	= $0003
   393 = 0004			RED	= $0004
   394 = 0005			MAGENTA	= $0005
   395 = 0006			BROWN	= $0006
   396 = 0007			LIGHTGRAY	= $0007
   397 = 0008			DARKGRAY	= $0008
   398 = 0009			LIGHTBLUE	= $0009
   399 = 000A			LIGHTGREEN	= $000A
   400 = 000B			LIGHTCYAN	= $000B
   401 = 000C			LIGHTRED	= $000C
   402 = 000D			LIGHTMAGENTA	= $000D
   403 = 000E			YELLOW	= $000E
   404 = 000F			WHITE	= $000F
   405 = 0080			BLINK	= $0080
   406
   407 				.endl							; UNIT CRT
   408
   409 21A0			.local	SIEVEPROC					; PROCEDURE
   410
   411 				; optimize OK (examples\sieve.pas), line = 23
   412
   413 21A0 A9 00 8D 2F 02		mva #$00 SDMCTL
   414
   415 				; optimize OK (examples\sieve.pas), line = 24
   416
   417 21A5 85 14			sta RTCLOK
   418
   419 				; optimize OK (examples\sieve.pas), line = 25
   420
   421 21A7 8D 2B 43			sta COUNT
   422 21AA 8D 2C 43			sta COUNT+1
   423
   424 				; optimize OK (examples\sieve.pas), line = 26
   425
   426 21AD 8D 2D 43			sta I
   427 21B0 8D 2E 43			sta I+1
   428 				; --- For
   429
   430 				; optimize OK (examples\sieve.pas), line = 27
   431
   432 21B3 8D 2D 43			sta I
   433 21B6 8D 2E 43			sta I+1
   434
   435 				; optimize OK (examples\sieve.pas), line = 27
   436
   437 				; --- To
   438 21B9			l_008A
   439
   440 				; --- ForToDoCondition
   441
   442 				; optimize OK (examples\sieve.pas), line = 27
   443
   444 21B9 AD 2E 43			lda I+1
   445 21BC C9 1F			cmp #$1F
   446 21BE D0 05			bne @+
   447 21C0 AD 2D 43			lda I
   448 21C3 C9 FE			cmp #$FE
   449 21C5			@
   450 21C5 90 02			scc
   451 21C7 D0 1E			jne l_0096
   452
   453 				; optimize OK (examples\sieve.pas), line = 28
   454
   455 21C9 AD 1D 23			lda FLAGS
   456 21CC 18 6D 2D 43			add I
   457 21D0 A8				tay
   458 21D1 AD 1E 23			lda FLAGS+1
   459 21D4 6D 2E 43			adc I+1
   460 21D7 85 8F			sta :bp+1
   461 21D9 A9 54			lda #$54
   462 21DB 91 8E			sta (:bp),y
   463
   464 				; --- ForToDoEpilog
   465 21DD EE 2D 43 D0 03 EE + 	inw I						; inc ptr word [CounterAddress]
   466
   467 21E5 D0 D2			jne l_008A
   468
   469 21E7			l_0096
   470
   471 				; optimize OK (examples\sieve.pas), line = 30
   472
   473 21E7 A9 00 8D 2D 43		mva #$00 I
   474 21EC 8D 2E 43			sta I+1
   475 				; --- For
   476
   477 				; optimize OK (examples\sieve.pas), line = 31
   478
   479 21EF 8D 2D 43			sta I
   480 21F2 8D 2E 43			sta I+1
   481
   482 				; optimize OK (examples\sieve.pas), line = 31
   483
   484 				; --- To
   485 21F5			l_00AE
   486
   487 				; --- ForToDoCondition
   488
   489 				; optimize OK (examples\sieve.pas), line = 31
   490
   491 21F5 AD 2E 43			lda I+1
   492 21F8 C9 1F			cmp #$1F
   493 21FA D0 05			bne @+
   494 21FC AD 2D 43			lda I
   495 21FF C9 FE			cmp #$FE
   496 2201			@
   497 2201 90 05			scc
   498 2203 F0 03 4C 9F 22		jne l_00BA
   499
   500 				; optimize OK (examples\sieve.pas), line = 32
   501
   502 2208 AD 1D 23			lda FLAGS
   503 220B 18 6D 2D 43			add I
   504 220F A8				tay
   505 2210 AD 1E 23			lda FLAGS+1
   506 2213 6D 2E 43			adc I+1
   507 2216 85 8F			sta :bp+1
   508 2218 B1 8E			lda (:bp),y
   509 221A C9 54			cmp #$54
   510 221C D0 74			jne l_00CE
   511
   512 				; optimize OK (examples\sieve.pas), line = 33
   513
   514 221E AD 2D 43			lda I
   515 2221 18 6D 2D 43			add I
   516 2225 85 A1			sta :STACKORIGIN+9
   517 2227 AD 2E 43			lda I+1
   518 222A 6D 2E 43			adc I+1
   519 222D 8D 32 43			sta PRIME+1
   520 2230 A5 A1			lda :STACKORIGIN+9
   521 2232 18 69 03			add #$03
   522 2235 8D 31 43			sta PRIME
   523 2238 90 03			scc
   524 223A EE 32 43			inc PRIME+1
   525
   526 				; optimize OK (examples\sieve.pas), line = 34
   527
   528 223D AD 2D 43			lda I
   529 2240 18 6D 31 43			add PRIME
   530 2244 8D 2F 43			sta K
   531 2247 AD 2E 43			lda I+1
   532 224A 6D 32 43			adc PRIME+1
   533 224D 8D 30 43			sta K+1
   534
   535 				; --- WhileProlog
   536 2250			l_00E8
   537
   538 				; optimize OK (examples\sieve.pas), line = 35
   539
   540 2250 AD 30 43			lda K+1
   541 2253 C9 1F			cmp #$1F
   542 2255 D0 05			bne @+
   543 2257 AD 2F 43			lda K
   544 225A C9 FE			cmp #$FE
   545 225C			@
   546 225C 90 02			bcc @+
   547 225E D0 2A			jne l_00F6
   548 2260			@
   549
   550 				; optimize OK (examples\sieve.pas), line = 36
   551
   552 2260 AD 1D 23			lda FLAGS
   553 2263 18 6D 2F 43			add K
   554 2267 A8				tay
   555 2268 AD 1E 23			lda FLAGS+1
   556 226B 6D 30 43			adc K+1
   557 226E 85 8F			sta :bp+1
   558 2270 A9 46			lda #$46
   559 2272 91 8E			sta (:bp),y
   560
   561 				; optimize OK (examples\sieve.pas), line = 37
   562
   563 2274 AD 2F 43			lda K
   564 2277 18 6D 31 43			add PRIME
   565 227B 8D 2F 43			sta K
   566 227E AD 30 43			lda K+1
   567 2281 6D 32 43			adc PRIME+1
   568 2284 8D 30 43			sta K+1
   569 2287 4C 50 22			jmp l_00E8
   570 228A			l_00F6
   571
   572 				; optimize FAIL (0, examples\sieve.pas), line = 39
   573 228A EE 2B 43 D0 03 EE + 	inw COUNT
   574 2292			l_00CE
   575
   576 				; --- ForToDoEpilog
   577 2292 EE 2D 43 D0 03 EE + 	inw I						; inc ptr word [CounterAddress]
   578
   579 229A F0 03 4C F5 21		jne l_00AE
   580
   581 229F			l_00BA
   582
   583 				; optimize OK (examples\sieve.pas), line = 42
   584
   585 229F A5 14 8D 33 43		mva RTCLOK TIME
   586 22A4 A9 00 8D 34 43		mva #$00 TIME+1
   587
   588 				; optimize OK (examples\sieve.pas), line = 43
   589
   590 22A9 A9 22 8D 2F 02		mva #$22 SDMCTL
   591
   592 				; optimize FAIL (100, examples\sieve.pas), line = 44
   593 					@printSTRING #CODEORIGIN+$000D
   593 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   593 22AE A0 20		 LDY> CODEORIGIN+$000D
   593 22B0 A9 0D		 LDA< CODEORIGIN+$000D
   593 22B2 20 2E 20		 JSR @PRINTSTRING
   594 					@print #$9B
   594 				 LDY# $9B\ JSR @PRINT
   594 22B5 A0 9B		 LDY# $9B
   594 22B7 20 25 20		 JSR @PRINT
   595 					@print #$20
   595 				 LDY# $20\ JSR @PRINT
   595 22BA A0 20		 LDY# $20
   595 22BC 20 25 20		 JSR @PRINT
   596 22BF E8				inx
   597 22C0 AD 2B 43 95 98		mva COUNT :STACKORIGIN,x
   598 22C5 AD 2C 43 95 A8		mva COUNT+1 :STACKORIGIN+STACKWIDTH,x
   599 22CA 20 70 20			jsr @printWORD
   600 22CD CA				dex
   601 					@printSTRING #CODEORIGIN+$000F
   601 				 LDY> CODEORIGIN+$000F\ LDA< CODEORIGIN+$000F\ JSR @PRINTSTRING
   601 22CE A0 20		 LDY> CODEORIGIN+$000F
   601 22D0 A9 0F		 LDA< CODEORIGIN+$000F
   601 22D2 20 2E 20		 JSR @PRINTSTRING
   602
   603 				; optimize FAIL (100, examples\sieve.pas), line = 45
   604 					@printSTRING #CODEORIGIN+$000C
   604 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   604 22D5 A0 20		 LDY> CODEORIGIN+$000C
   604 22D7 A9 0C		 LDA< CODEORIGIN+$000C
   604 22D9 20 2E 20		 JSR @PRINTSTRING
   605 					@print #$9B
   605 				 LDY# $9B\ JSR @PRINT
   605 22DC A0 9B		 LDY# $9B
   605 22DE 20 25 20		 JSR @PRINT
   606 					@print #$20
   606 				 LDY# $20\ JSR @PRINT
   606 22E1 A0 20		 LDY# $20
   606 22E3 20 25 20		 JSR @PRINT
   607 22E6 E8				inx
   608 22E7 AD 33 43 95 98		mva TIME :STACKORIGIN,x
   609 22EC AD 34 43 95 A8		mva TIME+1 :STACKORIGIN+STACKWIDTH,x
   610 22F1 20 70 20			jsr @printWORD
   611 22F4 CA				dex
   612 					@printSTRING #CODEORIGIN+$001B
   612 				 LDY> CODEORIGIN+$001B\ LDA< CODEORIGIN+$001B\ JSR @PRINTSTRING
   612 22F5 A0 20		 LDY> CODEORIGIN+$001B
   612 22F7 A9 1B		 LDA< CODEORIGIN+$001B
   612 22F9 20 2E 20		 JSR @PRINTSTRING
   613
   614 				; optimize FAIL ('CRT.READKEY', examples\sieve.pas), line = 46
   615 22FC 20 8F 21			jsr CRT.READKEY
   616 22FF B5 98 8D 35 43		mva :STACKORIGIN,x KEY
   617 2304 CA				dex
   618
   619 				; ------------------------------------------------------------
   620
   621 = 1FFE			@FORTMP_0087	= $1FFE
   622 = 1FFE			@FORTMP_00AB	= $1FFE
   623 2305			@exit
   624 					.ifdef @new
   625 					@FreeMem #@VarData #@VarDataSize
   626 					eif
   627 2305 60				rts						; ret
   628 				.endl
   629 2306			l_002C
   630
   631 				; optimize FAIL ('SIEVEPROC', examples\sieve.pas), line = 50
   632 2306 20 A0 21			jsr SIEVEPROC
   633
   634 				; ------------------------------------------------------------
   635
   636 = 0014			RTCLOK	= $0014
   637 = 022F			SDMCTL	= $022F
   638 = 232C			adr.FLAGS	= DATAORIGIN+$000D
   639 2309			.var FLAGS	= adr.FLAGS .word
   640 = 432B			COUNT	= DATAORIGIN+$200C
   641 = 432D			I	= DATAORIGIN+$200E
   642 = 432F			K	= DATAORIGIN+$2010
   643 = 4331			PRIME	= DATAORIGIN+$2012
   644 = 4333			TIME	= DATAORIGIN+$2014
   645 = 4335			KEY	= DATAORIGIN+$2016
   646 2309			@exit
   647
   648 2309 A2 00		@halt	ldx #0
   649 230B 9A				txs
   650
   651 230C 60				rts
   652
   653 				; ------------------------------------------------------------
   654
   655 230D 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   656
   657 				; ------------------------------------------------------------
   658
   659 231D			.local	@DEFINES
   660 231D			ATARI
   661 				.endl
   662
   663 = 231D 2C 23		FLAGS
   663 				.endl							; MAIN
   664
   665 				; ------------------------------------------------------------
   666 				; ------------------------------------------------------------
   667
   668 				.macro	UNITINITIALIZATION
   669 				
   670 					.ifdef MAIN.SYSTEM.@UnitInit
   671 					jsr MAIN.SYSTEM.@UnitInit
   672 					eif
   673 				
   674 					.ifdef MAIN.DOS.@UnitInit
   675 					jsr MAIN.DOS.@UnitInit
   676 					eif
   677 				
   678 					.ifdef MAIN.STRUTILS.@UnitInit
   679 					jsr MAIN.STRUTILS.@UnitInit
   680 					eif
   681 				
   682 					.ifdef MAIN.SYSUTILS.@UnitInit
   683 					jsr MAIN.SYSUTILS.@UnitInit
   684 					eif
   685 				
   686 					.ifdef MAIN.ATARI.@UnitInit
   687 					jsr MAIN.ATARI.@UnitInit
   688 					eif
   689 				
   690 					.ifdef MAIN.CRT.@UnitInit
   691 					jsr MAIN.CRT.@UnitInit
   692 					eif
   693 				.endm
   694
   695 				; ------------------------------------------------------------
   696
   697 					ift .SIZEOF(MAIN.SYSTEM) > 0
   698 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   698 				SYSTEM: $218B..$218E
   699 					eif
   700
   701 					ift .SIZEOF(MAIN.DOS) > 0
   702 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   703 					eif
   704
   705 					ift .SIZEOF(MAIN.STRUTILS) > 0
   706 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   707 					eif
   708
   709 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   710 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   711 					eif
   712
   713 					ift .SIZEOF(MAIN.ATARI) > 0
   714 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   715 					eif
   716
   717 					ift .SIZEOF(MAIN.CRT) > 0
   718 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   718 				CRT: $218F..$219F
   719 					eif
   720
   721 					.print 'CODE: ',CODEORIGIN,'..',*-1
   721 				CODE: $2000..$231E
   722
   723 				; ------------------------------------------------------------
   724
   725 231F			DATAORIGIN
   726 231F 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   727
   728 = 0006			VARINITSIZE	= *-DATAORIGIN
   729 = 2017			VARDATASIZE	= 8215
   730
   731 = 4336			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   732
   733 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   733 				DATA: $231F..$4336
   734
   735 02E0-02E1> 5F 21			run START
   736
   737 				; ------------------------------------------------------------
   738
   739 				.macro	STATICDATA
   740 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $00 $00 $0A  $20 $50 $52 $49 $4D $45 $53 $20
   741 				.by  $49 $4E $00 $08 $20 $4A $49 $46  $46 $49 $45 $53 $00
   742 				.endm
   743
   744 					end
