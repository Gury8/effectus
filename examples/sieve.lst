mads 2.1.0
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $2025..$215F
    97
    98 				; ------------------------------------------------------------
    99
   100 215F			START
   101 215F BA				tsx
   102 2160 8E FE 22			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 2011			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 2319			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 					ldx #256-VLEN
   115 					lda #0
   116 					sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   118 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   118 2163 A9 19 85 86 A9 23 +  MWA #VADR @FILL.PTR1
   118 216B A9 11 85 8A A9 20 +  MWA #VLEN @FILL.PTR3
   118 2173 A9 00 85 82		 MVA #0 @FILL.PTR2
   118 2177 20 17 21		 JSR @FILL
   119 					eif
   120
   121 217A A2 0F			ldx #$0f
   122 217C BD 40 03 9D 01 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 2185 E8				inx		; X = 0 !!!
   125 2186 86 8E			stx bp		; lo BP = 0
   126
   127 2188				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: sieve.a65]
Source: sieve.a65
   128
   129 2188			.local	MAIN						; PROCEDURE
   130
   131 2188 4C FA 22			jmp l_002C
   132
   133 				; ------------------------------------------------------------
   134
   135 218B			.local	SYSTEM						; UNIT
   136
   137 				; ------------------------------------------------------------
   138
   139 = 0648			M_PI_2	= $0648
   140 = 0192			D_PI_2	= $0192
   141 = 0004			D_PI_180	= $0004
   142 = 0000			MGTIA	= $0000
   143 = 0080			MVBXE	= $0080
   144 = 0000			VBXE_XDLADR	= $0000
   145 = 0100			VBXE_BCBADR	= $0100
   146 = 1000			VBXE_MAPADR	= $1000
   147 = 5000			VBXE_OVRADR	= $5000
   148 = B000			VBXE_WINDOW	= $B000
   149 = 0000			IDLI	= $0000
   150 = 0001			IVBL	= $0001
   151 = 00FE			CH_DELCHR	= $00FE
   152 = 009B			CH_ENTER	= $009B
   153 = 001B			CH_ESC	= $001B
   154 = 001C			CH_CURS_UP	= $001C
   155 = 001D			CH_CURS_DOWN	= $001D
   156 = 001E			CH_CURS_LEFT	= $001E
   157 = 001F			CH_CURS_RIGHT	= $001F
   158 = 007F			CH_TAB	= $007F
   159 = 009B			CH_EOL	= $009B
   160 = 007D			CH_CLR	= $007D
   161 = 00FD			CH_BELL	= $00FD
   162 = 007E			CH_DEL	= $007E
   163 = 009C			CH_DELLINE	= $009C
   164 = 009D			CH_INSLINE	= $009D
   165 = 0000			COLOR_BLACK	= $0000
   166 = 000E			COLOR_WHITE	= $000E
   167 = 0032			COLOR_RED	= $0032
   168 = 0096			COLOR_CYAN	= $0096
   169 = 0068			COLOR_VIOLET	= $0068
   170 = 00C4			COLOR_GREEN	= $00C4
   171 = 0074			COLOR_BLUE	= $0074
   172 = 00EE			COLOR_YELLOW	= $00EE
   173 = 0028			COLOR_ORANGE	= $0028
   174 = 00E4			COLOR_BROWN	= $00E4
   175 = 003C			COLOR_LIGHTRED	= $003C
   176 = 0004			COLOR_GRAY1	= $0004
   177 = 0006			COLOR_GRAY2	= $0006
   178 = 000A			COLOR_GRAY3	= $000A
   179 = 00CC			COLOR_LIGHTGREEN	= $00CC
   180 = 007C			COLOR_LIGHTBLUE	= $007C
   181 = 0004			FMOPENREAD	= $0004
   182 = 0008			FMOPENWRITE	= $0008
   183 = 0009			FMOPENAPPEND	= $0009
   184 = 000C			FMOPENREADWRITE	= $000C
   185 = 2313			SCREENWIDTH	= DATAORIGIN+$0000
   186 = 2315			SCREENHEIGHT	= DATAORIGIN+$0002
   187 = 2317			DATESEPARATOR	= DATAORIGIN+$0004
   188 = D014			TVSYSTEM	= $D014
   189 = 02C0			adr.PALETTE	= $02C0
   190 218B			.var PALETTE	= adr.PALETTE .word
   191 = D012			adr.HPALETTE	= $D012
   192 218B			.var HPALETTE	= adr.HPALETTE .word
   193 = 2318			FILEMODE	= DATAORIGIN+$0005
   194 = 2319			SCREENMODE	= DATAORIGIN+$0006
   195 = 231A			IORESULT	= DATAORIGIN+$0007
   196 = 231B			EOLN	= DATAORIGIN+$0008
   197 = 231C			RNDSEED	= DATAORIGIN+$0009
   198
   199 = 218B C0 02		PALETTE
   199 = 218D 12 D0		HPALETTE
   199 				.endl							; UNIT SYSTEM
   200
   201 				; ------------------------------------------------------------
   202
   203 218F			.local	DOS						; UNIT
   204
   205 				; ------------------------------------------------------------
   206
   207 = D014			PALNTSC	= $D014
   208
   209 				.endl							; UNIT DOS
   210
   211 				; ------------------------------------------------------------
   212
   213 218F			.local	STRUTILS					; UNIT
   214
   215 				; ------------------------------------------------------------
   216
   217 				.endl							; UNIT STRUTILS
   218
   219 				; ------------------------------------------------------------
   220
   221 218F			.local	SYSUTILS					; UNIT
   222
   223 				; ------------------------------------------------------------
   224
   225 = 0001			FAREADONLY	= $0001
   226 = 0002			FAHIDDEN	= $0002
   227 = 0004			FASYSFILE	= $0004
   228 = 0008			FAVOLUMEID	= $0008
   229 = 0010			FADIRECTORY	= $0010
   230 = 0020			FAARCHIVE	= $0020
   231 = 003F			FAANYFILE	= $003F
   232
   233 				.endl							; UNIT SYSUTILS
   234
   235 				; ------------------------------------------------------------
   236
   237 218F			.local	ATARI						; UNIT
   238
   239 				; ------------------------------------------------------------
   240
   241 = 0012			RTCLOK	= $0012
   242 = 004D			ATRACT	= $004D
   243 = 0052			LMARGIN	= $0052
   244 = 0053			RMARGIN	= $0053
   245 = 0054			ROWCRS	= $0054
   246 = 0055			COLCRS	= $0055
   247 = 0057			DINDEX	= $0057
   248 = 0058			SAVMSC	= $0058
   249 = 006A			RAMTOP	= $006A
   250 = 0200			VDSLST	= $0200
   251 = 0230			SDLSTL	= $0230
   252 = 0290			TXTROW	= $0290
   253 = 0291			TXTCOL	= $0291
   254 = 0293			TINDEX	= $0293
   255 = 0294			TXTMSC	= $0294
   256 = 022F			SDMCTL	= $022F
   257 = 026F			GPRIOR	= $026F
   258 = 02F0			CRSINH	= $02F0
   259 = 02F3			CHACT	= $02F3
   260 = 02F4			CHBAS	= $02F4
   261 = 02FC			CH	= $02FC
   262 = 02C0			PCOLR0	= $02C0
   263 = 02C1			PCOLR1	= $02C1
   264 = 02C2			PCOLR2	= $02C2
   265 = 02C3			PCOLR3	= $02C3
   266 = 02C4			COLOR0	= $02C4
   267 = 02C5			COLOR1	= $02C5
   268 = 02C6			COLOR2	= $02C6
   269 = 02C7			COLOR3	= $02C7
   270 = 02C8			COLOR4	= $02C8
   271 = 02C8			COLBAKS	= $02C8
   272 = D000			HPOSP0	= $D000
   273 = D001			HPOSP1	= $D001
   274 = D002			HPOSP2	= $D002
   275 = D003			HPOSP3	= $D003
   276 = D004			HPOSM0	= $D004
   277 = D005			HPOSM1	= $D005
   278 = D006			HPOSM2	= $D006
   279 = D007			HPOSM3	= $D007
   280 = D008			SIZEP0	= $D008
   281 = D009			SIZEP1	= $D009
   282 = D00A			SIZEP2	= $D00A
   283 = D00B			SIZEP3	= $D00B
   284 = D00C			SIZEM	= $D00C
   285 = D00D			GRAFP0	= $D00D
   286 = D00E			GRAFP1	= $D00E
   287 = D00F			GRAFP2	= $D00F
   288 = D010			GRAFP3	= $D010
   289 = D011			GRAFM	= $D011
   290 = D004			P0PF	= $D004
   291 = D014			PAL	= $D014
   292 = D012			COLPM0	= $D012
   293 = D013			COLPM1	= $D013
   294 = D014			COLPM2	= $D014
   295 = D015			COLPM3	= $D015
   296 = D016			COLPF0	= $D016
   297 = D017			COLPF1	= $D017
   298 = D018			COLPF2	= $D018
   299 = D019			COLPF3	= $D019
   300 = D01A			COLBK	= $D01A
   301 = D01B			PRIOR	= $D01B
   302 = D01D			GRACTL	= $D01D
   303 = D01E			HITCLR	= $D01E
   304 = D200			AUDF1	= $D200
   305 = D201			AUDC1	= $D201
   306 = D202			AUDF2	= $D202
   307 = D203			AUDC2	= $D203
   308 = D204			AUDF3	= $D204
   309 = D205			AUDC3	= $D205
   310 = D206			AUDF4	= $D206
   311 = D207			AUDC4	= $D207
   312 = D208			AUDCTL	= $D208
   313 = D20F			SKSTAT	= $D20F
   314 = D301			PORTB	= $D301
   315 = D400			DMACTL	= $D400
   316 = D401			CHACTL	= $D401
   317 = D402			DLISTL	= $D402
   318 = D404			HSCROL	= $D404
   319 = D405			VSCROL	= $D405
   320 = D407			PMBASE	= $D407
   321 = D409			CHBASE	= $D409
   322 = D40A			WSYNC	= $D40A
   323 = D40B			VCOUNT	= $D40B
   324 = D40C			PENH	= $D40C
   325 = D40D			PENV	= $D40D
   326 = D40E			NMIEN	= $D40E
   327
   328 				.endl							; UNIT ATARI
   329
   330 				; ------------------------------------------------------------
   331
   332 218F			.local	CRT						; UNIT
   333
   334 218F			.local	READKEY						; FUNCTION | ASSEMBLER
   335
   336 				; ---------------------  ASM Block 063  ---------------------
   337
   338 218F 8A 48			txa:pha
   339
   340 2191 20 07 21			@GetKey
   341
   342 2194 8D 1F 23			sta Result
   343
   344 2197 68 AA			pla:tax
   345
   346 2199			@exit
   347
   348 				; ------------------------------------------------------------
   349
   350 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   351 				; as Pointer
   352
   353 2199 E8				inx						; add bx, 1
   354 219A AD 1F 23 95 98		mva RESULT :STACKORIGIN,x
   355
   356 					.ifdef @new
   357 					@FreeMem #@VarData #@VarDataSize
   358 					eif
   359
   360 				; ------------------------------------------------------------
   361
   362 = 231F			RESULT	= DATAORIGIN+$000C
   363
   364 = 231F			@VarData	= RESULT
   365 = 0001			@VarDataSize	= 1
   366
   367 219F 60				rts						; ret
   368 				.endl
   369
   370 				; ------------------------------------------------------------
   371
   372 = 231E			TEXTATTR	= DATAORIGIN+$000B
   373 = D01F			CONSOL	= $D01F
   374 = 0000			CN_START_SELECT_OPTION	= $0000
   375 = 0001			CN_SELECT_OPTION	= $0001
   376 = 0002			CN_START_OPTION	= $0002
   377 = 0003			CN_OPTION	= $0003
   378 = 0004			CN_START_SELECT	= $0004
   379 = 0005			CN_SELECT	= $0005
   380 = 0006			CN_START	= $0006
   381 = 0007			CN_NONE	= $0007
   382 = 0000			BW40	= $0000
   383 = 0001			CO40	= $0001
   384 = 0002			BW80	= $0002
   385 = 0003			CO80	= $0003
   386 = 0007			MONO	= $0007
   387 = 0001			C40	= $0001
   388 = 0003			C80	= $0003
   389 = 0000			BLACK	= $0000
   390 = 0001			BLUE	= $0001
   391 = 0002			GREEN	= $0002
   392 = 0003			CYAN	= $0003
   393 = 0004			RED	= $0004
   394 = 0005			MAGENTA	= $0005
   395 = 0006			BROWN	= $0006
   396 = 0007			LIGHTGRAY	= $0007
   397 = 0008			DARKGRAY	= $0008
   398 = 0009			LIGHTBLUE	= $0009
   399 = 000A			LIGHTGREEN	= $000A
   400 = 000B			LIGHTCYAN	= $000B
   401 = 000C			LIGHTRED	= $000C
   402 = 000D			LIGHTMAGENTA	= $000D
   403 = 000E			YELLOW	= $000E
   404 = 000F			WHITE	= $000F
   405 = 0080			BLINK	= $0080
   406
   407 				.endl							; UNIT CRT
   408
   409 21A0			.local	SIEVEPROC					; PROCEDURE
   410
   411 				; optimize OK (examples\sieve.pas), line = 23
   412
   413 21A0 A9 00 8D 2F 02		mva #$00 SDMCTL
   414
   415 				; optimize OK (examples\sieve.pas), line = 24
   416
   417 21A5 85 14			sta RTCLOK
   418
   419 				; optimize OK (examples\sieve.pas), line = 25
   420
   421 21A7 8D 1F 43			sta COUNT
   422 21AA 8D 20 43			sta COUNT+1
   423 				; --- For
   424
   425 				; optimize OK (examples\sieve.pas), line = 26
   426
   427 21AD 8D 21 43			sta I
   428 21B0 8D 22 43			sta I+1
   429
   430 				; optimize OK (examples\sieve.pas), line = 26
   431
   432 				; --- To
   433 21B3			l_0086
   434
   435 				; --- ForToDoCondition
   436
   437 				; optimize OK (examples\sieve.pas), line = 26
   438
   439 21B3 AD 22 43			lda I+1
   440 21B6 C9 1F			cmp #$1F
   441 21B8 D0 05			bne @+
   442 21BA AD 21 43			lda I
   443 21BD C9 FE			cmp #$FE
   444 21BF			@
   445 21BF 90 02			scc
   446 21C1 D0 1E			jne l_0092
   447
   448 				; optimize OK (examples\sieve.pas), line = 27
   449
   450 21C3 AD 11 23			lda FLAGS
   451 21C6 18 6D 21 43			add I
   452 21CA A8				tay
   453 21CB AD 12 23			lda FLAGS+1
   454 21CE 6D 22 43			adc I+1
   455 21D1 85 8F			sta :bp+1
   456 21D3 A9 54			lda #$54
   457 21D5 91 8E			sta (:bp),y
   458
   459 				; --- ForToDoEpilog
   460 21D7 EE 21 43 D0 03 EE + 	inw I						; inc ptr word [CounterAddress]
   461
   462 21DF D0 D2			jne l_0086
   463
   464 21E1			l_0092
   465 				; --- For
   466
   467 				; optimize OK (examples\sieve.pas), line = 29
   468
   469 21E1 A9 00 8D 21 43		mva #$00 I
   470 21E6 8D 22 43			sta I+1
   471
   472 				; optimize OK (examples\sieve.pas), line = 29
   473
   474 				; --- To
   475 21E9			l_00A6
   476
   477 				; --- ForToDoCondition
   478
   479 				; optimize OK (examples\sieve.pas), line = 29
   480
   481 21E9 AD 22 43			lda I+1
   482 21EC C9 1F			cmp #$1F
   483 21EE D0 05			bne @+
   484 21F0 AD 21 43			lda I
   485 21F3 C9 FE			cmp #$FE
   486 21F5			@
   487 21F5 90 05			scc
   488 21F7 F0 03 4C 93 22		jne l_00B2
   489
   490 				; optimize OK (examples\sieve.pas), line = 30
   491
   492 21FC AD 11 23			lda FLAGS
   493 21FF 18 6D 21 43			add I
   494 2203 A8				tay
   495 2204 AD 12 23			lda FLAGS+1
   496 2207 6D 22 43			adc I+1
   497 220A 85 8F			sta :bp+1
   498 220C B1 8E			lda (:bp),y
   499 220E C9 54			cmp #$54
   500 2210 D0 74			jne l_00C6
   501
   502 				; optimize OK (examples\sieve.pas), line = 31
   503
   504 2212 AD 21 43			lda I
   505 2215 18 6D 21 43			add I
   506 2219 85 A1			sta :STACKORIGIN+9
   507 221B AD 22 43			lda I+1
   508 221E 6D 22 43			adc I+1
   509 2221 8D 26 43			sta PRIME+1
   510 2224 A5 A1			lda :STACKORIGIN+9
   511 2226 18 69 03			add #$03
   512 2229 8D 25 43			sta PRIME
   513 222C 90 03			scc
   514 222E EE 26 43			inc PRIME+1
   515
   516 				; optimize OK (examples\sieve.pas), line = 32
   517
   518 2231 AD 21 43			lda I
   519 2234 18 6D 25 43			add PRIME
   520 2238 8D 23 43			sta K
   521 223B AD 22 43			lda I+1
   522 223E 6D 26 43			adc PRIME+1
   523 2241 8D 24 43			sta K+1
   524
   525 				; --- WhileProlog
   526 2244			l_00E0
   527
   528 				; optimize OK (examples\sieve.pas), line = 33
   529
   530 2244 AD 24 43			lda K+1
   531 2247 C9 1F			cmp #$1F
   532 2249 D0 05			bne @+
   533 224B AD 23 43			lda K
   534 224E C9 FE			cmp #$FE
   535 2250			@
   536 2250 90 02			bcc @+
   537 2252 D0 2A			jne l_00EE
   538 2254			@
   539
   540 				; optimize OK (examples\sieve.pas), line = 34
   541
   542 2254 AD 11 23			lda FLAGS
   543 2257 18 6D 23 43			add K
   544 225B A8				tay
   545 225C AD 12 23			lda FLAGS+1
   546 225F 6D 24 43			adc K+1
   547 2262 85 8F			sta :bp+1
   548 2264 A9 46			lda #$46
   549 2266 91 8E			sta (:bp),y
   550
   551 				; optimize OK (examples\sieve.pas), line = 35
   552
   553 2268 AD 23 43			lda K
   554 226B 18 6D 25 43			add PRIME
   555 226F 8D 23 43			sta K
   556 2272 AD 24 43			lda K+1
   557 2275 6D 26 43			adc PRIME+1
   558 2278 8D 24 43			sta K+1
   559 227B 4C 44 22			jmp l_00E0
   560 227E			l_00EE
   561
   562 				; optimize FAIL (0, examples\sieve.pas), line = 37
   563 227E EE 1F 43 D0 03 EE + 	inw COUNT
   564 2286			l_00C6
   565
   566 				; --- ForToDoEpilog
   567 2286 EE 21 43 D0 03 EE + 	inw I						; inc ptr word [CounterAddress]
   568
   569 228E F0 03 4C E9 21		jne l_00A6
   570
   571 2293			l_00B2
   572
   573 				; optimize OK (examples\sieve.pas), line = 40
   574
   575 2293 A5 14 8D 27 43		mva RTCLOK TIME
   576 2298 A9 00 8D 28 43		mva #$00 TIME+1
   577
   578 				; optimize OK (examples\sieve.pas), line = 41
   579
   580 229D A9 22 8D 2F 02		mva #$22 SDMCTL
   581
   582 				; optimize FAIL (100, examples\sieve.pas), line = 42
   583 					@printSTRING #CODEORIGIN+$000D
   583 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   583 22A2 A0 20		 LDY> CODEORIGIN+$000D
   583 22A4 A9 0D		 LDA< CODEORIGIN+$000D
   583 22A6 20 2E 20		 JSR @PRINTSTRING
   584 					@print #$9B
   584 				 LDY# $9B\ JSR @PRINT
   584 22A9 A0 9B		 LDY# $9B
   584 22AB 20 25 20		 JSR @PRINT
   585 					@print #$20
   585 				 LDY# $20\ JSR @PRINT
   585 22AE A0 20		 LDY# $20
   585 22B0 20 25 20		 JSR @PRINT
   586 22B3 E8				inx
   587 22B4 AD 1F 43 95 98		mva COUNT :STACKORIGIN,x
   588 22B9 AD 20 43 95 A8		mva COUNT+1 :STACKORIGIN+STACKWIDTH,x
   589 22BE 20 70 20			jsr @printWORD
   590 22C1 CA				dex
   591 					@printSTRING #CODEORIGIN+$000F
   591 				 LDY> CODEORIGIN+$000F\ LDA< CODEORIGIN+$000F\ JSR @PRINTSTRING
   591 22C2 A0 20		 LDY> CODEORIGIN+$000F
   591 22C4 A9 0F		 LDA< CODEORIGIN+$000F
   591 22C6 20 2E 20		 JSR @PRINTSTRING
   592
   593 				; optimize FAIL (100, examples\sieve.pas), line = 43
   594 					@printSTRING #CODEORIGIN+$000C
   594 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   594 22C9 A0 20		 LDY> CODEORIGIN+$000C
   594 22CB A9 0C		 LDA< CODEORIGIN+$000C
   594 22CD 20 2E 20		 JSR @PRINTSTRING
   595 					@print #$9B
   595 				 LDY# $9B\ JSR @PRINT
   595 22D0 A0 9B		 LDY# $9B
   595 22D2 20 25 20		 JSR @PRINT
   596 					@print #$20
   596 				 LDY# $20\ JSR @PRINT
   596 22D5 A0 20		 LDY# $20
   596 22D7 20 25 20		 JSR @PRINT
   597 22DA E8				inx
   598 22DB AD 27 43 95 98		mva TIME :STACKORIGIN,x
   599 22E0 AD 28 43 95 A8		mva TIME+1 :STACKORIGIN+STACKWIDTH,x
   600 22E5 20 70 20			jsr @printWORD
   601 22E8 CA				dex
   602 					@printSTRING #CODEORIGIN+$001B
   602 				 LDY> CODEORIGIN+$001B\ LDA< CODEORIGIN+$001B\ JSR @PRINTSTRING
   602 22E9 A0 20		 LDY> CODEORIGIN+$001B
   602 22EB A9 1B		 LDA< CODEORIGIN+$001B
   602 22ED 20 2E 20		 JSR @PRINTSTRING
   603
   604 				; optimize FAIL ('CRT.READKEY', examples\sieve.pas), line = 44
   605 22F0 20 8F 21			jsr CRT.READKEY
   606 22F3 B5 98 8D 29 43		mva :STACKORIGIN,x KEY
   607 22F8 CA				dex
   608
   609 				; ------------------------------------------------------------
   610
   611 = 1FFE			@FORTMP_0083	= $1FFE
   612 = 1FFE			@FORTMP_00A3	= $1FFE
   613 22F9			@exit
   614 					.ifdef @new
   615 					@FreeMem #@VarData #@VarDataSize
   616 					eif
   617 22F9 60				rts						; ret
   618 				.endl
   619 22FA			l_002C
   620
   621 				; optimize FAIL ('SIEVEPROC', examples\sieve.pas), line = 48
   622 22FA 20 A0 21			jsr SIEVEPROC
   623
   624 				; ------------------------------------------------------------
   625
   626 = 0014			RTCLOK	= $0014
   627 = 022F			SDMCTL	= $022F
   628 = 2320			adr.FLAGS	= DATAORIGIN+$000D
   629 22FD			.var FLAGS	= adr.FLAGS .word
   630 = 431F			COUNT	= DATAORIGIN+$200C
   631 = 4321			I	= DATAORIGIN+$200E
   632 = 4323			K	= DATAORIGIN+$2010
   633 = 4325			PRIME	= DATAORIGIN+$2012
   634 = 4327			TIME	= DATAORIGIN+$2014
   635 = 4329			KEY	= DATAORIGIN+$2016
   636 22FD			@exit
   637
   638 22FD A2 00		@halt	ldx #0
   639 22FF 9A				txs
   640
   641 2300 60				rts
   642
   643 				; ------------------------------------------------------------
   644
   645 2301 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   646
   647 				; ------------------------------------------------------------
   648
   649 2311			.local	@DEFINES
   650 2311			ATARI
   651 				.endl
   652
   653 = 2311 20 23		FLAGS
   653 				.endl							; MAIN
   654
   655 				; ------------------------------------------------------------
   656 				; ------------------------------------------------------------
   657
   658 				.macro	UNITINITIALIZATION
   659 				
   660 					.ifdef MAIN.SYSTEM.@UnitInit
   661 					jsr MAIN.SYSTEM.@UnitInit
   662 					eif
   663 				
   664 					.ifdef MAIN.DOS.@UnitInit
   665 					jsr MAIN.DOS.@UnitInit
   666 					eif
   667 				
   668 					.ifdef MAIN.STRUTILS.@UnitInit
   669 					jsr MAIN.STRUTILS.@UnitInit
   670 					eif
   671 				
   672 					.ifdef MAIN.SYSUTILS.@UnitInit
   673 					jsr MAIN.SYSUTILS.@UnitInit
   674 					eif
   675 				
   676 					.ifdef MAIN.ATARI.@UnitInit
   677 					jsr MAIN.ATARI.@UnitInit
   678 					eif
   679 				
   680 					.ifdef MAIN.CRT.@UnitInit
   681 					jsr MAIN.CRT.@UnitInit
   682 					eif
   683 				.endm
   684
   685 				; ------------------------------------------------------------
   686
   687 					ift .SIZEOF(MAIN.SYSTEM) > 0
   688 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   688 				SYSTEM: $218B..$218E
   689 					eif
   690
   691 					ift .SIZEOF(MAIN.DOS) > 0
   692 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   693 					eif
   694
   695 					ift .SIZEOF(MAIN.STRUTILS) > 0
   696 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   697 					eif
   698
   699 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   700 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   701 					eif
   702
   703 					ift .SIZEOF(MAIN.ATARI) > 0
   704 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   705 					eif
   706
   707 					ift .SIZEOF(MAIN.CRT) > 0
   708 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   708 				CRT: $218F..$219F
   709 					eif
   710
   711 					.print 'CODE: ',CODEORIGIN,'..',*-1
   711 				CODE: $2000..$2312
   712
   713 				; ------------------------------------------------------------
   714
   715 2313			DATAORIGIN
   716 2313 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   717
   718 = 0006			VARINITSIZE	= *-DATAORIGIN
   719 = 2017			VARDATASIZE	= 8215
   720
   721 = 432A			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   722
   723 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   723 				DATA: $2313..$432A
   724
   725 02E0-02E1> 5F 21			run START
   726
   727 				; ------------------------------------------------------------
   728
   729 				.macro	STATICDATA
   730 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $00 $00 $0A  $20 $50 $52 $49 $4D $45 $53 $20
   731 				.by  $49 $4E $00 $08 $20 $4A $49 $46  $46 $49 $45 $53 $00
   732 				.endm
   733
   734 					end
