mads 2.1.0
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $200D..$2070
    97
    98 				; ------------------------------------------------------------
    99
   100 2070			START
   101 2070 BA				tsx
   102 2071 8E 66 23			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 0027			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 238D			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 2074 A2 D9			ldx #256-VLEN
   115 2076 A9 00			lda #0
   116 2078 9D B4 22 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   119 					eif
   120
   121 207E A2 0F			ldx #$0f
   122 2080 BD 40 03 9D 69 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 2089 E8				inx		; X = 0 !!!
   125 208A 86 8E			stx bp		; lo BP = 0
   126
   127 208C				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: locate_gr7.a65]
   128
   129 208C			.local	MAIN						; PROCEDURE
   130
   131 208C 4C 62 23			jmp l_0014
   132
   133 				; ------------------------------------------------------------
   134
   135 208F			.local	SYSTEM						; UNIT
   136
   137 				; ------------------------------------------------------------
   138
   139 = 0648			M_PI_2	= $0648
   140 = 0192			D_PI_2	= $0192
   141 = 0004			D_PI_180	= $0004
   142 = 0000			MGTIA	= $0000
   143 = 0080			MVBXE	= $0080
   144 = 0000			VBXE_XDLADR	= $0000
   145 = 0100			VBXE_BCBADR	= $0100
   146 = 1000			VBXE_MAPADR	= $1000
   147 = 5000			VBXE_OVRADR	= $5000
   148 = B000			VBXE_WINDOW	= $B000
   149 = 0000			IDLI	= $0000
   150 = 0001			IVBL	= $0001
   151 = 00FE			CH_DELCHR	= $00FE
   152 = 009B			CH_ENTER	= $009B
   153 = 001B			CH_ESC	= $001B
   154 = 001C			CH_CURS_UP	= $001C
   155 = 001D			CH_CURS_DOWN	= $001D
   156 = 001E			CH_CURS_LEFT	= $001E
   157 = 001F			CH_CURS_RIGHT	= $001F
   158 = 007F			CH_TAB	= $007F
   159 = 009B			CH_EOL	= $009B
   160 = 007D			CH_CLR	= $007D
   161 = 00FD			CH_BELL	= $00FD
   162 = 007E			CH_DEL	= $007E
   163 = 009C			CH_DELLINE	= $009C
   164 = 009D			CH_INSLINE	= $009D
   165 = 0000			COLOR_BLACK	= $0000
   166 = 000E			COLOR_WHITE	= $000E
   167 = 0032			COLOR_RED	= $0032
   168 = 0096			COLOR_CYAN	= $0096
   169 = 0068			COLOR_VIOLET	= $0068
   170 = 00C4			COLOR_GREEN	= $00C4
   171 = 0074			COLOR_BLUE	= $0074
   172 = 00EE			COLOR_YELLOW	= $00EE
   173 = 0028			COLOR_ORANGE	= $0028
   174 = 00E4			COLOR_BROWN	= $00E4
   175 = 003C			COLOR_LIGHTRED	= $003C
   176 = 0004			COLOR_GRAY1	= $0004
   177 = 0006			COLOR_GRAY2	= $0006
   178 = 000A			COLOR_GRAY3	= $000A
   179 = 00CC			COLOR_LIGHTGREEN	= $00CC
   180 = 007C			COLOR_LIGHTBLUE	= $007C
   181 = 0004			FMOPENREAD	= $0004
   182 = 0008			FMOPENWRITE	= $0008
   183 = 0009			FMOPENAPPEND	= $0009
   184 = 000C			FMOPENREADWRITE	= $000C
   185 = 2379			SCREENWIDTH	= DATAORIGIN+$0000
   186 = 237B			SCREENHEIGHT	= DATAORIGIN+$0002
   187 = 237D			DATESEPARATOR	= DATAORIGIN+$0004
   188 = D014			TVSYSTEM	= $D014
   189 = 02C0			adr.PALETTE	= $02C0
   190 208F			.var PALETTE	= adr.PALETTE .word
   191 = D012			adr.HPALETTE	= $D012
   192 208F			.var HPALETTE	= adr.HPALETTE .word
   193 = 237E			FILEMODE	= DATAORIGIN+$0005
   194 = 237F			SCREENMODE	= DATAORIGIN+$0006
   195 = 2380			IORESULT	= DATAORIGIN+$0007
   196 = 2381			EOLN	= DATAORIGIN+$0008
   197 = 2382			RNDSEED	= DATAORIGIN+$0009
   198
   199 = 208F C0 02		PALETTE
   199 = 2091 12 D0		HPALETTE
   199 				.endl							; UNIT SYSTEM
   200
   201 				; ------------------------------------------------------------
   202
   203 2093			.local	DOS						; UNIT
   204
   205 				; ------------------------------------------------------------
   206
   207 = D014			PALNTSC	= $D014
   208
   209 				.endl							; UNIT DOS
   210
   211 				; ------------------------------------------------------------
   212
   213 2093			.local	STRUTILS					; UNIT
   214
   215 				; ------------------------------------------------------------
   216
   217 				.endl							; UNIT STRUTILS
   218
   219 				; ------------------------------------------------------------
   220
   221 2093			.local	SYSUTILS					; UNIT
   222
   223 				; ------------------------------------------------------------
   224
   225 = 0001			FAREADONLY	= $0001
   226 = 0002			FAHIDDEN	= $0002
   227 = 0004			FASYSFILE	= $0004
   228 = 0008			FAVOLUMEID	= $0008
   229 = 0010			FADIRECTORY	= $0010
   230 = 0020			FAARCHIVE	= $0020
   231 = 003F			FAANYFILE	= $003F
   232
   233 				.endl							; UNIT SYSUTILS
   234
   235 				; ------------------------------------------------------------
   236
   237 2093			.local	ATARI						; UNIT
   238
   239 				; ------------------------------------------------------------
   240
   241 = 0012			RTCLOK	= $0012
   242 = 004D			ATRACT	= $004D
   243 = 0052			LMARGIN	= $0052
   244 = 0053			RMARGIN	= $0053
   245 = 0054			ROWCRS	= $0054
   246 = 0055			COLCRS	= $0055
   247 = 0057			DINDEX	= $0057
   248 = 0058			SAVMSC	= $0058
   249 = 006A			RAMTOP	= $006A
   250 = 0200			VDSLST	= $0200
   251 = 0230			SDLSTL	= $0230
   252 = 0290			TXTROW	= $0290
   253 = 0291			TXTCOL	= $0291
   254 = 0293			TINDEX	= $0293
   255 = 0294			TXTMSC	= $0294
   256 = 022F			SDMCTL	= $022F
   257 = 026F			GPRIOR	= $026F
   258 = 02F0			CRSINH	= $02F0
   259 = 02F3			CHACT	= $02F3
   260 = 02F4			CHBAS	= $02F4
   261 = 02FC			CH	= $02FC
   262 = 02C0			PCOLR0	= $02C0
   263 = 02C1			PCOLR1	= $02C1
   264 = 02C2			PCOLR2	= $02C2
   265 = 02C3			PCOLR3	= $02C3
   266 = 02C4			COLOR0	= $02C4
   267 = 02C5			COLOR1	= $02C5
   268 = 02C6			COLOR2	= $02C6
   269 = 02C7			COLOR3	= $02C7
   270 = 02C8			COLOR4	= $02C8
   271 = 02C8			COLBAKS	= $02C8
   272 = D000			HPOSP0	= $D000
   273 = D001			HPOSP1	= $D001
   274 = D002			HPOSP2	= $D002
   275 = D003			HPOSP3	= $D003
   276 = D004			HPOSM0	= $D004
   277 = D005			HPOSM1	= $D005
   278 = D006			HPOSM2	= $D006
   279 = D007			HPOSM3	= $D007
   280 = D008			SIZEP0	= $D008
   281 = D009			SIZEP1	= $D009
   282 = D00A			SIZEP2	= $D00A
   283 = D00B			SIZEP3	= $D00B
   284 = D00C			SIZEM	= $D00C
   285 = D00D			GRAFP0	= $D00D
   286 = D00E			GRAFP1	= $D00E
   287 = D00F			GRAFP2	= $D00F
   288 = D010			GRAFP3	= $D010
   289 = D011			GRAFM	= $D011
   290 = D004			P0PF	= $D004
   291 = D014			PAL	= $D014
   292 = D012			COLPM0	= $D012
   293 = D013			COLPM1	= $D013
   294 = D014			COLPM2	= $D014
   295 = D015			COLPM3	= $D015
   296 = D016			COLPF0	= $D016
   297 = D017			COLPF1	= $D017
   298 = D018			COLPF2	= $D018
   299 = D019			COLPF3	= $D019
   300 = D01A			COLBK	= $D01A
   301 = D01B			PRIOR	= $D01B
   302 = D01D			GRACTL	= $D01D
   303 = D01E			HITCLR	= $D01E
   304 = D200			AUDF1	= $D200
   305 = D201			AUDC1	= $D201
   306 = D202			AUDF2	= $D202
   307 = D203			AUDC2	= $D203
   308 = D204			AUDF3	= $D204
   309 = D205			AUDC3	= $D205
   310 = D206			AUDF4	= $D206
   311 = D207			AUDC4	= $D207
   312 = D208			AUDCTL	= $D208
   313 = D20F			SKSTAT	= $D20F
   314 = D301			PORTB	= $D301
   315 = D400			DMACTL	= $D400
   316 = D401			CHACTL	= $D401
   317 = D402			DLISTL	= $D402
   318 = D404			HSCROL	= $D404
   319 = D405			VSCROL	= $D405
   320 = D407			PMBASE	= $D407
   321 = D409			CHBASE	= $D409
   322 = D40A			WSYNC	= $D40A
   323 = D40B			VCOUNT	= $D40B
   324 = D40C			PENH	= $D40C
   325 = D40D			PENV	= $D40D
   326 = D40E			NMIEN	= $D40E
   327
   328 				.endl							; UNIT ATARI
   329
   330 				; ------------------------------------------------------------
   331
   332 2093			.local	CRT						; UNIT
   333
   334 2093			.local	READKEY						; FUNCTION | ASSEMBLER
   335
   336 				; ---------------------  ASM Block 063  ---------------------
   337
   338 2093 8A 48			txa:pha
   339
   340 2095 20 60 20			@GetKey
   341
   342 2098 8D 85 23			sta Result
   343
   344 209B 68 AA			pla:tax
   345
   346 209D			@exit
   347
   348 				; ------------------------------------------------------------
   349
   350 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   351 				; as Pointer
   352
   353 209D E8				inx						; add bx, 1
   354 209E AD 85 23 95 98		mva RESULT :STACKORIGIN,x
   355
   356 					.ifdef @new
   357 					@FreeMem #@VarData #@VarDataSize
   358 					eif
   359
   360 				; ------------------------------------------------------------
   361
   362 = 2385			RESULT	= DATAORIGIN+$000C
   363
   364 = 2385			@VarData	= RESULT
   365 = 0001			@VarDataSize	= 1
   366
   367 20A3 60				rts						; ret
   368 				.endl
   369
   370 				; ------------------------------------------------------------
   371
   372 = 2384			TEXTATTR	= DATAORIGIN+$000B
   373 = D01F			CONSOL	= $D01F
   374 = 0000			CN_START_SELECT_OPTION	= $0000
   375 = 0001			CN_SELECT_OPTION	= $0001
   376 = 0002			CN_START_OPTION	= $0002
   377 = 0003			CN_OPTION	= $0003
   378 = 0004			CN_START_SELECT	= $0004
   379 = 0005			CN_SELECT	= $0005
   380 = 0006			CN_START	= $0006
   381 = 0007			CN_NONE	= $0007
   382 = 0000			BW40	= $0000
   383 = 0001			CO40	= $0001
   384 = 0002			BW80	= $0002
   385 = 0003			CO80	= $0003
   386 = 0007			MONO	= $0007
   387 = 0001			C40	= $0001
   388 = 0003			C80	= $0003
   389 = 0000			BLACK	= $0000
   390 = 0001			BLUE	= $0001
   391 = 0002			GREEN	= $0002
   392 = 0003			CYAN	= $0003
   393 = 0004			RED	= $0004
   394 = 0005			MAGENTA	= $0005
   395 = 0006			BROWN	= $0006
   396 = 0007			LIGHTGRAY	= $0007
   397 = 0008			DARKGRAY	= $0008
   398 = 0009			LIGHTBLUE	= $0009
   399 = 000A			LIGHTGREEN	= $000A
   400 = 000B			LIGHTCYAN	= $000B
   401 = 000C			LIGHTRED	= $000C
   402 = 000D			LIGHTMAGENTA	= $000D
   403 = 000E			YELLOW	= $000E
   404 = 000F			WHITE	= $000F
   405 = 0080			BLINK	= $0080
   406
   407 				.endl							; UNIT CRT
   408
   409 				; ------------------------------------------------------------
   410
   411 20A4			.local	TYPES						; UNIT
   412
   413 				; ------------------------------------------------------------
   414
   415 				.endl							; UNIT TYPES
   416
   417 				; ------------------------------------------------------------
   418
   419 20A4			.local	GRAPH						; UNIT
   420
   421 20A4			.local	INITGRAPH_0068					; PROCEDURE | OVERLOAD
   422
   423 				; ------------------------------------------------------------
   424
   425 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   426 				; as Pointer
   427 20A4 B5 98 8D A3 23		mva :STACKORIGIN,x MODE
   428 20A9 CA				dex						; sub bx, 1
   429
   430 				; optimize OK (GRAPH), line = 73
   431
   432 20AA A9 00 8D 8E 23		mva #$00 GRAPHRESULT
   433
   434 				; optimize OK (GRAPH), line = 75
   435
   436 20AF AD A3 23 8D 7F 23		mva MODE SYSTEM.SCREENMODE
   437
   438 				; ---------------------  ASM Block 074  ---------------------
   439
   440
   441 20B5 8A 48			txa:pha
   442
   443 20B7 A9 2C 8D 4D 20		mva #$2c @putchar.vbxe
   444
   445 20BC AD A3 23			lda mode
   446 20BF 29 0F			and #$0f
   447 20C1 A8				tay
   448
   449 20C2 A2 60			ldx #$60	; 6*16
   450 20C4 AD A3 23			lda mode	; %00010000 with text window
   451 20C7 29 10			and #$10
   452 20C9 49 10			eor #$10
   453 20CB 09 02			ora #2		; read
   454
   455 					.nowarn @graphics
   455 20CD 20 1E 20		 JSR @GRAPHICS
   456 					
   457 					
   458 = EE6D			tlshc	equ $ee6d
   459
   460 20D0 A6 57			ldx dindex
   461 20D2 BC 6D EE			ldy tlshc,x
   462 20D5 A9 05			lda #5
   463 20D7 0A			shift	asl @
   464 20D8 88				dey
   465 20D9 D0 FC			bne shift
   466
   467 20DB 8D A2 23			sta SCANLINE_WIDTH
   468 					
   469
   470 				; Fox/TQA
   471
   472 = 0057			dindex	equ $57
   473 = EE7D			tmccn	equ $ee7d
   474 = EE8D			tmrcn	equ $ee8d
   475
   476 20DE A6 57			ldx dindex
   477 20E0 BD 7D EE			lda tmccn,x
   478 20E3 BC 8D EE			ldy tmrcn,x
   479 20E6 A2 00			ldx #0
   480 20E8 C9 40			cmp #<320
   481 20EA D0 01 E8			sne:inx
   482 				    
   483 				; X:A = horizontal resolution
   484 				; Y = vertical resolution
   485
   486 20ED 8D 79 23			sta MAIN.SYSTEM.ScreenWidth
   487 20F0 8E 7A 23			stx MAIN.SYSTEM.ScreenWidth+1
   488 					
   489 20F3 38 E9 01			sub #1
   490 20F6 8D 88 23			sta WIN_RIGHT
   491 20F9 8A				txa
   492 20FA E9 00			sbc #0
   493 20FC 8D 89 23			sta WIN_RIGHT+1
   494 					
   495 20FF 8C 7B 23			sty MAIN.SYSTEM.ScreenHeight
   496 2102 A9 00			lda #0
   497 2104 8D 7C 23			sta MAIN.SYSTEM.ScreenHeight+1
   498 					
   499 2107 8D 86 23			sta WIN_LEFT
   500 210A 8D 87 23			sta WIN_LEFT+1
   501 210D 8D 8A 23			sta WIN_TOP
   502 2110 8D 8B 23			sta WIN_TOP+1
   503
   504 2113 8D 8D 23			sta WIN_BOTTOM+1	
   505 2116 88				dey
   506 2117 8C 8C 23			sty WIN_BOTTOM
   507
   508 211A 68 AA			pla:tax
   509
   510
   511 				; ------------------------------------------------------------
   512
   513 = 23A3			MODE	= DATAORIGIN+$002A
   514
   515 = 23A3			@VarData	= MODE
   516 = 0001			@VarDataSize	= 1
   517
   518 211C			@exit
   519 					.ifdef @new
   520 					@FreeMem #@VarData #@VarDataSize
   521 					eif
   522 211C 60				rts						; ret
   523 				.endl
   524
   525 211D			.local	SETCOLOR					; PROCEDURE | ASSEMBLER
   526
   527 				; ------------------------------------------------------------
   528
   529 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   530 				; as Pointer
   531 211D B5 98 8D A4 23		mva :STACKORIGIN,x COLOR
   532 2122 CA				dex						; sub bx, 1
   533
   534 				; ---------------------  ASM Block 076  ---------------------
   535
   536 2123 AD A4 23 8D 17 20		mva color @COMMAND.colscr
   537 2129 8D 8F 23			sta GetColor
   538
   539
   540 				; ------------------------------------------------------------
   541
   542 = 23A4			COLOR	= DATAORIGIN+$002B
   543
   544 = 23A4			@VarData	= COLOR
   545 = 0001			@VarDataSize	= 1
   546
   547 212C			@exit
   548 					.ifdef @new
   549 					@FreeMem #@VarData #@VarDataSize
   550 					eif
   551 212C 60				rts						; ret
   552 				.endl
   553
   554 212D			.local	PUTPIXEL_007D					; PROCEDURE | ASSEMBLER | OVERLOAD
   555
   556 				; ------------------------------------------------------------
   557
   558 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   559 				; as Pointer
   560 212D B5 98 8D A7 23		mva :STACKORIGIN,x Y
   561 2132 B5 A8 8D A8 23		mva :STACKORIGIN+STACKWIDTH,x Y+1
   562 2137 CA				dex						; sub bx, 1
   563
   564 				; ------------------------------------------------------------
   565
   566 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   567 				; as Pointer
   568 2138 B5 98 8D A5 23		mva :STACKORIGIN,x X
   569 213D B5 A8 8D A6 23		mva :STACKORIGIN+STACKWIDTH,x X+1
   570 2142 CA				dex						; sub bx, 1
   571
   572 				; ---------------------  ASM Block 077  ---------------------
   573
   574 2143 8A 48			txa:pha
   575 				{
   576 2145 AD A8 23			lda y+1
   577 2148 30 33			bmi stop
   578 214A CD 7C 23			cmp MAIN.SYSTEM.ScreenHeight+1
   579 214D D0 06			bne sk0
   580 214F AD A7 23			lda y
   581 2152 CD 7B 23			cmp MAIN.SYSTEM.ScreenHeight
   582 2155			sk0
   583 2155 B0 26			bcs stop
   584
   585 2157 AD A6 23			lda x+1
   586 215A 30 21			bmi stop
   587 215C CD 7A 23			cmp MAIN.SYSTEM.ScreenWidth+1
   588 215F D0 06			bne sk1
   589 2161 AD A5 23			lda x
   590 2164 CD 79 23			cmp MAIN.SYSTEM.ScreenWidth
   591 2167			sk1
   592 2167 B0 14			bcs stop
   593
   594 2169 AD A5 23 85 55 AD + 	mwa x colcrs
   595 2173 AD A7 23 85 54		mva y rowcrs
   596
   597 2178 A9 09			lda #@IDput
   598
   599 217A 20 11 20			jsr @COMMAND
   600
   601 217D 68 AA		stop	pla:tax
   602
   603
   604 				; ------------------------------------------------------------
   605
   606 = 23A5			X	= DATAORIGIN+$002C
   607 = 23A7			Y	= DATAORIGIN+$002E
   608
   609 = 23A5			@VarData	= X
   610 = 0004			@VarDataSize	= 4
   611
   612 217F			@exit
   613 					.ifdef @new
   614 					@FreeMem #@VarData #@VarDataSize
   615 					eif
   616 217F 60				rts						; ret
   617 				.endl
   618
   619 2180			.local	GETPIXEL					; FUNCTION | ASSEMBLER
   620
   621 				; ------------------------------------------------------------
   622
   623 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   624 				; as Pointer
   625 2180 B5 98 8D AB 23		mva :STACKORIGIN,x Y
   626 2185 B5 A8 8D AC 23		mva :STACKORIGIN+STACKWIDTH,x Y+1
   627 218A CA				dex						; sub bx, 1
   628
   629 				; ------------------------------------------------------------
   630
   631 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   632 				; as Pointer
   633 218B B5 98 8D A9 23		mva :STACKORIGIN,x X
   634 2190 B5 A8 8D AA 23		mva :STACKORIGIN+STACKWIDTH,x X+1
   635 2195 CA				dex						; sub bx, 1
   636
   637 				; ---------------------  ASM Block 079  ---------------------
   638
   639 2196 8A 48			txa:pha
   640
   641 2198 A0 00			ldy #0
   642
   643 219A AD AC 23			lda y+1
   644 219D 30 34			bmi stop
   645 219F CD 7C 23			cmp MAIN.SYSTEM.ScreenHeight+1
   646 21A2 D0 06			bne sk0
   647 21A4 AD AB 23			lda y
   648 21A7 CD 7B 23			cmp MAIN.SYSTEM.ScreenHeight
   649 21AA			sk0
   650 21AA B0 27			bcs stop
   651
   652 21AC AD AA 23			lda x+1
   653 21AF 30 22			bmi stop
   654 21B1 CD 7A 23			cmp MAIN.SYSTEM.ScreenWidth+1
   655 21B4 D0 06			bne sk1
   656 21B6 AD A9 23			lda x
   657 21B9 CD 79 23			cmp MAIN.SYSTEM.ScreenWidth
   658 21BC			sk1
   659 21BC B0 15			bcs stop
   660
   661 21BE AD A9 23 85 55 AD + 	mwa x colcrs
   662 21C8 AD AB 23 85 54		mva y rowcrs
   663
   664 21CD A9 07			lda #@IDget
   665
   666 21CF 20 11 20			jsr @COMMAND
   667 21D2 A8				tay
   668
   669 21D3 8C AD 23		stop	sty Result
   670
   671 21D6 68 AA			pla:tax
   672
   673 21D8			@exit
   674
   675 				; ------------------------------------------------------------
   676
   677 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   678 				; as Pointer
   679
   680 21D8 E8				inx						; add bx, 1
   681 21D9 AD AD 23 95 98		mva RESULT :STACKORIGIN,x
   682
   683 					.ifdef @new
   684 					@FreeMem #@VarData #@VarDataSize
   685 					eif
   686
   687 				; ------------------------------------------------------------
   688
   689 = 23A9			X	= DATAORIGIN+$0030
   690 = 23AB			Y	= DATAORIGIN+$0032
   691 = 23AD			RESULT	= DATAORIGIN+$0034
   692
   693 = 23A9			@VarData	= X
   694 = 0005			@VarDataSize	= 5
   695
   696 21DE 60				rts						; ret
   697 				.endl
   698
   699 21DF			.local	MOVETO						; PROCEDURE | ASSEMBLER
   700
   701 				; ------------------------------------------------------------
   702
   703 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   704 				; as Pointer
   705 21DF B5 98 8D B0 23		mva :STACKORIGIN,x Y
   706 21E4 B5 A8 8D B1 23		mva :STACKORIGIN+STACKWIDTH,x Y+1
   707 21E9 CA				dex						; sub bx, 1
   708
   709 				; ------------------------------------------------------------
   710
   711 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   712 				; as Pointer
   713 21EA B5 98 8D AE 23		mva :STACKORIGIN,x X
   714 21EF B5 A8 8D AF 23		mva :STACKORIGIN+STACKWIDTH,x X+1
   715 21F4 CA				dex						; sub bx, 1
   716
   717 				; ---------------------  ASM Block 080  ---------------------
   718
   719 21F5 AD B1 23			lda y+1
   720 21F8 10 08			bpl _0
   721
   722 21FA A9 00			lda #0
   723 21FC 8D B0 23			sta y
   724 21FF 8D B1 23			sta y+1
   725 2202			_0
   726 2202 AD AF 23			lda x+1
   727 2205 10 08			bpl _1
   728
   729 2207 A9 00			lda #0
   730 2209 8D AE 23			sta x
   731 220C 8D AF 23			sta x+1
   732 220F			_1
   733 220F AD B1 23 CD 7C 23 + 	cpw y main.system.ScreenHeight
   734 221D 90 11			bcc _2
   735
   736 221F 38 AD 7B 23 E9 01 + 	sbw main.system.ScreenHeight #1 y
   737 2230			_2
   738 2230 AD AF 23 CD 7A 23 + 	cpw x main.system.ScreenWidth
   739 223E 90 11			bcc _3
   740
   741 2240 38 AD 79 23 E9 01 + 	sbw main.system.ScreenWidth #1 x
   742 2251			_3
   743 2251 AD AE 23 8D 9C 23 + 	mwa x CurrentX
   744 225D AD B0 23 8D 9E 23 + 	mwa y CurrentY
   745
   746
   747 				; ------------------------------------------------------------
   748
   749 = 23AE			X	= DATAORIGIN+$0035
   750 = 23B0			Y	= DATAORIGIN+$0037
   751
   752 = 23AE			@VarData	= X
   753 = 0004			@VarDataSize	= 4
   754
   755 2269			@exit
   756 					.ifdef @new
   757 					@FreeMem #@VarData #@VarDataSize
   758 					eif
   759 2269 60				rts						; ret
   760 				.endl
   761
   762 				; ------------------------------------------------------------
   763
   764 = FFFFFF80		CURRENTDRIVER	= $FFFFFF80
   765 = 0000			DETECT	= $0000
   766 = 0001			CGA	= $0001
   767 = 0002			MCGA	= $0002
   768 = 0003			EGA	= $0003
   769 = 0004			EGA64	= $0004
   770 = 0005			EGAMONO	= $0005
   771 = 0006			LOWRES	= $0006
   772 = 0007			HERCMONO	= $0007
   773 = 0009			VGA	= $0009
   774 = 000A			VESA	= $000A
   775 = 000B			D1BIT	= $000B
   776 = 000C			D2BIT	= $000C
   777 = 000D			D4BIT	= $000D
   778 = 000E			D6BIT	= $000E
   779 = 000F			D8BIT	= $000F
   780 = 0010			D12BIT	= $0010
   781 = 0018			M640X400	= $0018
   782 = 0018			M640X480	= $0018
   783 = 0000			GROK	= $0000
   784 = FFFFFFFF		GRNOINITGRAPH	= $FFFFFFFF
   785 = FFFFFFFE		GRNOTDETECTED	= $FFFFFFFE
   786 = FFFFFFFD		GRFILENOTFOUND	= $FFFFFFFD
   787 = FFFFFFFC		GRINVALIDDRIVER	= $FFFFFFFC
   788 = FFFFFFFB		GRNOLOADMEM	= $FFFFFFFB
   789 = FFFFFFFA		GRNOSCANMEM	= $FFFFFFFA
   790 = FFFFFFF9		GRNOFLOODMEM	= $FFFFFFF9
   791 = FFFFFFF8		GRFONTNOTFOUND	= $FFFFFFF8
   792 = FFFFFFF7		GRNOFONTMEM	= $FFFFFFF7
   793 = FFFFFFF6		GRINVALIDMODE	= $FFFFFFF6
   794 = FFFFFFF5		GRERROR	= $FFFFFFF5
   795 = FFFFFFF4		GRIOERROR	= $FFFFFFF4
   796 = FFFFFFF3		GRINVALIDFONT	= $FFFFFFF3
   797 = FFFFFFF2		GRINVALIDFONTNUM	= $FFFFFFF2
   798 = FFFFFFEE		GRINVALIDVERSION	= $FFFFFFEE
   799 = 0000			CGAC0	= $0000
   800 = 0001			CGAC1	= $0001
   801 = 0002			CGAC2	= $0002
   802 = 0003			CGAC3	= $0003
   803 = 0004			CGAHI	= $0004
   804 = 0000			MCGAC0	= $0000
   805 = 0001			MCGAC1	= $0001
   806 = 0002			MCGAC2	= $0002
   807 = 0003			MCGAC3	= $0003
   808 = 0004			MCGAMED	= $0004
   809 = 0005			MCGAHI	= $0005
   810 = 0000			EGALO	= $0000
   811 = 0001			EGAHI	= $0001
   812 = 0000			EGA64LO	= $0000
   813 = 0001			EGA64HI	= $0001
   814 = 0003			EGAMONOHI	= $0003
   815 = 000A			VGALO	= $000A
   816 = 001F			VGAMED	= $001F
   817 = 0018			VGAHI	= $0018
   818 = 2386			WIN_LEFT	= DATAORIGIN+$000D
   819 = 2388			WIN_RIGHT	= DATAORIGIN+$000F
   820 = 238A			WIN_TOP	= DATAORIGIN+$0011
   821 = 238C			WIN_BOTTOM	= DATAORIGIN+$0013
   822 = 238E			GRAPHRESULT	= DATAORIGIN+$0015
   823 = 238F			GETCOLOR	= DATAORIGIN+$0016
   824 = 2390			adr.LASTARCCOORDS	= DATAORIGIN+$0017
   825 226A			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   826 = 2390			LASTARCCOORDS.X	= DATAORIGIN+$0017
   827 = 2392			LASTARCCOORDS.Y	= DATAORIGIN+$0019
   828 = 2394			LASTARCCOORDS.XSTART	= DATAORIGIN+$001B
   829 = 2396			LASTARCCOORDS.YSTART	= DATAORIGIN+$001D
   830 = 2398			LASTARCCOORDS.XEND	= DATAORIGIN+$001F
   831 = 239A			LASTARCCOORDS.YEND	= DATAORIGIN+$0021
   832 = 239C			CURRENTX	= DATAORIGIN+$0023
   833 = 239E			CURRENTY	= DATAORIGIN+$0025
   834 = 23A0			VIDEORAM	= DATAORIGIN+$0027
   835 = 23A2			SCANLINE_WIDTH	= DATAORIGIN+$0029
   836
   837 = 226A 90 23		LASTARCCOORDS
   837 				.endl							; UNIT GRAPH
   838
   839 226C			.local	MAINPROC					; PROCEDURE
   840
   841 				; optimize FAIL ('GRAPH.INITGRAPH_0068', examples\locate_gr7.pas), line = 16
   842 226C E8				inx
   843 226D A9 07 95 98			mva #$07 :STACKORIGIN,x
   844 2271 20 A4 20			jsr GRAPH.INITGRAPH_0068
   845
   846 				; optimize FAIL ('GRAPH.SETCOLOR', examples\locate_gr7.pas), line = 17
   847 2274 E8				inx
   848 2275 A9 01 95 98			mva #$01 :STACKORIGIN,x
   849 2279 20 1D 21			jsr GRAPH.SETCOLOR
   850
   851 				; optimize FAIL ('GRAPH.PUTPIXEL_007D', examples\locate_gr7.pas), line = 18
   852 227C E8				inx
   853 227D A9 0A 95 98			mva #$0A :STACKORIGIN,x
   854 2281 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   855 2285 E8				inx
   856 2286 A9 0A 95 98			mva #$0A :STACKORIGIN,x
   857 228A A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   858 228E 20 2D 21			jsr GRAPH.PUTPIXEL_007D
   859
   860 				; optimize FAIL ('GRAPH.MOVETO', examples\locate_gr7.pas), line = 19
   861 2291 E8				inx
   862 2292 A9 0A 95 98			mva #$0A :STACKORIGIN,x
   863 2296 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   864 229A E8				inx
   865 229B A9 0A 95 98			mva #$0A :STACKORIGIN,x
   866 229F A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   867 22A3 20 DF 21			jsr GRAPH.MOVETO
   868
   869 				; optimize FAIL ('GRAPH.SETCOLOR', examples\locate_gr7.pas), line = 20
   870 22A6 E8				inx
   871 22A7 A9 02 95 98			mva #$02 :STACKORIGIN,x
   872 22AB 20 1D 21			jsr GRAPH.SETCOLOR
   873
   874 				; optimize FAIL ('GRAPH.PUTPIXEL_007D', examples\locate_gr7.pas), line = 21
   875 22AE E8				inx
   876 22AF A9 14 95 98			mva #$14 :STACKORIGIN,x
   877 22B3 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   878 22B7 E8				inx
   879 22B8 A9 14 95 98			mva #$14 :STACKORIGIN,x
   880 22BC A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   881 22C0 20 2D 21			jsr GRAPH.PUTPIXEL_007D
   882
   883 				; optimize FAIL ('GRAPH.MOVETO', examples\locate_gr7.pas), line = 22
   884 22C3 E8				inx
   885 22C4 A9 14 95 98			mva #$14 :STACKORIGIN,x
   886 22C8 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   887 22CC E8				inx
   888 22CD A9 14 95 98			mva #$14 :STACKORIGIN,x
   889 22D1 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   890 22D5 20 DF 21			jsr GRAPH.MOVETO
   891
   892 				; optimize FAIL ('GRAPH.SETCOLOR', examples\locate_gr7.pas), line = 23
   893 22D8 E8				inx
   894 22D9 A9 03 95 98			mva #$03 :STACKORIGIN,x
   895 22DD 20 1D 21			jsr GRAPH.SETCOLOR
   896
   897 				; optimize FAIL ('GRAPH.PUTPIXEL_007D', examples\locate_gr7.pas), line = 24
   898 22E0 E8				inx
   899 22E1 A9 1E 95 98			mva #$1E :STACKORIGIN,x
   900 22E5 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   901 22E9 E8				inx
   902 22EA A9 1E 95 98			mva #$1E :STACKORIGIN,x
   903 22EE A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   904 22F2 20 2D 21			jsr GRAPH.PUTPIXEL_007D
   905
   906 				; optimize FAIL ('GRAPH.MOVETO', examples\locate_gr7.pas), line = 25
   907 22F5 E8				inx
   908 22F6 A9 1E 95 98			mva #$1E :STACKORIGIN,x
   909 22FA A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   910 22FE E8				inx
   911 22FF A9 1E 95 98			mva #$1E :STACKORIGIN,x
   912 2303 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   913 2307 20 DF 21			jsr GRAPH.MOVETO
   914
   915 				; optimize FAIL ('GRAPH.GETPIXEL', examples\locate_gr7.pas), line = 26
   916 230A E8				inx
   917 230B A9 14 95 98			mva #$14 :STACKORIGIN,x
   918 230F A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   919 2313 E8				inx
   920 2314 A9 14 95 98			mva #$14 :STACKORIGIN,x
   921 2318 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   922 231C 20 80 21			jsr GRAPH.GETPIXEL
   923 231F B5 98 8D B3 23		mva :STACKORIGIN,x LOC
   924 2324 CA				dex
   925
   926 				; optimize FAIL ('GRAPH.SETCOLOR', examples\locate_gr7.pas), line = 27
   927 2325 E8				inx
   928 2326 AD B3 23 95 98		mva LOC :STACKORIGIN,x
   929 232B 20 1D 21			jsr GRAPH.SETCOLOR
   930
   931 				; optimize FAIL ('GRAPH.PUTPIXEL_007D', examples\locate_gr7.pas), line = 28
   932 232E E8				inx
   933 232F A9 3C 95 98			mva #$3C :STACKORIGIN,x
   934 2333 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   935 2337 E8				inx
   936 2338 A9 3C 95 98			mva #$3C :STACKORIGIN,x
   937 233C A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   938 2340 20 2D 21			jsr GRAPH.PUTPIXEL_007D
   939
   940 				; optimize FAIL ('GRAPH.MOVETO', examples\locate_gr7.pas), line = 29
   941 2343 E8				inx
   942 2344 A9 3C 95 98			mva #$3C :STACKORIGIN,x
   943 2348 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   944 234C E8				inx
   945 234D A9 3C 95 98			mva #$3C :STACKORIGIN,x
   946 2351 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   947 2355 20 DF 21			jsr GRAPH.MOVETO
   948
   949 				; optimize FAIL ('CRT.READKEY', examples\locate_gr7.pas), line = 30
   950 2358 20 93 20			jsr CRT.READKEY
   951 235B B5 98 8D B2 23		mva :STACKORIGIN,x KEY
   952 2360 CA				dex
   953
   954 				; ------------------------------------------------------------
   955
   956 = 23B2			KEY	= DATAORIGIN+$0039
   957 = 23B3			LOC	= DATAORIGIN+$003A
   958
   959 = 23B2			@VarData	= KEY
   960 = 0002			@VarDataSize	= 2
   961
   962 2361			@exit
   963 					.ifdef @new
   964 					@FreeMem #@VarData #@VarDataSize
   965 					eif
   966 2361 60				rts						; ret
   967 				.endl
   968 2362			l_0014
   969
   970 				; optimize FAIL ('MAINPROC', examples\locate_gr7.pas), line = 34
   971 2362 20 6C 22			jsr MAINPROC
   972
   973 				; ------------------------------------------------------------
   974
   975 2365			@exit
   976
   977 2365 A2 00		@halt	ldx #0
   978 2367 9A				txs
   979
   980 2368 60				rts
   981
   982 				; ------------------------------------------------------------
   983
   984 2369 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   985
   986 				; ------------------------------------------------------------
   987
   988 2379			.local	@DEFINES
   989 2379			ATARI
   990 				.endl
   991
   992 				.endl							; MAIN
   993
   994 				; ------------------------------------------------------------
   995 				; ------------------------------------------------------------
   996
   997 				.macro	UNITINITIALIZATION
   998 				
   999 					.ifdef MAIN.SYSTEM.@UnitInit
  1000 					jsr MAIN.SYSTEM.@UnitInit
  1001 					eif
  1002 				
  1003 					.ifdef MAIN.DOS.@UnitInit
  1004 					jsr MAIN.DOS.@UnitInit
  1005 					eif
  1006 				
  1007 					.ifdef MAIN.STRUTILS.@UnitInit
  1008 					jsr MAIN.STRUTILS.@UnitInit
  1009 					eif
  1010 				
  1011 					.ifdef MAIN.SYSUTILS.@UnitInit
  1012 					jsr MAIN.SYSUTILS.@UnitInit
  1013 					eif
  1014 				
  1015 					.ifdef MAIN.ATARI.@UnitInit
  1016 					jsr MAIN.ATARI.@UnitInit
  1017 					eif
  1018 				
  1019 					.ifdef MAIN.CRT.@UnitInit
  1020 					jsr MAIN.CRT.@UnitInit
  1021 					eif
  1022 				
  1023 					.ifdef MAIN.TYPES.@UnitInit
  1024 					jsr MAIN.TYPES.@UnitInit
  1025 					eif
  1026 				
  1027 					.ifdef MAIN.GRAPH.@UnitInit
  1028 					jsr MAIN.GRAPH.@UnitInit
  1029 					eif
  1030 				.endm
  1031
  1032 				; ------------------------------------------------------------
  1033
  1034 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1035 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1035 				SYSTEM: $208F..$2092
  1036 					eif
  1037
  1038 					ift .SIZEOF(MAIN.DOS) > 0
  1039 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
  1040 					eif
  1041
  1042 					ift .SIZEOF(MAIN.STRUTILS) > 0
  1043 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
  1044 					eif
  1045
  1046 					ift .SIZEOF(MAIN.SYSUTILS) > 0
  1047 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
  1048 					eif
  1049
  1050 					ift .SIZEOF(MAIN.ATARI) > 0
  1051 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1052 					eif
  1053
  1054 					ift .SIZEOF(MAIN.CRT) > 0
  1055 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1055 				CRT: $2093..$20A3
  1056 					eif
  1057
  1058 					ift .SIZEOF(MAIN.TYPES) > 0
  1059 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
  1060 					eif
  1061
  1062 					ift .SIZEOF(MAIN.GRAPH) > 0
  1063 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
  1063 				GRAPH: $20A4..$226B
  1064 					eif
  1065
  1066 					.print 'CODE: ',CODEORIGIN,'..',*-1
  1066 				CODE: $2000..$2378
  1067
  1068 				; ------------------------------------------------------------
  1069
  1070 2379			DATAORIGIN
  1071 2379 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $27  $00 $00 $00 $17
  1072
  1073 = 0014			VARINITSIZE	= *-DATAORIGIN
  1074 = 003B			VARDATASIZE	= 59
  1075
  1076 = 23B4			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1077
  1078 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1078 				DATA: $2379..$23B4
  1079
  1080 02E0-02E1> 70 20			run START
  1081
  1082 				; ------------------------------------------------------------
  1083
  1084 				.macro	STATICDATA
  1085 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00
  1086 				.endm
  1087
  1088 					end
