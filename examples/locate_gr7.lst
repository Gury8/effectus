mads 2.1.0 build 8 (23 Dec 19)
   388 					opt l+
   101
   102 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   102 				ZPAGE: $0080..$00D7
   103
   104 				.print 'RTLIB: ',RTLIB,'..',*-1
   104 				RTLIB: $200D..$20FD
   105
   106 				; ------------------------------------------------------------
   107
   108 20FE			START
   109 20FE BA				tsx
   110 20FF 8E 24 24			stx MAIN.@halt+1
   111
   112 					.ifdef fmulinit
   113 					fmulinit
   114 					eif
   115
   116 = 0129			VLEN	= VARDATASIZE-VARINITSIZE
   117 = 244D			VADR	= DATAORIGIN+VARINITSIZE
   118
   119 					ift VADR > $BFFF
   120 					ert 'Invalid memory address range ',VADR
   121 					eli (VLEN>0) && (VLEN<=256)
   122 					ldx #256-VLEN
   123 					lda #0
   124 					sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>0
   126 					@fill #VADR #VLEN #0
   126 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   126 2102 A9 4D 85 88 A9 24 +  MWA #VADR @FILL.PTR1
   126 210A A9 29 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   126 2112 A9 00 85 84		 MVA #0 @FILL.PTR2
   126 2116 20 B6 20		 JSR @FILL
   127 					eif
   128
   129 					.ifdef MAIN.@DEFINES.ROMOFF
   130 					icl 'atari\romoff.asm'
   131 					.endif
   132
   133 2119 A9 76 85 82 A9 25 + 	mwa #PROGRAMSTACK psptr
   134
   135 2121 A2 0F			ldx #$0f					; DOS II+/D ParamStr
   136 2123 BD 40 03 9D 27 24 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   137
   138 212C E8				inx						; X = 0
   139 212D 86 90			stx bp						; BP = 0
   140
   141 212F 8E 08 D2			stx audctl					; reset POKEY
   142 2132 A9 03			lda #3
   143 2134 8D 0F D2			sta skctl
   144
   145 2137 CA				dex						; X = 255
   146
   147 2138				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: locate_gr7.a65]
Source: locate_gr7.a65
   148
   149 2138			.local	MAIN						; PROCEDURE
   150
   151 2138 4C 20 24			jmp l_0014
   152
   153 				; ------------------------------------------------------------
   154
   155 213B			.local	SYSTEM						; UNIT
   156
   157 				; ------------------------------------------------------------
   158
   159 = 0101			__PORTB_BANKS	= $0101
   160 = 0648			M_PI_2	= $0648
   161 = 0192			D_PI_2	= $0192
   162 = 0004			D_PI_180	= $04
   163 = 0000			MGTIA	= $00
   164 = 0080			MVBXE	= $80
   165 = 0000			VBXE_XDLADR	= $00
   166 = 0100			VBXE_BCBADR	= $0100
   167 = 1000			VBXE_MAPADR	= $1000
   168 = 5000			VBXE_OVRADR	= $5000
   169 = B000			VBXE_WINDOW	= $B000
   170 = 0000			IDLI	= $00
   171 = 0001			IVBL	= $01
   172 = 00FE			CH_DELCHR	= $FE
   173 = 009B			CH_ENTER	= $9B
   174 = 001B			CH_ESC	= $1B
   175 = 001C			CH_CURS_UP	= $1C
   176 = 001D			CH_CURS_DOWN	= $1D
   177 = 001E			CH_CURS_LEFT	= $1E
   178 = 001F			CH_CURS_RIGHT	= $1F
   179 = 007F			CH_TAB	= $7F
   180 = 009B			CH_EOL	= $9B
   181 = 007D			CH_CLR	= $7D
   182 = 00FD			CH_BELL	= $FD
   183 = 007E			CH_DEL	= $7E
   184 = 009C			CH_DELLINE	= $9C
   185 = 009D			CH_INSLINE	= $9D
   186 = 0000			COLOR_BLACK	= $00
   187 = 000E			COLOR_WHITE	= $0E
   188 = 0032			COLOR_RED	= $32
   189 = 0096			COLOR_CYAN	= $96
   190 = 0068			COLOR_VIOLET	= $68
   191 = 00C4			COLOR_GREEN	= $C4
   192 = 0074			COLOR_BLUE	= $74
   193 = 00EE			COLOR_YELLOW	= $EE
   194 = 0028			COLOR_ORANGE	= $28
   195 = 00E4			COLOR_BROWN	= $E4
   196 = 003C			COLOR_LIGHTRED	= $3C
   197 = 0004			COLOR_GRAY1	= $04
   198 = 0006			COLOR_GRAY2	= $06
   199 = 000A			COLOR_GRAY3	= $0A
   200 = 00CC			COLOR_LIGHTGREEN	= $CC
   201 = 007C			COLOR_LIGHTBLUE	= $7C
   202 = 0004			FMOPENREAD	= $04
   203 = 0008			FMOPENWRITE	= $08
   204 = 0009			FMOPENAPPEND	= $09
   205 = 000C			FMOPENREADWRITE	= $0C
   206 = 2439			SCREENWIDTH	= DATAORIGIN+$0000
   207 = 243B			SCREENHEIGHT	= DATAORIGIN+$0002
   208 = 243D			DATESEPARATOR	= DATAORIGIN+$0004
   209 = D014			TVSYSTEM	= $D014
   210 = 02C0			adr.PALETTE	= $02C0
   211 213B			.var PALETTE	= adr.PALETTE .word
   212 = D012			adr.HPALETTE	= $D012
   213 213B			.var HPALETTE	= adr.HPALETTE .word
   214 = 243E			FILEMODE	= DATAORIGIN+$0005
   215 = 243F			GRAPHMODE	= DATAORIGIN+$0006
   216 = 2440			IORESULT	= DATAORIGIN+$0007
   217 = 2441			EOLN	= DATAORIGIN+$0008
   218 = 2442			RNDSEED	= DATAORIGIN+$0009
   219
   220 = 213B C0 02		PALETTE
   220 = 213D 12 D0		HPALETTE
   220 				.endl							; UNIT SYSTEM
   221
   222 				; ------------------------------------------------------------
   223
   224 213F			.local	ATARI						; UNIT
   225
   226 				; ------------------------------------------------------------
   227
   228 = 0012			RTCLOK	= $12
   229 = 004D			ATRACT	= $4D
   230 = 0052			LMARGIN	= $52
   231 = 0053			RMARGIN	= $53
   232 = 0054			ROWCRS	= $54
   233 = 0055			COLCRS	= $55
   234 = 0057			DINDEX	= $57
   235 = 0058			SAVMSC	= $58
   236 = 0062			PALNTS	= $62
   237 = 006A			RAMTOP	= $6A
   238 = 0200			VDSLST	= $0200
   239 = 0230			SDLSTL	= $0230
   240 = 0290			TXTROW	= $0290
   241 = 0291			TXTCOL	= $0291
   242 = 0293			TINDEX	= $0293
   243 = 0294			TXTMSC	= $0294
   244 = 022F			SDMCTL	= $022F
   245 = 026F			GPRIOR	= $026F
   246 = 02F0			CRSINH	= $02F0
   247 = 02F3			CHACT	= $02F3
   248 = 02F4			CHBAS	= $02F4
   249 = 02FC			CH	= $02FC
   250 = 02C0			PCOLR0	= $02C0
   251 = 02C1			PCOLR1	= $02C1
   252 = 02C2			PCOLR2	= $02C2
   253 = 02C3			PCOLR3	= $02C3
   254 = 02C4			COLOR0	= $02C4
   255 = 02C5			COLOR1	= $02C5
   256 = 02C6			COLOR2	= $02C6
   257 = 02C7			COLOR3	= $02C7
   258 = 02C8			COLOR4	= $02C8
   259 = 02C8			COLBAKS	= $02C8
   260 = D000			HPOSP0	= $D000
   261 = D001			HPOSP1	= $D001
   262 = D002			HPOSP2	= $D002
   263 = D003			HPOSP3	= $D003
   264 = D004			HPOSM0	= $D004
   265 = D005			HPOSM1	= $D005
   266 = D006			HPOSM2	= $D006
   267 = D007			HPOSM3	= $D007
   268 = D008			SIZEP0	= $D008
   269 = D009			SIZEP1	= $D009
   270 = D00A			SIZEP2	= $D00A
   271 = D00B			SIZEP3	= $D00B
   272 = D00C			SIZEM	= $D00C
   273 = D00D			GRAFP0	= $D00D
   274 = D00E			GRAFP1	= $D00E
   275 = D00F			GRAFP2	= $D00F
   276 = D010			GRAFP3	= $D010
   277 = D011			GRAFM	= $D011
   278 = D004			P0PF	= $D004
   279 = D014			PAL	= $D014
   280 = D012			COLPM0	= $D012
   281 = D013			COLPM1	= $D013
   282 = D014			COLPM2	= $D014
   283 = D015			COLPM3	= $D015
   284 = D016			COLPF0	= $D016
   285 = D017			COLPF1	= $D017
   286 = D018			COLPF2	= $D018
   287 = D019			COLPF3	= $D019
   288 = D01A			COLBK	= $D01A
   289 = D01B			PRIOR	= $D01B
   290 = D01D			GRACTL	= $D01D
   291 = D01E			HITCLR	= $D01E
   292 = D200			AUDF1	= $D200
   293 = D201			AUDC1	= $D201
   294 = D202			AUDF2	= $D202
   295 = D203			AUDC2	= $D203
   296 = D204			AUDF3	= $D204
   297 = D205			AUDC3	= $D205
   298 = D206			AUDF4	= $D206
   299 = D207			AUDC4	= $D207
   300 = D208			AUDCTL	= $D208
   301 = D20F			SKSTAT	= $D20F
   302 = D301			PORTB	= $D301
   303 = D400			DMACTL	= $D400
   304 = D401			CHACTL	= $D401
   305 = D402			DLISTL	= $D402
   306 = D404			HSCROL	= $D404
   307 = D405			VSCROL	= $D405
   308 = D407			PMBASE	= $D407
   309 = D409			CHBASE	= $D409
   310 = D40A			WSYNC	= $D40A
   311 = D40B			VCOUNT	= $D40B
   312 = D40C			PENH	= $D40C
   313 = D40D			PENV	= $D40D
   314 = D40E			NMIEN	= $D40E
   315
   316 				.endl							; UNIT ATARI
   317
   318 				; ------------------------------------------------------------
   319
   320 213F			.local	CRT						; UNIT
   321
   322 213F			.local	READKEY						; FUNCTION | ASSEMBLER
   323
   324 				; ---------------------  ASM Block 049  ---------------------
   325
   326 213F 8A 48			txa:pha
   327
   328 2141 20 0D 20			@GetKey
   329
   330 2144 8D 45 24			sta Result
   331
   332 2147 68 AA			pla:tax
   333
   334 2149			@exit
   335
   336 				; ------------------------------------------------------------
   337
   338 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   339 				; as Pointer
   340
   341 2149 E8				inx
   342 214A AD 45 24 95 98		mva RESULT :STACKORIGIN,x
   343
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					eif
   351
   352 				; ------------------------------------------------------------
   353
   354 = 2445			RESULT	= DATAORIGIN+$000C
   355
   356 = 2445			@VarData	= RESULT
   357 = 0001			@VarDataSize	= 1
   358
   359 214F 60				rts						; ret
   360 				.endl
   361
   362 				; ------------------------------------------------------------
   363
   364 = 2444			TEXTATTR	= DATAORIGIN+$000B
   365 = D01F			CONSOL	= $D01F
   366 = 0000			CN_START_SELECT_OPTION	= $00
   367 = 0001			CN_SELECT_OPTION	= $01
   368 = 0002			CN_START_OPTION	= $02
   369 = 0003			CN_OPTION	= $03
   370 = 0004			CN_START_SELECT	= $04
   371 = 0005			CN_SELECT	= $05
   372 = 0006			CN_START	= $06
   373 = 0007			CN_NONE	= $07
   374 = 0000			BW40	= $00
   375 = 0001			CO40	= $01
   376 = 0002			BW80	= $02
   377 = 0003			CO80	= $03
   378 = 0007			MONO	= $07
   379 = 0001			C40	= $01
   380 = 0003			C80	= $03
   381 = 0000			BLACK	= $00
   382 = 0001			BLUE	= $01
   383 = 0002			GREEN	= $02
   384 = 0003			CYAN	= $03
   385 = 0004			RED	= $04
   386 = 0005			MAGENTA	= $05
   387 = 0006			BROWN	= $06
   388 = 0007			LIGHTGRAY	= $07
   389 = 0008			DARKGRAY	= $08
   390 = 0009			LIGHTBLUE	= $09
   391 = 000A			LIGHTGREEN	= $0A
   392 = 000B			LIGHTCYAN	= $0B
   393 = 000C			LIGHTRED	= $0C
   394 = 000D			LIGHTMAGENTA	= $0D
   395 = 000E			YELLOW	= $0E
   396 = 000F			WHITE	= $0F
   397 = 0080			BLINK	= $80
   398
   399 				.endl							; UNIT CRT
   400
   401 				; ------------------------------------------------------------
   402
   403 2150			.local	DOS						; UNIT
   404
   405 				; ------------------------------------------------------------
   406
   407 = D014			PALNTSC	= $D014
   408
   409 				.endl							; UNIT DOS
   410
   411 				; ------------------------------------------------------------
   412
   413 2150			.local	STRUTILS					; UNIT
   414
   415 				; ------------------------------------------------------------
   416
   417 				.endl							; UNIT STRUTILS
   418
   419 				; ------------------------------------------------------------
   420
   421 2150			.local	SYSUTILS					; UNIT
   422
   423 				; ------------------------------------------------------------
   424
   425 = 0001			FAREADONLY	= $01
   426 = 0002			FAHIDDEN	= $02
   427 = 0004			FASYSFILE	= $04
   428 = 0008			FAVOLUMEID	= $08
   429 = 0010			FADIRECTORY	= $10
   430 = 0020			FAARCHIVE	= $20
   431 = 003F			FAANYFILE	= $3F
   432
   433 				.endl							; UNIT SYSUTILS
   434
   435 				; ------------------------------------------------------------
   436
   437 2150			.local	TYPES						; UNIT
   438
   439 				; ------------------------------------------------------------
   440
   441 				.endl							; UNIT TYPES
   442
   443 				; ------------------------------------------------------------
   444
   445 2150			.local	GRAPH						; UNIT
   446
   447 2150			.local	INITGRAPH_00A6					; PROCEDURE | OVERLOAD
   448
   449 				; ------------------------------------------------------------
   450
   451 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   452 				; as Pointer
   453 2150 B5 98 8D 63 24		mva :STACKORIGIN,x MODE
   454 2155 CA				dex
   455
   456 				; ---------------------  ASM Block 078  ---------------------
   457
   458
   459 2156 8A 48			txa:pha
   460
   461 2158 AD 63 24			lda mode
   462 215B 8D 3F 24			sta MAIN.SYSTEM.GraphMode
   463 215E 29 0F			and #$0f
   464 2160 A8				tay
   465
   466 2161 A2 60			ldx #$60		; 6*16
   467 2163 AD 63 24			lda mode		; %00010000 with text window
   468 2166 29 10			and #$10
   469 2168 49 10			eor #$10
   470 216A 09 02			ora #2			; read
   471
   472 					.nowarn @GRAPHICS
   472 216C 20 4E 20		 JSR @GRAPHICS
   473
   474 216F 8C 4E 24			sty GraphResult
   475
   476
   477 					.ifdef MAIN.@DEFINES.ROMOFF
   478 					inc portb
   479 					.endif
   480
   481 = EE6D			tlshc	equ $ee6d
   482
   483 2172 A6 57			ldx dindex
   484 2174 BC 6D EE			ldy tlshc,x
   485 2177 A9 05			lda #5
   486 2179 0A			shift	asl @
   487 217A 88				dey
   488 217B D0 FC			bne shift
   489
   490 217D 8D 62 24			sta SCANLINE_WIDTH
   491
   492 				; Fox/TQA
   493
   494 = 0057			dindex	equ $57
   495 = EE7D			tmccn	equ $ee7d
   496 = EE8D			tmrcn	equ $ee8d
   497
   498 2180 A6 57			ldx dindex
   499 2182 BD 7D EE			lda tmccn,x
   500 2185 BC 8D EE			ldy tmrcn,x
   501 2188 A2 00			ldx #0
   502 218A C9 40			cmp #<320
   503 218C D0 01 E8			sne:inx
   504
   505 				; X:A = horizontal resolution
   506 				; Y = vertical resolution
   507
   508 218F 20 88 20			@SCREENSIZE
   509
   510 					.ifdef MAIN.@DEFINES.ROMOFF
   511 					dec portb
   512 					.endif
   513
   514 2192 68 AA			pla:tax
   515
   516
   517 				; optimize OK (GRAPH), line = 132
   518
   519 2194 A5 58 8D 60 24		mva ATARI.SAVMSC VIDEORAM
   520 2199 A5 59 8D 61 24		mva ATARI.SAVMSC+1 VIDEORAM+1
   521
   522 				; ------------------------------------------------------------
   523
   524 = 2463			MODE	= DATAORIGIN+$002A
   525
   526 = 2463			@VarData	= MODE
   527 = 0001			@VarDataSize	= 1
   528
   529 219E			@exit
   530 					.ifdef @new
   531 					lda <@VarData
   532 					sta :ztmp
   533 					lda >@VarData
   534 					ldy #@VarDataSize-1
   535 					jmp @FreeMem
   536 					eif
   537 219E 60				rts						; ret
   538 				.endl
   539
   540 219F			.local	SETCOLOR					; PROCEDURE | ASSEMBLER
   541
   542 				; ------------------------------------------------------------
   543
   544 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   545 				; as Pointer
   546 219F B5 98 8D 64 24		mva :STACKORIGIN,x COLOR
   547 21A4 CA				dex
   548
   549 				; ---------------------  ASM Block 080  ---------------------
   550
   551 21A5 AD 64 24 8D 46 20		mva color @COMMAND.colscr
   552 21AB 8D 4F 24			sta GetColor
   553
   554
   555 				; ------------------------------------------------------------
   556
   557 = 2464			COLOR	= DATAORIGIN+$002B
   558
   559 = 2464			@VarData	= COLOR
   560 = 0001			@VarDataSize	= 1
   561
   562 21AE			@exit
   563 					.ifdef @new
   564 					lda <@VarData
   565 					sta :ztmp
   566 					lda >@VarData
   567 					ldy #@VarDataSize-1
   568 					jmp @FreeMem
   569 					eif
   570 21AE 60				rts						; ret
   571 				.endl
   572
   573 21AF			.local	PUTPIXEL_00B6					; PROCEDURE | ASSEMBLER | OVERLOAD
   574
   575 				; ------------------------------------------------------------
   576
   577 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   578 				; as Pointer
   579 21AF B5 98 8D 67 24		mva :STACKORIGIN,x Y
   580 21B4 B5 A8 8D 68 24		mva :STACKORIGIN+STACKWIDTH,x Y+1
   581 21B9 CA				dex
   582
   583 				; ------------------------------------------------------------
   584
   585 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   586 				; as Pointer
   587 21BA B5 98 8D 65 24		mva :STACKORIGIN,x X
   588 21BF B5 A8 8D 66 24		mva :STACKORIGIN+STACKWIDTH,x X+1
   589 21C4 CA				dex
   590
   591 				; ---------------------  ASM Block 081  ---------------------
   592
   593 21C5 8A 48			txa:pha
   594 				{
   595 21C7 AD 68 24			lda y+1
   596 21CA 30 37			bmi stop
   597 21CC CD 3C 24			cmp MAIN.SYSTEM.ScreenHeight+1
   598 21CF D0 06			bne sk0
   599 21D1 AD 67 24			lda y
   600 21D4 CD 3B 24			cmp MAIN.SYSTEM.ScreenHeight
   601 21D7			sk0
   602 21D7 B0 2A			bcs stop
   603
   604 21D9 AD 66 24			lda x+1
   605 21DC 30 25			bmi stop
   606 21DE CD 3A 24			cmp MAIN.SYSTEM.ScreenWidth+1
   607 21E1 D0 06			bne sk1
   608 21E3 AD 65 24			lda x
   609 21E6 CD 39 24			cmp MAIN.SYSTEM.ScreenWidth
   610 21E9			sk1
   611 21E9 B0 18			bcs stop
   612
   613 21EB AD 65 24 85 55 AD + 	mwa x colcrs
   614 21F5 AD 67 24 85 54		mva y rowcrs
   615
   616 				;	lda #@IDput		; slower
   617 				;	jsr @COMMAND
   618
   619 21FA AE 31 20			ldx @COMMAND.scrchn	; faster
   620 21FD AD 46 20			lda @COMMAND.colscr
   621
   622 2200				m@call	@putchar.main
Macro: M@CALL [Source: rtl6502.asm]
    12 2200 20 25 20				jsr @PUTCHAR.MAIN
Source: locate_gr7.a65
   623
   624 2203 68 AA		stop	pla:tax
   625
   626
   627 				; ------------------------------------------------------------
   628
   629 = 2465			X	= DATAORIGIN+$002C
   630 = 2467			Y	= DATAORIGIN+$002E
   631
   632 = 2465			@VarData	= X
   633 = 0004			@VarDataSize	= 4
   634
   635 2205			@exit
   636 					.ifdef @new
   637 					lda <@VarData
   638 					sta :ztmp
   639 					lda >@VarData
   640 					ldy #@VarDataSize-1
   641 					jmp @FreeMem
   642 					eif
   643 2205 60				rts						; ret
   644 				.endl
   645
   646 2206			.local	GETPIXEL					; FUNCTION | ASSEMBLER
   647
   648 				; ------------------------------------------------------------
   649
   650 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   651 				; as Pointer
   652 2206 B5 98 8D 6B 24		mva :STACKORIGIN,x Y
   653 220B B5 A8 8D 6C 24		mva :STACKORIGIN+STACKWIDTH,x Y+1
   654 2210 CA				dex
   655
   656 				; ------------------------------------------------------------
   657
   658 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   659 				; as Pointer
   660 2211 B5 98 8D 69 24		mva :STACKORIGIN,x X
   661 2216 B5 A8 8D 6A 24		mva :STACKORIGIN+STACKWIDTH,x X+1
   662 221B CA				dex
   663
   664 				; ---------------------  ASM Block 083  ---------------------
   665
   666 221C 8A 48			txa:pha
   667
   668 221E A0 00			ldy #0
   669
   670 2220 AD 6C 24			lda y+1
   671 2223 30 34			bmi stop
   672 2225 CD 3C 24			cmp MAIN.SYSTEM.ScreenHeight+1
   673 2228 D0 06			bne sk0
   674 222A AD 6B 24			lda y
   675 222D CD 3B 24			cmp MAIN.SYSTEM.ScreenHeight
   676 2230			sk0
   677 2230 B0 27			bcs stop
   678
   679 2232 AD 6A 24			lda x+1
   680 2235 30 22			bmi stop
   681 2237 CD 3A 24			cmp MAIN.SYSTEM.ScreenWidth+1
   682 223A D0 06			bne sk1
   683 223C AD 69 24			lda x
   684 223F CD 39 24			cmp MAIN.SYSTEM.ScreenWidth
   685 2242			sk1
   686 2242 B0 15			bcs stop
   687
   688 2244 AD 69 24 85 55 AD + 	mwa x colcrs
   689 224E AD 6B 24 85 54		mva y rowcrs
   690
   691 2253 A9 07			lda #@IDget
   692
   693 2255 20 30 20			jsr @COMMAND
   694 2258 A8				tay
   695
   696 2259 8C 6D 24		stop	sty Result
   697
   698 225C 68 AA			pla:tax
   699
   700 225E			@exit
   701
   702 				; ------------------------------------------------------------
   703
   704 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   705 				; as Pointer
   706
   707 225E E8				inx
   708 225F AD 6D 24 95 98		mva RESULT :STACKORIGIN,x
   709
   710 					.ifdef @new
   711 					lda <@VarData
   712 					sta :ztmp
   713 					lda >@VarData
   714 					ldy #@VarDataSize-1
   715 					jmp @FreeMem
   716 					eif
   717
   718 				; ------------------------------------------------------------
   719
   720 = 2469			X	= DATAORIGIN+$0030
   721 = 246B			Y	= DATAORIGIN+$0032
   722 = 246D			RESULT	= DATAORIGIN+$0034
   723
   724 = 2469			@VarData	= X
   725 = 0005			@VarDataSize	= 5
   726
   727 2264 60				rts						; ret
   728 				.endl
   729
   730 2265			.local	MOVETO						; PROCEDURE | ASSEMBLER
   731
   732 				; ------------------------------------------------------------
   733
   734 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   735 				; as Pointer
   736 2265 B5 98 8D 70 24		mva :STACKORIGIN,x Y
   737 226A B5 A8 8D 71 24		mva :STACKORIGIN+STACKWIDTH,x Y+1
   738 226F CA				dex
   739
   740 				; ------------------------------------------------------------
   741
   742 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   743 				; as Pointer
   744 2270 B5 98 8D 6E 24		mva :STACKORIGIN,x X
   745 2275 B5 A8 8D 6F 24		mva :STACKORIGIN+STACKWIDTH,x X+1
   746 227A CA				dex
   747
   748 				; ---------------------  ASM Block 084  ---------------------
   749
   750 227B AD 71 24			lda y+1
   751 227E 10 08			bpl _0
   752
   753 2280 A9 00			lda #0
   754 2282 8D 70 24			sta y
   755 2285 8D 71 24			sta y+1
   756 2288			_0
   757 2288 AD 6F 24			lda x+1
   758 228B 10 08			bpl _1
   759
   760 228D A9 00			lda #0
   761 228F 8D 6E 24			sta x
   762 2292 8D 6F 24			sta x+1
   763 2295			_1
   764 2295 AD 71 24 CD 3C 24 + 	cpw y main.system.ScreenHeight
   765 22A3 90 11			bcc _2
   766
   767 22A5 38 AD 3B 24 E9 01 + 	sbw main.system.ScreenHeight #1 y
   768 22B6			_2
   769 22B6 AD 6F 24 CD 3A 24 + 	cpw x main.system.ScreenWidth
   770 22C4 90 11			bcc _3
   771
   772 22C6 38 AD 39 24 E9 01 + 	sbw main.system.ScreenWidth #1 x
   773 22D7			_3
   774 22D7 AD 6E 24 8D 5C 24 + 	mwa x CurrentX
   775 22E3 AD 70 24 8D 5E 24 + 	mwa y CurrentY
   776
   777
   778 				; ------------------------------------------------------------
   779
   780 = 246E			X	= DATAORIGIN+$0035
   781 = 2470			Y	= DATAORIGIN+$0037
   782
   783 = 246E			@VarData	= X
   784 = 0004			@VarDataSize	= 4
   785
   786 22EF			@exit
   787 					.ifdef @new
   788 					lda <@VarData
   789 					sta :ztmp
   790 					lda >@VarData
   791 					ldy #@VarDataSize-1
   792 					jmp @FreeMem
   793 					eif
   794 22EF 60				rts						; ret
   795 				.endl
   796
   797 				; ------------------------------------------------------------
   798
   799 = 0080			CURRENTDRIVER	= $80
   800 = 0000			DETECT	= $00
   801 = 0001			CGA	= $01
   802 = 0002			MCGA	= $02
   803 = 0003			EGA	= $03
   804 = 0004			EGA64	= $04
   805 = 0005			EGAMONO	= $05
   806 = 0006			LOWRES	= $06
   807 = 0007			HERCMONO	= $07
   808 = 0009			VGA	= $09
   809 = 000A			VESA	= $0A
   810 = 000B			D1BIT	= $0B
   811 = 000C			D2BIT	= $0C
   812 = 000D			D4BIT	= $0D
   813 = 000E			D6BIT	= $0E
   814 = 000F			D8BIT	= $0F
   815 = 0010			D12BIT	= $10
   816 = 0018			M640X400	= $18
   817 = 0018			M640X480	= $18
   818 = 0001			GROK	= $01
   819 = 00FF			GRNOINITGRAPH	= $FF
   820 = 00FE			GRNOTDETECTED	= $FE
   821 = 00FD			GRFILENOTFOUND	= $FD
   822 = 00FC			GRINVALIDDRIVER	= $FC
   823 = 00FB			GRNOLOADMEM	= $FB
   824 = 00FA			GRNOSCANMEM	= $FA
   825 = 00F9			GRNOFLOODMEM	= $F9
   826 = 00F8			GRFONTNOTFOUND	= $F8
   827 = 00F7			GRNOFONTMEM	= $F7
   828 = 00F6			GRINVALIDMODE	= $F6
   829 = 00F5			GRERROR	= $F5
   830 = 00F4			GRIOERROR	= $F4
   831 = 00F3			GRINVALIDFONT	= $F3
   832 = 00F2			GRINVALIDFONTNUM	= $F2
   833 = 00EE			GRINVALIDVERSION	= $EE
   834 = 0000			CGAC0	= $00
   835 = 0001			CGAC1	= $01
   836 = 0002			CGAC2	= $02
   837 = 0003			CGAC3	= $03
   838 = 0004			CGAHI	= $04
   839 = 0000			MCGAC0	= $00
   840 = 0001			MCGAC1	= $01
   841 = 0002			MCGAC2	= $02
   842 = 0003			MCGAC3	= $03
   843 = 0004			MCGAMED	= $04
   844 = 0005			MCGAHI	= $05
   845 = 0000			EGALO	= $00
   846 = 0001			EGAHI	= $01
   847 = 0000			EGA64LO	= $00
   848 = 0001			EGA64HI	= $01
   849 = 0003			EGAMONOHI	= $03
   850 = 000A			VGALO	= $0A
   851 = 001F			VGAMED	= $1F
   852 = 0018			VGAHI	= $18
   853 = 2446			WIN_LEFT	= DATAORIGIN+$000D
   854 = 2448			WIN_RIGHT	= DATAORIGIN+$000F
   855 = 244A			WIN_TOP	= DATAORIGIN+$0011
   856 = 244C			WIN_BOTTOM	= DATAORIGIN+$0013
   857 = 244E			GRAPHRESULT	= DATAORIGIN+$0015
   858 = 244F			GETCOLOR	= DATAORIGIN+$0016
   859 = 2450			adr.LASTARCCOORDS	= DATAORIGIN+$0017
   860 22F0			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   861 = 2450			LASTARCCOORDS.X	= DATAORIGIN+$0017
   862 = 2452			LASTARCCOORDS.Y	= DATAORIGIN+$0019
   863 = 2454			LASTARCCOORDS.XSTART	= DATAORIGIN+$001B
   864 = 2456			LASTARCCOORDS.YSTART	= DATAORIGIN+$001D
   865 = 2458			LASTARCCOORDS.XEND	= DATAORIGIN+$001F
   866 = 245A			LASTARCCOORDS.YEND	= DATAORIGIN+$0021
   867 = 245C			CURRENTX	= DATAORIGIN+$0023
   868 = 245E			CURRENTY	= DATAORIGIN+$0025
   869 = 2460			VIDEORAM	= DATAORIGIN+$0027
   870 = 2462			SCANLINE_WIDTH	= DATAORIGIN+$0029
   871
   872 = 22F0 50 24		LASTARCCOORDS
   872 				.endl							; UNIT GRAPH
   873
   874 				; ------------------------------------------------------------
   875
   876 22F2			.local	CIO						; UNIT
   877
   878 22F2			.local	GET						; FUNCTION | ASSEMBLER
   879
   880 				; ------------------------------------------------------------
   881
   882 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   883 				; as Pointer
   884 22F2 B5 98 8D 72 24		mva :STACKORIGIN,x CHN
   885 22F7 CA				dex
   886
   887 				; ---------------------  ASM Block 095  ---------------------
   888
   889 22F8 8A 48			txa:pha
   890
   891 22FA AD 72 24			lda chn
   892 22FD 0A 0A 0A 0A			:4 asl @
   893 2301 AA				tax
   894
   895 2302 A9 07			lda #7		;get char command
   896 2304 9D 42 03			sta iccmd,x
   897
   898 2307 A9 00			lda #$00	;zero out the unused
   899 2309 9D 48 03			sta icbufl,x	;store in accumulator
   900 230C 9D 49 03			sta icbufh,x	;...after CIOV jump
   901
   902 230F				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 230F 20 56 E4				jsr CIOV
Source: locate_gr7.a65
   903
   904 2312 8C 40 24			sty MAIN.SYSTEM.IOResult
   905
   906 2315 8D 73 24			sta Result
   907
   908 2318 68 AA			pla:tax
   909
   910 231A			@exit
   911
   912 				; ------------------------------------------------------------
   913
   914 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   915 				; as Pointer
   916
   917 231A E8				inx
   918 231B AD 73 24 95 98		mva RESULT :STACKORIGIN,x
   919
   920 					.ifdef @new
   921 					lda <@VarData
   922 					sta :ztmp
   923 					lda >@VarData
   924 					ldy #@VarDataSize-1
   925 					jmp @FreeMem
   926 					eif
   927
   928 				; ------------------------------------------------------------
   929
   930 = 2472			CHN	= DATAORIGIN+$0039
   931 = 2473			RESULT	= DATAORIGIN+$003A
   932
   933 = 2472			@VarData	= CHN
   934 = 0002			@VarDataSize	= 2
   935
   936 2320 60				rts						; ret
   937 				.endl
   938
   939 				; ------------------------------------------------------------
   940
   941 				.endl							; UNIT CIO
   942
   943 2321			.local	MAINPROC					; PROCEDURE
   944
   945 				; optimize FAIL ('GRAPH.INITGRAPH_00A6', examples\locate_gr7.pas), line = 18
   946 2321 E8				inx
   947 2322 A9 07 95 98			mva #$07 :STACKORIGIN,x
   948 2326 20 50 21			jsr GRAPH.INITGRAPH_00A6
   949
   950 				; optimize FAIL ('GRAPH.SETCOLOR', examples\locate_gr7.pas), line = 19
   951 2329 E8				inx
   952 232A A9 01 95 98			mva #$01 :STACKORIGIN,x
   953 232E 20 9F 21			jsr GRAPH.SETCOLOR
   954
   955 				; optimize FAIL ('GRAPH.PUTPIXEL_00B6', examples\locate_gr7.pas), line = 20
   956 2331 E8				inx
   957 2332 A9 0A 95 98			mva #$0A :STACKORIGIN,x
   958 2336 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   959 233A E8				inx
   960 233B A9 0A 95 98			mva #$0A :STACKORIGIN,x
   961 233F A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   962 2343 20 AF 21			jsr GRAPH.PUTPIXEL_00B6
   963
   964 				; optimize FAIL ('GRAPH.MOVETO', examples\locate_gr7.pas), line = 21
   965 2346 E8				inx
   966 2347 A9 0A 95 98			mva #$0A :STACKORIGIN,x
   967 234B A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   968 234F E8				inx
   969 2350 A9 0A 95 98			mva #$0A :STACKORIGIN,x
   970 2354 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   971 2358 20 65 22			jsr GRAPH.MOVETO
   972
   973 				; optimize FAIL ('GRAPH.SETCOLOR', examples\locate_gr7.pas), line = 22
   974 235B E8				inx
   975 235C A9 02 95 98			mva #$02 :STACKORIGIN,x
   976 2360 20 9F 21			jsr GRAPH.SETCOLOR
   977
   978 				; optimize FAIL ('GRAPH.PUTPIXEL_00B6', examples\locate_gr7.pas), line = 23
   979 2363 E8				inx
   980 2364 A9 14 95 98			mva #$14 :STACKORIGIN,x
   981 2368 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   982 236C E8				inx
   983 236D A9 14 95 98			mva #$14 :STACKORIGIN,x
   984 2371 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   985 2375 20 AF 21			jsr GRAPH.PUTPIXEL_00B6
   986
   987 				; optimize FAIL ('GRAPH.MOVETO', examples\locate_gr7.pas), line = 24
   988 2378 E8				inx
   989 2379 A9 14 95 98			mva #$14 :STACKORIGIN,x
   990 237D A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   991 2381 E8				inx
   992 2382 A9 14 95 98			mva #$14 :STACKORIGIN,x
   993 2386 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
   994 238A 20 65 22			jsr GRAPH.MOVETO
   995
   996 				; optimize FAIL ('GRAPH.SETCOLOR', examples\locate_gr7.pas), line = 25
   997 238D E8				inx
   998 238E A9 03 95 98			mva #$03 :STACKORIGIN,x
   999 2392 20 9F 21			jsr GRAPH.SETCOLOR
  1000
  1001 				; optimize FAIL ('GRAPH.PUTPIXEL_00B6', examples\locate_gr7.pas), line = 26
  1002 2395 E8				inx
  1003 2396 A9 1E 95 98			mva #$1E :STACKORIGIN,x
  1004 239A A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1005 239E E8				inx
  1006 239F A9 1E 95 98			mva #$1E :STACKORIGIN,x
  1007 23A3 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1008 23A7 20 AF 21			jsr GRAPH.PUTPIXEL_00B6
  1009
  1010 				; optimize FAIL ('GRAPH.MOVETO', examples\locate_gr7.pas), line = 27
  1011 23AA E8				inx
  1012 23AB A9 1E 95 98			mva #$1E :STACKORIGIN,x
  1013 23AF A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1014 23B3 E8				inx
  1015 23B4 A9 1E 95 98			mva #$1E :STACKORIGIN,x
  1016 23B8 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1017 23BC 20 65 22			jsr GRAPH.MOVETO
  1018
  1019 				; optimize FAIL ('GRAPH.GETPIXEL', examples\locate_gr7.pas), line = 28
  1020 23BF E8				inx
  1021 23C0 A9 14 95 98			mva #$14 :STACKORIGIN,x
  1022 23C4 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1023 23C8 E8				inx
  1024 23C9 A9 14 95 98			mva #$14 :STACKORIGIN,x
  1025 23CD A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1026 23D1 20 06 22			jsr GRAPH.GETPIXEL
  1027 23D4 B5 98 8D 75 25		mva :STACKORIGIN,x LOC
  1028 23D9 CA				dex
  1029
  1030 				; optimize FAIL ('GRAPH.SETCOLOR', examples\locate_gr7.pas), line = 29
  1031 23DA E8				inx
  1032 23DB AD 75 25 95 98		mva LOC :STACKORIGIN,x
  1033 23E0 20 9F 21			jsr GRAPH.SETCOLOR
  1034
  1035 				; optimize FAIL ('GRAPH.PUTPIXEL_00B6', examples\locate_gr7.pas), line = 30
  1036 23E3 E8				inx
  1037 23E4 A9 3C 95 98			mva #$3C :STACKORIGIN,x
  1038 23E8 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1039 23EC E8				inx
  1040 23ED A9 3C 95 98			mva #$3C :STACKORIGIN,x
  1041 23F1 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1042 23F5 20 AF 21			jsr GRAPH.PUTPIXEL_00B6
  1043
  1044 				; optimize FAIL ('GRAPH.MOVETO', examples\locate_gr7.pas), line = 31
  1045 23F8 E8				inx
  1046 23F9 A9 3C 95 98			mva #$3C :STACKORIGIN,x
  1047 23FD A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1048 2401 E8				inx
  1049 2402 A9 3C 95 98			mva #$3C :STACKORIGIN,x
  1050 2406 A9 00 95 A8			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1051 240A 20 65 22			jsr GRAPH.MOVETO
  1052
  1053 				; optimize FAIL ('CIO.GET', examples\locate_gr7.pas), line = 32
  1054 240D E8				inx
  1055 240E A9 07 95 98			mva #$07 :STACKORIGIN,x
  1056 2412 20 F2 22			jsr CIO.GET
  1057 2415 B5 98 8D 74 25		mva :STACKORIGIN,x KEY
  1058 241A CA				dex
  1059
  1060 241B 20 3F 21			jsr CRT.READKEY					; call Entry
  1061
  1062 241E CA				dex
  1063
  1064 				; ------------------------------------------------------------
  1065
  1066 = 2574			KEY	= DATAORIGIN+$013B
  1067 = 2575			LOC	= DATAORIGIN+$013C
  1068
  1069 = 2574			@VarData	= KEY
  1070 = 0002			@VarDataSize	= 2
  1071
  1072 241F			@exit
  1073 					.ifdef @new
  1074 					lda <@VarData
  1075 					sta :ztmp
  1076 					lda >@VarData
  1077 					ldy #@VarDataSize-1
  1078 					jmp @FreeMem
  1079 					eif
  1080 241F 60				rts						; ret
  1081 				.endl
  1082 2420			l_0014
  1083
  1084 				; optimize FAIL ('MAINPROC', examples\locate_gr7.pas), line = 37
  1085 2420 20 21 23			jsr MAINPROC
  1086
  1087 				; ------------------------------------------------------------
  1088
  1089 = 2474			adr.STRBUFFER	= DATAORIGIN+$003B
  1090 2423			.var STRBUFFER	= adr.STRBUFFER .word
  1091 2423			@exit
  1092
  1093 2423 A2 00		@halt	ldx #0
  1094 2425 9A				txs
  1095 					.ifdef MAIN.@DEFINES.ROMOFF
  1096 					inc portb
  1097 					.endif
  1098
  1099 2426 60				rts
  1100
  1101 				; ------------------------------------------------------------
  1102
  1103 2427 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1104
  1105 				; ------------------------------------------------------------
  1106
  1107 2437			.local	@DEFINES
  1108 2437			ATARI
  1109 				.endl
  1110
  1111 = 2437 74 24		STRBUFFER
  1111 				.endl							; MAIN
  1112
  1113 				; ------------------------------------------------------------
  1114 				; ------------------------------------------------------------
  1115
  1116 				.macro	UNITINITIALIZATION
  1117 				
  1118 					.ifdef MAIN.SYSTEM.@UnitInit
  1119 					jsr MAIN.SYSTEM.@UnitInit
  1120 					eif
  1121 				
  1122 					.ifdef MAIN.ATARI.@UnitInit
  1123 					jsr MAIN.ATARI.@UnitInit
  1124 					eif
  1125 				
  1126 					.ifdef MAIN.CRT.@UnitInit
  1127 					jsr MAIN.CRT.@UnitInit
  1128 					eif
  1129 				
  1130 					.ifdef MAIN.DOS.@UnitInit
  1131 					jsr MAIN.DOS.@UnitInit
  1132 					eif
  1133 				
  1134 					.ifdef MAIN.STRUTILS.@UnitInit
  1135 					jsr MAIN.STRUTILS.@UnitInit
  1136 					eif
  1137 				
  1138 					.ifdef MAIN.SYSUTILS.@UnitInit
  1139 					jsr MAIN.SYSUTILS.@UnitInit
  1140 					eif
  1141 				
  1142 					.ifdef MAIN.TYPES.@UnitInit
  1143 					jsr MAIN.TYPES.@UnitInit
  1144 					eif
  1145 				
  1146 					.ifdef MAIN.GRAPH.@UnitInit
  1147 					jsr MAIN.GRAPH.@UnitInit
  1148 					eif
  1149 				
  1150 					.ifdef MAIN.CIO.@UnitInit
  1151 					jsr MAIN.CIO.@UnitInit
  1152 					eif
  1153 				.endm
  1154
  1155 				; ------------------------------------------------------------
  1156
  1157 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1158 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1158 				SYSTEM: $213B..$213E
  1159 					eif
  1160
  1161 					ift .SIZEOF(MAIN.ATARI) > 0
  1162 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1163 					eif
  1164
  1165 					ift .SIZEOF(MAIN.CRT) > 0
  1166 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1166 				CRT: $213F..$214F
  1167 					eif
  1168
  1169 					ift .SIZEOF(MAIN.DOS) > 0
  1170 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
  1171 					eif
  1172
  1173 					ift .SIZEOF(MAIN.STRUTILS) > 0
  1174 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
  1175 					eif
  1176
  1177 					ift .SIZEOF(MAIN.SYSUTILS) > 0
  1178 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
  1179 					eif
  1180
  1181 					ift .SIZEOF(MAIN.TYPES) > 0
  1182 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
  1183 					eif
  1184
  1185 					ift .SIZEOF(MAIN.GRAPH) > 0
  1186 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
  1186 				GRAPH: $2150..$22F1
  1187 					eif
  1188
  1189 					ift .SIZEOF(MAIN.CIO) > 0
  1190 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
  1190 				CIO: $22F2..$2320
  1191 					eif
  1192
  1193 					.print 'CODE: ',CODEORIGIN,'..',*-1
  1193 				CODE: $2000..$2438
  1194
  1195 				; ------------------------------------------------------------
  1196
  1197 2439			DATAORIGIN
  1198 2439 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $27  $00 $00 $00 $17
  1199
  1200 = 0014			VARINITSIZE	= *-DATAORIGIN
  1201 = 013D			VARDATASIZE	= 317
  1202
  1203 = 2576			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1204
  1205 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1205 				DATA: $2439..$2576
  1206
  1207 02E0-02E1> FE 20			run START
  1208
  1209 				; ------------------------------------------------------------
  1210
  1211 				.macro	STATICDATA
  1212 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00
  1213 				.endm
  1214
  1215 					end
