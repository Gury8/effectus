; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.4 [2020/06/20] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

fxptr	.ds 2						; VBXE pointer
psptr	.ds 2						; PROGRAMSTACK Pointer

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4
bp	.ds 2
bp2	.ds 2

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1

FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.endif

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502.asm'

.print 'ZPAGE: ',fxptr,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	eif

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #0
	sta:rne VADR+VLEN-256,x+
	eli VLEN>0
	@fill #VADR #VLEN #0
	eif

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.endif

	mwa #PROGRAMSTACK psptr

	ldx #$0f					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0092

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x A
	mva :STACKORIGIN+STACKWIDTH,x A+1
	dex

; ---------------------  ASM Block 001  ---------------------

	ldy #0
	mva (edx),y Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= edx
RESULT	= DATAORIGIN+$000B

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x VALUE
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x A
	mva :STACKORIGIN+STACKWIDTH,x A+1
	dex

; ---------------------  ASM Block 021  ---------------------

	ldy #0
	mva value (edx),y


; ------------------------------------------------------------

A	= edx
VALUE	= ecx
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	FILLCHAR_00DB					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x VALUE
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x COUNT
	mva :STACKORIGIN+STACKWIDTH,x COUNT+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x A
	mva :STACKORIGIN+STACKWIDTH,x A+1
	dex

; ---------------------  ASM Block 024  ---------------------

	jsr @fill


; ------------------------------------------------------------

A	= edx
COUNT	= ecx
VALUE	= eax
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	MOVE_00E5					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x COUNT
	mva :STACKORIGIN+STACKWIDTH,x COUNT+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x DEST
	mva :STACKORIGIN+STACKWIDTH,x DEST+1
	dex

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x SOURCE
	mva :STACKORIGIN+STACKWIDTH,x SOURCE+1
	dex

; ---------------------  ASM Block 031  ---------------------

	jsr @move


; ------------------------------------------------------------

SOURCE	= edx
DEST	= ecx
COUNT	= eax
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
TVSYSTEM	= $D014
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

RTCLOK	= $12
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
SKSTAT	= $D20F
PORTB	= $D301
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

.local	GOTOXY						; PROCEDURE | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x Y
	dex

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x X
	dex

; ---------------------  ASM Block 054  ---------------------

	ldy x
	beq @+

	dey

@	sty colcrs
	mvy #$00 colcrs+1

	ldy y
	beq @+

	dey

@	sty rowcrs


; ------------------------------------------------------------

X	= DATAORIGIN+$000D
Y	= DATAORIGIN+$000E

@VarData	= X
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$000C
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
BLUE	= $01
GREEN	= $02
CYAN	= $03
RED	= $04
MAGENTA	= $05
BROWN	= $06
LIGHTGRAY	= $07
DARKGRAY	= $08
LIGHTBLUE	= $09
LIGHTGREEN	= $0A
LIGHTCYAN	= $0B
LIGHTRED	= $0C
LIGHTMAGENTA	= $0D
YELLOW	= $0E
WHITE	= $0F
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	DOS						; UNIT

; ------------------------------------------------------------

PALNTSC	= $D014

.endl							; UNIT DOS

; ------------------------------------------------------------

.local	STRUTILS					; UNIT

; ------------------------------------------------------------

.endl							; UNIT STRUTILS

; ------------------------------------------------------------

.local	SYSUTILS					; UNIT

; ------------------------------------------------------------

FAREADONLY	= $01
FAHIDDEN	= $02
FASYSFILE	= $04
FAVOLUMEID	= $08
FADIRECTORY	= $10
FAARCHIVE	= $20
FAANYFILE	= $3F

.endl							; UNIT SYSUTILS

; ------------------------------------------------------------

.local	TYPES						; UNIT

; ------------------------------------------------------------

.endl							; UNIT TYPES

; ------------------------------------------------------------

.local	GRAPH						; UNIT

.local	INITGRAPH_0149					; PROCEDURE | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x MODE
	dex

; ---------------------  ASM Block 078  ---------------------


	txa:pha

	lda mode
	sta MAIN.SYSTEM.GraphMode
	and #$0f
	tay

	ldx #$60		; 6*16
	lda mode		; %00010000 with text window
	and #$10
	eor #$10
	ora #2			; read

	.nowarn @GRAPHICS

	sty GraphResult


	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.endif

tlshc	equ $ee6d

	ldx dindex
	ldy tlshc,x
	lda #5
shift	asl @
	dey
	bne shift

	sta SCANLINE_WIDTH

; Fox/TQA

dindex	equ $57
tmccn	equ $ee7d
tmrcn	equ $ee8d

	ldx dindex
	lda tmccn,x
	ldy tmrcn,x
	ldx #0
	cmp #<320
	sne:inx

; X:A = horizontal resolution
; Y = vertical resolution

	@SCREENSIZE

	.ifdef MAIN.@DEFINES.ROMOFF
	dec portb
	.endif

	pla:tax


; optimize OK (GRAPH), line = 132

	mva ATARI.SAVMSC VIDEORAM
	mva ATARI.SAVMSC+1 VIDEORAM+1

; ------------------------------------------------------------

MODE	= DATAORIGIN+$002C

@VarData	= MODE
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------

CURRENTDRIVER	= $80
DETECT	= $00
CGA	= $01
MCGA	= $02
EGA	= $03
EGA64	= $04
EGAMONO	= $05
LOWRES	= $06
HERCMONO	= $07
VGA	= $09
VESA	= $0A
D1BIT	= $0B
D2BIT	= $0C
D4BIT	= $0D
D6BIT	= $0E
D8BIT	= $0F
D12BIT	= $10
M640X400	= $18
M640X480	= $18
GROK	= $01
GRNOINITGRAPH	= $FF
GRNOTDETECTED	= $FE
GRFILENOTFOUND	= $FD
GRINVALIDDRIVER	= $FC
GRNOLOADMEM	= $FB
GRNOSCANMEM	= $FA
GRNOFLOODMEM	= $F9
GRFONTNOTFOUND	= $F8
GRNOFONTMEM	= $F7
GRINVALIDMODE	= $F6
GRERROR	= $F5
GRIOERROR	= $F4
GRINVALIDFONT	= $F3
GRINVALIDFONTNUM	= $F2
GRINVALIDVERSION	= $EE
CGAC0	= $00
CGAC1	= $01
CGAC2	= $02
CGAC3	= $03
CGAHI	= $04
MCGAC0	= $00
MCGAC1	= $01
MCGAC2	= $02
MCGAC3	= $03
MCGAMED	= $04
MCGAHI	= $05
EGALO	= $00
EGAHI	= $01
EGA64LO	= $00
EGA64HI	= $01
EGAMONOHI	= $03
VGALO	= $0A
VGAMED	= $1F
VGAHI	= $18
WIN_LEFT	= DATAORIGIN+$000F
WIN_RIGHT	= DATAORIGIN+$0011
WIN_TOP	= DATAORIGIN+$0013
WIN_BOTTOM	= DATAORIGIN+$0015
GRAPHRESULT	= DATAORIGIN+$0017
GETCOLOR	= DATAORIGIN+$0018
adr.LASTARCCOORDS	= DATAORIGIN+$0019
.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
LASTARCCOORDS.X	= DATAORIGIN+$0019
LASTARCCOORDS.Y	= DATAORIGIN+$001B
LASTARCCOORDS.XSTART	= DATAORIGIN+$001D
LASTARCCOORDS.YSTART	= DATAORIGIN+$001F
LASTARCCOORDS.XEND	= DATAORIGIN+$0021
LASTARCCOORDS.YEND	= DATAORIGIN+$0023
CURRENTX	= DATAORIGIN+$0025
CURRENTY	= DATAORIGIN+$0027
VIDEORAM	= DATAORIGIN+$0029
SCANLINE_WIDTH	= DATAORIGIN+$002B

.endl							; UNIT GRAPH

; ------------------------------------------------------------

.local	JOYSTICK					; UNIT

; ------------------------------------------------------------

JOY_NONE	= $0F
JOY_UP	= $0E
JOY_DOWN	= $0D
JOY_LEFT	= $0B
JOY_LEFT_UP	= $0A
JOY_LEFT_DOWN	= $09
JOY_RIGHT	= $07
JOY_RIGHT_UP	= $06
JOY_RIGHT_DOWN	= $05
JOY_1	= $0278
JOY_2	= $0279
adr.STICK	= $0278
.var STICK	= adr.STICK .word
STICK0	= $0278
STICK1	= $0279
adr.STRIG	= $0284
.var STRIG	= adr.STRIG .word
STRIG0	= $0284
STRIG1	= $0285
adr.PADDL	= $0270
.var PADDL	= adr.PADDL .word
PADDL0	= $0270
PADDL1	= $0271
PADDL2	= $0272
PADDL3	= $0273
PADDL4	= $0274
PADDL5	= $0275
PADDL6	= $0276
PADDL7	= $0277
adr.PTRIG	= $027C
.var PTRIG	= adr.PTRIG .word
PTRIG0	= $027C
PTRIG1	= $027D
PTRIG2	= $027E
PTRIG3	= $027F
PTRIG4	= $0280
PTRIG5	= $0281
PTRIG6	= $0282
PTRIG7	= $0283

.endl							; UNIT JOYSTICK

.local	DELAYPROC					; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
; as Pointer
	mva :STACKORIGIN,x LIMIT
	mva :STACKORIGIN+STACKWIDTH,x LIMIT+1
	mva :STACKORIGIN+STACKWIDTH*2,x LIMIT+2
	mva :STACKORIGIN+STACKWIDTH*3,x LIMIT+3
	dex

; --- For

; optimize OK (examples\drunkman.pas), line = 56

	mva #$01 I
	mva #$00 I+1
	sta I+2
	sta I+3

; optimize OK (examples\drunkman.pas), line = 56

	mva LIMIT :@FORTMP?01A9_0
	mva LIMIT+1 :@FORTMP?01A9_1
	mva LIMIT+2 :@FORTMP?01A9_2
	mva LIMIT+3 :@FORTMP?01A9_3
l_01AC
; --- ForToDoCondition

; optimize OK (examples\drunkman.pas), line = 56

	.LOCAL
	lda I+3
.def :@FORTMP?01A9_3 = *+2
	sub #$00
	bne L4
	lda I+2
.def :@FORTMP?01A9_2 = *+1
	cmp #$00
	bne L1
	lda I+1
.def :@FORTMP?01A9_1 = *+1
	cmp #$00
	bne L1
	lda I
.def :@FORTMP?01A9_0 = *+1
	cmp #$00
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	smi
	jne l_01B6

; --- ForToDoEpilog
	ind I						; inc ptr dword [CounterAddress]
	jmp l_01AC
l_01B6

; ------------------------------------------------------------

LIMIT	= DATAORIGIN+$0070
I	= DATAORIGIN+$0074
@FORTMP_01A9	= $00

@VarData	= LIMIT
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	BULLET_PROCFUNC					; FUNCTION

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x POS
	dex

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x NUM
	dex

; ------------------------------------------------------------

; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
; as Pointer
	mva :STACKORIGIN,x MOVE
	mva :STACKORIGIN+STACKWIDTH,x MOVE+1
	mva :STACKORIGIN+STACKWIDTH*2,x MOVE+2
	mva :STACKORIGIN+STACKWIDTH*3,x MOVE+3
	dex

; optimize OK (examples\drunkman.pas), line = 63

	lda POS
	add MOVE
	sta POS

; optimize OK (examples\drunkman.pas), line = 64

	ldy NUM
	mva POS adr.HPOSP,y

; optimize OK (examples\drunkman.pas), line = 65

	mva POS RESULT
@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

MOVE	= DATAORIGIN+$007C
NUM	= DATAORIGIN+$0080
POS	= DATAORIGIN+$0081
RESULT	= DATAORIGIN+$0082

@VarData	= MOVE
@VarDataSize	= 7

	rts						; ret
.endl

.local	MAINPROC					; PROCEDURE

; optimize OK (examples\drunkman.pas), line = 71

	mva #$00 GRACTL

; optimize FAIL ('GRAPH.INITGRAPH_0149', examples\drunkman.pas), line = 73
	inx
	mva #$00 :STACKORIGIN,x
	jsr GRAPH.INITGRAPH_0149

; optimize OK (examples\drunkman.pas), line = 75

	lda #$01
	sta $02F0

; optimize FAIL (100, examples\drunkman.pas), line = 77
	@printSTRING #CODEORIGIN+$000D
	@print #$9B
	@printSTRING #CODEORIGIN+$002B
	@print #$9B
	@printSTRING #CODEORIGIN+$002A

; optimize FAIL (100, examples\drunkman.pas), line = 78
	@printSTRING #CODEORIGIN+$002D
	@printEOL

; optimize FAIL (100, examples\drunkman.pas), line = 79
	@printSTRING #CODEORIGIN+$0052

; optimize FAIL ('CRT.GOTOXY', examples\drunkman.pas), line = 80
	inx
	mva #$02 :STACKORIGIN,x
	inx
	mva #$18 :STACKORIGIN,x
	jsr CRT.GOTOXY

; optimize FAIL (100, examples\drunkman.pas), line = 81
	@printSTRING #CODEORIGIN+$006E

; optimize OK (examples\drunkman.pas), line = 83

	lda RAMTOP
	sub #$0C
	sta PGMMEM
	lda #$00
	sbc #$00
	sta PGMMEM+1

; optimize OK (examples\drunkman.pas), line = 85

	mva PGMMEM PMBASE

; optimize OK (examples\drunkman.pas), line = 87

	lda #$00
	sta :eax
	lda PGMMEM
	sta :eax+1
	lda :eax
	sta PGMMEM
	lda :eax+1
	sta PGMMEM+1

; optimize OK (examples\drunkman.pas), line = 89

	mva #$2E SDMCTL

; optimize OK (examples\drunkman.pas), line = 91

	lda PGMMEM
	add #$80
	sta :edx
	lda PGMMEM+1
	adc #$01
	sta :edx+1
	lda #$00
	sta :ecx
	lda #$03
	sta :ecx+1
	lda #$00
	sta :eax
	jsr @fill

; optimize OK (examples\drunkman.pas), line = 93

	lda PGMMEM
	add #$2E
	sta :ecx
	lda PGMMEM+1
	adc #$02
	sta :ecx+1
	lda P0_DATA
	sta :edx
	lda P0_DATA+1
	sta :edx+1
	lda #$08
	sta :eax
	lda #$00
	sta :eax+1
	jsr @move

; optimize OK (examples\drunkman.pas), line = 94

	lda PGMMEM
	add #$A8
	sta :ecx
	lda PGMMEM+1
	adc #$02
	sta :ecx+1
	lda P1_DATA
	sta :edx
	lda P1_DATA+1
	sta :edx+1
	lda #$0B
	sta :eax
	lda #$00
	sta :eax+1
	jsr @move

; optimize OK (examples\drunkman.pas), line = 95

	lda PGMMEM
	add #$28
	sta :ecx
	lda PGMMEM+1
	adc #$03
	sta :ecx+1
	lda P2_DATA
	sta :edx
	lda P2_DATA+1
	sta :edx+1
	lda #$0F
	sta :eax
	lda #$00
	sta :eax+1
	jsr @move

; optimize OK (examples\drunkman.pas), line = 96

	lda PGMMEM
	add #$D5
	sta :ecx
	lda PGMMEM+1
	adc #$03
	sta :ecx+1
	lda P3_DATA
	sta :edx
	lda P3_DATA+1
	sta :edx+1
	lda #$0F
	sta :eax
	lda #$00
	sta :eax+1
	jsr @move

; optimize OK (examples\drunkman.pas), line = 98

	mva #$03 GRACTL

; optimize OK (examples\drunkman.pas), line = 102

	mva #$01 adr.SIZEP+$03

; optimize OK (examples\drunkman.pas), line = 104

	mva #$98 adr.PCOLR+$00

; optimize OK (examples\drunkman.pas), line = 105

	mva #$08 adr.PCOLR+$01

; optimize OK (examples\drunkman.pas), line = 106

	mva #$E4 adr.PCOLR+$02

; optimize OK (examples\drunkman.pas), line = 107

	mva #$F8 adr.PCOLR+$03

; optimize OK (examples\drunkman.pas), line = 109

	mva #$5A P3

; optimize OK (examples\drunkman.pas), line = 110

	mva #$46 P0

; optimize OK (examples\drunkman.pas), line = 111

	mva #$AA P1

; optimize OK (examples\drunkman.pas), line = 112

	ldy #$00
	mva P0 adr.HPOSP,y

; optimize OK (examples\drunkman.pas), line = 113

	iny
	mva P1 adr.HPOSP,y

; optimize OK (examples\drunkman.pas), line = 114

	mva #$78 adr.HPOSP+$02

; optimize OK (examples\drunkman.pas), line = 115

	ldy #$03
	mva P3 adr.HPOSP,y

; optimize OK (examples\drunkman.pas), line = 117

	mva #$FF CH

; --- RepeatUntilProlog
l_02AF

; optimize OK (examples\drunkman.pas), line = 120

	ldy #$00
	lda JOYSTICK.adr.STICK,y
	cmp #$0B
	jne l_02C2

; optimize FAIL (0, examples\drunkman.pas), line = 121
	dec P3

; optimize OK (examples\drunkman.pas), line = 122

	lda P3
	cmp #$32
	jcs l_02D9

; optimize OK (examples\drunkman.pas), line = 123

	mva #$32 P3
l_02D9

; optimize OK (examples\drunkman.pas), line = 125

	ldy #$03
	mva P3 adr.HPOSP,y

; optimize FAIL ('DELAYPROC', examples\drunkman.pas), line = 126
	inx
	mva #$40 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	jsr @expandToCARD.WORD
	jsr DELAYPROC
	jmp l_02F2
l_02C2

; optimize OK (examples\drunkman.pas), line = 129

	ldy #$00
	lda JOYSTICK.adr.STICK,y
	cmp #$07
	jne l_0305

; optimize FAIL (0, examples\drunkman.pas), line = 130
	inc P3

; optimize OK (examples\drunkman.pas), line = 131

	lda P3
	cmp #$BF
	jcc l_031C

; optimize OK (examples\drunkman.pas), line = 132

	mva #$BE P3
l_031C

; optimize OK (examples\drunkman.pas), line = 134

	ldy #$03
	mva P3 adr.HPOSP,y

; optimize FAIL ('DELAYPROC', examples\drunkman.pas), line = 135
	inx
	mva #$40 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	jsr @expandToCARD.WORD
	jsr DELAYPROC
l_0305
l_02F2

; optimize OK (examples\drunkman.pas), line = 139

	ldy #$00
	lda JOYSTICK.adr.STRIG,y
	jne l_0341

; optimize OK (examples\drunkman.pas), line = 141

	mva #$01 HITCLR

; optimize OK (examples\drunkman.pas), line = 142

	ldy #$03
	mva P3 adr.HPOSM,y

; optimize OK (examples\drunkman.pas), line = 145

	mva #$46 M3R

; --- WhileProlog
	jmp l_0353
l_0354

; optimize FAIL ('DELAYPROC', examples\drunkman.pas), line = 148
	inx
	mva #$40 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	jsr @expandToCARD.WORD
	jsr DELAYPROC

; optimize OK (examples\drunkman.pas), line = 150

	lda PGMMEM
	add #$80
	sta :edx
	lda PGMMEM+1
	adc #$01
	sta :edx+1
	ldy #$7F
	lda #$00
	sta:rpl (:edx),y-

; optimize OK (examples\drunkman.pas), line = 151

	lda PGMMEM
	add #$80
	sta :STACKORIGIN+10
	lda PGMMEM+1
	adc #$01
	sta :ecx+1
	lda :STACKORIGIN+10
	add M3R
	sta :ecx
	scc
	inc :ecx+1
	lda M3_DATA
	sta :edx
	lda M3_DATA+1
	sta :edx+1
	lda #$0A
	sta :eax
	lda #$00
	sta :eax+1
	jsr @move

; optimize OK (examples\drunkman.pas), line = 153

	ldy #$03
	lda adr.SIZEP+$03
	cmp #$01
	jne l_038E
	lda P0
	cmp #$46
	jne l_038E

; optimize OK (examples\drunkman.pas), line = 154

	lda PGMMEM
	add #$80
	sta :edx
	lda PGMMEM+1
	adc #$01
	sta :edx+1
	ldy #$7F
	lda #$00
	sta:rpl (:edx),y-

; --- RepeatUntilProlog
l_0399

; optimize FAIL ('BULLET_PROCFUNC', examples\drunkman.pas), line = 156
	inx
	mva #$01 :STACKORIGIN,x
	jsr @expandToCARD.BYTE
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva P0 :STACKORIGIN,x
	jsr BULLET_PROCFUNC
	mva :STACKORIGIN,x P0
	dex

; optimize OK (examples\drunkman.pas), line = 157

	lda $D00C
	sta COLLISION

; optimize OK (examples\drunkman.pas), line = 158

	cmp #$04
	jcc l_0399
	jmp l_03BD
l_038E

; optimize OK (examples\drunkman.pas), line = 161

	ldy #$03
	lda adr.SIZEP+$03
	cmp #$02
	jne l_03DC
	lda P1
	cmp #$AA
	jne l_03DC

; optimize OK (examples\drunkman.pas), line = 162

	lda PGMMEM
	add #$80
	sta :edx
	lda PGMMEM+1
	adc #$01
	sta :edx+1
	ldy #$7F
	lda #$00
	sta:rpl (:edx),y-

; --- RepeatUntilProlog
l_03E7

; optimize FAIL ('BULLET_PROCFUNC', examples\drunkman.pas), line = 164
	inx
	mva #$FF :STACKORIGIN,x
	jsr @expandToCARD.SHORT
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva P1 :STACKORIGIN,x
	jsr BULLET_PROCFUNC
	mva :STACKORIGIN,x P1
	dex

; optimize OK (examples\drunkman.pas), line = 165

	lda $D00D
	sta COLLISION

; optimize OK (examples\drunkman.pas), line = 166

	cmp #$04
	jcc l_03E7
	jmp l_040B
l_03DC

; optimize OK (examples\drunkman.pas), line = 169

	lda adr.SIZEP+$03
	cmp #$04
	jne l_041E

; optimize OK (examples\drunkman.pas), line = 170

	lda PGMMEM
	add #$80
	sta :edx
	lda PGMMEM+1
	adc #$01
	sta :edx+1
	ldy #$7F
	lda #$00
	sta:rpl (:edx),y-

; optimize OK (examples\drunkman.pas), line = 171

	lda P0
	cmp #$46
	jeq l_043A

; --- RepeatUntilProlog
l_043C

; optimize FAIL ('BULLET_PROCFUNC', examples\drunkman.pas), line = 173
	inx
	mva #$FF :STACKORIGIN,x
	jsr @expandToCARD.SHORT
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva P0 :STACKORIGIN,x
	jsr BULLET_PROCFUNC
	mva :STACKORIGIN,x P0
	dex

; optimize OK (examples\drunkman.pas), line = 174

	lda P0
	cmp #$46
	jne l_043C
l_043A

; optimize OK (examples\drunkman.pas), line = 176

	lda P1
	cmp #$AA
	jeq l_0466

; --- RepeatUntilProlog
l_0468

; optimize FAIL ('BULLET_PROCFUNC', examples\drunkman.pas), line = 178
	inx
	mva #$01 :STACKORIGIN,x
	jsr @expandToCARD.BYTE
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva P1 :STACKORIGIN,x
	jsr BULLET_PROCFUNC
	mva :STACKORIGIN,x P1
	dex

; optimize OK (examples\drunkman.pas), line = 179

	lda P1
	cmp #$AA
	jne l_0468
l_0466
l_041E
l_040B
l_03BD

; optimize FAIL (0, examples\drunkman.pas), line = 182
	dec M3R
l_0353

; optimize OK (examples\drunkman.pas), line = 147

	lda M3R
	cmp #$1F
	jcs l_0354

; optimize OK (examples\drunkman.pas), line = 184

	lda PGMMEM
	add #$80
	sta :edx
	lda PGMMEM+1
	adc #$01
	sta :edx+1
	ldy #$7F
	lda #$00
	sta:rpl (:edx),y-
l_0341

; optimize OK (examples\drunkman.pas), line = 186

	lda CH
	cmp #$1C
	jne l_02AF

; optimize OK (examples\drunkman.pas), line = 188

	mva #$00 GRACTL
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl
l_0092

; optimize FAIL ('MAINPROC', examples\drunkman.pas), line = 192
	jsr MAINPROC

; ------------------------------------------------------------

CH	= $02FC
RAMTOP	= $6A
GPRIOR	= $026F
PMBASE	= $D407
SDMCTL	= $022F
GRACTL	= $D01D
HITCLR	= $D01E
COLLISION	= DATAORIGIN+$002D
P0	= DATAORIGIN+$002E
P1	= DATAORIGIN+$002F
P3	= DATAORIGIN+$0030
M3R	= DATAORIGIN+$0031
PGMMEM	= DATAORIGIN+$0032
adr.PCOLR	= $02C0
.var PCOLR	= adr.PCOLR .word
adr.HPOSP	= $D000
.var HPOSP	= adr.HPOSP .word
adr.HPOSM	= $D004
.var HPOSM	= adr.HPOSM .word
adr.SIZEP	= $D008
.var SIZEP	= adr.SIZEP .word
adr.P0_DATA	= DATAORIGIN+$0034
.var P0_DATA	= adr.P0_DATA .word
adr.P1_DATA	= DATAORIGIN+$003C
.var P1_DATA	= adr.P1_DATA .word
adr.P2_DATA	= DATAORIGIN+$0047
.var P2_DATA	= adr.P2_DATA .word
adr.P3_DATA	= DATAORIGIN+$0056
.var P3_DATA	= adr.P3_DATA .word
adr.M3_DATA	= DATAORIGIN+$0065
.var M3_DATA	= adr.M3_DATA .word
@exit

@halt	ldx #0
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.endif

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	eif

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	eif

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	eif

	.ifdef MAIN.DOS.@UnitInit
	jsr MAIN.DOS.@UnitInit
	eif

	.ifdef MAIN.STRUTILS.@UnitInit
	jsr MAIN.STRUTILS.@UnitInit
	eif

	.ifdef MAIN.SYSUTILS.@UnitInit
	jsr MAIN.SYSUTILS.@UnitInit
	eif

	.ifdef MAIN.TYPES.@UnitInit
	jsr MAIN.TYPES.@UnitInit
	eif

	.ifdef MAIN.GRAPH.@UnitInit
	jsr MAIN.GRAPH.@UnitInit
	eif

	.ifdef MAIN.JOYSTICK.@UnitInit
	jsr MAIN.JOYSTICK.@UnitInit
	eif
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.DOS) > 0
	.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
	eif

	ift .SIZEOF(MAIN.STRUTILS) > 0
	.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
	eif

	ift .SIZEOF(MAIN.SYSUTILS) > 0
	.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
	eif

	ift .SIZEOF(MAIN.TYPES) > 0
	.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
	eif

	ift .SIZEOF(MAIN.GRAPH) > 0
	.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
	eif

	ift .SIZEOF(MAIN.JOYSTICK) > 0
	.print 'JOYSTICK: ',MAIN.JOYSTICK,'..',MAIN.JOYSTICK+.SIZEOF(MAIN.JOYSTICK)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',*-1

; ------------------------------------------------------------

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $27 $00 $00 $00 $17 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $38 $44 $7C $7C  $7C $7C $7C $38 $1C $22 $3E $3E  $1C $08 $08 $08 $08 $1C $3E $18
.by  $18 $18 $3C $7E $7E $7E $7E $42  $5A $42 $7E $42 $7E $7E $24 $95  $55 $3E $42 $81 $81 $A5 $81 $99
.by  $81 $A5 $99 $42 $3C $80 $80 $FF  $40 $40 $FF $80 $80 $FF $40 $40

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 131

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $1C $44 $52  $55 $4E $4B $20 $4D $41 $4E $20
.by  $53 $48 $6F $6F $54 $49 $4E $47  $20 $4E $69 $47 $68 $54 $6D $41  $72 $65 $00 $00 $00 $23 $48 $69
.by  $6B $21 $20 $53 $68 $6F $6F $74  $20 $67 $6C $61 $73 $73 $65 $73  $20 $62 $79 $20 $70 $72 $65 $73
.by  $73 $69 $6E $67 $20 $48 $69 $6B  $21 $00 $1A $6A $6F $79 $73 $74  $69 $63 $6B $20 $66 $69 $72 $65
.by  $20 $62 $75 $74 $74 $6F $6E $21  $20 $48 $69 $6B $21 $00 $1B $50  $52 $45 $53 $53 $20 $45 $53 $43
.by  $41 $50 $45 $20 $4B $45 $59 $20  $54 $4F $20 $57 $41 $4B $45 $20  $55 $50 $00
.endm

	end
