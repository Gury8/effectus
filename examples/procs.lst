mads 2.1.0 build 4 (27 Oct 19)
  3726 					opt l+
    95
    96 				.print 'RUNLIB: ',RUNLIB,'..',*
    96 				RUNLIB: $20DF..$2249
    97
    98 				; ------------------------------------------------------------
    99
   100 2249			START
   101 2249 BA				tsx
   102 224A 8E 30 25			stx MAIN.@halt+1
   103
   104 					.ifdef fmulinit
   105 					fmulinit
   106 					eif
   107
   108 = 0023			VLEN	= VARDATASIZE-VARINITSIZE
   109 = 2549			VADR	= DATAORIGIN+VARINITSIZE
   110
   111 					ift VADR > $BFFF
   112 					ert 'Invalid memory address range ',VADR
   113 					eli (VLEN>0) && (VLEN<=256)
   114 224D A2 DD			ldx #256-VLEN
   115 224F A9 00			lda #0
   116 2251 9D 6C 24 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   117 					eli VLEN>0
   118 					@fill #VADR #VLEN #0
   119 					eif
   120
   121 2257 A2 0F			ldx #$0f
   122 2259 BD 40 03 9D 33 25 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   123
   124 2262 E8				inx		; X = 0 !!!
   125 2263 86 8E			stx bp		; lo BP = 0
   126
   127 2265				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: procs.a65]
   128
   129 2265			.local	MAIN						; PROCEDURE
   130
   131 2265 4C 2C 25			jmp l_00E6
   132
   133 				; ------------------------------------------------------------
   134
   135 2268			.local	SYSTEM						; UNIT
   136
   137 				; ------------------------------------------------------------
   138
   139 = 0648			M_PI_2	= $0648
   140 = 0192			D_PI_2	= $0192
   141 = 0004			D_PI_180	= $0004
   142 = 0000			MGTIA	= $0000
   143 = 0080			MVBXE	= $0080
   144 = 0000			VBXE_XDLADR	= $0000
   145 = 0100			VBXE_BCBADR	= $0100
   146 = 1000			VBXE_MAPADR	= $1000
   147 = 5000			VBXE_OVRADR	= $5000
   148 = B000			VBXE_WINDOW	= $B000
   149 = 0000			IDLI	= $0000
   150 = 0001			IVBL	= $0001
   151 = 00FE			CH_DELCHR	= $00FE
   152 = 009B			CH_ENTER	= $009B
   153 = 001B			CH_ESC	= $001B
   154 = 001C			CH_CURS_UP	= $001C
   155 = 001D			CH_CURS_DOWN	= $001D
   156 = 001E			CH_CURS_LEFT	= $001E
   157 = 001F			CH_CURS_RIGHT	= $001F
   158 = 007F			CH_TAB	= $007F
   159 = 009B			CH_EOL	= $009B
   160 = 007D			CH_CLR	= $007D
   161 = 00FD			CH_BELL	= $00FD
   162 = 007E			CH_DEL	= $007E
   163 = 009C			CH_DELLINE	= $009C
   164 = 009D			CH_INSLINE	= $009D
   165 = 0000			COLOR_BLACK	= $0000
   166 = 000E			COLOR_WHITE	= $000E
   167 = 0032			COLOR_RED	= $0032
   168 = 0096			COLOR_CYAN	= $0096
   169 = 0068			COLOR_VIOLET	= $0068
   170 = 00C4			COLOR_GREEN	= $00C4
   171 = 0074			COLOR_BLUE	= $0074
   172 = 00EE			COLOR_YELLOW	= $00EE
   173 = 0028			COLOR_ORANGE	= $0028
   174 = 00E4			COLOR_BROWN	= $00E4
   175 = 003C			COLOR_LIGHTRED	= $003C
   176 = 0004			COLOR_GRAY1	= $0004
   177 = 0006			COLOR_GRAY2	= $0006
   178 = 000A			COLOR_GRAY3	= $000A
   179 = 00CC			COLOR_LIGHTGREEN	= $00CC
   180 = 007C			COLOR_LIGHTBLUE	= $007C
   181 = 0004			FMOPENREAD	= $0004
   182 = 0008			FMOPENWRITE	= $0008
   183 = 0009			FMOPENAPPEND	= $0009
   184 = 000C			FMOPENREADWRITE	= $000C
   185 = 2543			SCREENWIDTH	= DATAORIGIN+$0000
   186 = 2545			SCREENHEIGHT	= DATAORIGIN+$0002
   187 = 2547			DATESEPARATOR	= DATAORIGIN+$0004
   188 = D014			TVSYSTEM	= $D014
   189 = 02C0			adr.PALETTE	= $02C0
   190 2268			.var PALETTE	= adr.PALETTE .word
   191 = D012			adr.HPALETTE	= $D012
   192 2268			.var HPALETTE	= adr.HPALETTE .word
   193 = 2548			FILEMODE	= DATAORIGIN+$0005
   194 = 2549			SCREENMODE	= DATAORIGIN+$0006
   195 = 254A			IORESULT	= DATAORIGIN+$0007
   196 = 254B			EOLN	= DATAORIGIN+$0008
   197 = 254C			RNDSEED	= DATAORIGIN+$0009
   198
   199 = 2268 C0 02		PALETTE
   199 = 226A 12 D0		HPALETTE
   199 				.endl							; UNIT SYSTEM
   200
   201 				; ------------------------------------------------------------
   202
   203 226C			.local	DOS						; UNIT
   204
   205 				; ------------------------------------------------------------
   206
   207 = D014			PALNTSC	= $D014
   208
   209 				.endl							; UNIT DOS
   210
   211 				; ------------------------------------------------------------
   212
   213 226C			.local	STRUTILS					; UNIT
   214
   215 				; ------------------------------------------------------------
   216
   217 				.endl							; UNIT STRUTILS
   218
   219 				; ------------------------------------------------------------
   220
   221 226C			.local	SYSUTILS					; UNIT
   222
   223 				; ------------------------------------------------------------
   224
   225 = 0001			FAREADONLY	= $0001
   226 = 0002			FAHIDDEN	= $0002
   227 = 0004			FASYSFILE	= $0004
   228 = 0008			FAVOLUMEID	= $0008
   229 = 0010			FADIRECTORY	= $0010
   230 = 0020			FAARCHIVE	= $0020
   231 = 003F			FAANYFILE	= $003F
   232
   233 				.endl							; UNIT SYSUTILS
   234
   235 				; ------------------------------------------------------------
   236
   237 226C			.local	ATARI						; UNIT
   238
   239 				; ------------------------------------------------------------
   240
   241 = 0012			RTCLOK	= $0012
   242 = 004D			ATRACT	= $004D
   243 = 0052			LMARGIN	= $0052
   244 = 0053			RMARGIN	= $0053
   245 = 0054			ROWCRS	= $0054
   246 = 0055			COLCRS	= $0055
   247 = 0057			DINDEX	= $0057
   248 = 0058			SAVMSC	= $0058
   249 = 006A			RAMTOP	= $006A
   250 = 0200			VDSLST	= $0200
   251 = 0230			SDLSTL	= $0230
   252 = 0290			TXTROW	= $0290
   253 = 0291			TXTCOL	= $0291
   254 = 0293			TINDEX	= $0293
   255 = 0294			TXTMSC	= $0294
   256 = 022F			SDMCTL	= $022F
   257 = 026F			GPRIOR	= $026F
   258 = 02F0			CRSINH	= $02F0
   259 = 02F3			CHACT	= $02F3
   260 = 02F4			CHBAS	= $02F4
   261 = 02FC			CH	= $02FC
   262 = 02C0			PCOLR0	= $02C0
   263 = 02C1			PCOLR1	= $02C1
   264 = 02C2			PCOLR2	= $02C2
   265 = 02C3			PCOLR3	= $02C3
   266 = 02C4			COLOR0	= $02C4
   267 = 02C5			COLOR1	= $02C5
   268 = 02C6			COLOR2	= $02C6
   269 = 02C7			COLOR3	= $02C7
   270 = 02C8			COLOR4	= $02C8
   271 = 02C8			COLBAKS	= $02C8
   272 = D000			HPOSP0	= $D000
   273 = D001			HPOSP1	= $D001
   274 = D002			HPOSP2	= $D002
   275 = D003			HPOSP3	= $D003
   276 = D004			HPOSM0	= $D004
   277 = D005			HPOSM1	= $D005
   278 = D006			HPOSM2	= $D006
   279 = D007			HPOSM3	= $D007
   280 = D008			SIZEP0	= $D008
   281 = D009			SIZEP1	= $D009
   282 = D00A			SIZEP2	= $D00A
   283 = D00B			SIZEP3	= $D00B
   284 = D00C			SIZEM	= $D00C
   285 = D00D			GRAFP0	= $D00D
   286 = D00E			GRAFP1	= $D00E
   287 = D00F			GRAFP2	= $D00F
   288 = D010			GRAFP3	= $D010
   289 = D011			GRAFM	= $D011
   290 = D004			P0PF	= $D004
   291 = D014			PAL	= $D014
   292 = D012			COLPM0	= $D012
   293 = D013			COLPM1	= $D013
   294 = D014			COLPM2	= $D014
   295 = D015			COLPM3	= $D015
   296 = D016			COLPF0	= $D016
   297 = D017			COLPF1	= $D017
   298 = D018			COLPF2	= $D018
   299 = D019			COLPF3	= $D019
   300 = D01A			COLBK	= $D01A
   301 = D01B			PRIOR	= $D01B
   302 = D01D			GRACTL	= $D01D
   303 = D01E			HITCLR	= $D01E
   304 = D200			AUDF1	= $D200
   305 = D201			AUDC1	= $D201
   306 = D202			AUDF2	= $D202
   307 = D203			AUDC2	= $D203
   308 = D204			AUDF3	= $D204
   309 = D205			AUDC3	= $D205
   310 = D206			AUDF4	= $D206
   311 = D207			AUDC4	= $D207
   312 = D208			AUDCTL	= $D208
   313 = D20F			SKSTAT	= $D20F
   314 = D301			PORTB	= $D301
   315 = D400			DMACTL	= $D400
   316 = D401			CHACTL	= $D401
   317 = D402			DLISTL	= $D402
   318 = D404			HSCROL	= $D404
   319 = D405			VSCROL	= $D405
   320 = D407			PMBASE	= $D407
   321 = D409			CHBASE	= $D409
   322 = D40A			WSYNC	= $D40A
   323 = D40B			VCOUNT	= $D40B
   324 = D40C			PENH	= $D40C
   325 = D40D			PENV	= $D40D
   326 = D40E			NMIEN	= $D40E
   327
   328 				.endl							; UNIT ATARI
   329
   330 				; ------------------------------------------------------------
   331
   332 226C			.local	CRT						; UNIT
   333
   334 226C			.local	READKEY						; FUNCTION | ASSEMBLER
   335
   336 				; ---------------------  ASM Block 063  ---------------------
   337
   338 226C 8A 48			txa:pha
   339
   340 226E 20 39 22			@GetKey
   341
   342 2271 8D 4F 25			sta Result
   343
   344 2274 68 AA			pla:tax
   345
   346 2276			@exit
   347
   348 				; ------------------------------------------------------------
   349
   350 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   351 				; as Pointer
   352
   353 2276 E8				inx						; add bx, 1
   354 2277 AD 4F 25 95 98		mva RESULT :STACKORIGIN,x
   355
   356 					.ifdef @new
   357 					@FreeMem #@VarData #@VarDataSize
   358 					eif
   359
   360 				; ------------------------------------------------------------
   361
   362 = 254F			RESULT	= DATAORIGIN+$000C
   363
   364 = 254F			@VarData	= RESULT
   365 = 0001			@VarDataSize	= 1
   366
   367 227C 60				rts						; ret
   368 				.endl
   369
   370 				; ------------------------------------------------------------
   371
   372 = 254E			TEXTATTR	= DATAORIGIN+$000B
   373 = D01F			CONSOL	= $D01F
   374 = 0000			CN_START_SELECT_OPTION	= $0000
   375 = 0001			CN_SELECT_OPTION	= $0001
   376 = 0002			CN_START_OPTION	= $0002
   377 = 0003			CN_OPTION	= $0003
   378 = 0004			CN_START_SELECT	= $0004
   379 = 0005			CN_SELECT	= $0005
   380 = 0006			CN_START	= $0006
   381 = 0007			CN_NONE	= $0007
   382 = 0000			BW40	= $0000
   383 = 0001			CO40	= $0001
   384 = 0002			BW80	= $0002
   385 = 0003			CO80	= $0003
   386 = 0007			MONO	= $0007
   387 = 0001			C40	= $0001
   388 = 0003			C80	= $0003
   389 = 0000			BLACK	= $0000
   390 = 0001			BLUE	= $0001
   391 = 0002			GREEN	= $0002
   392 = 0003			CYAN	= $0003
   393 = 0004			RED	= $0004
   394 = 0005			MAGENTA	= $0005
   395 = 0006			BROWN	= $0006
   396 = 0007			LIGHTGRAY	= $0007
   397 = 0008			DARKGRAY	= $0008
   398 = 0009			LIGHTBLUE	= $0009
   399 = 000A			LIGHTGREEN	= $000A
   400 = 000B			LIGHTCYAN	= $000B
   401 = 000C			LIGHTRED	= $000C
   402 = 000D			LIGHTMAGENTA	= $000D
   403 = 000E			YELLOW	= $000E
   404 = 000F			WHITE	= $000F
   405 = 0080			BLINK	= $0080
   406
   407 				.endl							; UNIT CRT
   408
   409 227D			.local	PRINTTEXTPROC					; PROCEDURE
   410
   411 				; optimize FAIL (100, examples\procs.pas), line = 17
   412 					@printSTRING #CODEORIGIN+$000D
   412 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   412 227D A0 20		 LDY> CODEORIGIN+$000D
   412 227F A9 0D		 LDA< CODEORIGIN+$000D
   412 2281 20 24 21		 JSR @PRINTSTRING
   413 					@print #$9B
   413 				 LDY# $9B\ JSR @PRINT
   413 2284 A0 9B		 LDY# $9B
   413 2286 20 1B 21		 JSR @PRINT
   414 					@printSTRING #CODEORIGIN+$000F
   414 				 LDY> CODEORIGIN+$000F\ LDA< CODEORIGIN+$000F\ JSR @PRINTSTRING
   414 2289 A0 20		 LDY> CODEORIGIN+$000F
   414 228B A9 0F		 LDA< CODEORIGIN+$000F
   414 228D 20 24 21		 JSR @PRINTSTRING
   415 					@print #$9B
   415 				 LDY# $9B\ JSR @PRINT
   415 2290 A0 9B		 LDY# $9B
   415 2292 20 1B 21		 JSR @PRINT
   416 					@printSTRING #CODEORIGIN+$000C
   416 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   416 2295 A0 20		 LDY> CODEORIGIN+$000C
   416 2297 A9 0C		 LDA< CODEORIGIN+$000C
   416 2299 20 24 21		 JSR @PRINTSTRING
   417 					@print #$9B
   417 				 LDY# $9B\ JSR @PRINT
   417 229C A0 9B		 LDY# $9B
   417 229E 20 1B 21		 JSR @PRINT
   418 					@printSTRING #CODEORIGIN+$000C
   418 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   418 22A1 A0 20		 LDY> CODEORIGIN+$000C
   418 22A3 A9 0C		 LDA< CODEORIGIN+$000C
   418 22A5 20 24 21		 JSR @PRINTSTRING
   419 22A8			@exit
   420 					.ifdef @new
   421 					@FreeMem #@VarData #@VarDataSize
   422 					eif
   423 22A8 60				rts						; ret
   424 				.endl
   425
   426 22A9			.local	SHOWNUMPROC					; PROCEDURE
   427
   428 				; ------------------------------------------------------------
   429
   430 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   431 				; as Pointer
   432 22A9 B5 98 8D 55 25		mva :STACKORIGIN,x N
   433 22AE CA				dex						; sub bx, 1
   434
   435 				; optimize FAIL (100, examples\procs.pas), line = 22
   436 22AF E8				inx
   437 22B0 AD 55 25 95 98		mva N :STACKORIGIN,x
   438 22B5 20 A2 21			jsr @printBYTE
   439 22B8 CA				dex
   440 22B9 20 16 21			@printEOL
   441
   442 				; ------------------------------------------------------------
   443
   444 = 2555			N	= DATAORIGIN+$0012
   445
   446 = 2555			@VarData	= N
   447 = 0001			@VarDataSize	= 1
   448
   449 22BC			@exit
   450 					.ifdef @new
   451 					@FreeMem #@VarData #@VarDataSize
   452 					eif
   453 22BC 60				rts						; ret
   454 				.endl
   455
   456 22BD			.local	SUMBYTESPROC					; PROCEDURE
   457
   458 				; ------------------------------------------------------------
   459
   460 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   461 				; as Pointer
   462 22BD B5 98 8D 57 25		mva :STACKORIGIN,x N2
   463 22C2 CA				dex						; sub bx, 1
   464
   465 				; ------------------------------------------------------------
   466
   467 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   468 				; as Pointer
   469 22C3 B5 98 8D 56 25		mva :STACKORIGIN,x N1
   470 22C8 CA				dex						; sub bx, 1
   471
   472 				; optimize OK (examples\procs.pas), line = 32
   473
   474 22C9 AD 56 25			lda N1
   475 22CC 18 6D 57 25			add N2
   476 22D0 8D 58 25			sta TOTAL1
   477
   478 				; optimize FAIL (100, examples\procs.pas), line = 33
   479 					@printSTRING #CODEORIGIN+$0020
   479 				 LDY> CODEORIGIN+$0020\ LDA< CODEORIGIN+$0020\ JSR @PRINTSTRING
   479 22D3 A0 20		 LDY> CODEORIGIN+$0020
   479 22D5 A9 20		 LDA< CODEORIGIN+$0020
   479 22D7 20 24 21		 JSR @PRINTSTRING
   480
   481 				; optimize FAIL (100, examples\procs.pas), line = 34
   482 22DA E8				inx
   483 22DB AD 58 25 95 98		mva TOTAL1 :STACKORIGIN,x
   484 22E0 20 A2 21			jsr @printBYTE
   485 22E3 CA				dex
   486 22E4 20 16 21			@printEOL
   487
   488 				; ------------------------------------------------------------
   489
   490 = 2556			N1	= DATAORIGIN+$0013
   491 = 2557			N2	= DATAORIGIN+$0014
   492 = 2558			TOTAL1	= DATAORIGIN+$0015
   493
   494 = 2556			@VarData	= N1
   495 = 0003			@VarDataSize	= 3
   496
   497 22E7			@exit
   498 					.ifdef @new
   499 					@FreeMem #@VarData #@VarDataSize
   500 					eif
   501 22E7 60				rts						; ret
   502 				.endl
   503
   504 22E8			.local	SUMCARDSPROC					; PROCEDURE
   505
   506 				; ------------------------------------------------------------
   507
   508 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   509 				; as Pointer
   510 22E8 B5 98 8D 5B 25		mva :STACKORIGIN,x C2
   511 22ED B5 A8 8D 5C 25		mva :STACKORIGIN+STACKWIDTH,x C2+1
   512 22F2 CA				dex						; sub bx, 1
   513
   514 				; ------------------------------------------------------------
   515
   516 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   517 				; as Pointer
   518 22F3 B5 98 8D 59 25		mva :STACKORIGIN,x C1
   519 22F8 B5 A8 8D 5A 25		mva :STACKORIGIN+STACKWIDTH,x C1+1
   520 22FD CA				dex						; sub bx, 1
   521
   522 				; optimize OK (examples\procs.pas), line = 44
   523
   524 22FE AD 59 25			lda C1
   525 2301 18 6D 5B 25			add C2
   526 2305 8D 5D 25			sta TOTAL2
   527 2308 AD 5A 25			lda C1+1
   528 230B 6D 5C 25			adc C2+1
   529 230E 8D 5E 25			sta TOTAL2+1
   530
   531 				; optimize FAIL (100, examples\procs.pas), line = 45
   532 					@printSTRING #CODEORIGIN+$0020
   532 				 LDY> CODEORIGIN+$0020\ LDA< CODEORIGIN+$0020\ JSR @PRINTSTRING
   532 2311 A0 20		 LDY> CODEORIGIN+$0020
   532 2313 A9 20		 LDA< CODEORIGIN+$0020
   532 2315 20 24 21		 JSR @PRINTSTRING
   533
   534 				; optimize FAIL (100, examples\procs.pas), line = 46
   535 2318 E8				inx
   536 2319 AD 5D 25 95 98		mva TOTAL2 :STACKORIGIN,x
   537 231E AD 5E 25 95 A8		mva TOTAL2+1 :STACKORIGIN+STACKWIDTH,x
   538 2323 20 9C 21			jsr @printWORD
   539 2326 CA				dex
   540 2327 20 16 21			@printEOL
   541
   542 				; ------------------------------------------------------------
   543
   544 = 2559			C1	= DATAORIGIN+$0016
   545 = 255B			C2	= DATAORIGIN+$0018
   546 = 255D			TOTAL2	= DATAORIGIN+$001A
   547
   548 = 2559			@VarData	= C1
   549 = 0006			@VarDataSize	= 6
   550
   551 232A			@exit
   552 					.ifdef @new
   553 					@FreeMem #@VarData #@VarDataSize
   554 					eif
   555 232A 60				rts						; ret
   556 				.endl
   557
   558 232B			.local	NUMBERSPROC					; PROCEDURE
   559
   560 				; ------------------------------------------------------------
   561
   562 				; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
   563 				; as Pointer
   564 232B B5 98 8D 68 25		mva :STACKORIGIN,x E5
   565 2330 B5 A8 8D 69 25		mva :STACKORIGIN+STACKWIDTH,x E5+1
   566 2335 B5 B8 8D 6A 25		mva :STACKORIGIN+STACKWIDTH*2,x E5+2
   567 233A B5 C8 8D 6B 25		mva :STACKORIGIN+STACKWIDTH*3,x E5+3
   568 233F CA				dex						; sub bx, 1
   569
   570 				; ------------------------------------------------------------
   571
   572 				; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
   573 				; as Pointer
   574 2340 B5 98 8D 64 25		mva :STACKORIGIN,x E4
   575 2345 B5 A8 8D 65 25		mva :STACKORIGIN+STACKWIDTH,x E4+1
   576 234A B5 B8 8D 66 25		mva :STACKORIGIN+STACKWIDTH*2,x E4+2
   577 234F B5 C8 8D 67 25		mva :STACKORIGIN+STACKWIDTH*3,x E4+3
   578 2354 CA				dex						; sub bx, 1
   579
   580 				; ------------------------------------------------------------
   581
   582 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   583 				; as Pointer
   584 2355 B5 98 8D 63 25		mva :STACKORIGIN,x E3
   585 235A CA				dex						; sub bx, 1
   586
   587 				; ------------------------------------------------------------
   588
   589 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   590 				; as Pointer
   591 235B B5 98 8D 61 25		mva :STACKORIGIN,x E2
   592 2360 B5 A8 8D 62 25		mva :STACKORIGIN+STACKWIDTH,x E2+1
   593 2365 CA				dex						; sub bx, 1
   594
   595 				; ------------------------------------------------------------
   596
   597 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   598 				; as Pointer
   599 2366 B5 98 8D 5F 25		mva :STACKORIGIN,x E1
   600 236B B5 A8 8D 60 25		mva :STACKORIGIN+STACKWIDTH,x E1+1
   601 2370 CA				dex						; sub bx, 1
   602
   603 				; optimize FAIL (100, examples\procs.pas), line = 52
   604 					@printSTRING #CODEORIGIN+$000C
   604 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   604 2371 A0 20		 LDY> CODEORIGIN+$000C
   604 2373 A9 0C		 LDA< CODEORIGIN+$000C
   604 2375 20 24 21		 JSR @PRINTSTRING
   605 					@print #$9B
   605 				 LDY# $9B\ JSR @PRINT
   605 2378 A0 9B		 LDY# $9B
   605 237A 20 1B 21		 JSR @PRINT
   606 					@printSTRING #CODEORIGIN+$002A
   606 				 LDY> CODEORIGIN+$002A\ LDA< CODEORIGIN+$002A\ JSR @PRINTSTRING
   606 237D A0 20		 LDY> CODEORIGIN+$002A
   606 237F A9 2A		 LDA< CODEORIGIN+$002A
   606 2381 20 24 21		 JSR @PRINTSTRING
   607 2384 E8				inx
   608 2385 AD 5F 25 95 98		mva E1 :STACKORIGIN,x
   609 238A AD 60 25 95 A8		mva E1+1 :STACKORIGIN+STACKWIDTH,x
   610 238F 20 9C 21			jsr @printWORD
   611 2392 CA				dex
   612 					@printSTRING #CODEORIGIN+$002F
   612 				 LDY> CODEORIGIN+$002F\ LDA< CODEORIGIN+$002F\ JSR @PRINTSTRING
   612 2393 A0 20		 LDY> CODEORIGIN+$002F
   612 2395 A9 2F		 LDA< CODEORIGIN+$002F
   612 2397 20 24 21		 JSR @PRINTSTRING
   613 239A E8				inx
   614 239B AD 61 25 95 98		mva E2 :STACKORIGIN,x
   615 23A0 AD 62 25 95 A8		mva E2+1 :STACKORIGIN+STACKWIDTH,x
   616 23A5 20 9C 21			jsr @printWORD
   617 23A8 CA				dex
   618 					@printSTRING #CODEORIGIN+$000C
   618 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   618 23A9 A0 20		 LDY> CODEORIGIN+$000C
   618 23AB A9 0C		 LDA< CODEORIGIN+$000C
   618 23AD 20 24 21		 JSR @PRINTSTRING
   619
   620 				; optimize FAIL (100, examples\procs.pas), line = 53
   621 					@printSTRING #CODEORIGIN+$000C
   621 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   621 23B0 A0 20		 LDY> CODEORIGIN+$000C
   621 23B2 A9 0C		 LDA< CODEORIGIN+$000C
   621 23B4 20 24 21		 JSR @PRINTSTRING
   622 					@print #$9B
   622 				 LDY# $9B\ JSR @PRINT
   622 23B7 A0 9B		 LDY# $9B
   622 23B9 20 1B 21		 JSR @PRINT
   623 					@printSTRING #CODEORIGIN+$0035
   623 				 LDY> CODEORIGIN+$0035\ LDA< CODEORIGIN+$0035\ JSR @PRINTSTRING
   623 23BC A0 20		 LDY> CODEORIGIN+$0035
   623 23BE A9 35		 LDA< CODEORIGIN+$0035
   623 23C0 20 24 21		 JSR @PRINTSTRING
   624 23C3 E8				inx
   625 23C4 AD 63 25 95 98		mva E3 :STACKORIGIN,x
   626 23C9 20 A2 21			jsr @printBYTE
   627 23CC CA				dex
   628 					@printSTRING #CODEORIGIN+$000C
   628 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   628 23CD A0 20		 LDY> CODEORIGIN+$000C
   628 23CF A9 0C		 LDA< CODEORIGIN+$000C
   628 23D1 20 24 21		 JSR @PRINTSTRING
   629
   630 				; optimize FAIL (100, examples\procs.pas), line = 54
   631 					@printSTRING #CODEORIGIN+$000C
   631 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   631 23D4 A0 20		 LDY> CODEORIGIN+$000C
   631 23D6 A9 0C		 LDA< CODEORIGIN+$000C
   631 23D8 20 24 21		 JSR @PRINTSTRING
   632 					@print #$9B
   632 				 LDY# $9B\ JSR @PRINT
   632 23DB A0 9B		 LDY# $9B
   632 23DD 20 1B 21		 JSR @PRINT
   633 					@printSTRING #CODEORIGIN+$003A
   633 				 LDY> CODEORIGIN+$003A\ LDA< CODEORIGIN+$003A\ JSR @PRINTSTRING
   633 23E0 A0 20		 LDY> CODEORIGIN+$003A
   633 23E2 A9 3A		 LDA< CODEORIGIN+$003A
   633 23E4 20 24 21		 JSR @PRINTSTRING
   634 23E7 E8				inx
   635 23E8 AD 64 25 95 98		mva E4 :STACKORIGIN,x
   636 23ED AD 65 25 95 A8		mva E4+1 :STACKORIGIN+STACKWIDTH,x
   637 23F2 AD 66 25 95 B8		mva E4+2 :STACKORIGIN+STACKWIDTH*2,x
   638 23F7 AD 67 25 95 C8		mva E4+3 :STACKORIGIN+STACKWIDTH*3,x
   639 23FC 20 8C 21			jsr @printINT
   640 23FF CA				dex
   641 					@printSTRING #CODEORIGIN+$003F
   641 				 LDY> CODEORIGIN+$003F\ LDA< CODEORIGIN+$003F\ JSR @PRINTSTRING
   641 2400 A0 20		 LDY> CODEORIGIN+$003F
   641 2402 A9 3F		 LDA< CODEORIGIN+$003F
   641 2404 20 24 21		 JSR @PRINTSTRING
   642 2407 E8				inx
   643 2408 AD 68 25 95 98		mva E5 :STACKORIGIN,x
   644 240D AD 69 25 95 A8		mva E5+1 :STACKORIGIN+STACKWIDTH,x
   645 2412 AD 6A 25 95 B8		mva E5+2 :STACKORIGIN+STACKWIDTH*2,x
   646 2417 AD 6B 25 95 C8		mva E5+3 :STACKORIGIN+STACKWIDTH*3,x
   647 241C 20 8C 21			jsr @printINT
   648 241F CA				dex
   649 					@printSTRING #CODEORIGIN+$000C
   649 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   649 2420 A0 20		 LDY> CODEORIGIN+$000C
   649 2422 A9 0C		 LDA< CODEORIGIN+$000C
   649 2424 20 24 21		 JSR @PRINTSTRING
   650 					@print #$9B
   650 				 LDY# $9B\ JSR @PRINT
   650 2427 A0 9B		 LDY# $9B
   650 2429 20 1B 21		 JSR @PRINT
   651 					@printSTRING #CODEORIGIN+$000C
   651 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   651 242C A0 20		 LDY> CODEORIGIN+$000C
   651 242E A9 0C		 LDA< CODEORIGIN+$000C
   651 2430 20 24 21		 JSR @PRINTSTRING
   652
   653 				; ------------------------------------------------------------
   654
   655 = 255F			E1	= DATAORIGIN+$001C
   656 = 2561			E2	= DATAORIGIN+$001E
   657 = 2563			E3	= DATAORIGIN+$0020
   658 = 2564			E4	= DATAORIGIN+$0021
   659 = 2568			E5	= DATAORIGIN+$0025
   660
   661 = 255F			@VarData	= E1
   662 = 000D			@VarDataSize	= 13
   663
   664 2433			@exit
   665 					.ifdef @new
   666 					@FreeMem #@VarData #@VarDataSize
   667 					eif
   668 2433 60				rts						; ret
   669 				.endl
   670
   671 2434			.local	MAINPROC					; PROCEDURE
   672
   673 				; optimize FAIL (100, examples\procs.pas), line = 59
   674 					@print #$7D
   674 				 LDY# $7D\ JSR @PRINT
   674 2434 A0 7D		 LDY# $7D
   674 2436 20 1B 21		 JSR @PRINT
   675
   676 				; optimize FAIL (100, examples\procs.pas), line = 60
   677 					@printSTRING #CODEORIGIN+$0045
   677 				 LDY> CODEORIGIN+$0045\ LDA< CODEORIGIN+$0045\ JSR @PRINTSTRING
   677 2439 A0 20		 LDY> CODEORIGIN+$0045
   677 243B A9 45		 LDA< CODEORIGIN+$0045
   677 243D 20 24 21		 JSR @PRINTSTRING
   678 2440 20 16 21			@printEOL
   679
   680 				; optimize FAIL (100, examples\procs.pas), line = 61
   681 					@printSTRING #CODEORIGIN+$0058
   681 				 LDY> CODEORIGIN+$0058\ LDA< CODEORIGIN+$0058\ JSR @PRINTSTRING
   681 2443 A0 20		 LDY> CODEORIGIN+$0058
   681 2445 A9 58		 LDA< CODEORIGIN+$0058
   681 2447 20 24 21		 JSR @PRINTSTRING
   682 244A 20 16 21			@printEOL
   683
   684 				; optimize FAIL ('PRINTTEXTPROC', examples\procs.pas), line = 62
   685 244D 20 7D 22			jsr PRINTTEXTPROC
   686
   687 				; optimize FAIL (100, examples\procs.pas), line = 63
   688 					@printSTRING #CODEORIGIN+$0070
   688 				 LDY> CODEORIGIN+$0070\ LDA< CODEORIGIN+$0070\ JSR @PRINTSTRING
   688 2450 A0 20		 LDY> CODEORIGIN+$0070
   688 2452 A9 70		 LDA< CODEORIGIN+$0070
   688 2454 20 24 21		 JSR @PRINTSTRING
   689
   690 				; optimize FAIL ('SHOWNUMPROC', examples\procs.pas), line = 64
   691 2457 E8				inx
   692 2458 A9 15 95 98			mva #$15 :STACKORIGIN,x
   693 245C 20 A9 22			jsr SHOWNUMPROC
   694
   695 				; optimize FAIL (100, examples\procs.pas), line = 65
   696 					@printSTRING #CODEORIGIN+$000C
   696 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   696 245F A0 20		 LDY> CODEORIGIN+$000C
   696 2461 A9 0C		 LDA< CODEORIGIN+$000C
   696 2463 20 24 21		 JSR @PRINTSTRING
   697 2466 20 16 21			@printEOL
   698
   699 				; optimize FAIL (100, examples\procs.pas), line = 66
   700 					@printSTRING #CODEORIGIN+$0089
   700 				 LDY> CODEORIGIN+$0089\ LDA< CODEORIGIN+$0089\ JSR @PRINTSTRING
   700 2469 A0 20		 LDY> CODEORIGIN+$0089
   700 246B A9 89		 LDA< CODEORIGIN+$0089
   700 246D 20 24 21		 JSR @PRINTSTRING
   701 2470 20 16 21			@printEOL
   702
   703 				; optimize FAIL ('SUMBYTESPROC', examples\procs.pas), line = 67
   704 2473 E8				inx
   705 2474 A9 0A 95 98			mva #$0A :STACKORIGIN,x
   706 2478 E8				inx
   707 2479 A9 F0 95 98			mva #$F0 :STACKORIGIN,x
   708 247D 20 BD 22			jsr SUMBYTESPROC
   709
   710 				; optimize FAIL (100, examples\procs.pas), line = 68
   711 					@printSTRING #CODEORIGIN+$000C
   711 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   711 2480 A0 20		 LDY> CODEORIGIN+$000C
   711 2482 A9 0C		 LDA< CODEORIGIN+$000C
   711 2484 20 24 21		 JSR @PRINTSTRING
   712 2487 20 16 21			@printEOL
   713
   714 				; optimize OK (examples\procs.pas), line = 69
   715
   716 248A A9 34 8D 50 25		mva #$34 M1
   717 248F A9 08 8D 51 25		mva #$08 M1+1
   718
   719 				; optimize OK (examples\procs.pas), line = 70
   720
   721 2494 A9 30 8D 52 25		mva #$30 M2
   722 2499 A9 F2 8D 53 25		mva #$F2 M2+1
   723
   724 				; optimize FAIL (100, examples\procs.pas), line = 71
   725 					@printSTRING #CODEORIGIN+$00A7
   725 				 LDY> CODEORIGIN+$00A7\ LDA< CODEORIGIN+$00A7\ JSR @PRINTSTRING
   725 249E A0 20		 LDY> CODEORIGIN+$00A7
   725 24A0 A9 A7		 LDA< CODEORIGIN+$00A7
   725 24A2 20 24 21		 JSR @PRINTSTRING
   726
   727 				; optimize FAIL (100, examples\procs.pas), line = 72
   728 24A5 E8				inx
   729 24A6 AD 50 25 95 98		mva M1 :STACKORIGIN,x
   730 24AB AD 51 25 95 A8		mva M1+1 :STACKORIGIN+STACKWIDTH,x
   731 24B0 20 9C 21			jsr @printWORD
   732 24B3 CA				dex
   733
   734 				; optimize FAIL (100, examples\procs.pas), line = 73
   735 					@printSTRING #CODEORIGIN+$00BB
   735 				 LDY> CODEORIGIN+$00BB\ LDA< CODEORIGIN+$00BB\ JSR @PRINTSTRING
   735 24B4 A0 20		 LDY> CODEORIGIN+$00BB
   735 24B6 A9 BB		 LDA< CODEORIGIN+$00BB
   735 24B8 20 24 21		 JSR @PRINTSTRING
   736
   737 				; optimize FAIL (100, examples\procs.pas), line = 74
   738 24BB E8				inx
   739 24BC AD 52 25 95 98		mva M2 :STACKORIGIN,x
   740 24C1 AD 53 25 95 A8		mva M2+1 :STACKORIGIN+STACKWIDTH,x
   741 24C6 20 9C 21			jsr @printWORD
   742 24C9 CA				dex
   743 24CA 20 16 21			@printEOL
   744
   745 				; optimize FAIL (100, examples\procs.pas), line = 75
   746 					@printSTRING #CODEORIGIN+$00C2
   746 				 LDY> CODEORIGIN+$00C2\ LDA< CODEORIGIN+$00C2\ JSR @PRINTSTRING
   746 24CD A0 20		 LDY> CODEORIGIN+$00C2
   746 24CF A9 C2		 LDA< CODEORIGIN+$00C2
   746 24D1 20 24 21		 JSR @PRINTSTRING
   747 24D4 20 16 21			@printEOL
   748
   749 				; optimize FAIL ('SUMCARDSPROC', examples\procs.pas), line = 76
   750 24D7 E8				inx
   751 24D8 AD 50 25 95 98		mva M1 :STACKORIGIN,x
   752 24DD AD 51 25 95 A8		mva M1+1 :STACKORIGIN+STACKWIDTH,x
   753 24E2 E8				inx
   754 24E3 AD 52 25 95 98		mva M2 :STACKORIGIN,x
   755 24E8 AD 53 25 95 A8		mva M2+1 :STACKORIGIN+STACKWIDTH,x
   756 24ED 20 E8 22			jsr SUMCARDSPROC
   757
   758 				; optimize FAIL ('NUMBERSPROC', examples\procs.pas), line = 77
   759 24F0 E8				inx
   760 24F1 A9 10 95 98			mva #$10 :STACKORIGIN,x
   761 24F5 A9 27 95 A8			mva #$27 :STACKORIGIN+STACKWIDTH,x
   762 24F9 E8				inx
   763 24FA A9 B0 95 98			mva #$B0 :STACKORIGIN,x
   764 24FE A9 FE 95 A8			mva #$FE :STACKORIGIN+STACKWIDTH,x
   765 2502 E8				inx
   766 2503 A9 C9 95 98			mva #$C9 :STACKORIGIN,x
   767 2507 E8				inx
   768 2508 A9 00 95 98			mva #$00 :STACKORIGIN,x
   769 250C A9 7D 95 A8			mva #$7D :STACKORIGIN+STACKWIDTH,x
   770 2510 20 E7 20			jsr @expandToCARD.WORD
   771 2513 E8				inx
   772 2514 A9 2B 95 98			mva #$2B :STACKORIGIN,x
   773 2518 A9 12 95 A8			mva #$12 :STACKORIGIN+STACKWIDTH,x
   774 251C 20 E7 20			jsr @expandToCARD.WORD
   775 251F 20 2B 23			jsr NUMBERSPROC
   776
   777 				; optimize FAIL ('CRT.READKEY', examples\procs.pas), line = 78
   778 2522 20 6C 22			jsr CRT.READKEY
   779 2525 B5 98 8D 54 25		mva :STACKORIGIN,x KEY
   780 252A CA				dex
   781 252B			@exit
   782 					.ifdef @new
   783 					@FreeMem #@VarData #@VarDataSize
   784 					eif
   785 252B 60				rts						; ret
   786 				.endl
   787 252C			l_00E6
   788
   789 				; optimize FAIL ('MAINPROC', examples\procs.pas), line = 82
   790 252C 20 34 24			jsr MAINPROC
   791
   792 				; ------------------------------------------------------------
   793
   794 = 2550			M1	= DATAORIGIN+$000D
   795 = 2552			M2	= DATAORIGIN+$000F
   796 = 2554			KEY	= DATAORIGIN+$0011
   797 252F			@exit
   798
   799 252F A2 00		@halt	ldx #0
   800 2531 9A				txs
   801
   802 2532 60				rts
   803
   804 				; ------------------------------------------------------------
   805
   806 2533 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   807
   808 				; ------------------------------------------------------------
   809
   810 2543			.local	@DEFINES
   811 2543			ATARI
   812 				.endl
   813
   814 				.endl							; MAIN
   815
   816 				; ------------------------------------------------------------
   817 				; ------------------------------------------------------------
   818
   819 				.macro	UNITINITIALIZATION
   820 				
   821 					.ifdef MAIN.SYSTEM.@UnitInit
   822 					jsr MAIN.SYSTEM.@UnitInit
   823 					eif
   824 				
   825 					.ifdef MAIN.DOS.@UnitInit
   826 					jsr MAIN.DOS.@UnitInit
   827 					eif
   828 				
   829 					.ifdef MAIN.STRUTILS.@UnitInit
   830 					jsr MAIN.STRUTILS.@UnitInit
   831 					eif
   832 				
   833 					.ifdef MAIN.SYSUTILS.@UnitInit
   834 					jsr MAIN.SYSUTILS.@UnitInit
   835 					eif
   836 				
   837 					.ifdef MAIN.ATARI.@UnitInit
   838 					jsr MAIN.ATARI.@UnitInit
   839 					eif
   840 				
   841 					.ifdef MAIN.CRT.@UnitInit
   842 					jsr MAIN.CRT.@UnitInit
   843 					eif
   844 				.endm
   845
   846 				; ------------------------------------------------------------
   847
   848 					ift .SIZEOF(MAIN.SYSTEM) > 0
   849 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   849 				SYSTEM: $2268..$226B
   850 					eif
   851
   852 					ift .SIZEOF(MAIN.DOS) > 0
   853 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   854 					eif
   855
   856 					ift .SIZEOF(MAIN.STRUTILS) > 0
   857 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   858 					eif
   859
   860 					ift .SIZEOF(MAIN.SYSUTILS) > 0
   861 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
   862 					eif
   863
   864 					ift .SIZEOF(MAIN.ATARI) > 0
   865 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   866 					eif
   867
   868 					ift .SIZEOF(MAIN.CRT) > 0
   869 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   869 				CRT: $226C..$227C
   870 					eif
   871
   872 					.print 'CODE: ',CODEORIGIN,'..',*-1
   872 				CODE: $2000..$2542
   873
   874 				; ------------------------------------------------------------
   875
   876 2543			DATAORIGIN
   877 2543 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   878
   879 = 0006			VARINITSIZE	= *-DATAORIGIN
   880 = 0029			VARDATASIZE	= 41
   881
   882 = 256C			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   883
   884 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   884 				DATA: $2543..$256C
   885
   886 02E0-02E1> 49 22			run START
   887
   888 				; ------------------------------------------------------------
   889
   890 				.macro	STATICDATA
   891 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $00 $00 $0F  $48 $65 $6C $6C $6F $20 $66 $72
   892 				.by  $6F $6D $20 $50 $52 $4F $43 $00  $08 $52 $65 $73 $75 $6C $74 $3A  $20 $00 $03 $65 $31 $3D $00 $04
   893 				.by  $2C $65 $32 $3D $00 $03 $65 $33  $3D $00 $03 $65 $34 $3D $00 $04  $2C $65 $35 $3D $00 $11 $45 $66
   894 				.by  $66 $65 $63 $74 $75 $73 $20 $65  $78 $61 $6D $70 $6C $65 $3A $00  $16 $55 $73 $69 $6E $67 $20 $6C
   895 				.by  $6F $63 $61 $6C $20 $50 $52 $4F  $43 $65 $64 $75 $72 $65 $73 $00  $17 $56 $61 $72 $69 $61 $62 $6C
   896 				.by  $65 $20 $6E $20 $68 $6F $6C $64  $73 $20 $76 $61 $6C $75 $65 $20  $00 $1C $49 $6E $70 $75 $74 $20
   897 				.by  $70 $61 $72 $61 $6D $65 $74 $65  $72 $73 $3A $20 $31 $30 $20 $61  $6E $64 $20 $32 $34 $30 $00 $12
   898 				.by  $49 $6E $70 $75 $74 $20 $70 $61  $72 $61 $6D $65 $74 $65 $72 $73  $3A $20 $00 $05 $20 $61 $6E $64
   899 				.by  $20 $00 $1B $68 $65 $6C $64 $20  $69 $6E $20 $76 $61 $72 $69 $61  $62 $6C $65 $73 $20 $6D $31 $20
   900 				.by  $61 $6E $64 $20 $6D $32 $00
   901 				.endm
   902
   903 					end
