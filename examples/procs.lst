mads 2.1.0 build 8 (23 Dec 19)
   388 					opt l+
   101
   102 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   102 				ZPAGE: $0080..$00D7
   103
   104 				.print 'RTLIB: ',RTLIB,'..',*-1
   104 				RTLIB: $2102..$22A3
   105
   106 				; ------------------------------------------------------------
   107
   108 22A4			START
   109 22A4 BA				tsx
   110 22A5 8E CF 25			stx MAIN.@halt+1
   111
   112 					.ifdef fmulinit
   113 					fmulinit
   114 					eif
   115
   116 = 0125			VLEN	= VARDATASIZE-VARINITSIZE
   117 = 25EA			VADR	= DATAORIGIN+VARINITSIZE
   118
   119 					ift VADR > $BFFF
   120 					ert 'Invalid memory address range ',VADR
   121 					eli (VLEN>0) && (VLEN<=256)
   122 					ldx #256-VLEN
   123 					lda #0
   124 					sta:rne VADR+VLEN-256,x+
   125 					eli VLEN>0
   126 					@fill #VADR #VLEN #0
   126 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   126 22A8 A9 EA 85 88 A9 25 +  MWA #VADR @FILL.PTR1
   126 22B0 A9 25 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   126 22B8 A9 00 85 84		 MVA #0 @FILL.PTR2
   126 22BC 20 5C 21		 JSR @FILL
   127 					eif
   128
   129 					.ifdef MAIN.@DEFINES.ROMOFF
   130 					icl 'atari\romoff.asm'
   131 					.endif
   132
   133 22BF A9 0F 85 82 A9 27 + 	mwa #PROGRAMSTACK psptr
   134
   135 22C7 A2 0F			ldx #$0f					; DOS II+/D ParamStr
   136 22C9 BD 40 03 9D D2 25 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   137
   138 22D2 E8				inx						; X = 0
   139 22D3 86 90			stx bp						; BP = 0
   140
   141 22D5 8E 08 D2			stx audctl					; reset POKEY
   142 22D8 A9 03			lda #3
   143 22DA 8D 0F D2			sta skctl
   144
   145 22DD CA				dex						; X = 255
   146
   147 22DE				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: procs.a65]
Source: procs.a65
   148
   149 22DE			.local	MAIN						; PROCEDURE
   150
   151 22DE 4C CB 25			jmp l_0109
   152
   153 				; ------------------------------------------------------------
   154
   155 22E1			.local	SYSTEM						; UNIT
   156
   157 				; ------------------------------------------------------------
   158
   159 = 0101			__PORTB_BANKS	= $0101
   160 = 0648			M_PI_2	= $0648
   161 = 0192			D_PI_2	= $0192
   162 = 0004			D_PI_180	= $04
   163 = 0000			MGTIA	= $00
   164 = 0080			MVBXE	= $80
   165 = 0000			VBXE_XDLADR	= $00
   166 = 0100			VBXE_BCBADR	= $0100
   167 = 1000			VBXE_MAPADR	= $1000
   168 = 5000			VBXE_OVRADR	= $5000
   169 = B000			VBXE_WINDOW	= $B000
   170 = 0000			IDLI	= $00
   171 = 0001			IVBL	= $01
   172 = 00FE			CH_DELCHR	= $FE
   173 = 009B			CH_ENTER	= $9B
   174 = 001B			CH_ESC	= $1B
   175 = 001C			CH_CURS_UP	= $1C
   176 = 001D			CH_CURS_DOWN	= $1D
   177 = 001E			CH_CURS_LEFT	= $1E
   178 = 001F			CH_CURS_RIGHT	= $1F
   179 = 007F			CH_TAB	= $7F
   180 = 009B			CH_EOL	= $9B
   181 = 007D			CH_CLR	= $7D
   182 = 00FD			CH_BELL	= $FD
   183 = 007E			CH_DEL	= $7E
   184 = 009C			CH_DELLINE	= $9C
   185 = 009D			CH_INSLINE	= $9D
   186 = 0000			COLOR_BLACK	= $00
   187 = 000E			COLOR_WHITE	= $0E
   188 = 0032			COLOR_RED	= $32
   189 = 0096			COLOR_CYAN	= $96
   190 = 0068			COLOR_VIOLET	= $68
   191 = 00C4			COLOR_GREEN	= $C4
   192 = 0074			COLOR_BLUE	= $74
   193 = 00EE			COLOR_YELLOW	= $EE
   194 = 0028			COLOR_ORANGE	= $28
   195 = 00E4			COLOR_BROWN	= $E4
   196 = 003C			COLOR_LIGHTRED	= $3C
   197 = 0004			COLOR_GRAY1	= $04
   198 = 0006			COLOR_GRAY2	= $06
   199 = 000A			COLOR_GRAY3	= $0A
   200 = 00CC			COLOR_LIGHTGREEN	= $CC
   201 = 007C			COLOR_LIGHTBLUE	= $7C
   202 = 0004			FMOPENREAD	= $04
   203 = 0008			FMOPENWRITE	= $08
   204 = 0009			FMOPENAPPEND	= $09
   205 = 000C			FMOPENREADWRITE	= $0C
   206 = 25E4			SCREENWIDTH	= DATAORIGIN+$0000
   207 = 25E6			SCREENHEIGHT	= DATAORIGIN+$0002
   208 = 25E8			DATESEPARATOR	= DATAORIGIN+$0004
   209 = D014			TVSYSTEM	= $D014
   210 = 02C0			adr.PALETTE	= $02C0
   211 22E1			.var PALETTE	= adr.PALETTE .word
   212 = D012			adr.HPALETTE	= $D012
   213 22E1			.var HPALETTE	= adr.HPALETTE .word
   214 = 25E9			FILEMODE	= DATAORIGIN+$0005
   215 = 25EA			GRAPHMODE	= DATAORIGIN+$0006
   216 = 25EB			IORESULT	= DATAORIGIN+$0007
   217 = 25EC			EOLN	= DATAORIGIN+$0008
   218 = 25ED			RNDSEED	= DATAORIGIN+$0009
   219
   220 = 22E1 C0 02		PALETTE
   220 = 22E3 12 D0		HPALETTE
   220 				.endl							; UNIT SYSTEM
   221
   222 				; ------------------------------------------------------------
   223
   224 22E5			.local	ATARI						; UNIT
   225
   226 				; ------------------------------------------------------------
   227
   228 = 0012			RTCLOK	= $12
   229 = 004D			ATRACT	= $4D
   230 = 0052			LMARGIN	= $52
   231 = 0053			RMARGIN	= $53
   232 = 0054			ROWCRS	= $54
   233 = 0055			COLCRS	= $55
   234 = 0057			DINDEX	= $57
   235 = 0058			SAVMSC	= $58
   236 = 0062			PALNTS	= $62
   237 = 006A			RAMTOP	= $6A
   238 = 0200			VDSLST	= $0200
   239 = 0230			SDLSTL	= $0230
   240 = 0290			TXTROW	= $0290
   241 = 0291			TXTCOL	= $0291
   242 = 0293			TINDEX	= $0293
   243 = 0294			TXTMSC	= $0294
   244 = 022F			SDMCTL	= $022F
   245 = 026F			GPRIOR	= $026F
   246 = 02F0			CRSINH	= $02F0
   247 = 02F3			CHACT	= $02F3
   248 = 02F4			CHBAS	= $02F4
   249 = 02FC			CH	= $02FC
   250 = 02C0			PCOLR0	= $02C0
   251 = 02C1			PCOLR1	= $02C1
   252 = 02C2			PCOLR2	= $02C2
   253 = 02C3			PCOLR3	= $02C3
   254 = 02C4			COLOR0	= $02C4
   255 = 02C5			COLOR1	= $02C5
   256 = 02C6			COLOR2	= $02C6
   257 = 02C7			COLOR3	= $02C7
   258 = 02C8			COLOR4	= $02C8
   259 = 02C8			COLBAKS	= $02C8
   260 = D000			HPOSP0	= $D000
   261 = D001			HPOSP1	= $D001
   262 = D002			HPOSP2	= $D002
   263 = D003			HPOSP3	= $D003
   264 = D004			HPOSM0	= $D004
   265 = D005			HPOSM1	= $D005
   266 = D006			HPOSM2	= $D006
   267 = D007			HPOSM3	= $D007
   268 = D008			SIZEP0	= $D008
   269 = D009			SIZEP1	= $D009
   270 = D00A			SIZEP2	= $D00A
   271 = D00B			SIZEP3	= $D00B
   272 = D00C			SIZEM	= $D00C
   273 = D00D			GRAFP0	= $D00D
   274 = D00E			GRAFP1	= $D00E
   275 = D00F			GRAFP2	= $D00F
   276 = D010			GRAFP3	= $D010
   277 = D011			GRAFM	= $D011
   278 = D004			P0PF	= $D004
   279 = D014			PAL	= $D014
   280 = D012			COLPM0	= $D012
   281 = D013			COLPM1	= $D013
   282 = D014			COLPM2	= $D014
   283 = D015			COLPM3	= $D015
   284 = D016			COLPF0	= $D016
   285 = D017			COLPF1	= $D017
   286 = D018			COLPF2	= $D018
   287 = D019			COLPF3	= $D019
   288 = D01A			COLBK	= $D01A
   289 = D01B			PRIOR	= $D01B
   290 = D01D			GRACTL	= $D01D
   291 = D01E			HITCLR	= $D01E
   292 = D200			AUDF1	= $D200
   293 = D201			AUDC1	= $D201
   294 = D202			AUDF2	= $D202
   295 = D203			AUDC2	= $D203
   296 = D204			AUDF3	= $D204
   297 = D205			AUDC3	= $D205
   298 = D206			AUDF4	= $D206
   299 = D207			AUDC4	= $D207
   300 = D208			AUDCTL	= $D208
   301 = D20F			SKSTAT	= $D20F
   302 = D301			PORTB	= $D301
   303 = D400			DMACTL	= $D400
   304 = D401			CHACTL	= $D401
   305 = D402			DLISTL	= $D402
   306 = D404			HSCROL	= $D404
   307 = D405			VSCROL	= $D405
   308 = D407			PMBASE	= $D407
   309 = D409			CHBASE	= $D409
   310 = D40A			WSYNC	= $D40A
   311 = D40B			VCOUNT	= $D40B
   312 = D40C			PENH	= $D40C
   313 = D40D			PENV	= $D40D
   314 = D40E			NMIEN	= $D40E
   315
   316 				.endl							; UNIT ATARI
   317
   318 				; ------------------------------------------------------------
   319
   320 22E5			.local	CRT						; UNIT
   321
   322 22E5			.local	READKEY						; FUNCTION | ASSEMBLER
   323
   324 				; ---------------------  ASM Block 049  ---------------------
   325
   326 22E5 8A 48			txa:pha
   327
   328 22E7 20 02 21			@GetKey
   329
   330 22EA 8D F0 25			sta Result
   331
   332 22ED 68 AA			pla:tax
   333
   334 22EF			@exit
   335
   336 				; ------------------------------------------------------------
   337
   338 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   339 				; as Pointer
   340
   341 22EF E8				inx
   342 22F0 AD F0 25 95 98		mva RESULT :STACKORIGIN,x
   343
   344 					.ifdef @new
   345 					lda <@VarData
   346 					sta :ztmp
   347 					lda >@VarData
   348 					ldy #@VarDataSize-1
   349 					jmp @FreeMem
   350 					eif
   351
   352 				; ------------------------------------------------------------
   353
   354 = 25F0			RESULT	= DATAORIGIN+$000C
   355
   356 = 25F0			@VarData	= RESULT
   357 = 0001			@VarDataSize	= 1
   358
   359 22F5 60				rts						; ret
   360 				.endl
   361
   362 				; ------------------------------------------------------------
   363
   364 = 25EF			TEXTATTR	= DATAORIGIN+$000B
   365 = D01F			CONSOL	= $D01F
   366 = 0000			CN_START_SELECT_OPTION	= $00
   367 = 0001			CN_SELECT_OPTION	= $01
   368 = 0002			CN_START_OPTION	= $02
   369 = 0003			CN_OPTION	= $03
   370 = 0004			CN_START_SELECT	= $04
   371 = 0005			CN_SELECT	= $05
   372 = 0006			CN_START	= $06
   373 = 0007			CN_NONE	= $07
   374 = 0000			BW40	= $00
   375 = 0001			CO40	= $01
   376 = 0002			BW80	= $02
   377 = 0003			CO80	= $03
   378 = 0007			MONO	= $07
   379 = 0001			C40	= $01
   380 = 0003			C80	= $03
   381 = 0000			BLACK	= $00
   382 = 0001			BLUE	= $01
   383 = 0002			GREEN	= $02
   384 = 0003			CYAN	= $03
   385 = 0004			RED	= $04
   386 = 0005			MAGENTA	= $05
   387 = 0006			BROWN	= $06
   388 = 0007			LIGHTGRAY	= $07
   389 = 0008			DARKGRAY	= $08
   390 = 0009			LIGHTBLUE	= $09
   391 = 000A			LIGHTGREEN	= $0A
   392 = 000B			LIGHTCYAN	= $0B
   393 = 000C			LIGHTRED	= $0C
   394 = 000D			LIGHTMAGENTA	= $0D
   395 = 000E			YELLOW	= $0E
   396 = 000F			WHITE	= $0F
   397 = 0080			BLINK	= $80
   398
   399 				.endl							; UNIT CRT
   400
   401 				; ------------------------------------------------------------
   402
   403 22F6			.local	DOS						; UNIT
   404
   405 				; ------------------------------------------------------------
   406
   407 = D014			PALNTSC	= $D014
   408
   409 				.endl							; UNIT DOS
   410
   411 				; ------------------------------------------------------------
   412
   413 22F6			.local	STRUTILS					; UNIT
   414
   415 				; ------------------------------------------------------------
   416
   417 				.endl							; UNIT STRUTILS
   418
   419 				; ------------------------------------------------------------
   420
   421 22F6			.local	SYSUTILS					; UNIT
   422
   423 				; ------------------------------------------------------------
   424
   425 = 0001			FAREADONLY	= $01
   426 = 0002			FAHIDDEN	= $02
   427 = 0004			FASYSFILE	= $04
   428 = 0008			FAVOLUMEID	= $08
   429 = 0010			FADIRECTORY	= $10
   430 = 0020			FAARCHIVE	= $20
   431 = 003F			FAANYFILE	= $3F
   432
   433 				.endl							; UNIT SYSUTILS
   434
   435 				; ------------------------------------------------------------
   436
   437 22F6			.local	CIO						; UNIT
   438
   439 22F6			.local	GET						; FUNCTION | ASSEMBLER
   440
   441 				; ------------------------------------------------------------
   442
   443 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   444 				; as Pointer
   445 22F6 B5 98 8D F1 25		mva :STACKORIGIN,x CHN
   446 22FB CA				dex
   447
   448 				; ---------------------  ASM Block 080  ---------------------
   449
   450 22FC 8A 48			txa:pha
   451
   452 22FE AD F1 25			lda chn
   453 2301 0A 0A 0A 0A			:4 asl @
   454 2305 AA				tax
   455
   456 2306 A9 07			lda #7		;get char command
   457 2308 9D 42 03			sta iccmd,x
   458
   459 230B A9 00			lda #$00	;zero out the unused
   460 230D 9D 48 03			sta icbufl,x	;store in accumulator
   461 2310 9D 49 03			sta icbufh,x	;...after CIOV jump
   462
   463 2313				m@call	ciov
Macro: M@CALL [Source: rtl6502.asm]
    12 2313 20 56 E4				jsr CIOV
Source: procs.a65
   464
   465 2316 8C EB 25			sty MAIN.SYSTEM.IOResult
   466
   467 2319 8D F2 25			sta Result
   468
   469 231C 68 AA			pla:tax
   470
   471 231E			@exit
   472
   473 				; ------------------------------------------------------------
   474
   475 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   476 				; as Pointer
   477
   478 231E E8				inx
   479 231F AD F2 25 95 98		mva RESULT :STACKORIGIN,x
   480
   481 					.ifdef @new
   482 					lda <@VarData
   483 					sta :ztmp
   484 					lda >@VarData
   485 					ldy #@VarDataSize-1
   486 					jmp @FreeMem
   487 					eif
   488
   489 				; ------------------------------------------------------------
   490
   491 = 25F1			CHN	= DATAORIGIN+$000D
   492 = 25F2			RESULT	= DATAORIGIN+$000E
   493
   494 = 25F1			@VarData	= CHN
   495 = 0002			@VarDataSize	= 2
   496
   497 2324 60				rts						; ret
   498 				.endl
   499
   500 				; ------------------------------------------------------------
   501
   502 				.endl							; UNIT CIO
   503
   504 2325			.local	PRINTTEXTPROC					; PROCEDURE
   505
   506 				; optimize FAIL (100, examples\procs.pas), line = 19
   507 					@printSTRING #CODEORIGIN+$000D
   507 				 LDY> CODEORIGIN+$000D\ LDA< CODEORIGIN+$000D\ JSR @PRINTSTRING
   507 2325 A0 20		 LDY> CODEORIGIN+$000D
   507 2327 A9 0D		 LDA< CODEORIGIN+$000D
   507 2329 20 B2 21		 JSR @PRINTSTRING
   508 					@print #$9B
   508 				 LDY# $9B\ JSR @PRINT
   508 232C A0 9B		 LDY# $9B
   508 232E 20 A9 21		 JSR @PRINT
   509 					@printSTRING #CODEORIGIN+$000F
   509 				 LDY> CODEORIGIN+$000F\ LDA< CODEORIGIN+$000F\ JSR @PRINTSTRING
   509 2331 A0 20		 LDY> CODEORIGIN+$000F
   509 2333 A9 0F		 LDA< CODEORIGIN+$000F
   509 2335 20 B2 21		 JSR @PRINTSTRING
   510 					@print #$9B
   510 				 LDY# $9B\ JSR @PRINT
   510 2338 A0 9B		 LDY# $9B
   510 233A 20 A9 21		 JSR @PRINT
   511 					@printSTRING #CODEORIGIN+$000C
   511 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   511 233D A0 20		 LDY> CODEORIGIN+$000C
   511 233F A9 0C		 LDA< CODEORIGIN+$000C
   511 2341 20 B2 21		 JSR @PRINTSTRING
   512 					@print #$9B
   512 				 LDY# $9B\ JSR @PRINT
   512 2344 A0 9B		 LDY# $9B
   512 2346 20 A9 21		 JSR @PRINT
   513 					@printSTRING #CODEORIGIN+$000C
   513 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   513 2349 A0 20		 LDY> CODEORIGIN+$000C
   513 234B A9 0C		 LDA< CODEORIGIN+$000C
   513 234D 20 B2 21		 JSR @PRINTSTRING
   514 2350			@exit
   515 					.ifdef @new
   516 					lda <@VarData
   517 					sta :ztmp
   518 					lda >@VarData
   519 					ldy #@VarDataSize-1
   520 					jmp @FreeMem
   521 					eif
   522 2350 60				rts						; ret
   523 				.endl
   524
   525 2351			.local	SHOWNUMPROC					; PROCEDURE
   526
   527 				; ------------------------------------------------------------
   528
   529 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   530 				; as Pointer
   531 2351 B5 98 8D F8 26		mva :STACKORIGIN,x N
   532 2356 CA				dex
   533
   534 				; optimize FAIL (100, examples\procs.pas), line = 24
   535 					@printSTRING #CODEORIGIN+$0020
   535 				 LDY> CODEORIGIN+$0020\ LDA< CODEORIGIN+$0020\ JSR @PRINTSTRING
   535 2357 A0 20		 LDY> CODEORIGIN+$0020
   535 2359 A9 20		 LDA< CODEORIGIN+$0020
   535 235B 20 B2 21		 JSR @PRINTSTRING
   536
   537 				; optimize FAIL (100, examples\procs.pas), line = 25
   538 235E AD F8 26			lda N
   539 2361 20 ED 21			jsr @printBYTE._a
   540 2364 20 A4 21			@printEOL
   541
   542 				; optimize OK (examples\procs.pas), line = 26
   543
   544 2367 AD F8 26			lda N
   545 236A C9 14			cmp #$14
   546 236C F0 0A			jeq l_01D5
   547
   548 				; optimize FAIL (100, examples\procs.pas), line = 27
   549 					@printSTRING #CODEORIGIN+$0034
   549 				 LDY> CODEORIGIN+$0034\ LDA< CODEORIGIN+$0034\ JSR @PRINTSTRING
   549 236E A0 20		 LDY> CODEORIGIN+$0034
   549 2370 A9 34		 LDA< CODEORIGIN+$0034
   549 2372 20 B2 21		 JSR @PRINTSTRING
   550 2375 20 A4 21			@printEOL
   551 2378			l_01D5
   552
   553 				; ------------------------------------------------------------
   554
   555 = 26F8			N	= DATAORIGIN+$0114
   556
   557 = 26F8			@VarData	= N
   558 = 0001			@VarDataSize	= 1
   559
   560 2378			@exit
   561 					.ifdef @new
   562 					lda <@VarData
   563 					sta :ztmp
   564 					lda >@VarData
   565 					ldy #@VarDataSize-1
   566 					jmp @FreeMem
   567 					eif
   568 2378 60				rts						; ret
   569 				.endl
   570
   571 2379			.local	SUMBYTESPROC					; PROCEDURE
   572
   573 				; ------------------------------------------------------------
   574
   575 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   576 				; as Pointer
   577 2379 B5 98 8D FA 26		mva :STACKORIGIN,x N2
   578 237E CA				dex
   579
   580 				; ------------------------------------------------------------
   581
   582 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   583 				; as Pointer
   584 237F B5 98 8D F9 26		mva :STACKORIGIN,x N1
   585 2384 CA				dex
   586
   587 				; optimize OK (examples\procs.pas), line = 38
   588
   589 2385 AD F9 26			lda N1
   590 2388 18 6D FA 26			add N2
   591 238C 8D FB 26			sta TOTAL1
   592
   593 				; optimize FAIL (100, examples\procs.pas), line = 39
   594 					@printSTRING #CODEORIGIN+$0043
   594 				 LDY> CODEORIGIN+$0043\ LDA< CODEORIGIN+$0043\ JSR @PRINTSTRING
   594 238F A0 20		 LDY> CODEORIGIN+$0043
   594 2391 A9 43		 LDA< CODEORIGIN+$0043
   594 2393 20 B2 21		 JSR @PRINTSTRING
   595
   596 				; optimize FAIL (100, examples\procs.pas), line = 40
   597 2396 AD FB 26			lda TOTAL1
   598 2399 20 ED 21			jsr @printBYTE._a
   599 239C 20 A4 21			@printEOL
   600
   601 				; ------------------------------------------------------------
   602
   603 = 26F9			N1	= DATAORIGIN+$0115
   604 = 26FA			N2	= DATAORIGIN+$0116
   605 = 26FB			TOTAL1	= DATAORIGIN+$0117
   606
   607 = 26F9			@VarData	= N1
   608 = 0003			@VarDataSize	= 3
   609
   610 239F			@exit
   611 					.ifdef @new
   612 					lda <@VarData
   613 					sta :ztmp
   614 					lda >@VarData
   615 					ldy #@VarDataSize-1
   616 					jmp @FreeMem
   617 					eif
   618 239F 60				rts						; ret
   619 				.endl
   620
   621 23A0			.local	SUMCARDSPROC					; PROCEDURE
   622
   623 				; ------------------------------------------------------------
   624
   625 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   626 				; as Pointer
   627 23A0 B5 98 8D FE 26		mva :STACKORIGIN,x C2
   628 23A5 B5 A8 8D FF 26		mva :STACKORIGIN+STACKWIDTH,x C2+1
   629 23AA CA				dex
   630
   631 				; ------------------------------------------------------------
   632
   633 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   634 				; as Pointer
   635 23AB B5 98 8D FC 26		mva :STACKORIGIN,x C1
   636 23B0 B5 A8 8D FD 26		mva :STACKORIGIN+STACKWIDTH,x C1+1
   637 23B5 CA				dex
   638
   639 				; optimize OK (examples\procs.pas), line = 50
   640
   641 23B6 AD FC 26			lda C1
   642 23B9 18 6D FE 26			add C2
   643 23BD 8D 00 27			sta TOTAL2
   644 23C0 AD FD 26			lda C1+1
   645 23C3 6D FF 26			adc C2+1
   646 23C6 8D 01 27			sta TOTAL2+1
   647
   648 				; optimize FAIL (100, examples\procs.pas), line = 51
   649 					@printSTRING #CODEORIGIN+$0043
   649 				 LDY> CODEORIGIN+$0043\ LDA< CODEORIGIN+$0043\ JSR @PRINTSTRING
   649 23C9 A0 20		 LDY> CODEORIGIN+$0043
   649 23CB A9 43		 LDA< CODEORIGIN+$0043
   649 23CD 20 B2 21		 JSR @PRINTSTRING
   650
   651 				; optimize FAIL (100, examples\procs.pas), line = 52
   652 23D0 AD 00 27			lda TOTAL2
   653 23D3 AC 01 27			ldy TOTAL2+1
   654 23D6 20 FE 21			jsr @printWORD._ay
   655 23D9 20 A4 21			@printEOL
   656
   657 				; ------------------------------------------------------------
   658
   659 = 26FC			C1	= DATAORIGIN+$0118
   660 = 26FE			C2	= DATAORIGIN+$011A
   661 = 2700			TOTAL2	= DATAORIGIN+$011C
   662
   663 = 26FC			@VarData	= C1
   664 = 0006			@VarDataSize	= 6
   665
   666 23DC			@exit
   667 					.ifdef @new
   668 					lda <@VarData
   669 					sta :ztmp
   670 					lda >@VarData
   671 					ldy #@VarDataSize-1
   672 					jmp @FreeMem
   673 					eif
   674 23DC 60				rts						; ret
   675 				.endl
   676
   677 23DD			.local	NUMBERSPROC					; PROCEDURE
   678
   679 				; ------------------------------------------------------------
   680
   681 				; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
   682 				; as Pointer
   683 23DD B5 98 8D 0B 27		mva :STACKORIGIN,x E5
   684 23E2 B5 A8 8D 0C 27		mva :STACKORIGIN+STACKWIDTH,x E5+1
   685 23E7 B5 B8 8D 0D 27		mva :STACKORIGIN+STACKWIDTH*2,x E5+2
   686 23EC B5 C8 8D 0E 27		mva :STACKORIGIN+STACKWIDTH*3,x E5+3
   687 23F1 CA				dex
   688
   689 				; ------------------------------------------------------------
   690
   691 				; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
   692 				; as Pointer
   693 23F2 B5 98 8D 07 27		mva :STACKORIGIN,x E4
   694 23F7 B5 A8 8D 08 27		mva :STACKORIGIN+STACKWIDTH,x E4+1
   695 23FC B5 B8 8D 09 27		mva :STACKORIGIN+STACKWIDTH*2,x E4+2
   696 2401 B5 C8 8D 0A 27		mva :STACKORIGIN+STACKWIDTH*3,x E4+3
   697 2406 CA				dex
   698
   699 				; ------------------------------------------------------------
   700
   701 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   702 				; as Pointer
   703 2407 B5 98 8D 06 27		mva :STACKORIGIN,x E3
   704 240C CA				dex
   705
   706 				; ------------------------------------------------------------
   707
   708 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   709 				; as Pointer
   710 240D B5 98 8D 04 27		mva :STACKORIGIN,x E2
   711 2412 B5 A8 8D 05 27		mva :STACKORIGIN+STACKWIDTH,x E2+1
   712 2417 CA				dex
   713
   714 				; ------------------------------------------------------------
   715
   716 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   717 				; as Pointer
   718 2418 B5 98 8D 02 27		mva :STACKORIGIN,x E1
   719 241D B5 A8 8D 03 27		mva :STACKORIGIN+STACKWIDTH,x E1+1
   720 2422 CA				dex
   721
   722 				; optimize FAIL (100, examples\procs.pas), line = 58
   723 					@printSTRING #CODEORIGIN+$000C
   723 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   723 2423 A0 20		 LDY> CODEORIGIN+$000C
   723 2425 A9 0C		 LDA< CODEORIGIN+$000C
   723 2427 20 B2 21		 JSR @PRINTSTRING
   724 					@print #$9B
   724 				 LDY# $9B\ JSR @PRINT
   724 242A A0 9B		 LDY# $9B
   724 242C 20 A9 21		 JSR @PRINT
   725 					@printSTRING #CODEORIGIN+$004D
   725 				 LDY> CODEORIGIN+$004D\ LDA< CODEORIGIN+$004D\ JSR @PRINTSTRING
   725 242F A0 20		 LDY> CODEORIGIN+$004D
   725 2431 A9 4D		 LDA< CODEORIGIN+$004D
   725 2433 20 B2 21		 JSR @PRINTSTRING
   726 2436 AD 02 27			lda E1
   727 2439 AC 03 27			ldy E1+1
   728 243C 20 FE 21			jsr @printWORD._ay
   729 					@printSTRING #CODEORIGIN+$0052
   729 				 LDY> CODEORIGIN+$0052\ LDA< CODEORIGIN+$0052\ JSR @PRINTSTRING
   729 243F A0 20		 LDY> CODEORIGIN+$0052
   729 2441 A9 52		 LDA< CODEORIGIN+$0052
   729 2443 20 B2 21		 JSR @PRINTSTRING
   730 2446 AD 04 27			lda E2
   731 2449 AC 05 27			ldy E2+1
   732 244C 20 FE 21			jsr @printWORD._ay
   733 					@printSTRING #CODEORIGIN+$000C
   733 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   733 244F A0 20		 LDY> CODEORIGIN+$000C
   733 2451 A9 0C		 LDA< CODEORIGIN+$000C
   733 2453 20 B2 21		 JSR @PRINTSTRING
   734
   735 				; optimize FAIL (100, examples\procs.pas), line = 59
   736 					@printSTRING #CODEORIGIN+$000C
   736 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   736 2456 A0 20		 LDY> CODEORIGIN+$000C
   736 2458 A9 0C		 LDA< CODEORIGIN+$000C
   736 245A 20 B2 21		 JSR @PRINTSTRING
   737 					@print #$9B
   737 				 LDY# $9B\ JSR @PRINT
   737 245D A0 9B		 LDY# $9B
   737 245F 20 A9 21		 JSR @PRINT
   738 					@printSTRING #CODEORIGIN+$0058
   738 				 LDY> CODEORIGIN+$0058\ LDA< CODEORIGIN+$0058\ JSR @PRINTSTRING
   738 2462 A0 20		 LDY> CODEORIGIN+$0058
   738 2464 A9 58		 LDA< CODEORIGIN+$0058
   738 2466 20 B2 21		 JSR @PRINTSTRING
   739 2469 AD 06 27			lda E3
   740 246C 20 ED 21			jsr @printBYTE._a
   741 					@printSTRING #CODEORIGIN+$000C
   741 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   741 246F A0 20		 LDY> CODEORIGIN+$000C
   741 2471 A9 0C		 LDA< CODEORIGIN+$000C
   741 2473 20 B2 21		 JSR @PRINTSTRING
   742
   743 				; optimize FAIL (100, examples\procs.pas), line = 60
   744 					@printSTRING #CODEORIGIN+$000C
   744 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   744 2476 A0 20		 LDY> CODEORIGIN+$000C
   744 2478 A9 0C		 LDA< CODEORIGIN+$000C
   744 247A 20 B2 21		 JSR @PRINTSTRING
   745 					@print #$9B
   745 				 LDY# $9B\ JSR @PRINT
   745 247D A0 9B		 LDY# $9B
   745 247F 20 A9 21		 JSR @PRINT
   746 					@printSTRING #CODEORIGIN+$005D
   746 				 LDY> CODEORIGIN+$005D\ LDA< CODEORIGIN+$005D\ JSR @PRINTSTRING
   746 2482 A0 20		 LDY> CODEORIGIN+$005D
   746 2484 A9 5D		 LDA< CODEORIGIN+$005D
   746 2486 20 B2 21		 JSR @PRINTSTRING
   747 2489 E8				inx
   748 248A AD 07 27 95 98		mva E4 :STACKORIGIN,x
   749 248F AD 08 27 95 A8		mva E4+1 :STACKORIGIN+STACKWIDTH,x
   750 2494 AD 09 27 95 B8		mva E4+2 :STACKORIGIN+STACKWIDTH*2,x
   751 2499 AD 0A 27 95 C8		mva E4+3 :STACKORIGIN+STACKWIDTH*3,x
   752 249E 20 E1 21			jsr @printINT
   753 24A1 CA				dex
   754 					@printSTRING #CODEORIGIN+$0062
   754 				 LDY> CODEORIGIN+$0062\ LDA< CODEORIGIN+$0062\ JSR @PRINTSTRING
   754 24A2 A0 20		 LDY> CODEORIGIN+$0062
   754 24A4 A9 62		 LDA< CODEORIGIN+$0062
   754 24A6 20 B2 21		 JSR @PRINTSTRING
   755 24A9 E8				inx
   756 24AA AD 0B 27 95 98		mva E5 :STACKORIGIN,x
   757 24AF AD 0C 27 95 A8		mva E5+1 :STACKORIGIN+STACKWIDTH,x
   758 24B4 AD 0D 27 95 B8		mva E5+2 :STACKORIGIN+STACKWIDTH*2,x
   759 24B9 AD 0E 27 95 C8		mva E5+3 :STACKORIGIN+STACKWIDTH*3,x
   760 24BE 20 E1 21			jsr @printINT
   761 24C1 CA				dex
   762 					@printSTRING #CODEORIGIN+$000C
   762 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   762 24C2 A0 20		 LDY> CODEORIGIN+$000C
   762 24C4 A9 0C		 LDA< CODEORIGIN+$000C
   762 24C6 20 B2 21		 JSR @PRINTSTRING
   763 					@print #$9B
   763 				 LDY# $9B\ JSR @PRINT
   763 24C9 A0 9B		 LDY# $9B
   763 24CB 20 A9 21		 JSR @PRINT
   764 					@printSTRING #CODEORIGIN+$000C
   764 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   764 24CE A0 20		 LDY> CODEORIGIN+$000C
   764 24D0 A9 0C		 LDA< CODEORIGIN+$000C
   764 24D2 20 B2 21		 JSR @PRINTSTRING
   765
   766 				; ------------------------------------------------------------
   767
   768 = 2702			E1	= DATAORIGIN+$011E
   769 = 2704			E2	= DATAORIGIN+$0120
   770 = 2706			E3	= DATAORIGIN+$0122
   771 = 2707			E4	= DATAORIGIN+$0123
   772 = 270B			E5	= DATAORIGIN+$0127
   773
   774 = 2702			@VarData	= E1
   775 = 000D			@VarDataSize	= 13
   776
   777 24D5			@exit
   778 					.ifdef @new
   779 					lda <@VarData
   780 					sta :ztmp
   781 					lda >@VarData
   782 					ldy #@VarDataSize-1
   783 					jmp @FreeMem
   784 					eif
   785 24D5 60				rts						; ret
   786 				.endl
   787
   788 24D6			.local	MAINPROC					; PROCEDURE
   789
   790 				; optimize FAIL (100, examples\procs.pas), line = 65
   791 					@print #$7D
   791 				 LDY# $7D\ JSR @PRINT
   791 24D6 A0 7D		 LDY# $7D
   791 24D8 20 A9 21		 JSR @PRINT
   792
   793 				; optimize FAIL (100, examples\procs.pas), line = 66
   794 					@printSTRING #CODEORIGIN+$0068
   794 				 LDY> CODEORIGIN+$0068\ LDA< CODEORIGIN+$0068\ JSR @PRINTSTRING
   794 24DB A0 20		 LDY> CODEORIGIN+$0068
   794 24DD A9 68		 LDA< CODEORIGIN+$0068
   794 24DF 20 B2 21		 JSR @PRINTSTRING
   795 24E2 20 A4 21			@printEOL
   796
   797 				; optimize FAIL (100, examples\procs.pas), line = 67
   798 					@printSTRING #CODEORIGIN+$007B
   798 				 LDY> CODEORIGIN+$007B\ LDA< CODEORIGIN+$007B\ JSR @PRINTSTRING
   798 24E5 A0 20		 LDY> CODEORIGIN+$007B
   798 24E7 A9 7B		 LDA< CODEORIGIN+$007B
   798 24E9 20 B2 21		 JSR @PRINTSTRING
   799 24EC 20 A4 21			@printEOL
   800
   801 				; optimize FAIL ('PRINTTEXTPROC', examples\procs.pas), line = 68
   802 24EF 20 25 23			jsr PRINTTEXTPROC
   803
   804 				; optimize FAIL (100, examples\procs.pas), line = 69
   805 					@printSTRING #CODEORIGIN+$0093
   805 				 LDY> CODEORIGIN+$0093\ LDA< CODEORIGIN+$0093\ JSR @PRINTSTRING
   805 24F2 A0 20		 LDY> CODEORIGIN+$0093
   805 24F4 A9 93		 LDA< CODEORIGIN+$0093
   805 24F6 20 B2 21		 JSR @PRINTSTRING
   806
   807 				; optimize FAIL ('SHOWNUMPROC', examples\procs.pas), line = 70
   808 24F9 E8				inx
   809 24FA A9 15 95 98			mva #$15 :STACKORIGIN,x
   810 24FE 20 51 23			jsr SHOWNUMPROC
   811
   812 				; optimize FAIL (100, examples\procs.pas), line = 71
   813 					@printSTRING #CODEORIGIN+$000C
   813 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   813 2501 A0 20		 LDY> CODEORIGIN+$000C
   813 2503 A9 0C		 LDA< CODEORIGIN+$000C
   813 2505 20 B2 21		 JSR @PRINTSTRING
   814 2508 20 A4 21			@printEOL
   815
   816 				; optimize FAIL (100, examples\procs.pas), line = 72
   817 					@printSTRING #CODEORIGIN+$00AC
   817 				 LDY> CODEORIGIN+$00AC\ LDA< CODEORIGIN+$00AC\ JSR @PRINTSTRING
   817 250B A0 20		 LDY> CODEORIGIN+$00AC
   817 250D A9 AC		 LDA< CODEORIGIN+$00AC
   817 250F 20 B2 21		 JSR @PRINTSTRING
   818 2512 20 A4 21			@printEOL
   819
   820 				; optimize FAIL ('SUMBYTESPROC', examples\procs.pas), line = 73
   821 2515 E8				inx
   822 2516 A9 0A 95 98			mva #$0A :STACKORIGIN,x
   823 251A E8				inx
   824 251B A9 F0 95 98			mva #$F0 :STACKORIGIN,x
   825 251F 20 79 23			jsr SUMBYTESPROC
   826
   827 				; optimize FAIL (100, examples\procs.pas), line = 74
   828 					@printSTRING #CODEORIGIN+$000C
   828 				 LDY> CODEORIGIN+$000C\ LDA< CODEORIGIN+$000C\ JSR @PRINTSTRING
   828 2522 A0 20		 LDY> CODEORIGIN+$000C
   828 2524 A9 0C		 LDA< CODEORIGIN+$000C
   828 2526 20 B2 21		 JSR @PRINTSTRING
   829 2529 20 A4 21			@printEOL
   830
   831 				; optimize OK (examples\procs.pas), line = 75
   832
   833 252C A9 34 8D F3 26		mva #$34 M1
   834 2531 A9 08 8D F4 26		mva #$08 M1+1
   835
   836 				; optimize OK (examples\procs.pas), line = 76
   837
   838 2536 A9 30 8D F5 26		mva #$30 M2
   839 253B A9 F2 8D F6 26		mva #$F2 M2+1
   840
   841 				; optimize FAIL (100, examples\procs.pas), line = 77
   842 					@printSTRING #CODEORIGIN+$00CA
   842 				 LDY> CODEORIGIN+$00CA\ LDA< CODEORIGIN+$00CA\ JSR @PRINTSTRING
   842 2540 A0 20		 LDY> CODEORIGIN+$00CA
   842 2542 A9 CA		 LDA< CODEORIGIN+$00CA
   842 2544 20 B2 21		 JSR @PRINTSTRING
   843
   844 				; optimize FAIL (100, examples\procs.pas), line = 78
   845 2547 AD F3 26			lda M1
   846 254A AC F4 26			ldy M1+1
   847 254D 20 FE 21			jsr @printWORD._ay
   848
   849 				; optimize FAIL (100, examples\procs.pas), line = 79
   850 					@printSTRING #CODEORIGIN+$00DE
   850 				 LDY> CODEORIGIN+$00DE\ LDA< CODEORIGIN+$00DE\ JSR @PRINTSTRING
   850 2550 A0 20		 LDY> CODEORIGIN+$00DE
   850 2552 A9 DE		 LDA< CODEORIGIN+$00DE
   850 2554 20 B2 21		 JSR @PRINTSTRING
   851
   852 				; optimize FAIL (100, examples\procs.pas), line = 80
   853 2557 AD F5 26			lda M2
   854 255A AC F6 26			ldy M2+1
   855 255D 20 FE 21			jsr @printWORD._ay
   856 2560 20 A4 21			@printEOL
   857
   858 				; optimize FAIL (100, examples\procs.pas), line = 81
   859 					@printSTRING #CODEORIGIN+$00E5
   859 				 LDY> CODEORIGIN+$00E5\ LDA< CODEORIGIN+$00E5\ JSR @PRINTSTRING
   859 2563 A0 20		 LDY> CODEORIGIN+$00E5
   859 2565 A9 E5		 LDA< CODEORIGIN+$00E5
   859 2567 20 B2 21		 JSR @PRINTSTRING
   860 256A 20 A4 21			@printEOL
   861
   862 				; optimize FAIL ('SUMCARDSPROC', examples\procs.pas), line = 82
   863 256D E8				inx
   864 256E AD F3 26 95 98		mva M1 :STACKORIGIN,x
   865 2573 AD F4 26 95 A8		mva M1+1 :STACKORIGIN+STACKWIDTH,x
   866 2578 E8				inx
   867 2579 AD F5 26 95 98		mva M2 :STACKORIGIN,x
   868 257E AD F6 26 95 A8		mva M2+1 :STACKORIGIN+STACKWIDTH,x
   869 2583 20 A0 23			jsr SUMCARDSPROC
   870
   871 				; optimize FAIL ('NUMBERSPROC', examples\procs.pas), line = 83
   872 2586 E8				inx
   873 2587 A9 10 95 98			mva #$10 :STACKORIGIN,x
   874 258B A9 27 95 A8			mva #$27 :STACKORIGIN+STACKWIDTH,x
   875 258F E8				inx
   876 2590 A9 B0 95 98			mva #$B0 :STACKORIGIN,x
   877 2594 A9 FE 95 A8			mva #$FE :STACKORIGIN+STACKWIDTH,x
   878 2598 E8				inx
   879 2599 A9 C9 95 98			mva #$C9 :STACKORIGIN,x
   880 259D E8				inx
   881 259E A9 00 95 98			mva #$00 :STACKORIGIN,x
   882 25A2 A9 7D 95 A8			mva #$7D :STACKORIGIN+STACKWIDTH,x
   883 25A6 20 47 21			jsr @expandToCARD.WORD
   884 25A9 E8				inx
   885 25AA A9 2B 95 98			mva #$2B :STACKORIGIN,x
   886 25AE A9 12 95 A8			mva #$12 :STACKORIGIN+STACKWIDTH,x
   887 25B2 20 47 21			jsr @expandToCARD.WORD
   888 25B5 20 DD 23			jsr NUMBERSPROC
   889
   890 				; optimize FAIL ('CIO.GET', examples\procs.pas), line = 84
   891 25B8 E8				inx
   892 25B9 A9 07 95 98			mva #$07 :STACKORIGIN,x
   893 25BD 20 F6 22			jsr CIO.GET
   894 25C0 B5 98 8D F7 26		mva :STACKORIGIN,x KEY
   895 25C5 CA				dex
   896
   897 25C6 20 E5 22			jsr CRT.READKEY					; call Entry
   898
   899 25C9 CA				dex
   900 25CA			@exit
   901 					.ifdef @new
   902 					lda <@VarData
   903 					sta :ztmp
   904 					lda >@VarData
   905 					ldy #@VarDataSize-1
   906 					jmp @FreeMem
   907 					eif
   908 25CA 60				rts						; ret
   909 				.endl
   910 25CB			l_0109
   911
   912 				; optimize FAIL ('MAINPROC', examples\procs.pas), line = 89
   913 25CB 20 D6 24			jsr MAINPROC
   914
   915 				; ------------------------------------------------------------
   916
   917 = 25F3			adr.STRBUFFER	= DATAORIGIN+$000F
   918 25CE			.var STRBUFFER	= adr.STRBUFFER .word
   919 = 26F3			M1	= DATAORIGIN+$010F
   920 = 26F5			M2	= DATAORIGIN+$0111
   921 = 26F7			KEY	= DATAORIGIN+$0113
   922 25CE			@exit
   923
   924 25CE A2 00		@halt	ldx #0
   925 25D0 9A				txs
   926 					.ifdef MAIN.@DEFINES.ROMOFF
   927 					inc portb
   928 					.endif
   929
   930 25D1 60				rts
   931
   932 				; ------------------------------------------------------------
   933
   934 25D2 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   935
   936 				; ------------------------------------------------------------
   937
   938 25E2			.local	@DEFINES
   939 25E2			ATARI
   940 				.endl
   941
   942 = 25E2 F3 25		STRBUFFER
   942 				.endl							; MAIN
   943
   944 				; ------------------------------------------------------------
   945 				; ------------------------------------------------------------
   946
   947 				.macro	UNITINITIALIZATION
   948 				
   949 					.ifdef MAIN.SYSTEM.@UnitInit
   950 					jsr MAIN.SYSTEM.@UnitInit
   951 					eif
   952 				
   953 					.ifdef MAIN.ATARI.@UnitInit
   954 					jsr MAIN.ATARI.@UnitInit
   955 					eif
   956 				
   957 					.ifdef MAIN.CRT.@UnitInit
   958 					jsr MAIN.CRT.@UnitInit
   959 					eif
   960 				
   961 					.ifdef MAIN.DOS.@UnitInit
   962 					jsr MAIN.DOS.@UnitInit
   963 					eif
   964 				
   965 					.ifdef MAIN.STRUTILS.@UnitInit
   966 					jsr MAIN.STRUTILS.@UnitInit
   967 					eif
   968 				
   969 					.ifdef MAIN.SYSUTILS.@UnitInit
   970 					jsr MAIN.SYSUTILS.@UnitInit
   971 					eif
   972 				
   973 					.ifdef MAIN.CIO.@UnitInit
   974 					jsr MAIN.CIO.@UnitInit
   975 					eif
   976 				.endm
   977
   978 				; ------------------------------------------------------------
   979
   980 					ift .SIZEOF(MAIN.SYSTEM) > 0
   981 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   981 				SYSTEM: $22E1..$22E4
   982 					eif
   983
   984 					ift .SIZEOF(MAIN.ATARI) > 0
   985 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   986 					eif
   987
   988 					ift .SIZEOF(MAIN.CRT) > 0
   989 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   989 				CRT: $22E5..$22F5
   990 					eif
   991
   992 					ift .SIZEOF(MAIN.DOS) > 0
   993 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
   994 					eif
   995
   996 					ift .SIZEOF(MAIN.STRUTILS) > 0
   997 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
   998 					eif
   999
  1000 					ift .SIZEOF(MAIN.SYSUTILS) > 0
  1001 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
  1002 					eif
  1003
  1004 					ift .SIZEOF(MAIN.CIO) > 0
  1005 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
  1005 				CIO: $22F6..$2324
  1006 					eif
  1007
  1008 					.print 'CODE: ',CODEORIGIN,'..',*-1
  1008 				CODE: $2000..$25E3
  1009
  1010 				; ------------------------------------------------------------
  1011
  1012 25E4			DATAORIGIN
  1013 25E4 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  1014
  1015 = 0006			VARINITSIZE	= *-DATAORIGIN
  1016 = 012B			VARDATASIZE	= 299
  1017
  1018 = 270F			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1019
  1020 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1020 				DATA: $25E4..$270F
  1021
  1022 02E0-02E1> A4 22			run START
  1023
  1024 				; ------------------------------------------------------------
  1025
  1026 				.macro	STATICDATA
  1027 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $00 $00 $0F  $48 $65 $6C $6C $6F $20 $66 $72
  1028 				.by  $6F $6D $20 $50 $52 $4F $43 $00  $12 $45 $6E $74 $65 $72 $65 $64  $20 $6E $75 $6D $62 $65 $72 $20
  1029 				.by  $69 $73 $20 $00 $0D $49 $74 $20  $69 $73 $20 $6E $6F $74 $20 $32  $30 $21 $00 $08 $52 $65 $73 $75
  1030 				.by  $6C $74 $3A $20 $00 $03 $65 $31  $3D $00 $04 $2C $65 $32 $3D $00  $03 $65 $33 $3D $00 $03 $65 $34
  1031 				.by  $3D $00 $04 $2C $65 $35 $3D $00  $11 $45 $66 $66 $65 $63 $74 $75  $73 $20 $65 $78 $61 $6D $70 $6C
  1032 				.by  $65 $3A $00 $16 $55 $73 $69 $6E  $67 $20 $6C $6F $63 $61 $6C $20  $50 $52 $4F $43 $65 $64 $75 $72
  1033 				.by  $65 $73 $00 $17 $56 $61 $72 $69  $61 $62 $6C $65 $20 $6E $20 $68  $6F $6C $64 $73 $20 $76 $61 $6C
  1034 				.by  $75 $65 $20 $00 $1C $49 $6E $70  $75 $74 $20 $70 $61 $72 $61 $6D  $65 $74 $65 $72 $73 $3A $20 $31
  1035 				.by  $30 $20 $61 $6E $64 $20 $32 $34  $30 $00 $12 $49 $6E $70 $75 $74  $20 $70 $61 $72 $61 $6D $65 $74
  1036 				.by  $65 $72 $73 $3A $20 $00 $05 $20  $61 $6E $64 $20 $00 $1B $68 $65  $6C $64 $20 $69 $6E $20 $76 $61
  1037 				.by  $72 $69 $61 $62 $6C $65 $73 $20  $6D $31 $20 $61 $6E $64 $20 $6D  $32 $00
  1038 				.endm
  1039
  1040 					end
